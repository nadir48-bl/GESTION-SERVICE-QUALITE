import os
import subprocess
import tempfile
import threading
import win32api
import win32com
import win32print
from PyQt6 import QtCore, QtGui, QtWidgets, QtPrintSupport
from PyQt6.QtCore import QTimer, QDate, QObject
from PyQt6.QtGui import QIcon, QPixmap
from PyQt6.QtWidgets import QApplication, QMainWindow, QLabel, QLineEdit, QPushButton, QWidget, QMessageBox
import csv
import sqlite3
import docx
from docx.enum.section import WD_ORIENTATION
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.shared import Inches, Pt, RGBColor
from docx2pdf import convert
from docxtpl import DocxTemplate
from colorama import win32
from docxtpl import DocxTemplate
import arabic_reshaper
import bidi.algorithm
import comtypes.client
import concurrent.futures
from PyQt6.QtPrintSupport import QPrinter, QPrintDialog, QPrintPreviewWidget, QPrinterInfo, QPrintPreviewDialog
from docx2pdf import convert
import locale
import pickle
import docxtpl
import locale
import datetime
from PyQt6.QtCore import QLocale, QSize, QTime
from PyQt6.QtGui import QIntValidator, QDoubleValidator
from win32com import client as win32a
import mysql.connector
import sys
import subprocess
import time
import docx
from PyQt6 import *
from PyQt6 import QtGui, QtWidgets, QtCore
from PyQt6.sip import wrappertype
from PyQt6.QtCore import *
from PyQt6.QtGui import *
from PyQt6.QtWidgets import *
from PyQt6 import QtPrintSupport
from PyQt6.QtPrintSupport import QPrinter, QPrintDialog, QPrintPreviewWidget, QPrinterInfo, QPrintPreviewDialog
import docx2pdf
from docxtpl import DocxTemplate
from docxtpl import *
import datetime
import sys
import os
import socket


###############################legumesSEc Class
###############################################################################
##############################################################################
###########################################################################
######################################################################
###############################################################
try:
    # Connection for entrytable
    database = mysql.connector.connect(
        host="localhost",
        user="qualite",
        password="qualite48"
    )

    curs = database.cursor()

    # Create the database if it doesn't exist
    curs.execute("CREATE DATABASE IF NOT EXISTS datta_legumesec_entry")
    curs.execute("USE datta_legumesec_entry")

    curs.execute("""
        CREATE TABLE IF NOT EXISTS entrytable (
            id INT AUTO_INCREMENT PRIMARY KEY,
            nlot TEXT,
            nlotsch TEXT,
            le TEXT,
            produit TEXT,
            origine TEXT,
            quantité FLOAT,
            unité TEXT,
            sacherie TEXT,
            fournisseur TEXT,
            imatricule TEXT,
            date_recolte TEXT,
            date_CND TEXT,
            DLUM TEXT,
            quantitérizentrée FLOAT,
            quantitérizetvntrée FLOAT,
            quantitépchentrée FLOAT,
            quantitépchplentrée FLOAT,
            quantitélenentrée FLOAT,
            quantitélenrougeentrée FLOAT,
            quantitélenplntrée FLOAT,
            quantitéharntrée FLOAT,
            quantitéharlsbntrée FLOAT,
            quantitépchneufentrée FLOAT,
            quantitépchhuitntrée FLOAT,
            quantitépchsixntrée FLOAT,
            quantitélenvertntrée FLOAT,
            quantitérizetotale FLOAT,
            quantitérizetvtotale FLOAT,
            quantitépchtotale FLOAT,
            quantitépchpltotale FLOAT,
            quantitélentotale FLOAT,
            quantitélenrougetotale FLOAT,
            quantitélenpltotale FLOAT,
            quantitéhartotale FLOAT,
            quantitéharlsbtotal FLOAT,
            quantitéentrétotal FLOAT,
            quantitépchneufetotal FLOAT,
            quantitépchhuittotal FLOAT,
            quantitépchsixtotal FLOAT,
            quantitélenverttotal FLOAT
        )
    """)

    database.commit()
    database.close()

    # Connection for outtable
    database1 = mysql.connector.connect(
        host='localhost',
        user="qualite",
        password='qualite48'
    )

    curs1 = database1.cursor()

    # Create the database if it doesn't exist
    curs1.execute("CREATE DATABASE IF NOT EXISTS datta_legumsec_out")
    curs1.execute("USE datta_legumsec_out")

    curs1.execute("""
        CREATE TABLE IF NOT EXISTS outtable (
            id INT AUTO_INCREMENT PRIMARY KEY,
            le TEXT,
            nlot TEXT,
            nlotsch TEXT,
            unité TEXT,
            produit TEXT,
            origine TEXT,
            quantité FLOAT,
            achteur TEXT,
            sacherie TEXT,
            imatricule TEXT,
            date_recoltes TEXT,
            date_CND TEXT,
            DLUM TEXT,
            fournisseur TEXT,
            quantitérizentré FLOAT,
            quantitérizesorté FLOAT,
            quantitérizerest FLOAT,
            quantitérizetotal FLOAT,
            quantitérizetvntré FLOAT,
            quantitérizetvsorté FLOAT,
            quantitérizetvrest FLOAT,
            quantitérizetvtotal FLOAT,
            quantitepchentré FLOAT,
            quantitépchsorté FLOAT,
            quantitépchrest FLOAT,
            quantitépchtotal FLOAT,
            quantitépchplentré FLOAT,
            quantitépchplsorté FLOAT,
            quantitépchplrest FLOAT,
            quantitépchpltotal FLOAT,
            quantitélenentré FLOAT,
            quantitélensorté FLOAT,
            quantitélenrest FLOAT,
            quantitélentotal FLOAT,
            quantitélenrougeentré FLOAT,
            quantitélenrougesorté FLOAT,
            quantitélenrougerest FLOAT,
            quantitélenrougetotal FLOAT,
            quantitélenplentré FLOAT,
            quantitélenplsorté FLOAT,
            quantitélenplrest FLOAT,
            quantitélenpltotal FLOAT,
            quantitéharentré FLOAT,
            quantitéharsorté FLOAT,
            quantitéharrest FLOAT,
            quantitéharlsbentré FLOAT,
            quantitéharlsbsorté FLOAT,
            quantitéharlsbrest FLOAT,
            quantitéhartotal FLOAT,
            quantitéentretotal FLOAT,
            quantitérestotal FLOAT,
            quantitépchneufeentré FLOAT,
            quantitépchneufesorté FLOAT,
            quantitépchneuferest FLOAT,
            quantitépchneufetotal FLOAT,
            quantitépchhuitentré FLOAT,
            quantitépchhuitsorté FLOAT,
            quantitépchhuitrest FLOAT,
            quantitépchhuittotal FLOAT,
            quantitépchsixentré FLOAT,
            quantitépchsixsorté FLOAT,
            quantitépchsixrest FLOAT,
            quantitépchsixtotal FLOAT,
            quantitélenvertentré FLOAT,
            quantitélenvertsorté FLOAT,
            quantitélenvertrest FLOAT,
            quantitélenverttotal FLOAT
        )
    """)

    database1.commit()
    database1.close()

except mysql.connector.Error as e:
    print("Error:", e)

try:
    class Stock_Legumesec(object):

        def stock_legumesec(self, MainWindow):

            MainWindow.setObjectName("MainWindow")
            MainWindow.resize(1338, 700)
            self.centralwidget = QtWidgets.QWidget(MainWindow)
            self.centralwidget.setObjectName("centralwidget")
            self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
            self.verticalLayout.setObjectName("verticalLayout")
            self.verticalLayout.setContentsMargins(0, 0, 0, 0)
            self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
            self.tabWidget.setStyleSheet("""QToolTip
        {
            border: 1px solid #76797C;
            background-color: rgb(90, 102, 117);;
            color: white;
            padding: 5px;
            opacity: 200;
        }

        QWidget
        {
            color: #000000;
            background-color: #ffffff;
            selection-background-color:#3daee9;
            selection-color: #3daee9;
            background-clip: border;
            border-image: none;
            border: 0px transparent black;
            outline: 0;
        }

        QWidget:item:hover
        {
            background-color: #3daee9;
            color: #eff0f1;
        }

        QWidget:item:selected
        {
            background-color: #3daee9;
        }



        QWidget:disabled
        {
            color: #454545;
            background-color: #31363b;
        }

        QAbstractItemView
        {
            alternate-background-color: #31363b;
            color: #eff0f1;
            border: 1px solid 3A3939;
            border-radius: 2px;
        }

        QWidget:focus, QMenuBar:focus
        {
            border: 1px solid #3daee9;
        }

        QTabWidget:focus, QCheckBox:focus, QRadioButton:focus, QSlider:focus
        {
            border: none;
        }

        QLineEdit
        {
            background-color: #FDFEFE;
    border: 1px solid #76797C;
    color:#000000;
    border-radius: 0.25em;
    padding: 0.0em 0.0em;
    font-size: 1.25rem;
    cursor: pointer;
        }
        QDoubleSpinBox
        {
            background-color: #FDFEFE;
            padding: 1px;
            border-style: solid;
            border: 1px solid #76797C;
            border-radius: 0px;
            color:#000000;
            font-size: 11px;
            font-weight: bold;

        }
        QDoubleSpinBox:focus{
            background-color: #FDFEFE;
            border-style: solid;
            border: 2px solid #76797C;
            border-radius: 4px;
            border-color: #ff8c00;
        }
        QDoubleSpinBox::drop-down
        {
            subcontrol-origin: padding;
            subcontrol-position: top right;
            width: 1px;

            border-left-width: 0px;
            border-left-color: #302629;
            border-left-style: solid;
            border-top-right-radius: 1px;
            border-bottom-right-radius: 1px;
        }



        QGroupBox {
            border:1px solid #76797C;
            border-radius: 2px;
            margin-top: 5px;
        }

        QGroupBox::title {
            subcontrol-origin: margin;
            subcontrol-position: top center;
            padding-left: 4px;
            padding-right: 4px;
            padding-top: 4px;
        }

        QAbstractScrollArea
        {
            border-radius: 2px;
            border: 1px solid #76797C;
            background-color: transparent;
        }

        QScrollBar:horizontal
        {
            height: 15px;
            margin: 3px 15px 3px 15px;
            border: 1px transparent #2A2929;
            border-radius: 4px;
            background-color: #2A2929;
        }

        QScrollBar::handle:horizontal
        {
            background-color: #605F5F;
            min-width: 5px;
            border-radius: 4px;
        }

        QScrollBar::add-line:horizontal
        {
            margin: 0px 3px 0px 3px;
            border-image: url(:/qss_icons/Dark_rc/right_arrow_disabled.png);
            width: 10px;
            height: 10px;
            subcontrol-position: right;
            subcontrol-origin: margin;
        }

        QScrollBar::sub-line:horizontal
        {
            margin: 0px 3px 0px 3px;
            border-image: url(:/qss_icons/Dark_rc/left_arrow_disabled.png);
            height: 10px;
            width: 10px;
            subcontrol-position: left;
            subcontrol-origin: margin;
        }

        QScrollBar::add-line:horizontal:hover,QScrollBar::add-line:horizontal:on
        {
            border-image: url(:/qss_icons/Dark_rc/right_arrow.png);
            height: 10px;
            width: 10px;
            subcontrol-position: right;
            subcontrol-origin: margin;
        }


        QScrollBar::sub-line:horizontal:hover, QScrollBar::sub-line:horizontal:on
        {
            border-image: url(:/qss_icons/Dark_rc/left_arrow.png);
            height: 10px;
            width: 10px;
            subcontrol-position: left;
            subcontrol-origin: margin;
        }

        QScrollBar::up-arrow:horizontal, QScrollBar::down-arrow:horizontal
        {
            background: none;
        }


        QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal
        {
            background: none;
        }

        QScrollBar:vertical
        {
            background-color: #2A2929;
            width: 15px;
            margin: 15px 3px 15px 3px;
            border: 1px transparent #2A2929;
            border-radius: 4px;
        }

        QScrollBar::handle:vertical
        {
            background-color: #605F5F;
            min-height: 5px;
            border-radius: 4px;
        }

        QScrollBar::sub-line:vertical
        {
            margin: 3px 0px 3px 0px;
            border-image: url(:/qss_icons/Dark_rc/up_arrow_disabled.png);
            height: 10px;
            width: 10px;
            subcontrol-position: top;
            subcontrol-origin: margin;
        }

        QScrollBar::add-line:vertical
        {
            margin: 3px 0px 3px 0px;
            border-image: url(:/qss_icons/Dark_rc/down_arrow_disabled.png);
            height: 10px;
            width: 10px;
            subcontrol-position: bottom;
            subcontrol-origin: margin;
        }

        QScrollBar::sub-line:vertical:hover,QScrollBar::sub-line:vertical:on
        {

            border-image: url(:/qss_icons/Dark_rc/up_arrow.png);
            height: 10px;
            width: 10px;
            subcontrol-position: top;
            subcontrol-origin: margin;
        }


        QScrollBar::add-line:vertical:hover, QScrollBar::add-line:vertical:on
        {
            border-image: url(:/qss_icons/Dark_rc/down_arrow.png);
            height: 10px;
            width: 10px;
            subcontrol-position: bottom;
            subcontrol-origin: margin;
        }

        QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical
        {
            background: none;
        }


        QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical
        {
            background: none;
        }

        QTextEdit
        {
            background-color: #302629;
            color: #eff0f1;
            border: 1px solid #76797C;
        }

        QPlainTextEdit
        {
            background-color: #302629;;
            color: #eff0f1;
            border-radius: 2px;
            border: 1px solid #76797C;
        }

        QHeaderView::section
        {
            background-color: #76797C;
            color: #eff0f1;
            padding: 1px;
            border: 1px solid #76797C;
        }

        QSizeGrip {
            width: 12px;
            height: 12px;
        }


        QMainWindow::separator
        {
            background-color: #31363b;
            color: white;
            padding-left: 4px;
            spacing: 2px;
            border: 1px dashed #76797C;
        }

        QMainWindow::separator:hover
        {

            background-color: #787876;
            color: white;
            padding-left: 4px;
            border: 1px solid #76797C;
            spacing: 2px;
        }


        QMenu::separator
        {
            height: 1px;
            background-color: #76797C;
            color: white;
            padding-left: 4px;
            margin-left: 10px;
            margin-right: 5px;
        }


        QFrame
        {
            border-radius: 2px;
            border: 1px solid #76797C;
        }

        QFrame[frameShape="0"]
        {
            border-radius: 2px;
            border: 1px transparent #76797C;
        }

        QStackedWidget
        {
            border: 1px transparent black;
        }


        QPushButton
        {
            color: #00000;
            background-color:#ade3e7;
            border-width: 1px;
            border-color: #1e1e1e;
            border-style: solid;
            border-radius: 6;
            padding: 3px;
            font-size: 12px;
            padding-left: 5px;
            padding-right: 5px;
            min-width: 40px;

        }

        QPushButton:disabled
        {
            background-color:#03ecff;
            border-width: 1px;
            border-color: #454545;
            border-style: solid;
            padding-top: 5px;
            padding-bottom: 5px;
            padding-left: 10px;
            padding-right: 10px;
            border-radius: 2px;
            color: #454545;
        }
        QPushButton:pressed
        {
            background-color: #3daee9;
            padding-top: -15px;
            padding-bottom: -17px;
        }

        QComboBox {
    background-color: #FDFEFE;
    border: 1px solid #76797C;
    color:#000000;
    border-radius: 0.25em;
    padding: 0.0em 0.0em;
    font-size: 1.25rem;
    cursor: pointer;
}

QComboBox::drop-down {
    subcontrol-origin: padding;
    subcontrol-position: top right;
    width: 1.3em;
    border-left: 0px solid #777;
    border-radius: 0.25em;
}

QComboBox::drop-down::icon {
    image: url('E:/pythonProject_moullin-application.3.5/images/down-arroww.png');
}

        QPushButton:checked{
            background-color: #76797C;
            border-color: #6A6969;
        }
        QComboBox:on
        {
            padding-top: 1px;
            padding-left: 1px;
            selection-background-color: #FDFEFE;
        }
        QComboBox QAbstractItemView
        {
            background-color: #FDFEFE;
            border-radius: 2px;
            border: 1px solid #76797C;
            color:#000000;
            selection-background-color: #000000;
        }
        QComboBox:hover,QDoubleSpinBox:Hover,QPushButton:hover,QAbstractSpinBox:hover,QLineEdit:hover,QTextEdit:hover,QPlainTextEdit:hover,QAbstractView:hover,QTreeView:hover
        {
            border: 1px solid #ff8c00;
            color: #000000;
        }




        QLabel
        {
            border: 2px solid black;
        }

        QTabWidget{
            border: 0px transparent black;
        }

        QTabWidget::pane {
            border: 1px solid #76797C;
            padding: 5px;
            margin: 0px;
        }

        QTabBar
        {
            qproperty-drawBase: 0;
            left: 5px; /* move to the right by 5px */
            border-radius: 3px;
        }

        QTabBar:focus
        {
            border: 0px transparent black;
        }

        QTabBar::close-button  {
            image: url(:/qss_icons/Dark_rc/close.png);
            background: transparent;
        }

        QTabBar::close-button:hover
        {
            image: url(:/qss_icons/Dark_rc/close-hover.png);
            background: transparent;
        }

        QTabBar::close-button:pressed {
            image: url(:/qss_icons/Dark_rc/close-pressed.png);
            background: transparent;
        }

        /* TOP TABS */
        QTabBar::tab:top {
            color: #eff0f1;
            border: 1px solid #76797C;
            border-bottom: 1px transparent black;
            background-color: #31363b;
            padding: 5px;
            min-width: 10px;
            border-top-left-radius: 2px;
            border-top-right-radius: 2px;
        }

        QTabBar::tab:top:!selected
        {
            color: #eff0f1;
            background-color: #54575B;
            border: 1px solid #76797C;
            border-bottom: 1px transparent black;
            border-top-left-radius: 2px;
            border-top-right-radius: 2px;    
        }

        QTabBar::tab:top:!selected:hover {
            background-color: #3daee9;
        }

        /* BOTTOM TABS */
        QTabBar::tab:bottom {
            color: #eff0f1;
            border: 1px solid #76797C;
            border-top: 1px transparent black;
            background-color: #31363b;
            padding: 5px;
            border-bottom-left-radius: 2px;
            border-bottom-right-radius: 2px;
            min-width: 10px;
        }

        QTabBar::tab:bottom:!selected
        {
            color: #eff0f1;
            background-color: #54575B;
            border: 1px solid #76797C;
            border-top: 1px transparent black;
            border-bottom-left-radius: 2px;
            border-bottom-right-radius: 2px;
        }

        QTabBar::tab:bottom:!selected:hover {
            background-color: #3daee9;
        }

        /* LEFT TABS */
        QTabBar::tab:left {
            color: #eff0f1;
            border: 1px solid #76797C;
            border-left: 1px transparent black;
            background-color: #31363b;
            padding: 5px;
            border-top-right-radius: 2px;
            border-bottom-right-radius: 2px;
            min-height: 50px;
        }

        QTabBar::tab:left:!selected
        {
            color: #eff0f1;
            background-color: #54575B;
            border: 1px solid #76797C;
            border-left: 1px transparent black;
            border-top-right-radius: 2px;
            border-bottom-right-radius: 2px;
        }

        QTabBar::tab:left:!selected:hover {
            background-color: #3daee9;
        }


        /* RIGHT TABS */
        QTabBar::tab:right {
            color: #eff0f1;
            border: 1px solid #76797C;
            border-right: 1px transparent black;
            background-color: #31363b;
            padding: 5px;
            border-top-left-radius: 2px;
            border-bottom-left-radius: 2px;
            min-height: 50px;
        }

        QTabBar::tab:right:!selected
        {
            color: #eff0f1;
            background-color: #54575B;
            border: 1px solid #76797C;
            border-right: 1px transparent black;
            border-top-left-radius: 2px;
            border-bottom-left-radius: 2px;
        }





        QSlider::groove:horizontal {
            border: 1px solid #565a5e;
            height: 4px;
            background: #565a5e;
            margin: 0px;
            border-radius: 2px;
        }

        QSlider::handle:horizontal {
            background: #302629;
            border: 1px solid #565a5e;
            width: 16px;
            height: 16px;
            margin: -8px 0;
            border-radius: 9px;
        }

        QSlider::groove:vertical {
            border: 1px solid #565a5e;
            width: 4px;
            background: #565a5e;
            margin: 0px;
            border-radius: 3px;
        }

        QSlider::handle:vertical {
            background: #302629;
            border: 1px solid #565a5e;
            width: 16px;
            height: 16px;
            margin: 0 -8px;
            border-radius: 9px;
        }

        QToolButton {
            background-color: transparent;
            border: 1px transparent #76797C;
            border-radius: 2px;
            margin: 3px;
            padding: 5px;
        }

        QToolButton[popupMode="1"] { /* only for MenuButtonPopup */
         padding-right: 20px; /* make way for the popup button */
         border: 1px #76797C;
         border-radius: 5px;
        }

        QToolButton[popupMode="2"] { /* only for InstantPopup */
         padding-right: 10px; /* make way for the popup button */
         border: 1px #76797C;
        }


        QToolButton:hover, QToolButton::menu-button:hover {
            background-color: transparent;
            border: 1px solid #3daee9;
            padding: 5px;
        }

        QToolButton:checked, QToolButton:pressed,
                QToolButton::menu-button:pressed {
            background-color: #3daee9;
            border: 1px solid #3daee9;
            padding: 5px;
        }

        /* the subcontrol below is used only in the InstantPopup or DelayedPopup mode */
        QToolButton::menu-indicator {
            background-color:ff8c00;
            top: -7px; left: -2px; /* shift it a bit */
        }

        /* the subcontrols below are used only in the MenuButtonPopup mode */
        QToolButton::menu-button {
            border: 1px transparent #76797C;
            border-top-right-radius: 6px;
            border-bottom-right-radius: 6px;
            /* 16px width + 4px for border = 20px allocated above */
            width: 16px;
            outline: none;
        }

        QToolButton::menu-arrow {
           background-color:ff8c00;
        }

        QToolButton::menu-arrow:open {
            border: 1px solid #76797C;
        }

        QPushButton::menu-indicator  {
            subcontrol-origin: padding;
            subcontrol-position: bottom right;
            left: 8px;
        }

        QTableView
        {
            border: 1px solid #76797C;
            gridline-color: #31363b;
            background-color: #FDFEFE;
            color:#000000;
        }


        QTableView, QHeaderView
        {
            background-color: #FDFEFE;
            color:#000000;
            border-radius: 0px;
        }

        QTableView::item:pressed, QListView::item:pressed, QTreeView::item:pressed  {
            background: #FDFEFE;
            color: #000000;
        }

        QTableView::item:selected:active, QTreeView::item:selected:active, QListView::item:selected:active  {
            background: #3daee9;
            color: #000000;
        }


        QHeaderView
        {
            background-color: #FDFEFE;
            border: 1px transparent;
            border-radius: 0px;
            margin: 0px;
            padding: 0px;

        }

        QHeaderView::section  {
            background-color:#80f1f9;
            color: #000000;
            padding: 5px;
            border: 1px solid #76797C;
            border-radius: 0px;
            text-align: center;
        }

        QHeaderView::section::vertical::first, QHeaderView::section::vertical::only-one
        {
            border-top: 1px solid #76797C;
        }

        QHeaderView::section::vertical
        {
            border-top: transparent;
        }

        QHeaderView::section::horizontal::first, QHeaderView::section::horizontal::only-one
        {
            border-left: 1px solid #76797C;
        }

        QHeaderView::section::horizontal
        {
            border-left: transparent;
        }


        QHeaderView::section:checked
         {
            color: #000000;
            background-color: #3daee9;
         }

         /* style the sort indicator */
        QHeaderView::down-arrow {

        }

        QHeaderView::up-arrow {

        }


        QTableCornerButton::section {
            background-color: #31363b;
            border: 1px transparent #76797C;
            border-radius: 0px;
        }

        QToolBox  {
            padding: 5px;
            border: 1px transparent black;
        }

        QToolBox::tab {
            color: #eff0f1;
            background-color: #31363b;
            border: 1px solid #76797C;
            border-bottom: 1px transparent #31363b;
            border-top-left-radius: 5px;
            border-top-right-radius: 5px;
        }

        QToolBox::tab:selected { /* italicize selected tabs */
            font: italic;
            background-color: #31363b;
            border-color: #3daee9;
         }

        QStatusBar::item {
            border: 0px transparent dark;
         }


        QFrame[height="3"], QFrame[width="3"] {
            background-color: #76797C;
        }




        QDateEdit
        {
            background-color: #302629;;
            border-style: solid;
            border: 1px solid #76797C;
            border-radius: 2px;
            padding: 1px;
            min-width: 75px;
        }

        QDateEdit:on
        {
            padding-top: 2px;
            padding-left: 2px;
            selection-background-color: #4a4a4a;
        }

        QDateEdit QAbstractItemView
        {
            background-color: #ff8c00;
            border-radius: 2px;
            border: 1px solid #3375A3;
            selection-background-color:ff8c00;
        }

        QDateEdit::drop-down
        {
            background-color: #FDFEFE;
    border: 1px solid #76797C;
    color:#000000;
    border-radius: 0.25em;
    padding: 0.0em 0.0em;
    font-size: 1.25rem;
    cursor: pointer;
        }   
        QDateTimeEdit
        {
            background-color: #302629;;
            border-style: solid;
            border: 1px solid #76797C;
            border-radius: 2px;
            padding: 1px;
            min-width: 75px;

        }    
        """)
            self.tabWidget.setObjectName("tabWidget")
            self.tabENTRER = QtWidgets.QWidget()
            self.tabENTRER.setObjectName("tabENTRER")

            self.addbtn = QtWidgets.QPushButton(self.tabENTRER)
            self.addbtn.setGeometry(QtCore.QRect(20, 275, 100, 40))
            self.addbtn.setObjectName("addbtn")
            self.addbtn.clicked.connect(self.add)

            ##################################################entre###############

            self.deletebtn = QtWidgets.QPushButton(self.tabENTRER, clicked=lambda: self.delete_entry())
            self.deletebtn.setGeometry(QtCore.QRect(190, 275, 100, 40))
            self.deletebtn.setObjectName("deletebtn")

            self.printbtn = QtWidgets.QPushButton(self.tabENTRER, clicked=lambda: self.print_docx())
            self.printbtn.setGeometry(QtCore.QRect(360, 275, 100, 40))
            self.printbtn.setObjectName("printbtn")

            self.cclstxt = QtWidgets.QLabel(self.tabENTRER)
            self.cclstxt.setGeometry(QtCore.QRect(430, 0, 500, 41))
            font = QtGui.QFont()
            font.setPointSize(14)
            font.setBold(True)
            font.setWeight(75)
            self.cclstxt.setFont(font)
            self.cclstxt.setMouseTracking(False)
            self.cclstxt.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
            self.cclstxt.setAutoFillBackground(False)
            self.cclstxt.setFrameShape(QtWidgets.QFrame.Shape.WinPanel)
            self.cclstxt.setLineWidth(0)
            self.cclstxt.setMidLineWidth(0)
            self.cclstxt.setTextFormat(QtCore.Qt.TextFormat.AutoText)
            self.cclstxt.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
            self.cclstxt.setObjectName("cclstxt")
            self.entrielabel = QtWidgets.QLabel("<h3>ENTRER<h3/>", self.tabENTRER)
            self.entrielabel.setGeometry(650, 75, 150, 40)
            self.entrielabel.setFont(font)
            self.titletxt = QtWidgets.QLabel(self.tabENTRER)
            self.titletxt.setGeometry(QtCore.QRect(540, 50, 350, 30))
            font = QtGui.QFont()
            font.setPointSize(14)
            font.setBold(True)
            font.setUnderline(True)
            font.setWeight(75)
            self.titletxt.setFont(font)
            self.titletxt.setAlignment(
                QtCore.Qt.AlignmentFlag.AlignLeading | QtCore.Qt.AlignmentFlag.AlignLeft | QtCore.Qt.AlignmentFlag.AlignVCenter)
            self.titletxt.setObjectName("titletxt")
            #############################################
            self.txtdate = QtWidgets.QLabel(self.tabENTRER)
            self.txtdate.setGeometry(QtCore.QRect(20, 80, 120, 16))
            self.txtdate.setObjectName("txtdate")
            ####################################################
            self.dateedite = QtWidgets.QLineEdit(self.tabENTRER)
            self.dateedite.setInputMask("99-99-9999")
            self.dateedite.setGeometry(QtCore.QRect(115, 77, 140, 30))
            self.dateedite.setObjectName("dateedite")
            ########################################################
            self.produittxt = QtWidgets.QLabel(self.tabENTRER)
            self.produittxt.setGeometry(QtCore.QRect(20, 132, 61, 16))
            self.produittxt.setObjectName("produittxt")
            self.produitcombo = QtWidgets.QComboBox(self.tabENTRER)
            self.produitcombo.setGeometry(QtCore.QRect(115, 130, 140, 30))
            self.produitcombo.setObjectName("produitcombo")
            self.produitcombo.addItem("")
            self.produitcombo.addItem("POIS CHICHES PL")
            self.produitcombo.addItem("POIS CHICHES IMP 12 mm")
            self.produitcombo.addItem("POIS CHICHES IMP 09 mm")
            self.produitcombo.addItem("POIS CHICHES IMP 08 mm")
            self.produitcombo.addItem("POIS CHICHES IMP 06 mm")
            self.produitcombo.addItem("HARICOT BLANC IMP")
            self.produitcombo.addItem("HARICOT LSB")
            self.produitcombo.addItem("LENTILLE PL")
            self.produitcombo.addItem("LENTILLE IMP 05-07 mm")
            self.produitcombo.addItem("LENTILLE IMP vert")
            self.produitcombo.addItem("LENTILLE IMP ROUGE")
            self.produitcombo.addItem("RIZ IMP")
            self.produitcombo.addItem("RIZ ETUVE")
            #####################################################################################
            self.origintxt = QtWidgets.QLabel(self.tabENTRER)
            self.origintxt.setGeometry(QtCore.QRect(270, 133, 121, 16))
            self.origintxt.setObjectName("origintxt")
            ###################################################################
            self.originel = QtWidgets.QComboBox(self.tabENTRER)
            all_countries = [" ", "Algeria", "Argentina", "Australia", "Azerbaijan", "Bangladesh", "Brazil", "Canada",
                             "China", "Colombia",
                             "Costa Rica",
                             "Ecuador",
                             "Egypt",
                             "India", "Indonesia",
                             "Italy", "Japan", "Kazakhstan",
                             "Kuwait", "Kyrgyzstan",
                             "Macedonia", "Malaysia",
                             "Mauritius", "Mexico",
                             "Pakistan", "Paraguay", "Peru", "Philippines",
                             "Poland", "Portugal", "Romania", "Russian ",
                             "Saudi Arabia",
                             "Singapore",
                             "South Africa", "Spain", "Sri Lanka", "Sudan",
                             "Swaziland", "Sweden", "Switzerland", "Taiwan", "Tajikistan",
                             "Tanzania", "Thailand", "Tunisia", "Turkey",
                             "Turkmenistan", "Ukraine",
                             "United Kingdom", "United States", "Uruguay", "Uzbekistan",
                             "Venezuela", "Vietnam", "Yemen", "Zambia", "Zimbabwe"
                             ]
            self.originel.setGeometry(QtCore.QRect(397, 130, 140, 30))
            self.originel.addItems(all_countries)

            ###############################################################################
            self.quatitelineEdit = QtWidgets.QDoubleSpinBox(self.tabENTRER)
            self.quatitelineEdit.setSpecialValueText(' ')
            self.quatitelineEdit.setRange(0, 1000000)
            self.quatitelineEdit.setGeometry(QtCore.QRect(695, 130, 140, 30))
            self.quatitelineEdit.setObjectName("quatitelineEdit")
            ################################################################################

            self.txtquantite = QtWidgets.QLabel(self.tabENTRER)
            self.txtquantite.setGeometry(QtCore.QRect(550, 133, 51, 16))
            self.txtquantite.setObjectName("txtquantite")
            #############################################################################
            self.labelmagasin = QtWidgets.QLabel(self.tabENTRER)
            self.labelmagasin.setGeometry(QtCore.QRect(850, 133, 116, 16))
            self.magasincombo = QtWidgets.QComboBox(self.tabENTRER)
            self.magasincombo.setGeometry(QtCore.QRect(980, 130, 140, 30))
            self.magasincombo.setObjectName("magasincombo")
            self.magasincombo.addItem("")
            self.magasincombo.addItem("DOCK CENTRAL")
            self.magasincombo.addItem("MAGASIN MESRA")
            self.magasincombo.addItem("MARCHE GROS BELACEL")

            ###########################################################################
            self.fourniseurcombo = QtWidgets.QComboBox(self.tabENTRER)
            self.fourniseurcombo.setGeometry(QtCore.QRect(397, 185, 140, 30))
            self.fourniseurcombo.setObjectName("fourniseurcombo")
            self.fourniseurcombo.addItem("")
            self.fourniseurcombo.addItem("UCA ALGER")
            self.fourniseurcombo.addItem("UCA ORAN")

            self.fornisseurtxt = QtWidgets.QLabel(self.tabENTRER)
            self.fornisseurtxt.setGeometry(QtCore.QRect(270, 188, 81, 16))
            self.fornisseurtxt.setObjectName("fornisseurtxt")
            #########################################################################
            self.CNDTXT = QtWidgets.QLabel(self.tabENTRER)
            self.CNDTXT.setGeometry(QtCore.QRect(20, 188, 91, 16))
            self.CNDTXT.setObjectName("CNDTXT")
            self.cndcombo = QtWidgets.QComboBox(self.tabENTRER)
            self.cndcombo.setGeometry(QtCore.QRect(115, 185, 140, 30))
            self.cndcombo.setObjectName("cndcombo")
            self.cndcombo.addItem("")
            self.cndcombo.addItem("SAC 50KG")
            self.cndcombo.addItem("SAC 25KG")
            self.cndcombo.addItem("BIG BAG")
            ########################################################################
            self.TRANSPRTTXT = QtWidgets.QLabel(self.tabENTRER)
            self.TRANSPRTTXT.setGeometry(QtCore.QRect(550, 188, 131, 16))
            self.TRANSPRTTXT.setObjectName("TRANSPRTTXT")
            self.TRANSPORTcombo = QtWidgets.QComboBox(self.tabENTRER, editable=True)
            self.TRANSPORTcombo.setGeometry(QtCore.QRect(695, 185, 140, 30))
            self.TRANSPORTcombo.setObjectName("TRANSPORTcombo")
            self.TRANSPORTcombo.addItem("")
            ########################################################################
            self.label_2 = QtWidgets.QLabel(self.tabENTRER)
            self.label_2.setGeometry(QtCore.QRect(850, 188, 81, 16))
            self.label_2.setObjectName("label_2")
            self.imatricullineeditr = QtWidgets.QLineEdit(self.tabENTRER)
            self.imatricullineeditr.setInputMask("99999-999-99")
            self.imatricullineeditr.setGeometry(QtCore.QRect(980, 185, 140, 30))

            #########################################################################
            self.DATEDECNDTXT = QtWidgets.QLabel(self.tabENTRER)
            self.DATEDECNDTXT.setGeometry(QtCore.QRect(270, 243, 120, 13))
            self.DATEDECNDTXT.setObjectName("DATEDECNDTXT")
            self.dateeditedcnd = QtWidgets.QLineEdit(self.tabENTRER)
            self.dateeditedcnd.setInputMask("99-99-9999")
            self.dateeditedcnd.setGeometry(QtCore.QRect(397, 235, 140, 30))
            self.dateeditedcnd.setObjectName("dateeditedcnd")

            self.dlum = QtWidgets.QLabel(self.tabENTRER)
            self.dlum.setGeometry(QtCore.QRect(550, 243, 131, 16))
            self.dlum.setObjectName("dlum")
            self.dateEditdlum = QtWidgets.QLineEdit(self.tabENTRER)
            self.dateEditdlum.setInputMask("99-99-9999")
            self.dateEditdlum.setGeometry(QtCore.QRect(695, 235, 140, 30))
            self.dateEditdlum.setObjectName("dateEditdlum")

            self.nemuroDelottxt = QtWidgets.QLabel("N° DE LOT:", self.tabENTRER)
            self.nemuroDelottxt.setGeometry(QtCore.QRect(850, 243, 120, 13))
            self.nemuroDelot = QtWidgets.QLineEdit(self.tabENTRER)
            self.nemuroDelot.setGeometry(QtCore.QRect(980, 235, 140, 30))
            self.nemuroDelotschtxt = QtWidgets.QLabel("N°LOT SCH:", self.tabENTRER)
            self.nemuroDelotschtxt.setGeometry(QtCore.QRect(1130, 243, 120, 13))
            self.nemuroDelotsch = QtWidgets.QLineEdit(self.tabENTRER)
            self.nemuroDelotsch.setGeometry(QtCore.QRect(1200, 235, 140, 30))
            self.daterecolttxt = QtWidgets.QLabel("Date de récolte", self.tabENTRER)
            self.daterecolttxt.setGeometry(QtCore.QRect(20, 243, 81, 16))

            self.daterecolte = QtWidgets.QLineEdit(self.tabENTRER)
            self.daterecolte.setInputMask("99-99-9999")
            self.daterecolte.setGeometry(QtCore.QRect(115, 235, 140, 30))

            self.textEdit = QtWidgets.QTableWidget(self.tabENTRER)
            self.textEdit.setRowCount(0)
            self.textEdit.setColumnCount(14)
            self.textEdit.setColumnWidth(0, 3)
            self.textEdit.setColumnWidth(1, 10)
            self.textEdit.setColumnWidth(2, 20)
            self.textEdit.setColumnWidth(3, 130)
            self.textEdit.setColumnWidth(4, 130)
            self.textEdit.setColumnWidth(5, 130)
            self.textEdit.setColumnWidth(6, 130)
            self.textEdit.setColumnWidth(7, 130)
            self.textEdit.setColumnWidth(8, 130)
            self.textEdit.setColumnWidth(9, 130)
            self.textEdit.setColumnWidth(10, 130)
            self.textEdit.setColumnWidth(11, 130)
            self.textEdit.setColumnWidth(12, 100)
            self.textEdit.setColumnWidth(13, 100)
            self.textEdit.verticalHeader().setVisible(False)

            self.textEdit.setHorizontalHeaderLabels(
                ("N°", "N°LOT", "N°LOT SCH", "DATE:", "PRODUIT", "ORIGINE", "QUANTITE", "MAGASIN DE STOCK",
                 "SASHERIE CND", "FOURNISSEUR", "IMATRICUL", "DATE DE RECOLTE", "DATE DE CND",
                 "DLUM"))
            self.textEdit.setGeometry(QtCore.QRect(20, 320, 1310, 305))
            self.textEdit.setStyleSheet("background-color:rgb(255, 255, 255)")
            self.textEdit.setObjectName("textEdit")
            self.textEdit.setStyleSheet(" background-color: #FDFEFE")

            self.totalfont = QtGui.QFont()
            self.totalfont.setPointSize(9)
            self.totalfont.setBold(True)
            self.totalfont.bold()

            self.totaltxte = QtWidgets.QLabel("TOTAL")
            self.totaltxte.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.totaltxte.setGeometry(1160, 573, 170, 30)
            self.totaltxte.setFont(self.totalfont)

            self.totalentree = QtWidgets.QDoubleSpinBox(readOnly=True)
            self.totalentree.setPrefix(" ")
            self.totalentree.setGeometry(1205, 578, 120, 20)
            self.totalentree.setRange(0, 9000000)

            self.totalriztxte = QtWidgets.QLabel("RIZ IMP")
            self.totalriztxte.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.totalriztxte.setGeometry(20, 573, 162, 30)
            self.totalriztxte.setFont(self.totalfont)

            self.totalrizee = QtWidgets.QDoubleSpinBox(readOnly=True)
            self.totalrizee.setPrefix("TOTAL: ")
            self.totalrizee.setGeometry(54, 578, 140, 20)
            self.totalrizee.setRange(0, 9000000.00)

            self.totalpchtxte = QtWidgets.QLabel("P.CHICHES IMP")
            self.totalpchtxte.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.totalpchtxte.setGeometry(187, 573, 193, 30)
            self.totalpchtxte.setFont(self.totalfont)

            self.totalpche = QtWidgets.QDoubleSpinBox(readOnly=True)
            self.totalpche.setPrefix("TOTAL: ")
            self.totalpche.setGeometry(257, 578, 120, 20)
            self.totalpche.setRange(0, 9000000)

            self.totalpchpltxte = QtWidgets.QLabel("P.CHICHES pl")
            self.totalpchpltxte.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.totalpchpltxte.setGeometry(383, 573, 205, 30)
            self.totalpchpltxte.setFont(self.totalfont)

            self.totalpchple = QtWidgets.QDoubleSpinBox(readOnly=True)
            self.totalpchple.setPrefix("TOTAL: ")
            self.totalpchple.setGeometry(465, 578, 120, 20)
            self.totalpchple.setRange(0, 9000000)

            self.totallnpltxte = QtWidgets.QLabel("LENTILLE PL")
            self.totallnpltxte.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.totallnpltxte.setGeometry(591, 573, 197, 30)
            self.totallnpltxte.setFont(self.totalfont)

            self.totallnple = QtWidgets.QDoubleSpinBox(readOnly=True)
            self.totallnple.setPrefix("TOTAL: ")
            self.totallnple.setGeometry(664, 578, 120, 20)
            self.totallnple.setRange(0, 9000000)

            self.totallntxte = QtWidgets.QLabel("LENTILLE IMP")
            self.totallntxte.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.totallntxte.setGeometry(790, 573, 182, 30)
            self.totallntxte.setFont(self.totalfont)

            self.totallne = QtWidgets.QDoubleSpinBox(readOnly=True)
            self.totallne.setPrefix("TOTAL: ")
            self.totallne.setGeometry(850, 578, 120, 20)
            self.totallne.setRange(0, 9000000)

            self.totalhrtxte = QtWidgets.QLabel("HARICOT BLANC IMP")
            self.totalhrtxte.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.totalhrtxte.setGeometry(974, 573, 185, 30)
            self.totalhrtxte.setFont(self.totalfont)

            self.totalhre = QtWidgets.QDoubleSpinBox(readOnly=True)
            self.totalhre.setPrefix("TOTAL: ")
            self.totalhre.setGeometry(1035, 578, 120, 20)
            self.totalhre.setRange(0, 9000000)

            self.filtertxt = QtWidgets.QLabel("Sélectionnez la date ", self.tabENTRER)
            self.filtertxt.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.filtertxt.setGeometry(QtCore.QRect(730, 272, 590, 45))

            self.datefilter = QtWidgets.QLineEdit(self.tabENTRER)
            self.datefilter.setGeometry(QtCore.QRect(855, 275, 130, 38))
            self.datefilter.setInputMask('99-99-9999')

            self.produitfl = QtWidgets.QComboBox(self.tabENTRER)
            self.produitfl.setGeometry(QtCore.QRect(1060, 275, 130, 38))
            self.produitfl.addItem(" ")
            self.produitfl.addItem("POIS CHICHES PL")
            self.produitfl.addItem("POIS CHICHES IMP 12 mm")
            self.produitfl.addItem("POIS CHICHES IMP 09 mm")
            self.produitfl.addItem("POIS CHICHES IMP 08 mm")
            self.produitfl.addItem("POIS CHICHES IMP 06 mm")
            self.produitfl.addItem("HARICOT BLANC IMP")
            self.produitfl.addItem("HARICOT LSB")
            self.produitfl.addItem("LENTILLE PL")
            self.produitfl.addItem("LENTILLE IMP 05-07 mm")
            self.produitfl.addItem("LENTILLE IMP vert")
            self.produitfl.addItem("LENTILLE IMP ROUGE")
            self.produitfl.addItem("RIZ IMP")
            self.produitfl.addItem("RIZ ETUVE")

            self.btnfilter = QtWidgets.QPushButton("ok", self.tabENTRER, clicked=lambda: self.impot_filter())
            self.btnfilter.setGeometry((QtCore.QRect(1200, 275, 40, 40)))

            self.btnfcncl = QtWidgets.QPushButton("exit", self.tabENTRER, clicked=lambda: self.impot_all())
            self.btnfcncl.setGeometry((QtCore.QRect(1260, 275, 40, 40)))

            self.datafiltertxt = QtWidgets.QLabel("produit:", self.tabENTRER)
            self.datafiltertxt.setGeometry(QtCore.QRect(1000, 285, 60, 20))

            self.filtertxt = QtWidgets.QLabel("Filtrage des données:", self.tabENTRER)
            self.filtertxt.setGeometry(QtCore.QRect(735, 270, 120, 10))

            self.tabWidget.addTab(self.tabENTRER, "")
            ####################################################tab sortie###################################################
            ##################################################################################################################
            ################################################################################################################

            self.tabSORTIE = QtWidgets.QWidget()
            self.tabSORTIE.setObjectName("tabSORTIE")

            font1 = QtGui.QFont()
            font1.setPointSize(14)
            font1.setBold(True)
            font1.bold()
            font1.setWeight(75)

            self.addbtn_1 = QtWidgets.QPushButton(self.tabSORTIE)
            self.addbtn_1.setGeometry(QtCore.QRect(20, 275, 100, 40))
            self.addbtn_1.setObjectName("addbtn")
            self.addbtn_1.clicked.connect(self.add_sortie)

            self.deletebtn_1 = QtWidgets.QPushButton(self.tabSORTIE, clicked=lambda: self.delete_out())
            self.deletebtn_1.setGeometry(QtCore.QRect(190, 275, 100, 40))
            self.deletebtn_1.setObjectName("deletebtn")

            self.printbtn_1 = QtWidgets.QPushButton(self.tabSORTIE, clicked=lambda: self.print_docx_sortie())
            self.printbtn_1.setGeometry(QtCore.QRect(360, 275, 100, 40))
            self.printbtn_1.setObjectName("printbtn")

            self.printbtn_factur = QtWidgets.QPushButton('Imprimer \nfacture', self.tabSORTIE,
                                                         clicked=lambda: self.print_facture_sortie())
            self.printbtn_factur.setGeometry(QtCore.QRect(530, 275, 100, 40))

            # self.actualisation = QtWidgets.QPushButton("Act", self.tabSORTIE, clicked=lambda: self.impot_all_sortie())
            # self.actualisation.setGeometry(QtCore.QRect(1280, 5, 20, 30))

            self.sortielabel = QtWidgets.QLabel("<h3>SORTIE<h3/>", self.tabSORTIE)
            self.sortielabel.setGeometry(650, 75, 150, 40)
            self.sortielabel.setFont(font1)

            self.cclstxt_1 = QtWidgets.QLabel(self.tabSORTIE)
            self.cclstxt_1.setGeometry(QtCore.QRect(430, 0, 500, 41))
            self.cclstxt_1.setFont(font1)
            self.cclstxt_1.setMouseTracking(False)
            self.cclstxt_1.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
            self.cclstxt_1.setAutoFillBackground(False)
            self.cclstxt_1.setFrameShape(QtWidgets.QFrame.Shape.WinPanel)
            self.cclstxt_1.setLineWidth(0)
            self.cclstxt_1.setMidLineWidth(0)
            self.cclstxt_1.setTextFormat(QtCore.Qt.TextFormat.AutoText)
            self.cclstxt_1.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
            self.cclstxt_1.setObjectName("cclstxt")
            self.titletxt_1 = QtWidgets.QLabel(self.tabSORTIE)
            self.titletxt_1.setGeometry(QtCore.QRect(540, 50, 350, 30))

            self.titletxt_1.setFont(font)
            self.titletxt_1.setAlignment(
                QtCore.Qt.AlignmentFlag.AlignLeading | QtCore.Qt.AlignmentFlag.AlignLeft | QtCore.Qt.AlignmentFlag.AlignVCenter)
            self.titletxt_1.setObjectName("titletxt")
            #############################################
            self.txtdate_1 = QtWidgets.QLabel(self.tabSORTIE)
            self.txtdate_1.setGeometry(QtCore.QRect(20, 80, 120, 16))
            self.txtdate_1.setObjectName("txtdate")
            ####################################################
            self.dateedite_1 = QtWidgets.QLineEdit(self.tabSORTIE)
            self.dateedite_1.setInputMask("99-99-9999")
            self.dateedite_1.setGeometry(QtCore.QRect(140, 77, 140, 30))
            self.dateedite_1.setObjectName("dateedite")
            ########################################################
            self.produittxt_1 = QtWidgets.QLabel(self.tabSORTIE)
            self.produittxt_1.setGeometry(QtCore.QRect(20, 132, 61, 16))
            self.produittxt_1.setObjectName("produittxt")
            self.produitcombo_1 = QtWidgets.QComboBox(self.tabSORTIE)
            self.produitcombo_1.setGeometry(QtCore.QRect(140, 130, 140, 30))
            self.produitcombo_1.setObjectName("produitcombo")
            self.produitcombo_1.addItem("")
            self.produitcombo_1.addItem("POIS CHICHES PL")
            self.produitcombo_1.addItem("POIS CHICHES IMP 12 mm")
            self.produitcombo_1.addItem("POIS CHICHES IMP 09 mm")
            self.produitcombo_1.addItem("POIS CHICHES IMP 08 mm")
            self.produitcombo_1.addItem("POIS CHICHES IMP 06 mm")
            self.produitcombo_1.addItem("HARICOT BLANC IMP")
            self.produitcombo_1.addItem("HARICOT LSB")
            self.produitcombo_1.addItem("LENTILLE PL")
            self.produitcombo_1.addItem("LENTILLE IMP 05-07 mm")
            self.produitcombo_1.addItem("LENTILLE IMP vert")
            self.produitcombo_1.addItem("LENTILLE IMP ROUGE")
            self.produitcombo_1.addItem("RIZ IMP")
            self.produitcombo_1.addItem("RIZ ETUVE")
            #####################################################################################
            self.origintxt_1 = QtWidgets.QLabel(self.tabSORTIE)
            self.origintxt_1.setGeometry(QtCore.QRect(300, 133, 121, 16))
            self.origintxt_1.setObjectName("origintxt")
            ###################################################################
            self.originel_1 = QtWidgets.QComboBox(self.tabSORTIE)
            all_countries = [
                " ", "Algeria", "Argentina", "Australia", "Azerbaijan", "Bangladesh", "Brazil", "Canada", "China",
                "Colombia",
                "Costa Rica",
                "Ecuador",
                "Egypt",
                "India", "Indonesia",
                "Italy", "Japan", "Kazakhstan",
                "Kuwait", "Kyrgyzstan",
                "Macedonia", "Malaysia",
                "Mauritius", "Mexico",
                "Pakistan", "Paraguay", "Peru", "Philippines",
                "Poland", "Portugal", "Romania", "Russian ",
                "Saudi Arabia",
                "Singapore",
                "South Africa", "Spain", "Sri Lanka", "Sudan",
                "Swaziland", "Sweden", "Switzerland", "Taiwan", "Tajikistan",
                "Tanzania", "Thailand", "Tunisia", "Turkey",
                "Turkmenistan", "Ukraine",
                "United Kingdom", "United States", "Uruguay", "Uzbekistan",
                "Venezuela", "Vietnam", "Yemen", "Zambia", "Zimbabwe"
            ]
            self.originel_1.setGeometry(QtCore.QRect(440, 130, 140, 30))
            self.originel_1.addItems(all_countries)
            ###############################################################################
            self.quatitelineEdit_1 = QtWidgets.QDoubleSpinBox(self.tabSORTIE)
            self.quatitelineEdit_1.setSpecialValueText(' ')
            self.quatitelineEdit_1.setRange(0, 1000000)
            self.quatitelineEdit_1.setGeometry(QtCore.QRect(695, 130, 140, 30))
            self.quatitelineEdit_1.setObjectName("quatitelineEdit")
            ################################################################################

            self.txtquantite_1 = QtWidgets.QLabel(self.tabSORTIE)
            self.txtquantite_1.setGeometry(QtCore.QRect(620, 133, 51, 16))
            self.txtquantite_1.setObjectName("txtquantite")
            #############################################################################
            self.labelmagasin_1 = QtWidgets.QLabel(self.tabSORTIE)
            self.labelmagasin_1.setGeometry(QtCore.QRect(870, 133, 116, 16))
            self.magasincombo_1 = QtWidgets.QComboBox(self.tabSORTIE, editable=True)
            self.magasincombo_1.setGeometry(QtCore.QRect(965, 130, 140, 30))
            self.magasincombo_1.setObjectName("magasincombo")
            self.magasincombo_1.addItem("")
            self.magasincombo_1.addItem("DOCK CENTRAL")
            self.magasincombo_1.addItem("MAGASIN MESRA")
            self.magasincombo_1.addItem("MARCHE GROS BELACEL")
            self.magasincombo_1.addItem("N.S.MENDES")
            self.magasincombo_1.addItem("MAGASIN ZEMOURA")
            self.magasincombo_1.addItem("POINT DE VENTE MOBILE")
            ###########################################################################
            self.labelmagasins = QtWidgets.QLabel("MAGASIN DE STOCK", self.tabSORTIE)
            self.labelmagasins.setGeometry(QtCore.QRect(20, 188, 110, 16))
            self.magasincombos = QtWidgets.QComboBox(self.tabSORTIE)
            self.magasincombos.setGeometry(QtCore.QRect(140, 185, 140, 30))
            self.magasincombos.setObjectName("magasincombo")
            self.magasincombos.addItem("")
            self.magasincombos.addItem("DOCK CENTRAL")
            self.magasincombos.addItem("MAGASIN MESRA")
            self.magasincombos.addItem("N.S.MENDES")

            #########################################################################
            self.CNDTXT_1 = QtWidgets.QLabel(self.tabSORTIE)
            self.CNDTXT_1.setGeometry(QtCore.QRect(870, 188, 116, 16))
            self.CNDTXT_1.setObjectName("CNDTXT")
            self.cndcombo_1 = QtWidgets.QComboBox(self.tabSORTIE)
            self.cndcombo_1.setGeometry(QtCore.QRect(965, 185, 140, 30))
            self.cndcombo_1.setObjectName("cndcombo")
            self.cndcombo_1.addItem("")
            self.cndcombo_1.addItem("SAC 50KG")
            self.cndcombo_1.addItem("SAC 25KG")
            self.cndcombo_1.addItem("BIG BAG")
            ########################################################################
            self.TRANSPRTTXT_1 = QtWidgets.QLabel(self.tabSORTIE)
            self.TRANSPRTTXT_1.setGeometry(QtCore.QRect(300, 188, 131, 16))
            self.TRANSPRTTXT_1.setObjectName("TRANSPRTTXT")
            self.TRANSPORTcombo_1 = QtWidgets.QComboBox(self.tabSORTIE, editable=True)
            self.TRANSPORTcombo_1.setGeometry(QtCore.QRect(440, 185, 140, 30))
            self.TRANSPORTcombo_1.setObjectName("TRANSPORTcombo")
            self.TRANSPORTcombo_1.addItem("")
            ########################################################################
            self.label_2_1 = QtWidgets.QLabel(self.tabSORTIE)
            self.label_2_1.setGeometry(QtCore.QRect(620, 188, 81, 16))
            self.label_2_1.setObjectName("label_2")
            self.imatricullineeditr_1 = QtWidgets.QLineEdit(self.tabSORTIE)
            self.imatricullineeditr_1.setInputMask("99999-999-99")
            self.imatricullineeditr_1.setGeometry(QtCore.QRect(695, 185, 140, 30))

            #########################################################################
            self.dateeditedcnd_1 = QtWidgets.QLineEdit(self.tabSORTIE)
            self.dateeditedcnd_1.setInputMask("99-99-9999")
            self.dateeditedcnd_1.setGeometry(QtCore.QRect(440, 235, 140, 30))
            self.dateeditedcnd_1.setObjectName("dateeditedcnd")

            self.dateEditdlum_1 = QtWidgets.QLineEdit(self.tabSORTIE)
            self.dateEditdlum_1.setInputMask("99-99-9999")
            self.dateEditdlum_1.setGeometry(QtCore.QRect(695, 235, 140, 30))
            self.dateEditdlum_1.setObjectName("dateEditdlum")

            self.DATEDECNDTXT_1 = QtWidgets.QLabel(self.tabSORTIE)
            self.DATEDECNDTXT_1.setGeometry(QtCore.QRect(300, 243, 131, 16))
            self.DATEDECNDTXT_1.setObjectName("DATEDECNDTXT")

            self.dlum_1 = QtWidgets.QLabel(self.tabSORTIE)
            self.dlum_1.setGeometry(QtCore.QRect(620, 243, 47, 13))
            self.dlum_1.setObjectName("dlum")

            self.nemuroDelottxt = QtWidgets.QLabel("N° DE LOT:", self.tabSORTIE)
            self.nemuroDelottxt.setGeometry(QtCore.QRect(870, 243, 120, 13))
            self.nemuroDelots = QtWidgets.QLineEdit(self.tabSORTIE)
            self.nemuroDelots.setGeometry(QtCore.QRect(965, 235, 140, 30))

            self.nemuroDelotschtxt = QtWidgets.QLabel("N°LOT SCH :", self.tabSORTIE)
            self.nemuroDelotschtxt.setGeometry(QtCore.QRect(1128, 243, 120, 13))
            self.nemuroDelotssch = QtWidgets.QLineEdit(self.tabSORTIE)
            self.nemuroDelotssch.setGeometry(QtCore.QRect(1200, 235, 140, 30))

            self.daterecolttxtso = QtWidgets.QLabel("Date de récolte", self.tabSORTIE)
            self.daterecolttxtso.setGeometry(QtCore.QRect(20, 243, 81, 16))

            self.daterecolteso = QtWidgets.QLineEdit(self.tabSORTIE)
            self.daterecolteso.setInputMask("99-99-9999")
            self.daterecolteso.setGeometry(QtCore.QRect(140, 235, 140, 30))

            self.fourniseurcombostxt = QtWidgets.QLabel("EXPEDITEUR:", self.tabSORTIE)
            self.fourniseurcombostxt.setGeometry(QtCore.QRect(1128, 130, 140, 30))
            self.fourniseurcombos = QtWidgets.QComboBox(self.tabSORTIE)
            self.fourniseurcombos.setGeometry(QtCore.QRect(1200, 130, 140, 30))

            self.fourniseurcombos.addItem("")
            self.fourniseurcombos.addItem("UCA ALGER")
            self.fourniseurcombos.addItem("UCA ORAN")

            self.textEdit_1 = QTableWidget(self.tabSORTIE)
            self.textEdit_1.setRowCount(0)
            self.textEdit_1.setColumnCount(14)

            self.textEdit_1.setColumnWidth(1, 50)
            self.textEdit_1.setColumnWidth(2, 10)
            self.textEdit_1.setColumnWidth(3, 10)
            self.textEdit_1.setColumnWidth(4, 0)
            self.textEdit_1.setColumnWidth(5, 0)
            self.textEdit_1.setColumnWidth(6, 0)
            self.textEdit_1.setColumnWidth(7, 0)
            self.textEdit_1.setColumnWidth(8, 0)
            self.textEdit_1.setColumnWidth(9, 0)
            self.textEdit_1.setColumnWidth(10, 0)
            self.textEdit_1.setColumnWidth(11, 0)
            self.textEdit_1.setColumnWidth(12, 0)
            self.textEdit_1.setColumnWidth(13, 0)
            self.textEdit_1.verticalHeader().setVisible(False)

            self.textEdit_1.setHorizontalHeaderLabels((
                                                      "N°", "N°LOT", "N°LOT SCH", "DATE", "MAGASIN DE STOCK", "PRODUIT",
                                                      "ORIGINE", "QUANTITE (Qx)", "ACHTEUR",
                                                      "SASHERIE DE CND", "IMATRICULE", "DATE DE RECOLTE", "DATE DE CND",
                                                      "DLUM"))
            self.textEdit_1.setGeometry(QtCore.QRect(20, 320, 1310, 305))
            self.textEdit_1.setObjectName("textEdit")
            self.textEdit_1.setStyleSheet(" background-color: #ffffff;")

            self.totaltxt = QtWidgets.QLabel("TOTAL")
            self.totaltxt.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.totaltxt.setGeometry(1148, 573, 183, 50)
            self.totaltxt.setFont(self.totalfont)

            self.rest = QtWidgets.QDoubleSpinBox(readOnly=True)
            self.rest.setPrefix("REST: ")
            self.rest.setGeometry(1195, 599, 133, 20)
            self.rest.setRange(0, 900000)

            self.totalriztxt = QtWidgets.QLabel("RIZ IMP")
            self.totalriztxt.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.totalriztxt.setGeometry(20, 573, 154, 50)
            self.totalriztxt.setFont(self.totalfont)

            self.resteriz = QtWidgets.QDoubleSpinBox(readOnly=True)
            self.resteriz.setPrefix("REST: ")
            self.resteriz.setGeometry(51, 599, 120, 20)
            self.resteriz.setRange(0, 900000)

            self.totalpchtxt = QtWidgets.QLabel("P.CHICHES IMP")
            self.totalpchtxt.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.totalpchtxt.setGeometry(175, 573, 193, 50)
            self.totalpchtxt.setFont(self.totalfont)

            self.restpch = QtWidgets.QDoubleSpinBox(readOnly=True)
            self.restpch.setPrefix("REST: ")
            self.restpch.setGeometry(245, 599, 120, 20)
            self.restpch.setRange(0, 900000)

            self.totalpchpltxt = QtWidgets.QLabel("P.CHICHES pl")
            self.totalpchpltxt.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.totalpchpltxt.setGeometry(370, 573, 205, 50)
            self.totalpchpltxt.setFont(self.totalfont)

            self.restpchpl = QtWidgets.QDoubleSpinBox(readOnly=True)
            self.restpchpl.setPrefix("REST: ")
            self.restpchpl.setGeometry(450, 599, 120, 20)
            self.restpchpl.setRange(0, 900000)

            self.totallnpltxt = QtWidgets.QLabel("LENTILLE PL")
            self.totallnpltxt.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.totallnpltxt.setGeometry(578, 573, 200, 50)
            self.totalpchpltxt.setFont(self.totalfont)

            self.restlnpl = QtWidgets.QDoubleSpinBox(readOnly=True)
            self.restlnpl.setPrefix("REST: ")
            self.restlnpl.setGeometry(655, 599, 120, 20)
            self.restlnpl.setRange(0, 900000)

            self.totallntxt = QtWidgets.QLabel("LENTILLE IMP")
            self.totallntxt.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.totallntxt.setGeometry(780, 573, 188, 50)
            self.totallntxt.setFont(self.totalfont)

            self.restln = QtWidgets.QDoubleSpinBox(readOnly=True)
            self.restln.setPrefix("REST: ")
            self.restln.setGeometry(845, 599, 120, 20)
            self.restln.setRange(0, 900000)

            self.totalhrtxt = QtWidgets.QLabel("HARICOT BLANC IMP")
            self.totalhrtxt.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.totalhrtxt.setGeometry(970, 573, 175, 50)
            self.totalhrtxt.setFont(self.totalfont)

            self.resthr = QtWidgets.QDoubleSpinBox(readOnly=True)
            self.resthr.setPrefix("REST: ")
            self.resthr.setGeometry(1030, 599, 110, 20)
            self.resthr.setRange(0, 900000)

            self.filtertxt = QtWidgets.QLabel("Sélectionnez la date ", self.tabSORTIE)
            self.filtertxt.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.filtertxt.setGeometry(QtCore.QRect(730, 272, 590, 45))

            self.filtertxts = QtWidgets.QLabel("Sélectionnez la date ")
            self.filtertxts.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.filtertxts.setGeometry(QtCore.QRect(730, 268, 590, 51))

            self.datefilters = QtWidgets.QLineEdit(self.tabSORTIE)
            self.datefilters.setGeometry(QtCore.QRect(855, 275, 130, 38))
            self.datefilters.setInputMask('99-99-9999')

            self.produitfls = QtWidgets.QComboBox(self.tabSORTIE)
            self.produitfls.setGeometry(QtCore.QRect(1060, 275, 130, 38))
            self.produitfls.addItem(" ")
            self.produitfls.addItem("POIS CHICHES PL")
            self.produitfls.addItem("POIS CHICHES IMP 12 mm")
            self.produitfls.addItem("POIS CHICHES IMP 09 mm")
            self.produitfls.addItem("POIS CHICHES IMP 08 mm")
            self.produitfls.addItem("POIS CHICHES IMP 06 mm")
            self.produitfls.addItem("HARICOT BLANC IMP")
            self.produitfls.addItem("POIS CHICHES PL")
            self.produitfls.addItem("HARICOT LSB")
            self.produitfls.addItem("LENTILLE PL")
            self.produitfls.addItem("LENTILLE IMP 05-07 mm")
            self.produitfls.addItem("LENTILLE IMP vert")
            self.produitfls.addItem("RIZ IMP")
            self.produitfls.addItem("RIZ ETUVE")

            self.btnfilters = QtWidgets.QPushButton("ok", self.tabSORTIE, clicked=lambda: self.impot_filter_sortie())
            self.btnfilters.setGeometry((QtCore.QRect(1200, 275, 40, 40)))

            self.btnfcncls = QtWidgets.QPushButton("exit", self.tabSORTIE, clicked=lambda: self.impot_all_sortie())
            self.btnfcncls.setGeometry((QtCore.QRect(1260, 275, 40, 40)))

            self.datafiltertxts = QtWidgets.QLabel("produit:", self.tabSORTIE)
            self.datafiltertxts.setGeometry(QtCore.QRect(1000, 285, 60, 20))

            self.filtertxts = QtWidgets.QLabel("Filtrage des données:", self.tabSORTIE)
            self.filtertxts.setGeometry(QtCore.QRect(735, 270, 115, 10))

            self.tabWidget.addTab(self.tabSORTIE, "")
            self.verticalLayout.addWidget(self.tabWidget)
            MainWindow.setCentralWidget(self.centralwidget)
            self.statusbar = QtWidgets.QStatusBar(MainWindow)
            self.statusbar.setObjectName("statusbar")
            MainWindow.setStatusBar(self.statusbar)

            self.retranslateUi(MainWindow)
            self.tabWidget.setCurrentIndex(1)
            QtCore.QMetaObject.connectSlotsByName(MainWindow)

            self.impot_all()
            self.impot_all_sortie()

            ####################################################################################################################
            ##########################################Stock############################################
            self.tabStock = QtWidgets.QWidget()
            font2 = QtGui.QFont()
            font2.setPointSize(10)
            font2.setBold(False)

            self.addd_buttons = QtWidgets.QPushButton("STOCK FINAL", self.tabStock,
                                                      clicked=lambda: self.stock_final_magasin() and self.impot_filter_stock())
            self.addd_buttons.setGeometry(680, 250, 160, 40)

            self.printbts = QtWidgets.QPushButton("IMPRIMER SITUATION \nDES STOCK", self.tabStock,
                                                  clicked=lambda: self.docxStock())
            self.printbts.setGeometry(QtCore.QRect(500, 250, 160, 40))

            fichetraitementxts = QtWidgets.QLabel("ÉTAT DES STOCKS DE LÉGUMES SECS", self.tabStock)
            fichetraitementxts.setGeometry(490, 5, 430, 60)
            fichetraitementxts.setStyleSheet("font: bold 24px;")

            dateDeFacturetxs = QtWidgets.QLabel("Date de stock:")
            dateDeFacturetxs.setGeometry(5, 60, 160, 30)

            self.Unitetxts = QtWidgets.QLabel("UNITÉ DE STOCK :", self.tabStock)
            self.Unitetxts.setGeometry(340, 115, 300, 30)
            self.Unitetxts.setFont(font2)

            self.Unites = QtWidgets.QComboBox(self.tabStock, editable=False)
            self.Unites.addItem("")
            self.Unites.addItem("DOCK CENTRAL")
            self.Unites.addItem("MAGASIN MESRA")
            self.Unites.addItem("MARCHE GROS BELACEL")
            self.Unites.setGeometry(460, 115, 192, 35)

            self.Produittxts = QtWidgets.QLabel("PRODUIT :", self.tabStock)
            self.Produittxts.setGeometry(10, 115, 300, 30)
            self.Produittxts.setFont(font2)

            self.Produits = QtWidgets.QComboBox(self.tabStock)
            self.Produits.setGeometry(90, 115, 192, 35)
            self.Produits.addItem("")

            self.Produits.addItem("POIS CHICHES PL")
            self.Produits.addItem("POIS CHICHES IMP 12 mm")
            self.Produits.addItem("POIS CHICHES IMP 06 mm")
            self.Produits.addItem("POIS CHICHES IMP 08 mm")
            self.Produits.addItem("POIS CHICHES IMP 09 mm")
            self.Produits.addItem("HARICOT BLANC IMP")
            self.Produits.addItem("HARICOT LSB")
            self.Produits.addItem("LENTILLE PL")
            self.Produits.addItem("LENTILLE IMP 05-07 mm")
            self.Produits.addItem("LENTILLE IMP vert")
            self.Produits.addItem("LENTILLE IMP ROUGE")
            self.Produits.addItem("RIZ IMP")
            self.Produits.addItem("RIZ ETUVE")

            self.OrigineDuProduittxts = QtWidgets.QLabel("ORIGINE DE PRODUIT :", self.tabStock)
            self.OrigineDuProduittxts.setGeometry(705, 115, 300, 30)
            self.OrigineDuProduittxts.setFont(font2)
            all_countries = [
                "", "Algeria", "Argentina", "Australia", "Azerbaijan", "Bangladesh", "Brazil", "Canada", "China",
                "Colombia",
                "Costa Rica",
                "Ecuador",
                "Egypt",
                "India", "Indonesia",
                "Italy", "Japan", "Kazakhstan",
                "Kuwait", "Kyrgyzstan",
                "Macedonia", "Malaysia",
                "Mauritius", "Mexico",
                "Pakistan", "Paraguay", "Peru", "Philippines",
                "Poland", "Portugal", "Romania", "Russian ",
                "Saudi Arabia",
                "Singapore",
                "South Africa", "Spain", "Sri Lanka", "Sudan",
                "Swaziland", "Sweden", "Switzerland", "Taiwan", "Tajikistan",
                "Tanzania", "Thailand", "Tunisia", "Turkey",
                "Turkmenistan", "Ukraine",
                "United Kingdom", "United States", "Uruguay", "Uzbekistan",
                "Venezuela", "Vietnam", "Yemen", "Zambia", "Zimbabwe"
            ]
            self.OrigineDuProduits = QtWidgets.QComboBox(self.tabStock)
            self.OrigineDuProduits.addItems(all_countries)
            self.OrigineDuProduits.setGeometry(850, 115, 170, 35)

            self.expediteurtxt = QtWidgets.QLabel("EXPÉDITEUR :", self.tabStock)
            self.expediteurtxt.setGeometry(QtCore.QRect(1080, 115, 150, 30))
            self.expediteurtxt.setFont(font2)
            self.expediteur = QtWidgets.QComboBox(self.tabStock)
            self.expediteur.setGeometry(QtCore.QRect(1170, 115, 170, 35))
            self.expediteur.addItem("")
            self.expediteur.addItem("UCA ALGER")
            self.expediteur.addItem("UCA ORAN")
            self.expediteur.addItem("UCA MOSTAGANEM")
            self.expediteur.addItem("")
            self.expediteur.addItem("")
            self.expediteur.addItem("")

            datetext = QLabel("   DATE :", self.tabStock)
            datetext.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            datetext.setGeometry(QtCore.QRect(10, 165, 650, 73))
            datetextss = QLabel("PERIODE :", self.tabStock)
            datetextss.setGeometry(QtCore.QRect(25, 155, 55, 18))
            datetexts = QLabel("au :", self.tabStock)
            datetexts.setGeometry(QtCore.QRect(380, 185, 80, 35))
            self.date_edits = QtWidgets.QLineEdit(self.tabStock)
            self.date_edits.setInputMask("99-99-9999")
            self.date_edits.setGeometry(QtCore.QRect(90, 185, 192, 35))

            self.date_edit2 = QtWidgets.QLineEdit(self.tabStock)
            self.date_edit2.setInputMask("99-99-9999")
            self.date_edit2.setGeometry(QtCore.QRect(460, 185, 192, 35))

            self.txtfacturetxts = QtWidgets.QLabel(" ", self.tabStock)
            self.txtfacturetxts.setGeometry(400, 400, 100, 20)
            self.txtfactures = QTableWidget(self.tabStock)
            self.txtfactures.setGeometry(10, 300, 1330, 250)
            self.txtfactures.setRowCount(0)
            self.txtfactures.setColumnCount(9)
            self.txtfactures.setColumnWidth(0, 140)
            self.txtfactures.setColumnWidth(1, 170)
            self.txtfactures.setColumnWidth(2, 160)
            self.txtfactures.setColumnWidth(3, 175)
            self.txtfactures.setColumnWidth(4, 160)
            self.txtfactures.setColumnWidth(5, 175)
            self.txtfactures.setColumnWidth(6, 175)
            self.txtfactures.setColumnWidth(7, 175)
            self.txtfactures.verticalHeader().setVisible(False)
            self.txtfactures.setHorizontalHeaderLabels(
                ("UNITÉ", "PRODUIT", "QUANTITÉ", "ORIGINE DE PRODUIT", "DLUM", "DATE DE CND", "N°LOT", 'N°LOT SCH',
                 "EXPEDITEUR"))

            self.stockFinaltxt = QtWidgets.QLabel("STOCK FINAL", self.tabStock)
            self.stockFinaltxt.setStyleSheet("font: bold 24px;")
            self.stockFinaltxt.setGeometry(QtCore.QRect(835, 570, 180, 40))
            self.stockFinal = QtWidgets.QLineEdit(self.tabStock)
            self.stockFinal.setGeometry(QtCore.QRect(1007, 570, 333, 40))
            ##########################difinition of value
            self.selected_produit = None
            self.selected_magasin = None
            self.selected_dates = None
            self.selected_datesAU = None
            self.RunlegumesecWindow()

            self.tabWidget.addTab(self.tabStock, "STOCK")

        def retranslateUi(self, MainWindow):
            _translate = QtCore.QCoreApplication.translate
            MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
            self.addbtn.setText(_translate("MainWindow", "Ajouter"))
            self.deletebtn.setText(_translate("MainWindow", "suprime"))
            self.printbtn.setText(_translate("MainWindow", "Imprimer"))
            self.cclstxt.setText(_translate("MainWindow", "<h2>CCLS RELIZANE SERVICE QUALITE<h2/>"))
            self.titletxt.setText(_translate("MainWindow", "<h3>GESTION STOCk LEGUMES SECS<h3/>"))
            self.txtdate.setText(_translate("MainWindow", "DATE DE ENTRER:"))
            self.produittxt.setText(_translate("MainWindow", "PRODUIT:"))
            self.origintxt.setText(_translate("MainWindow", "ORIGINE DE PRODUIT:"))
            self.txtquantite.setText(_translate("MainWindow", "QUATITE:"))
            self.labelmagasin.setText(_translate("MainWindow", "MAGASAIN DE STOCK::"))
            self.fornisseurtxt.setText(_translate("MainWindow", "EXPEDITEUR:"))
            self.CNDTXT.setText(_translate("MainWindow", "SACHERIE CND :"))
            self.TRANSPRTTXT.setText(_translate("MainWindow", "MOIYEN DE TRANSPORT :"))
            self.label_2.setText(_translate("MainWindow", "IMATRICULE:"))
            self.DATEDECNDTXT.setText(_translate("MainWindow", "DATE DE CND :"))
            self.dlum.setText(_translate("MainWindow", "DLUM :"))

            self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabENTRER), _translate("MainWindow", "ENTRER"))
            self.addbtn_1.setText(_translate("MainWindow", "Ajouter"))
            self.deletebtn_1.setText(_translate("MainWindow", "suprime"))
            self.printbtn_1.setText(_translate("MainWindow", "Imprimer"))
            self.cclstxt_1.setText(_translate("MainWindow", "<h2>CCLS RELIZANE SERVICE QUALITE<h2/>"))
            self.titletxt_1.setText(_translate("MainWindow", "<h3>GESTION STOCk LEGUMES SECS<h3/>"))
            self.txtdate_1.setText(_translate("MainWindow", "DATE DE SORTIE:"))
            self.produittxt_1.setText(_translate("MainWindow", "PRODUIT:"))
            self.origintxt_1.setText(_translate("MainWindow", "ORIGINE DE PRODUIT:"))
            self.txtquantite_1.setText(_translate("MainWindow", "QUATITE:"))
            self.labelmagasin_1.setText(_translate("MainWindow", "ACHTEUR"))
            self.CNDTXT_1.setText(_translate("MainWindow", "SACHERIE CND :"))
            self.TRANSPRTTXT_1.setText(_translate("MainWindow", "MOIYEN DE TRANSPORT :"))
            self.label_2_1.setText(_translate("MainWindow", "IMATRICULE:"))
            self.DATEDECNDTXT_1.setText(_translate("MainWindow", "DATE DE CND :"))
            self.dlum_1.setText(_translate("MainWindow", "DLUM :"))
            self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabSORTIE), _translate("MainWindow", "SORTIE"))

        #####################################################################################################################################

        def add(self):
            try:
                dateentre = self.dateedite.text()
                nlot = self.nemuroDelot.text()
                nlotsch = self.nemuroDelotsch.text()
                produitt = self.produitcombo.currentText()
                country = self.originel.currentText()
                quantité = self.quatitelineEdit.value()
                lieu = self.magasincombo.currentText()
                sac = self.cndcombo.currentText()
                fourni = self.fourniseurcombo.currentText()
                matric = self.imatricullineeditr.text()
                datrecolte = self.daterecolte.text()
                cnddate = self.dateeditedcnd.text()
                datedlm = self.dateEditdlum.text()

                if produitt:
                    if produitt == 'RIZ IMP':
                        dattabase = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                            database='datta_legumsec_out')
                        curs = dattabase.cursor()
                        dattabasei = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                             database='datta_legumesec_entry')
                        cursi = dattabasei.cursor()
                        curs.execute(
                            "INSERT INTO outtable (quantitérizentré,le,produit,unité,origine,fournisseur)VALUES(%s,%s,%s,%s,%s,%s)",
                            (quantité, dateentre, produitt, lieu, country, fourni))
                        cursi.execute(
                            "INSERT INTO entrytable (le,nlot,nlotsch,produit,origine,quantité,unité,sacherie,fournisseur,imatricule,date_recolte,date_CND,DLUM,quantitérizentrée)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                            (dateentre, nlot, nlotsch, produitt, country, quantité, lieu, sac, fourni, matric,
                             datrecolte, cnddate, datedlm,
                             quantité))
                        dattabase.commit()
                        dattabasei.commit()
                    if produitt == 'RIZ ETUVE':
                        dattabase = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                            database='datta_legumsec_out')
                        curs = dattabase.cursor()
                        dattabasei = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                             database='datta_legumesec_entry')
                        cursi = dattabasei.cursor()
                        curs.execute(
                            "INSERT INTO outtable (quantitérizetvntré,le,produit,unité,origine,fournisseur)VALUES(%s,%s,%s,%s,%s,%s)",
                            (quantité, dateentre, produitt, lieu, country, fourni))
                        cursi.execute(
                            "INSERT INTO entrytable (le,nlot,nlotsch,produit,origine,quantité,unité,sacherie,fournisseur,imatricule,date_recolte,date_CND,DLUM,quantitérizetvntrée)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                            (dateentre, nlot, nlotsch, produitt, country, quantité, lieu, sac, fourni, matric,
                             datrecolte, cnddate, datedlm,
                             quantité))
                        dattabase.commit()
                        dattabasei.commit()
                    if produitt == 'LENTILLE IMP vert':
                        dattabase = mysql.connector.connect(
                            host="localhost",
                            user="qualite",
                            password="qualite48", database='datta_legumsec_out'
                        )
                        curs = dattabase.cursor()
                        dattabasei = mysql.connector.connect(
                            host="localhost",
                            user="qualite",
                            password="qualite48", database='datta_legumesec_entry'
                        )
                        cursi = dattabasei.cursor()
                        curs.execute(
                            "INSERT INTO outtable (quantitélenvertentré,le,produit,unité,origine,fournisseur)VALUES(%s,%s,%s,%s,%s,%s)",
                            (quantité, dateentre, produitt, lieu, country, fourni))
                        cursi.execute(
                            "INSERT INTO entrytable (le,nlot,nlotsch,produit,origine,quantité,unité,sacherie,fournisseur,imatricule,date_recolte,date_CND,DLUM,quantitélenvertntrée)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                            (dateentre, nlot, nlotsch, produitt, country, quantité, lieu, sac, fourni, matric,
                             datrecolte, cnddate, datedlm,
                             quantité))
                        dattabase.commit()
                        dattabasei.commit()

                    if produitt == 'LENTILLE IMP 05-07 mm':
                        dattabase = mysql.connector.connect(
                            host="localhost",
                            user="qualite",
                            password="qualite48", database='datta_legumsec_out'
                        )
                        curs = dattabase.cursor()
                        dattabasei = mysql.connector.connect(
                            host="localhost",
                            user="qualite",
                            password="qualite48", database='datta_legumesec_entry'
                        )
                        cursi = dattabasei.cursor()
                        curs.execute(
                            "INSERT INTO outtable (quantitélenentré,le,produit,unité,origine,fournisseur)VALUES(%s,%s,%s,%s,%s,%s)",
                            (quantité, dateentre, produitt, lieu, country, fourni))
                        cursi.execute(
                            "INSERT INTO entrytable (le,nlot,nlotsch,produit,origine,quantité,unité,sacherie,fournisseur,imatricule,date_recolte,date_CND,DLUM,quantitélenentrée)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                            (dateentre, nlot, nlotsch, produitt, country, quantité, lieu, sac, fourni, matric,
                             datrecolte, cnddate, datedlm,
                             quantité))
                        dattabase.commit()
                        dattabasei.commit()

                    if produitt == 'LENTILLE IMP ROUGE':
                        dattabase = mysql.connector.connect(
                            host="localhost",
                            user="qualite",
                            password="qualite48", database='datta_legumsec_out'
                        )
                        curs = dattabase.cursor()
                        dattabasei = mysql.connector.connect(
                            host="localhost",
                            user="qualite",
                            password="qualite48", database='datta_legumesec_entry'
                        )
                        cursi = dattabasei.cursor()
                        curs.execute(
                            "INSERT INTO outtable (quantitélenrougeentré,le,produit,unité,origine,fournisseur)VALUES(%s,%s,%s,%s,%s,%s)",
                            (quantité, dateentre, produitt, lieu, country, fourni))
                        cursi.execute(
                            "INSERT INTO entrytable (le,nlot,nlotsch,produit,origine,quantité,unité,sacherie,fournisseur,imatricule,date_recolte,date_CND,DLUM,quantitélenrougeentrée)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                            (dateentre, nlot, nlotsch, produitt, country, quantité, lieu, sac, fourni, matric,
                             datrecolte,
                             cnddate, datedlm,
                             quantité))
                        dattabase.commit()
                        dattabasei.commit()

                    if produitt == 'LENTILLE PL':
                        dattabase = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                            database='datta_legumsec_out')
                        dattabasei = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                             database='datta_legumesec_entry')
                        curs = dattabase.cursor()
                        cursi = dattabasei.cursor()
                        curs.execute(
                            "INSERT INTO outtable (quantitélenplentré,le,produit,unité,origine,fournisseur)VALUES(%s,%s,%s,%s,%s,%s)",
                            (quantité, dateentre, produitt, lieu, country, fourni))
                        cursi.execute(
                            "INSERT INTO entrytable (le,nlot,nlotsch,produit,origine,quantité,unité,sacherie,fournisseur,imatricule,date_recolte,date_CND,DLUM,quantitélenplntrée)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                            (dateentre, nlot, nlotsch, produitt, country, quantité, lieu, sac, fourni, matric,
                             datrecolte, cnddate, datedlm,
                             quantité))
                        dattabase.commit()
                        dattabasei.commit()

                    if produitt == 'HARICOT BLANC IMP':
                        dattabase = mysql.connector.connect(
                            host="localhost",
                            user="qualite",
                            password="qualite48", database='datta_legumsec_out'
                        )
                        curs = dattabase.cursor()
                        dattabasei = mysql.connector.connect(
                            host="localhost",
                            user="qualite",
                            password="qualite48", database='datta_legumesec_entry'
                        )
                        cursi = dattabasei.cursor()
                        curs.execute(
                            "INSERT INTO outtable (quantitéharentré,le,produit,unité,origine,fournisseur)VALUES(%s,%s,%s,%s,%s,%s)",
                            (quantité, dateentre, produitt, lieu, country, fourni))
                        cursi.execute(
                            "INSERT INTO entrytable (le,nlot,nlotsch,produit,origine,quantité,unité,sacherie,fournisseur,imatricule,date_recolte,date_CND,DLUM,quantitéharntrée)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                            (dateentre, nlot, nlotsch, produitt, country, quantité, lieu, sac, fourni, matric,
                             datrecolte, cnddate, datedlm,
                             quantité))
                        dattabase.commit()
                        dattabasei.commit()

                    if produitt == 'HARICOT LSB':
                        dattabase = mysql.connector.connect(
                            host="localhost",
                            user="qualite",
                            password="qualite48", database='datta_legumsec_out'
                        )
                        curs = dattabase.cursor()
                        dattabasei = mysql.connector.connect(
                            host="localhost",
                            user="qualite",
                            password="qualite48", database='datta_legumesec_entry'
                        )
                        cursi = dattabasei.cursor()
                        curs.execute(
                            "INSERT INTO outtable (quantitéharlsbentré,le,produit,unité,origine,fournisseur)VALUES(%s,%s,%s,%s,%s,%s)",
                            (quantité, dateentre, produitt, lieu, country, fourni))
                        cursi.execute(
                            "INSERT INTO entrytable (le,nlot,nlotsch,produit,origine,quantité,unité,sacherie,fournisseur,imatricule,date_recolte,date_CND,DLUM,quantitéharlsbntrée)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                            (dateentre, nlot, nlotsch, produitt, country, quantité, lieu, sac, fourni, matric,
                             datrecolte, cnddate, datedlm,
                             quantité))
                        dattabase.commit()
                        dattabasei.commit()

                    if produitt == 'POIS CHICHES IMP 12 mm':
                        dattabase = mysql.connector.connect(
                            host="localhost",
                            user="qualite",
                            password="qualite48", database='datta_legumsec_out'
                        )
                        curs = dattabase.cursor()
                        dattabasei = mysql.connector.connect(
                            host="localhost",
                            user="qualite",
                            password="qualite48", database='datta_legumesec_entry'
                        )
                        cursi = dattabasei.cursor()
                        curs.execute(
                            "INSERT INTO outtable (quantitepchentré,le,produit,unité,origine,fournisseur)VALUES(%s,%s,%s,%s,%s,%s)",
                            (quantité, dateentre, produitt, lieu, country, fourni))
                        cursi.execute(
                            "INSERT INTO entrytable (le,nlot,nlotsch,produit,origine,quantité,unité,sacherie,fournisseur,imatricule,date_recolte,date_CND,DLUM,quantitépchentrée)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                            (dateentre, nlot, nlotsch, produitt, country, quantité, lieu, sac, fourni, matric,
                             datrecolte, cnddate, datedlm,
                             quantité))
                        dattabase.commit()
                        dattabasei.commit()
                    if produitt == 'POIS CHICHES IMP 09 mm':
                        dattabase = mysql.connector.connect(
                            host="localhost",
                            user="qualite",
                            password="qualite48", database='datta_legumsec_out'
                        )
                        curs = dattabase.cursor()
                        dattabasei = mysql.connector.connect(
                            host="localhost",
                            user="qualite",
                            password="qualite48", database='datta_legumesec_entry'
                        )
                        cursi = dattabasei.cursor()
                        curs.execute(
                            "INSERT INTO outtable (quantitépchneufeentré,le,produit,unité,origine,fournisseur)VALUES(%s,%s,%s,%s,%s,%s)",
                            (quantité, dateentre, produitt, lieu, country, fourni))
                        cursi.execute(
                            "INSERT INTO entrytable (le,nlot,nlotsch,produit,origine,quantité,unité,sacherie,fournisseur,imatricule,date_recolte,date_CND,DLUM,quantitépchneufentrée)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                            (dateentre, nlot, nlotsch, produitt, country, quantité, lieu, sac, fourni, matric,
                             datrecolte, cnddate, datedlm,
                             quantité))
                        dattabase.commit()
                        dattabasei.commit()
                    if produitt == 'POIS CHICHES IMP 08 mm':
                        dattabase = mysql.connector.connect(
                            host="localhost",
                            user="qualite",
                            password="qualite48", database='datta_legumsec_out'
                        )
                        curs = dattabase.cursor()
                        dattabasei = mysql.connector.connect(
                            host="localhost",
                            user="qualite",
                            password="qualite48", database='datta_legumesec_entry'
                        )
                        cursi = dattabasei.cursor()
                        curs.execute(
                            "INSERT INTO outtable ( quantitépchhuitentré,le,produit,unité,origine,fournisseur)VALUES(%s,%s,%s,%s,%s,%s)",
                            (quantité, dateentre, produitt, lieu, country, fourni))
                        cursi.execute(
                            "INSERT INTO entrytable (le,nlot,nlotsch,produit,origine,quantité,unité,sacherie,fournisseur,imatricule,date_recolte,date_CND,DLUM,quantitépchhuitntrée)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                            (dateentre, nlot, nlotsch, produitt, country, quantité, lieu, sac, fourni, matric,
                             datrecolte, cnddate, datedlm,
                             quantité))
                        dattabase.commit()
                        dattabasei.commit()
                    if produitt == 'POIS CHICHES IMP 06 mm':
                        dattabase = mysql.connector.connect(
                            host="localhost",
                            user="qualite",
                            password="qualite48", database='datta_legumsec_out'
                        )
                        curs = dattabase.cursor()
                        dattabasei = mysql.connector.connect(
                            host="localhost",
                            user="qualite",
                            password="qualite48", database='datta_legumesec_entry'
                        )
                        cursi = dattabasei.cursor()
                        curs.execute(
                            "INSERT INTO outtable (quantitépchsixentré,le,produit,unité,origine,fournisseur)VALUES(%s,%s,%s,%s,%s,%s)",
                            (quantité, dateentre, produitt, lieu, country, fourni))
                        cursi.execute(
                            "INSERT INTO entrytable (le,nlot,nlotsch,produit,origine,quantité,unité,sacherie,fournisseur,imatricule,date_recolte,date_CND,DLUM,quantitépchsixntrée)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                            (dateentre, nlot, nlotsch, produitt, country, quantité, lieu, sac, fourni, matric,
                             datrecolte, cnddate, datedlm,
                             quantité))
                        dattabase.commit()
                        dattabasei.commit()
                    if produitt == 'POIS CHICHES PL':
                        dattabase = mysql.connector.connect(
                            host="localhost",
                            user="qualite",
                            password="qualite48", database='datta_legumsec_out'
                        )
                        curs = dattabase.cursor()
                        dattabasei = mysql.connector.connect(
                            host="localhost",
                            user="qualite",
                            password="qualite48", database='datta_legumesec_entry'
                        )
                        cursi = dattabasei.cursor()
                        curs.execute(
                            "INSERT INTO outtable (quantitépchplentré,le,produit,unité,origine,fournisseur)VALUES(%s,%s,%s,%s,%s,%s)",
                            (quantité, dateentre, produitt, lieu, country, fourni))
                        cursi.execute(
                            "INSERT INTO entrytable (le,nlot,nlotsch,produit,origine,quantité,unité,sacherie,fournisseur,imatricule,date_recolte,date_CND,DLUM,quantitépchplentrée)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                            (dateentre, nlot, nlotsch, produitt, country, quantité, lieu, sac, fourni, matric,
                             datrecolte, cnddate, datedlm,
                             quantité))
                        dattabase.commit()
                        dattabasei.commit()
                    msgbox = QtWidgets.QMessageBox()
                    msgbox.setWindowTitle('confirmation')
                    msgbox.setText('Lopération a été ajoutée avec succès')
                    msgbox.exec()
                    self.impot_all()

                else:
                    msgbox = QtWidgets.QMessageBox()
                    msgbox.setWindowTitle('Erreur')
                    msgbox.setText("Erreur: Sélectionne le produit")
                    msgbox.exec()
            except mysql.connector.Error as er:
                print(er)

        def add_sortie(self):
            try:
                dateentre1 = self.dateedite_1.text()
                nlots = self.nemuroDelots.text()
                nlotssch = self.nemuroDelotssch.text()
                magasin_de_stock = self.magasincombos.currentText()
                produitt1 = self.produitcombo_1.currentText()
                country1 = self.originel_1.currentText()
                quantité1 = self.quatitelineEdit_1.value()
                achteur = self.magasincombo_1.currentText()
                sac1 = self.cndcombo_1.currentText()
                matric1 = self.imatricullineeditr_1.text()
                daterecoltso = self.daterecolteso.text()
                cnddate1 = self.dateeditedcnd_1.text()
                datedlm1 = self.dateEditdlum_1.text()
                expediteur = self.fourniseurcombos.currentText()

                try:
                    if produitt1:
                        dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                             database='datta_legumsec_out')
                        curs1 = dattabase1.cursor()
                        if produitt1 == 'RIZ IMP':
                            curs1.execute(
                                "INSERT INTO outtable (le, nlot,nlotsch, unité, produit, origine, quantité, achteur, sacherie, imatricule, date_recoltes, date_CND, DLUM, fournisseur, quantitérizesorté) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                                (dateentre1, nlots, nlotssch, magasin_de_stock, produitt1, country1, quantité1, achteur,
                                 sac1,
                                 matric1, daterecoltso, cnddate1, datedlm1, expediteur, quantité1))
                        elif produitt1 == 'RIZ ETUVE':
                            curs1.execute(
                                "INSERT INTO outtable (le, nlot,nlotsch, unité, produit, origine, quantité, achteur, sacherie, imatricule, date_recoltes, date_CND, DLUM, fournisseur, quantitérizetvsorté) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                                (dateentre1, nlots, nlotssch, magasin_de_stock, produitt1, country1, quantité1, achteur,
                                 sac1,
                                 matric1, daterecoltso, cnddate1, datedlm1, expediteur, quantité1))
                        elif produitt1 == 'LENTILLE IMP 05-07 mm':
                            curs1.execute(
                                "INSERT INTO outtable (le, nlot,nlotsch, unité, produit, origine, quantité, achteur, sacherie, imatricule, date_recoltes, date_CND, DLUM, fournisseur, quantitélensorté) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                                (dateentre1, nlots, nlotssch, magasin_de_stock, produitt1, country1, quantité1, achteur,
                                 sac1,
                                 matric1, daterecoltso, cnddate1, datedlm1, expediteur, quantité1))
                        elif produitt1 == 'LENTILLE IMP vert':
                            curs1.execute(
                                "INSERT INTO outtable (le, nlot, nlotsch,unité, produit, origine, quantité, achteur, sacherie, imatricule, date_recoltes, date_CND, DLUM, fournisseur, quantitélenvertsorté) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                                (dateentre1, nlots, nlotssch, magasin_de_stock, produitt1, country1, quantité1, achteur,
                                 sac1,
                                 matric1, daterecoltso, cnddate1, datedlm1, expediteur, quantité1))
                        elif produitt1 == 'LENTILLE IMP ROUGE':
                            curs1.execute(
                                "INSERT INTO outtable (le, nlot,nlotsch, unité, produit, origine, quantité, achteur, sacherie, imatricule, date_recoltes, date_CND, DLUM, fournisseur, quantitélenrougesorté) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                                (dateentre1, nlots, nlotssch, magasin_de_stock, produitt1, country1, quantité1, achteur,
                                 sac1,
                                 matric1, daterecoltso, cnddate1, datedlm1, expediteur, quantité1))
                        # Add other conditions for different products here
                        elif produitt1 == 'POIS CHICHES IMP 12 mm':
                            curs1.execute(
                                "INSERT INTO outtable (le, nlot,nlotsch, unité, produit, origine, quantité, achteur, sacherie, imatricule, date_recoltes, date_CND, DLUM, fournisseur, quantitépchsorté) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                                (dateentre1, nlots, nlotssch, magasin_de_stock, produitt1, country1, quantité1, achteur,
                                 sac1,
                                 matric1, daterecoltso, cnddate1, datedlm1, expediteur, quantité1))
                        elif produitt1 == 'POIS CHICHES IMP 09 mm':
                            curs1.execute(
                                "INSERT INTO outtable (le, nlot,nlotsch, unité, produit, origine, quantité, achteur, sacherie, imatricule, date_recoltes, date_CND, DLUM, fournisseur, quantitépchneufesorté) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                                (dateentre1, nlots, nlotssch, magasin_de_stock, produitt1, country1, quantité1, achteur,
                                 sac1,
                                 matric1, daterecoltso, cnddate1, datedlm1, expediteur, quantité1))
                        elif produitt1 == 'POIS CHICHES IMP 08 mm':
                            curs1.execute(
                                "INSERT INTO outtable (le, nlot,nlotsch, unité, produit, origine, quantité, achteur, sacherie, imatricule, date_recoltes, date_CND, DLUM, fournisseur, quantitépchhuitsorté) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                                (dateentre1, nlots, nlotssch, magasin_de_stock, produitt1, country1, quantité1, achteur,
                                 sac1,
                                 matric1, daterecoltso, cnddate1, datedlm1, expediteur, quantité1))
                        elif produitt1 == 'POIS CHICHES IMP 06 mm':
                            curs1.execute(
                                "INSERT INTO outtable (le, nlot,nlotsch, unité, produit, origine, quantité, achteur, sacherie, imatricule, date_recoltes, date_CND, DLUM, fournisseur, quantitépchsixsorté) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                                (dateentre1, nlots, nlotssch, magasin_de_stock, produitt1, country1, quantité1, achteur,
                                 sac1,
                                 matric1, daterecoltso, cnddate1, datedlm1, expediteur, quantité1))
                        elif produitt1 == 'POIS CHICHES PL':
                            curs1.execute(
                                "INSERT INTO outtable (le, nlot,nlotsch, unité, produit, origine, quantité, achteur, sacherie, imatricule, date_recoltes, date_CND, DLUM, fournisseur, quantitépchplsorté) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                                (dateentre1, nlots, nlotssch, magasin_de_stock, produitt1, country1, quantité1, achteur,
                                 sac1,
                                 matric1, daterecoltso, cnddate1, datedlm1, expediteur, quantité1))
                        elif produitt1 == 'HARICOT BLANC IMP':
                            curs1.execute(
                                "INSERT INTO outtable (le, nlot,nlotsch, unité, produit, origine, quantité, achteur, sacherie, imatricule, date_recoltes, date_CND, DLUM, fournisseur, quantitéharsorté) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                                (dateentre1, nlots, nlotssch, magasin_de_stock, produitt1, country1, quantité1, achteur,
                                 sac1,
                                 matric1, daterecoltso, cnddate1, datedlm1, expediteur, quantité1))
                        elif produitt1 == 'HARICOT LSB':
                            curs1.execute(
                                "INSERT INTO outtable (le, nlot,nlotsch, unité, produit, origine, quantité, achteur, sacherie, imatricule, date_recoltes, date_CND, DLUM, fournisseur, quantitéharlsbsorté) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                                (dateentre1, nlots, nlotssch, magasin_de_stock, produitt1, country1, quantité1, achteur,
                                 sac1,
                                 matric1, daterecoltso, cnddate1, datedlm1, expediteur, quantité1))
                        elif produitt1 == 'LENTILLE PL':
                            curs1.execute(
                                "INSERT INTO outtable (le, nlot,nlotsch, unité, produit, origine, quantité, achteur, sacherie, imatricule, date_recoltes, date_CND, DLUM, fournisseur, quantitélenplsorté) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                                (dateentre1, nlots, nlotssch, magasin_de_stock, produitt1, country1, quantité1, achteur,
                                 sac1,
                                 matric1, daterecoltso, cnddate1, datedlm1, expediteur, quantité1))

                        dattabase1.commit()
                        dattabase1.close()
                        msgbox = QtWidgets.QMessageBox()
                        msgbox.setWindowTitle('confirmation')
                        msgbox.setText('L\'opération a été ajoutée avec succès')
                        msgbox.exec()
                        self.impot_all_sortie()
                    else:
                        msgbox = QtWidgets.QMessageBox()
                        msgbox.setWindowTitle('Erreur')
                        msgbox.setText("Erreur: Sélectionnez le produit")
                        msgbox.exec()
                except Exception as e:
                    print(e)
            except mysql.connector.Error as e:
                print(e)

        def impot_filter(self):
            try:
                datefl = self.datefilter.text()
                produitfl = self.produitfl.currentText()
                dattabase = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                    database='datta_legumesec_entry')

                curs = dattabase.cursor()
                curs.execute(
                    "SELECT nlot,nlotsch,le ,produit ,origine,quantité ,unité,sacherie,fournisseur ,imatricule  ,date_CND ,DLUM  FROM entrytable WHERE le = %s or produit= %s",
                    (datefl, produitfl,))
                result = curs.fetchall()
                self.textEdit.setRowCount(0)
                for row, row_datta in enumerate(result):
                    self.textEdit.insertRow(row)
                    for colum, datta in enumerate(row_datta):
                        self.textEdit.setItem(row, colum, QTableWidgetItem(str(datta)))
                dattabase.commit()
                dattabase.close()
            except Exception as e:
                print(e)

        def impot_filter_sortie(self):
            try:
                datefls = self.datefilters.text()
                produitfls = self.produitfls.currentText()
                dattabase = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                    database='datta_legumsec_out')
                curs = dattabase.cursor()
                curs.execute(
                    "SELECT nlot,nlotsch,le,unité,produit ,origine ,quantité ,achteur ,sacherie ,imatricule,date_CND ,DLUM  FROM outtable WHERE le = %s or produit= %s",
                    (datefls, produitfls,))
                result = curs.fetchall()
                self.textEdit_1.setRowCount(0)
                for row, row_datta in enumerate(result):
                    self.textEdit_1.insertRow(row)
                    for colum, datta in enumerate(row_datta):
                        self.textEdit_1.setItem(row, colum, QTableWidgetItem(str(datta)))
                dattabase.commit()
                dattabase.close()
            except Exception as e:
                print(e)

        def print_docxStockDatabase(self):
            self.poischicheDouze()
            self.poischicheNeuf()
            self.poischicheOuit()
            self.poichichSIxSept()
            self.operation_dattabase()
            self.haricot()
            self.haricotLsb()
            self.lentilleCinqSept()
            self.lenVert()
            self.lenRouge()
            self.lenpl()
            self.poichichepl()
            self.rizeEtuve()
            self.selected_produit = self.Produits.currentText()
            self.selected_magasin = self.Unites.currentText()
            self.selected_origine = self.OrigineDuProduits.currentText()
            self.selected_expediteur = self.expediteur.currentText()
            self.selected_dates = self.date_edits.text()
            self.selected_datesAU = self.date_edit2.text()
            try:
                if self.selected_produit and self.selected_magasin and self.selected_origine and self.selected_dates == "--" and self.selected_datesAU == "--":
                    conn = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                   database="datta_legumesec_entry")
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT le,produit,origine,quantité,unité,sacherie,fournisseur, imatricule,date_recolte, date_CND, DLUM FROM entrytable WHERE produit = %s AND unité = %s AND fournisseur=%s  ",
                        (self.selected_produit, self.selected_magasin, self.selected_expediteur,)
                    )
                    rows = cursor.fetchall()

                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\t\t\t\tSITUATION DES STOCKS DES LEGUMES SECS\n\t\t\t\t\t\t\t    PRODUITS RÉCEPTIONNER',
                        level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(14)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading
                    paragraph0 = self.doc.add_paragraph()
                    paragraph0.style.font.name = 'Times New Roman'
                    left_run0 = paragraph0.add_run(
                        'Période du :' + self.selected_dates + "  au:" + self.selected_datesAU)
                    paragraph0.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

                    paragraph1 = self.doc.add_paragraph()
                    paragraph1.style.font.name = 'Times New Roman'
                    current_date = QDate.currentDate().getDate()
                    left_run1 = paragraph1.add_run(
                        "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Date d'édition : {}/{}/{}".format(current_date[2],
                                                                                                current_date[1],
                                                                                                current_date[0]))
                    left_run1.font.size = Pt(9)

                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(12)
                    left_run = paragraph.add_run(self.selected_magasin + '\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True

                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'PRODUIT'
                    hdr_cells[2].text = 'ORIGINE'
                    hdr_cells[3].text = 'QUANTITE'
                    hdr_cells[4].text = 'MAGASIN DE STOCK'
                    hdr_cells[5].text = 'SASHERIE  CND'
                    hdr_cells[6].text = 'EXPIDITEUR'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(0.5)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2)
                    hdr_cells[2].width = Inches(1)
                    hdr_cells[3].width = Inches(0.4)
                    hdr_cells[4].width = Inches(1.3)
                    hdr_cells[5].width = Inches(1)
                    hdr_cells[6].width = Inches(1)
                    hdr_cells[7].width = Inches(1)
                    hdr_cells[8].width = Inches(0.5)
                    hdr_cells[9].width = Inches(0.5)
                    hdr_cells[10].width = Inches(0.5)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                        cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        cell.paragraphs[0].runs[0].font.bold = True
                        cell.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(9.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.3)
                    # Create the document
                    # Create the table
                    self.doc.add_paragraph().add_run().add_break()
                    table_b = self.doc.add_table(rows=14, cols=2)
                    table_b.style = "Table Grid"
                    # Add table headers
                    hdr_colum = table_b.rows[0].cells
                    hdr_colum[0].text = "PRODUIT"
                    hdr_colum[1].text = "STOCK"
                    for hdr_colum in table_b.rows[0].cells:
                        hdr_colum.paragraphs[0].runs[0].font.name = 'Calibri'
                        hdr_colum.paragraphs[0].runs[0].font.size = Pt(10.5)
                        hdr_colum.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        hdr_colum.paragraphs[0].runs[0].font.bold = True
                        hdr_colum.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    hdr_colum = table_b.rows[1].cells
                    hdr_colum[0].text = "POIS CHICHES PL"
                    hdr_colum[1].text = ""
                    hdr_colum = table_b.rows[2].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 12 mm"
                    hdr_colum[1].text = self.restpoichichedouze + "  QX"
                    hdr_colum = table_b.rows[3].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 09 mm"
                    hdr_colum[1].text = self.restpoichicheneuf + " QX"
                    hdr_colum = table_b.rows[4].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 08 mm"
                    hdr_colum[1].text = self.restpoichicheouit + " QX"
                    hdr_colum = table_b.rows[5].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 06 mm"
                    hdr_colum[1].text = self.restpoichiche + " QX"
                    hdr_colum = table_b.rows[6].cells
                    hdr_colum[0].text = "HARICOT BLANC IMP"
                    hdr_colum[1].text = self.restharicotimp + " QX"
                    hdr_colum = table_b.rows[7].cells
                    hdr_colum[0].text = "HARICOT LSB"
                    hdr_colum[1].text = self.restharicotlsb + " QX"
                    hdr_colum = table_b.rows[8].cells
                    hdr_colum[0].text = "LENTILLE PL"
                    hdr_colum[1].text = self.restlenpl + " QX"
                    hdr_colum = table_b.rows[9].cells
                    hdr_colum[0].text = "LENTILLE IMP 05-07 mm"
                    hdr_colum[1].text = self.restlentsinq + " QX"
                    hdr_colum = table_b.rows[10].cells
                    hdr_colum[0].text = "LENTILLE IMP vert"
                    hdr_colum[1].text = self.restlentvert + " QX"
                    hdr_colum = table_b.rows[11].cells
                    hdr_colum[0].text = "LENTILLE IMP ROUGE"
                    hdr_colum[1].text = self.restlentrouge + " QX"
                    hdr_colum = table_b.rows[12].cells
                    hdr_colum[0].text = "RIZ IMP"
                    hdr_colum[1].text = self.resulxtt + " QX"
                    hdr_colum = table_b.rows[13].cells
                    hdr_colum[0].text = "RIZ ETUVE"
                    hdr_colum[1].text = self.resulxttv + " QX"
                    for row in table_b.rows[1:13]:
                        for cell in row.cells:
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False

                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "open")
                    conn.close()
                elif self.selected_produit and self.selected_magasin and self.selected_origine and self.selected_dates and self.selected_datesAU:

                    conn = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                   database="datta_legumesec_entry")
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT le,produit,origine,quantité,unité,sacherie,fournisseur, imatricule,date_recolte, date_CND, DLUM FROM entrytable WHERE produit = %s AND unité = %s AND fournisseur=%s AND le BETWEEN %s AND %s",
                        (self.selected_produit, self.selected_magasin, self.selected_expediteur, self.selected_dates,
                         self.selected_datesAU))
                    rows = cursor.fetchall()

                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\t\t\t\tSITUATION DES STOCKS DES LEGUMES SECS\n\t\t\t\t\t\t\t    PRODUITS RÉCEPTIONNER',
                        level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(14)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading
                    # add second heading
                    paragraph0 = self.doc.add_paragraph()
                    paragraph0.style.font.name = 'Times New Roman'
                    left_run0 = paragraph0.add_run(
                        'Période du :' + self.selected_dates + "  au:" + self.selected_datesAU)
                    paragraph0.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

                    paragraph1 = self.doc.add_paragraph()
                    paragraph1.style.font.name = 'Times New Roman'
                    current_date = QDate.currentDate().getDate()
                    left_run1 = paragraph1.add_run(
                        "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Date d'édition : {}/{}/{}".format(current_date[2],
                                                                                                current_date[1],
                                                                                                current_date[0]))
                    left_run1.font.size = Pt(9)

                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(12)
                    left_run = paragraph.add_run(self.selected_magasin + '\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True

                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'PRODUIT'
                    hdr_cells[2].text = 'ORIGINE'
                    hdr_cells[3].text = 'QUANTITE'
                    hdr_cells[4].text = 'MAGASIN DE STOCK'
                    hdr_cells[5].text = 'SASHERIE  CND'
                    hdr_cells[6].text = 'EXPIDITEUR'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(0.5)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2)
                    hdr_cells[2].width = Inches(1)
                    hdr_cells[3].width = Inches(0.4)
                    hdr_cells[4].width = Inches(1.3)
                    hdr_cells[5].width = Inches(1)
                    hdr_cells[6].width = Inches(1)
                    hdr_cells[7].width = Inches(1)
                    hdr_cells[8].width = Inches(0.5)
                    hdr_cells[9].width = Inches(0.5)
                    hdr_cells[10].width = Inches(0.5)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                        cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        cell.paragraphs[0].runs[0].font.bold = True
                        cell.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(9.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.3)
                    # Create the document
                    # Create the table
                    self.doc.add_paragraph().add_run().add_break()
                    table_b = self.doc.add_table(rows=14, cols=2)
                    table_b.style = "Table Grid"
                    # Add table headers
                    hdr_colum = table_b.rows[0].cells
                    hdr_colum[0].text = "PRODUIT"
                    hdr_colum[1].text = "STOCK"
                    for hdr_colum in table_b.rows[0].cells:
                        hdr_colum.paragraphs[0].runs[0].font.name = 'Calibri'
                        hdr_colum.paragraphs[0].runs[0].font.size = Pt(10.5)
                        hdr_colum.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        hdr_colum.paragraphs[0].runs[0].font.bold = True
                        hdr_colum.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    hdr_colum = table_b.rows[1].cells
                    hdr_colum[0].text = "POIS CHICHES PL"
                    hdr_colum[1].text = ""
                    hdr_colum = table_b.rows[2].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 12 mm"
                    hdr_colum[1].text = self.restpoichichedouze + "  QX"
                    hdr_colum = table_b.rows[3].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 09 mm"
                    hdr_colum[1].text = self.restpoichicheneuf + " QX"
                    hdr_colum = table_b.rows[4].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 08 mm"
                    hdr_colum[1].text = self.restpoichicheouit + " QX"
                    hdr_colum = table_b.rows[5].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 06 mm"
                    hdr_colum[1].text = self.restpoichiche + " QX"
                    hdr_colum = table_b.rows[6].cells
                    hdr_colum[0].text = "HARICOT BLANC IMP"
                    hdr_colum[1].text = self.restharicotimp + " QX"
                    hdr_colum = table_b.rows[7].cells
                    hdr_colum[0].text = "HARICOT LSB"
                    hdr_colum[1].text = self.restharicotlsb + " QX"
                    hdr_colum = table_b.rows[8].cells
                    hdr_colum[0].text = "LENTILLE PL"
                    hdr_colum[1].text = self.restlenpl + " QX"
                    hdr_colum = table_b.rows[9].cells
                    hdr_colum[0].text = "LENTILLE IMP 05-07 mm"
                    hdr_colum[1].text = self.restlentsinq + " QX"
                    hdr_colum = table_b.rows[10].cells
                    hdr_colum[0].text = "LENTILLE IMP vert"
                    hdr_colum[1].text = self.restlentvert + " QX"
                    hdr_colum = table_b.rows[11].cells
                    hdr_colum[0].text = "LENTILLE IMP ROUGE"
                    hdr_colum[1].text = self.restlentrouge + " QX"
                    hdr_colum = table_b.rows[12].cells
                    hdr_colum[0].text = "RIZ IMP"
                    hdr_colum[1].text = self.resulxtt + " QX"
                    hdr_colum = table_b.rows[13].cells
                    hdr_colum[0].text = "RIZ ETUVE"
                    hdr_colum[1].text = self.resulxtt + " QX"
                    for row in table_b.rows[1:14]:
                        for cell in row.cells:
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False

                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "open")
                    conn.close()
                elif self.selected_produit == "" and self.selected_magasin == "" and self.selected_origine == "" and self.selected_expediteur == "" and self.selected_dates == "--" and self.selected_datesAU == "--":

                    conn = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                   database="datta_legumesec_entry")
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT le,produit,origine,quantité,unité,sacherie,fournisseur,imatricule,date_recolte,date_CND,DLUM FROM entrytable")
                    rows = cursor.fetchall()

                    ########################################################################

                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\t\t\t\tSITUATION DES STOCKS DES LEGUMES SECS\n\t\t\t\t\t\t\t    PRODUITS RÉCEPTIONNER',
                        level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(14)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading
                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(9)
                    left_run = paragraph.add_run('\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True
                    current_date = QDate.currentDate().getDate()
                    right_run = paragraph.add_run(
                        "Date d'édition : {}/{}/{}".format(current_date[2], current_date[1], current_date[0]))
                    right_run.bold = False
                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'PRODUIT'
                    hdr_cells[2].text = 'ORIGINE'
                    hdr_cells[3].text = 'QUANTITE'
                    hdr_cells[4].text = 'MAGASIN DE STOCK'
                    hdr_cells[5].text = 'SASHERIE  CND'
                    hdr_cells[6].text = 'FOURNISSEUR'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(0.5)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2)
                    hdr_cells[2].width = Inches(1)
                    hdr_cells[3].width = Inches(0.4)
                    hdr_cells[4].width = Inches(1.3)
                    hdr_cells[5].width = Inches(1)
                    hdr_cells[6].width = Inches(1)
                    hdr_cells[7].width = Inches(1)
                    hdr_cells[8].width = Inches(0.5)
                    hdr_cells[9].width = Inches(0.5)
                    hdr_cells[10].width = Inches(0.5)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                        cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        cell.paragraphs[0].runs[0].font.bold = True
                        cell.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(9.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.3)
                    # Create the document
                    # Create the table
                    self.doc.add_paragraph().add_run().add_break()
                    table_b = self.doc.add_table(rows=14, cols=2)
                    table_b.style = "Table Grid"
                    # Add table headers
                    hdr_colum = table_b.rows[0].cells
                    hdr_colum[0].text = "PRODUIT"
                    hdr_colum[1].text = "STOCK"
                    for hdr_colum in table_b.rows[0].cells:
                        hdr_colum.paragraphs[0].runs[0].font.name = 'Calibri'
                        hdr_colum.paragraphs[0].runs[0].font.size = Pt(10.5)
                        hdr_colum.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        hdr_colum.paragraphs[0].runs[0].font.bold = True
                        hdr_colum.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    hdr_colum = table_b.rows[1].cells
                    hdr_colum[0].text = "POIS CHICHES PL"
                    hdr_colum[1].text = self.restpoischichepltt + "  QX"
                    hdr_colum = table_b.rows[2].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 12 mm"
                    hdr_colum[1].text = self.restpoichichedouzett + "  QX"
                    hdr_colum = table_b.rows[3].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 09 mm"
                    hdr_colum[1].text = self.restpoichicheneuftt + " QX"
                    hdr_colum = table_b.rows[4].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 08 mm"
                    hdr_colum[1].text = self.restpoichicheouittt + " QX"
                    hdr_colum = table_b.rows[5].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 06 mm"
                    hdr_colum[1].text = self.restpoichichett + " QX"
                    hdr_colum = table_b.rows[6].cells
                    hdr_colum[0].text = "HARICOT BLANC IMP"
                    hdr_colum[1].text = self.restharicotimptt + " QX"
                    hdr_colum = table_b.rows[7].cells
                    hdr_colum[0].text = "HARICOT LSB"
                    hdr_colum[1].text = self.restharicotlsbtt + " QX"
                    hdr_colum = table_b.rows[8].cells
                    hdr_colum[0].text = "LENTILLE PL"
                    hdr_colum[1].text = self.restlenpltt + " QX"
                    hdr_colum = table_b.rows[9].cells
                    hdr_colum[0].text = "LENTILLE IMP 05-07 mm"
                    hdr_colum[1].text = self.restlentsinqtt + " QX"
                    hdr_colum = table_b.rows[10].cells
                    hdr_colum[0].text = "LENTILLE IMP vert"
                    hdr_colum[1].text = self.restlentvertt + " QX"
                    hdr_colum = table_b.rows[11].cells
                    hdr_colum[0].text = "LENTILLE IMP ROUGE"
                    hdr_colum[1].text = self.restlentrougett + " QX"
                    hdr_colum = table_b.rows[12].cells
                    hdr_colum[0].text = "RIZ IMP"
                    hdr_colum[1].text = self.resultt + " QX"
                    hdr_colum = table_b.rows[13].cells
                    hdr_colum[0].text = "RIZ ETUVE"
                    hdr_colum[1].text = self.resuletv + " QX"
                    for row in table_b.rows[1:14]:
                        for cell in row.cells:
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "open")
                elif self.selected_produit == "" and self.selected_magasin == "" and self.selected_origine == "" and self.selected_dates and self.selected_datesAU:

                    conn = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                   database="datta_legumesec_entry")
                    dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                         database='datta_legumsec_out')
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT le,produit,origine,quantité,unité,sacherie,fournisseur, imatricule, date_CND, DLUM FROM entrytable WHERE le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    rows = cursor.fetchall()
                    curs1x = dattabase1.cursor()
                    curs1x.execute(
                        "SELECT SUM(quantitérizentré) - SUM(quantitérizesorté) as quantitérizerest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    self.resulxs = curs1x.fetchone()
                    self.resulxttm = str(self.resulxs[0])
                    curs1xtv = dattabase1.cursor()
                    curs1xtv.execute(
                        "SELECT SUM(quantitérizetvntré) - SUM(quantitérizetvsorté) as quantitérizetvrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    self.resulxstv = curs1xtv.fetchone()
                    self.resulxtttvm = str(self.resulxs[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitepchentré) - sum(quantitépchsorté) as quantitépchrest  FROM outtable   WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichedouzettsd = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichettm = str(resultpch_att[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischicheplttm = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenplttm = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentvertttm = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougettm = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimpttm = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbttm = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneufttm = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouitttm = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqttm = str(resultlensinqtt[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultpch_attm = curstt.fetchone()
                    self.restpoichichett = str(resultpch_att[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischicheplttm = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenplttm = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentvertttm = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougettm = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimptt = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbttm = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneufttm = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouitttm = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqttm = str(resultlensinqtt[0])

                    ########################################################################
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\t\t\t\tSITUATION DES STOCKS DES LEGUMES SECS\n\t\t\t\t\t\t\t    PRODUITS RÉCEPTIONNER',
                        level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(14)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading
                    paragraph0 = self.doc.add_paragraph()
                    paragraph0.style.font.name = 'Times New Roman'
                    left_run0 = paragraph0.add_run(
                        'Période du :' + self.selected_dates + "  au:" + self.selected_datesAU)
                    paragraph0.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

                    paragraph1 = self.doc.add_paragraph()
                    paragraph1.style.font.name = 'Times New Roman'
                    current_date = QDate.currentDate().getDate()
                    left_run1 = paragraph1.add_run(
                        "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Date d'édition : {}/{}/{}".format(current_date[2],
                                                                                                current_date[1],
                                                                                                current_date[0]))
                    left_run1.font.size = Pt(9)

                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(12)
                    left_run = paragraph.add_run(self.selected_magasin + '\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True

                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'PRODUIT'
                    hdr_cells[2].text = 'ORIGINE'
                    hdr_cells[3].text = 'QUANTITE'
                    hdr_cells[4].text = 'MAGASIN DE STOCK'
                    hdr_cells[5].text = 'SASHERIE  CND'
                    hdr_cells[6].text = 'EXPIDITEUR'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(0.5)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2)
                    hdr_cells[2].width = Inches(1)
                    hdr_cells[3].width = Inches(0.4)
                    hdr_cells[4].width = Inches(1.3)
                    hdr_cells[5].width = Inches(1)
                    hdr_cells[6].width = Inches(1)
                    hdr_cells[7].width = Inches(1)
                    hdr_cells[8].width = Inches(0.5)
                    hdr_cells[9].width = Inches(0.5)
                    hdr_cells[10].width = Inches(0.5)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                        cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        cell.paragraphs[0].runs[0].font.bold = True
                        cell.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(9.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.3)
                    # Create the document
                    # Create the table
                    self.doc.add_paragraph().add_run().add_break()
                    table_b = self.doc.add_table(rows=14, cols=2)
                    table_b.style = "Table Grid"
                    # Add table headers
                    hdr_colum = table_b.rows[0].cells
                    hdr_colum[0].text = "PRODUIT"
                    hdr_colum[1].text = "STOCK"
                    for hdr_colum in table_b.rows[0].cells:
                        hdr_colum.paragraphs[0].runs[0].font.name = 'Calibri'
                        hdr_colum.paragraphs[0].runs[0].font.size = Pt(10.5)
                        hdr_colum.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        hdr_colum.paragraphs[0].runs[0].font.bold = True
                        hdr_colum.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    hdr_colum = table_b.rows[1].cells
                    hdr_colum[0].text = "POIS CHICHES PL"
                    hdr_colum[1].text = ""
                    hdr_colum = table_b.rows[2].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 12 mm"
                    hdr_colum[1].text = self.restpoichichedouzettsd + "  QX"
                    hdr_colum = table_b.rows[3].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 09 mm"
                    hdr_colum[1].text = self.restpoichicheneufttm + " QX"
                    hdr_colum = table_b.rows[4].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 08 mm"
                    hdr_colum[1].text = self.restpoichicheouitttm + " QX"
                    hdr_colum = table_b.rows[5].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 06 mm"
                    hdr_colum[1].text = self.restpoichichettm + " QX"
                    hdr_colum = table_b.rows[6].cells
                    hdr_colum[0].text = "HARICOT BLANC IMP"
                    hdr_colum[1].text = self.restharicotimpttm + " QX"
                    hdr_colum = table_b.rows[7].cells
                    hdr_colum[0].text = "HARICOT LSB"
                    hdr_colum[1].text = self.restharicotlsbttm + " QX"
                    hdr_colum = table_b.rows[8].cells
                    hdr_colum[0].text = "LENTILLE PL"
                    hdr_colum[1].text = self.restlenplttm + " QX"
                    hdr_colum = table_b.rows[9].cells
                    hdr_colum[0].text = "LENTILLE IMP 05-07 mm"
                    hdr_colum[1].text = self.restlentsinqttm + " QX"
                    hdr_colum = table_b.rows[10].cells
                    hdr_colum[0].text = "LENTILLE IMP vert"
                    hdr_colum[1].text = self.restlentvertttm + " QX"
                    hdr_colum = table_b.rows[11].cells
                    hdr_colum[0].text = "LENTILLE IMP ROUGE"
                    hdr_colum[1].text = self.restlentrougettm + " QX"
                    hdr_colum = table_b.rows[12].cells
                    hdr_colum[0].text = "RIZ IMP"
                    hdr_colum[1].text = self.resulxttm + " QX"
                    hdr_colum = table_b.rows[13].cells
                    hdr_colum[0].text = "RIZ ETUVE"
                    hdr_colum[1].text = self.resulxttm + " QX"
                    for row in table_b.rows[1:14]:
                        for cell in row.cells:
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "open")
                    conn.close()
                elif self.selected_produit == "" and self.selected_magasin and self.selected_origine == "" and self.selected_dates == "--" and self.selected_datesAU == "--":

                    conn = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                   database="datta_legumesec_entry")
                    dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                         database='datta_legumsec_out')
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT le,produit,origine,quantité,unité,sacherie,fournisseur, imatricule,date_recolte,date_CND,DLUM FROM entrytable WHERE unité = %s",
                        (self.selected_magasin,))
                    rows = cursor.fetchall()
                    curs1x = dattabase1.cursor()
                    curs1x.execute(
                        "SELECT SUM(quantitérizentré) - SUM(quantitérizesorté) as quantitérizerest FROM outtable WHERE  unité=%s",
                        (self.selected_magasin,))
                    self.resulxs = curs1x.fetchone()
                    self.resulxttm = str(self.resulxs[0])
                    curs1xtv = dattabase1.cursor()
                    curs1xtv.execute(
                        "SELECT SUM(quantitérizetvntré) - SUM(quantitérizetvsorté) as quantitérizetvrest FROM outtable WHERE  unité=%s",
                        (self.selected_magasin,))
                    self.resulxstv = curs1xtv.fetchone()
                    self.resulxtttvm = str(self.resulxstv[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitepchentré) - sum(quantitépchsorté) as quantitépchrest  FROM outtable   WHERE   unité=%s",
                        (self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichedouzettm = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable WHERE   unité=%s",
                        (self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichettm = str(resultpch_att[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable WHERE   unité=%s",
                        (self.selected_magasin,))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischicheplttm = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable WHERE   unité=%s",
                        (self.selected_magasin,))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenplttm = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE   unité=%s",
                        (self.selected_magasin,))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentvertttm = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE   unité=%s",
                        (self.selected_magasin,))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougettm = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE   unité=%s",
                        (self.selected_magasin,))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimpttm = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable WHERE   unité=%s",
                        (self.selected_magasin,))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbttm = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable   WHERE unité=%s",
                        (self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneufttm = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE   unité=%s",
                        (self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouitttm = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE   unité=%s",
                        (self.selected_magasin,))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqttm = str(resultlensinqtt[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable  WHERE unité=%s",
                        (self.selected_magasin,))
                    resultpch_attm = curstt.fetchone()
                    self.restpoichichett = str(resultpch_att[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable   WHERE unité=%s",
                        (self.selected_magasin,))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischicheplttm = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable  WHERE unité=%s",
                        (self.selected_magasin,))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenplttm = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE unité=%s",
                        (self.selected_magasin,))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentvertttm = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE unité=%s",
                        (self.selected_magasin,))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougettm = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE  unité=%s",
                        (self.selected_magasin,))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimptt = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable   WHERE unité=%s",
                        (self.selected_magasin,))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbttm = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable  WHERE unité=%s",
                        (self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneufttm = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE unité=%s",
                        (self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouitttm = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE  unité=%s",
                        (self.selected_magasin,))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqttm = str(resultlensinqtt[0])

                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\t\t\t\tSITUATION DES STOCKS DES LEGUMES SECS\n\t\t\t\t\t\t\t    PRODUITS RÉCEPTIONNER',
                        level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(14)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading

                    paragraph1 = self.doc.add_paragraph()
                    paragraph1.style.font.name = 'Times New Roman'
                    current_date = QDate.currentDate().getDate()
                    left_run1 = paragraph1.add_run(
                        "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Date d'édition : {}/{}/{}".format(current_date[2],
                                                                                                current_date[1],
                                                                                                current_date[0]))
                    left_run1.font.size = Pt(9)

                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(12)
                    left_run = paragraph.add_run(self.selected_magasin + '\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True

                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'PRODUIT'
                    hdr_cells[2].text = 'ORIGINE'
                    hdr_cells[3].text = 'QUANTITE'
                    hdr_cells[4].text = 'MAGASIN DE STOCK'
                    hdr_cells[5].text = 'SASHERIE  CND'
                    hdr_cells[6].text = 'EXPIDITEUR'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(0.5)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2)
                    hdr_cells[2].width = Inches(1)
                    hdr_cells[3].width = Inches(0.4)
                    hdr_cells[4].width = Inches(1.3)
                    hdr_cells[5].width = Inches(1)
                    hdr_cells[6].width = Inches(1)
                    hdr_cells[7].width = Inches(1)
                    hdr_cells[8].width = Inches(0.5)
                    hdr_cells[9].width = Inches(0.5)
                    hdr_cells[10].width = Inches(0.5)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                        cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        cell.paragraphs[0].runs[0].font.bold = True
                        cell.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(9.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.3)
                    # Create the document
                    # Create the table
                    self.doc.add_paragraph().add_run().add_break()
                    table_b = self.doc.add_table(rows=14, cols=2)
                    table_b.style = "Table Grid"
                    # Add table headers
                    hdr_colum = table_b.rows[0].cells
                    hdr_colum[0].text = "PRODUIT"
                    hdr_colum[1].text = "STOCK"
                    for hdr_colum in table_b.rows[0].cells:
                        hdr_colum.paragraphs[0].runs[0].font.name = 'Calibri'
                        hdr_colum.paragraphs[0].runs[0].font.size = Pt(10.5)
                        hdr_colum.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        hdr_colum.paragraphs[0].runs[0].font.bold = True
                        hdr_colum.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    hdr_colum = table_b.rows[1].cells
                    hdr_colum[0].text = "POIS CHICHES PL"
                    hdr_colum[1].text = ""
                    hdr_colum = table_b.rows[2].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 12 mm"
                    hdr_colum[1].text = self.restpoichichedouzettm + "  QX"
                    hdr_colum = table_b.rows[3].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 09 mm"
                    hdr_colum[1].text = self.restpoichicheneufttm + " QX"
                    hdr_colum = table_b.rows[4].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 08 mm"
                    hdr_colum[1].text = self.restpoichicheouitttm + " QX"
                    hdr_colum = table_b.rows[5].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 06 mm"
                    hdr_colum[1].text = self.restpoichichettm + " QX"
                    hdr_colum = table_b.rows[6].cells
                    hdr_colum[0].text = "HARICOT BLANC IMP"
                    hdr_colum[1].text = self.restharicotimpttm + " QX"
                    hdr_colum = table_b.rows[7].cells
                    hdr_colum[0].text = "HARICOT LSB"
                    hdr_colum[1].text = self.restharicotlsbttm + " QX"
                    hdr_colum = table_b.rows[8].cells
                    hdr_colum[0].text = "LENTILLE PL"
                    hdr_colum[1].text = self.restlenplttm + " QX"
                    hdr_colum = table_b.rows[9].cells
                    hdr_colum[0].text = "LENTILLE IMP 05-07 mm"
                    hdr_colum[1].text = self.restlentsinqttm + " QX"
                    hdr_colum = table_b.rows[10].cells
                    hdr_colum[0].text = "LENTILLE IMP vert"
                    hdr_colum[1].text = self.restlentvertttm + " QX"
                    hdr_colum = table_b.rows[11].cells
                    hdr_colum[0].text = "LENTILLE IMP ROUGE"
                    hdr_colum[1].text = self.restlentrougettm + " QX"
                    hdr_colum = table_b.rows[12].cells
                    hdr_colum[0].text = "RIZ IMP"
                    hdr_colum[1].text = self.resulxttm + " QX"
                    hdr_colum = table_b.rows[13].cells
                    hdr_colum[0].text = "RIZ ETUVE"
                    hdr_colum[1].text = self.resulxttm + " QX"
                    for row in table_b.rows[1:14]:
                        for cell in row.cells:
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "open")
                    conn.close()
                elif self.selected_produit and self.selected_magasin == "" and self.selected_origine == "" and self.selected_dates == "--" and self.selected_datesAU == "--":
                    conn = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                   database="datta_legumesec_entry")
                    dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                         database='datta_legumsec_out')
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT le, produit, origine, quantité, unité, sacherie, fournisseur, imatricule,date_recolte, date_CND, DLUM FROM entrytable WHERE produit = %s",
                        (self.selected_produit,))
                    rows = cursor.fetchall()
                    curs1x = dattabase1.cursor()
                    curs1x.execute(
                        "SELECT SUM(quantitérizentré) - SUM(quantitérizesorté) as quantitérizerest FROM outtable WHERE  produit= %s",
                        (self.selected_produit,))
                    self.resulxs = curs1x.fetchone()
                    self.resulxttp = str(self.resulxs[0])
                    curs1xtv = dattabase1.cursor()
                    curs1xtv.execute(
                        "SELECT SUM(quantitérizetvntré) - SUM(quantitérizetvsorté) as quantitérizetvrest FROM outtable WHERE  produit= %s",
                        (self.selected_produit,))
                    self.resulxstv = curs1xtv.fetchone()
                    self.resulxtttvp = str(self.resulxstv[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitepchentré) - sum(quantitépchsorté) as quantitépchrest  FROM outtable   WHERE   produit=%s",
                        (self.selected_produit,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichedouzettp = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable WHERE   produit=%s",
                        (self.selected_produit,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichettp = str(resultpch_att[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable WHERE   produit=%s",
                        (self.selected_produit,))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischicheplttp = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable WHERE   produit=%s",
                        (self.selected_produit,))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenplttp = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE   produit=%s",
                        (self.selected_produit,))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentvertttp = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE   produit=%s",
                        (self.selected_produit,))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougettp = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE   produit=%s",
                        (self.selected_produit,))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimpttp = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable WHERE   produit=%s",
                        (self.selected_produit,))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbttp = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable   WHERE produit=%s",
                        (self.selected_produit,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneufttp = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE   produit=%s",
                        (self.selected_produit,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouitttp = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE   produit=%s",
                        (self.selected_produit,))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqttp = str(resultlensinqtt[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable  WHERE produit=%s",
                        (self.selected_produit,))
                    resultpch_attp = curstt.fetchone()
                    self.restpoichichettp = str(resultpch_attp[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable   WHERE produit=%s",
                        (self.selected_produit,))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischicheplttp = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable  WHERE produit=%s",
                        (self.selected_produit,))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenplttp = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE produit=%s",
                        (self.selected_produit,))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentvertttp = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE produit=%s",
                        (self.selected_produit,))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougettp = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE  produit=%s",
                        (self.selected_produit,))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimpttp = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable   WHERE produit=%s",
                        (self.selected_produit,))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbttp = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable  WHERE produit=%s",
                        (self.selected_produit,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneufttp = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE produit=%s",
                        (self.selected_produit,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouitttp = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE  produit=%s",
                        (self.selected_produit,))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqttp = str(resultlensinqtt[0])
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\t\t\t\tSITUATION DES STOCKS DES LEGUMES SECS\n\t\t\t\t\t\t\t    PRODUITS RÉCEPTIONNER',
                        level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(14)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading

                    paragraph1 = self.doc.add_paragraph()
                    paragraph1.style.font.name = 'Times New Roman'
                    current_date = QDate.currentDate().getDate()
                    left_run1 = paragraph1.add_run(
                        "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Date d'édition : {}/{}/{}".format(current_date[2],
                                                                                                current_date[1],
                                                                                                current_date[0]))
                    left_run1.font.size = Pt(9)

                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(12)
                    left_run = paragraph.add_run("PRODUIT :" + self.selected_produit + '\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True

                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'PRODUIT'
                    hdr_cells[2].text = 'ORIGINE'
                    hdr_cells[3].text = 'QUANTITE'
                    hdr_cells[4].text = 'MAGASIN DE STOCK'
                    hdr_cells[5].text = 'SASHERIE  CND'
                    hdr_cells[6].text = 'EXPIDITEUR'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(0.5)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2)
                    hdr_cells[2].width = Inches(1)
                    hdr_cells[3].width = Inches(0.4)
                    hdr_cells[4].width = Inches(1.3)
                    hdr_cells[5].width = Inches(1)
                    hdr_cells[6].width = Inches(1)
                    hdr_cells[7].width = Inches(1)
                    hdr_cells[8].width = Inches(0.5)
                    hdr_cells[9].width = Inches(0.5)
                    hdr_cells[10].width = Inches(0.5)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                        cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        cell.paragraphs[0].runs[0].font.bold = True
                        cell.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(9.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.3)
                    # Create the document
                    # Create the table
                    self.doc.add_paragraph().add_run().add_break()
                    table_b = self.doc.add_table(rows=2, cols=2)
                    table_b.style = "Table Grid"
                    # Add table headers
                    hdr_colum = table_b.rows[0].cells
                    hdr_colum[0].text = "PRODUIT"
                    hdr_colum[1].text = "STOCK"
                    for hdr_colum in table_b.rows[0].cells:
                        hdr_colum.paragraphs[0].runs[0].font.name = 'Calibri'
                        hdr_colum.paragraphs[0].runs[0].font.size = Pt(10.5)
                        hdr_colum.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        hdr_colum.paragraphs[0].runs[0].font.bold = True
                        hdr_colum.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    hdr_colum = table_b.rows[1].cells

                    if self.selected_produit == "POIS CHICHES IMP 12 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restpoichichedouzettp + "  QX"

                    if self.selected_produit == "POIS CHICHES IMP 12 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restpoichichedouzettp + "  QX"
                    if self.selected_produit == "POIS CHICHES IMP 09 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restpoichicheneufttp + " QX"
                    if self.selected_produit == "POIS CHICHES IMP 08 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restpoichicheouitttp + " QX"
                    if self.selected_produit == "POIS CHICHES IMP 06 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restpoichichettp + " QX"
                    if self.selected_produit == "HARICOT BLANC IMP":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restharicotimpttp + " QX"
                    if self.selected_produit == "HARICOT LSB":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restharicotlsbttp + " QX"
                    if self.selected_produit == "LENTILLE PL":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restlenplttp + " QX"
                    if self.selected_produit == "LENTILLE IMP 05-07 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restlentsinqttp + " QX"
                    if self.selected_produit == "LENTILLE IMP vert":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restlentvertttp + " QX"
                    if self.selected_produit == "LENTILLE IMP ROUGE":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restlentrougettp + " QX"
                    if self.selected_produit == "RIZ IMP":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.resulxttp + " QX"
                    if self.selected_produit == "RIZ ETUVE":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.resulxtttvp + " QX"
                    for row in table_b.rows[1:2]:
                        for cell in row.cells:
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "open")
                    conn.close()
                elif self.selected_produit and self.selected_magasin and self.selected_origine == "" and self.selected_dates == "--" and self.selected_datesAU == "--":
                    conn = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                   database="datta_legumesec_entry")
                    dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                         database='datta_legumsec_out')
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT le,produit,origine,quantité,unité,sacherie,fournisseur, imatricule,date_recolte,date_CND, DLUM FROM entrytable WHERE produit = %s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    rows = cursor.fetchall()
                    curs1x = dattabase1.cursor()
                    curs1x.execute(
                        "SELECT SUM(quantitérizentré) - SUM(quantitérizesorté) as quantitérizerest FROM outtable WHERE  produit= %s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    self.resulxs = curs1x.fetchone()
                    self.resulxttp = str(self.resulxs[0])
                    curs1xtv = dattabase1.cursor()
                    curs1xtv.execute(
                        "SELECT SUM(quantitérizetvntré) - SUM(quantitérizetvsorté) as quantitérizetvrest FROM outtable WHERE  produit= %s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    self.resulxstv = curs1xtv.fetchone()
                    self.resulxtttvp = str(self.resulxstv[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitepchentré) - sum(quantitépchsorté) as quantitépchrest  FROM outtable   WHERE   produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichedouzettp = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable WHERE   produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichettp = str(resultpch_att[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable WHERE   produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischicheplttp = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable WHERE   produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenplttp = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE   produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentvertttp = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE   produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougettp = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE   produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimpttp = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable WHERE   produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbttp = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable   WHERE produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneufttp = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE   produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouitttp = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE   produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqttp = str(resultlensinqtt[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable  WHERE produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultpch_attp = curstt.fetchone()
                    self.restpoichichettp = str(resultpch_attp[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable   WHERE produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischicheplttp = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable  WHERE produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenplttp = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentvertttp = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougettp = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE  produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimpttp = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable   WHERE produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbttp = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable  WHERE produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneufttp = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouitttp = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE  produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqttp = str(resultlensinqtt[0])
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\t\t\t\tSITUATION DES STOCKS DES LEGUMES SECS\n\t\t\t\t\t\t\t    PRODUITS RÉCEPTIONNER',
                        level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(14)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading

                    paragraph1 = self.doc.add_paragraph()
                    paragraph1.style.font.name = 'Times New Roman'
                    current_date = QDate.currentDate().getDate()
                    left_run1 = paragraph1.add_run(
                        "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Date d'édition : {}/{}/{}".format(current_date[2],
                                                                                                current_date[1],
                                                                                                current_date[0]))
                    left_run1.font.size = Pt(9)

                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(12)
                    left_run = paragraph.add_run(
                        self.selected_magasin + "\nPRODUIT :" + self.selected_produit + '\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True

                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'PRODUIT'
                    hdr_cells[2].text = 'ORIGINE'
                    hdr_cells[3].text = 'QUANTITE'
                    hdr_cells[4].text = 'MAGASIN DE STOCK'
                    hdr_cells[5].text = 'SASHERIE  CND'
                    hdr_cells[6].text = 'EXPIDITEUR'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(0.5)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2)
                    hdr_cells[2].width = Inches(1)
                    hdr_cells[3].width = Inches(0.4)
                    hdr_cells[4].width = Inches(1.3)
                    hdr_cells[5].width = Inches(1)
                    hdr_cells[6].width = Inches(1)
                    hdr_cells[7].width = Inches(1)
                    hdr_cells[8].width = Inches(0.5)
                    hdr_cells[9].width = Inches(0.5)
                    hdr_cells[10].width = Inches(0.5)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                        cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        cell.paragraphs[0].runs[0].font.bold = True
                        cell.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(9.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.3)
                    # Create the document
                    # Create the table
                    self.doc.add_paragraph().add_run().add_break()
                    table_b = self.doc.add_table(rows=2, cols=2)
                    table_b.style = "Table Grid"
                    # Add table headers
                    hdr_colum = table_b.rows[0].cells
                    hdr_colum[0].text = "PRODUIT"
                    hdr_colum[1].text = "STOCK"
                    for hdr_colum in table_b.rows[0].cells:
                        hdr_colum.paragraphs[0].runs[0].font.name = 'Calibri'
                        hdr_colum.paragraphs[0].runs[0].font.size = Pt(10.5)
                        hdr_colum.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        hdr_colum.paragraphs[0].runs[0].font.bold = True
                        hdr_colum.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    hdr_colum = table_b.rows[1].cells

                    if self.selected_produit == "POIS CHICHES IMP 12 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restpoichichedouzettp + "  QX"

                    if self.selected_produit == "POIS CHICHES IMP 12 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restpoichichedouzettp + "  QX"
                    if self.selected_produit == "POIS CHICHES IMP 09 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restpoichicheneufttp + " QX"
                    if self.selected_produit == "POIS CHICHES IMP 08 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restpoichicheouitttp + " QX"
                    if self.selected_produit == "POIS CHICHES IMP 06 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restpoichichettp + " QX"
                    if self.selected_produit == "HARICOT BLANC IMP":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restharicotimpttp + " QX"
                    if self.selected_produit == "HARICOT LSB":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restharicotlsbttp + " QX"
                    if self.selected_produit == "LENTILLE PL":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restlenplttp + " QX"
                    if self.selected_produit == "LENTILLE IMP 05-07 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restlentsinqttp + " QX"
                    if self.selected_produit == "LENTILLE IMP vert":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restlentvertttp + " QX"
                    if self.selected_produit == "LENTILLE IMP ROUGE":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restlentrougettp + " QX"
                    if self.selected_produit == "RIZ IMP":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.resulxttp + " QX"
                    if self.selected_produit == "RIZ ETUVE":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.resulxtttvp + " QX"
                    for row in table_b.rows[1:2]:
                        for cell in row.cells:
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "open")
                    conn.close()
                elif self.selected_produit == "" and self.selected_magasin == "" and self.selected_origine and self.selected_dates == "--" and self.selected_datesAU == "--":
                    conn = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                   database="datta_legumesec_entry")
                    dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                         database='datta_legumsec_out')
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT le,produit,origine,quantité,produit,sacherie,fournisseur, imatricule,date_recolte,date_CND, DLUM FROM entrytable WHERE origine=%s",
                        (self.selected_origine,))
                    rows = cursor.fetchall()
                    curs1x = dattabase1.cursor()
                    curs1x.execute(
                        "SELECT SUM(quantitérizentré) - SUM(quantitérizesorté) as quantitérizerest FROM outtable WHERE origine=%s",
                        (self.selected_origine,))
                    self.resulxs = curs1x.fetchone()
                    self.resulxtto = str(self.resulxs[0])
                    curs1xtv = dattabase1.cursor()
                    curs1xtv.execute(
                        "SELECT SUM(quantitérizetvntré) - SUM(quantitérizetvsorté) as quantitérizetvrest FROM outtable WHERE origine=%s",
                        (self.selected_origine,))
                    self.resulxstv = curs1xtv.fetchone()
                    self.resulxtttvo = str(self.resulxstv[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitepchentré) - sum(quantitépchsorté) as quantitépchrest  FROM outtable   WHERE  origine=%s",
                        (self.selected_origine,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichedouzetto = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable WHERE  origine=%s",
                        (self.selected_origine,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichetto = str(resultpch_att[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable WHERE  origine=%s",
                        (self.selected_origine,))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischichepltto = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable WHERE  origine=%s",
                        (self.selected_origine,))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenpltto = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE  origine=%s",
                        (self.selected_origine,))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentverttto = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE  origine=%s",
                        (self.selected_origine,))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougetto = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE  origine=%s",
                        (self.selected_origine,))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimptto = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable WHERE  origine=%s",
                        (self.selected_origine,))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbtto = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable  WHERE origine=%s",
                        (self.selected_origine,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneuftto = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE  origine=%s",
                        (self.selected_origine,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouittto = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE  origine=%s",
                        (self.selected_origine,))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqtto = str(resultlensinqtt[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable  WHERE origine=%s",
                        (self.selected_origine,))
                    resultpch_atto = curstt.fetchone()
                    self.restpoichichett = str(resultpch_att[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable   WHERE origine=%s",
                        (self.selected_origine,))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischichepltto = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable  WHERE origine=%s",
                        (self.selected_origine,))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenpltto = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE origine=%s",
                        (self.selected_origine,))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentverttto = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE origine=%s",
                        (self.selected_origine,))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougetto = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE origine=%s",
                        (self.selected_origine,))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimptt = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable   WHERE origine=%s",
                        (self.selected_origine,))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbtto = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable  WHERE origine=%s",
                        (self.selected_origine,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneuftto = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE origine=%s",
                        (self.selected_origine,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouittto = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE origine=%s",
                        (self.selected_origine,))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqtto = str(resultlensinqtt[0])
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\t\t\t\tSITUATION DES STOCKS DES LEGUMES SECS\n\t\t\t\t\t\t\t    PRODUITS RÉCEPTIONNER',
                        level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(14)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading

                    paragraph1 = self.doc.add_paragraph()
                    paragraph1.style.font.name = 'Times New Roman'
                    current_date = QDate.currentDate().getDate()
                    left_run1 = paragraph1.add_run(
                        "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Date d'édition : {}/{}/{}".format(current_date[2],
                                                                                                current_date[1],
                                                                                                current_date[0]))
                    left_run1.font.size = Pt(9)

                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(12)
                    left_run = paragraph.add_run(self.selected_magasin + '\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True

                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'PRODUIT'
                    hdr_cells[2].text = 'ORIGINE'
                    hdr_cells[3].text = 'QUANTITE'
                    hdr_cells[4].text = 'MAGASIN DE STOCK'
                    hdr_cells[5].text = 'SASHERIE  CND'
                    hdr_cells[6].text = 'EXPIDITEUR'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(0.5)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2)
                    hdr_cells[2].width = Inches(1)
                    hdr_cells[3].width = Inches(0.4)
                    hdr_cells[4].width = Inches(1.3)
                    hdr_cells[5].width = Inches(1)
                    hdr_cells[6].width = Inches(1)
                    hdr_cells[7].width = Inches(1)
                    hdr_cells[8].width = Inches(0.5)
                    hdr_cells[9].width = Inches(0.5)
                    hdr_cells[10].width = Inches(0.5)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                        cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        cell.paragraphs[0].runs[0].font.bold = True
                        cell.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(9.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.3)
                    # Create the document
                    # Create the table
                    self.doc.add_paragraph().add_run().add_break()
                    table_b = self.doc.add_table(rows=14, cols=2)
                    table_b.style = "Table Grid"
                    # Add table headers
                    hdr_colum = table_b.rows[0].cells
                    hdr_colum[0].text = "PRODUIT"
                    hdr_colum[1].text = "STOCK"
                    for hdr_colum in table_b.rows[0].cells:
                        hdr_colum.paragraphs[0].runs[0].font.name = 'Calibri'
                        hdr_colum.paragraphs[0].runs[0].font.size = Pt(10.5)
                        hdr_colum.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        hdr_colum.paragraphs[0].runs[0].font.bold = True
                        hdr_colum.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    hdr_colum = table_b.rows[1].cells
                    hdr_colum[0].text = "POIS CHICHES PL"
                    hdr_colum[1].text = ""
                    hdr_colum = table_b.rows[2].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 12 mm"
                    hdr_colum[1].text = self.restpoichichedouzetto + "  QX"
                    hdr_colum = table_b.rows[3].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 09 mm"
                    hdr_colum[1].text = self.restpoichicheneuftto + " QX"
                    hdr_colum = table_b.rows[4].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 08 mm"
                    hdr_colum[1].text = self.restpoichicheouittto + " QX"
                    hdr_colum = table_b.rows[5].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 06 mm"
                    hdr_colum[1].text = self.restpoichichetto + " QX"
                    hdr_colum = table_b.rows[6].cells
                    hdr_colum[0].text = "HARICOT BLANC IMP"
                    hdr_colum[1].text = self.restharicotimptto + " QX"
                    hdr_colum = table_b.rows[7].cells
                    hdr_colum[0].text = "HARICOT LSB"
                    hdr_colum[1].text = self.restharicotlsbtto + " QX"
                    hdr_colum = table_b.rows[8].cells
                    hdr_colum[0].text = "LENTILLE PL"
                    hdr_colum[1].text = self.restlenpltto + " QX"
                    hdr_colum = table_b.rows[9].cells
                    hdr_colum[0].text = "LENTILLE IMP 05-07 mm"
                    hdr_colum[1].text = self.restlentsinqtto + " QX"
                    hdr_colum = table_b.rows[10].cells
                    hdr_colum[0].text = "LENTILLE IMP vert"
                    hdr_colum[1].text = self.restlentverttto + " QX"
                    hdr_colum = table_b.rows[11].cells
                    hdr_colum[0].text = "LENTILLE IMP ROUGE"
                    hdr_colum[1].text = self.restlentrougetto + " QX"
                    hdr_colum = table_b.rows[12].cells
                    hdr_colum[0].text = "RIZ IMP"
                    hdr_colum[1].text = self.resulxtto + " QX"
                    hdr_colum = table_b.rows[13].cells
                    hdr_colum[0].text = "RIZ ETUVE"
                    hdr_colum[1].text = self.resulxtto + " QX"
                    for row in table_b.rows[1:14]:
                        for cell in row.cells:
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "open")
                    conn.close()
                else:
                    print("hello world")
                    conn = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                   database="datta_legumesec_entry")
                    dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                         database='datta_legumsec_out')
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT le,produit,origine,quantité,produit,sacherie,fournisseur, imatricule, date_CND, DLUM FROM entrytable WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    rows = cursor.fetchall()
                    curs1x = dattabase1.cursor()
                    curs1x.execute(
                        "SELECT SUM(quantitérizentré) - SUM(quantitérizesorté) as quantitérizerest FROM outtable WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    self.resulxs = curs1x.fetchone()
                    self.resulxttex = str(self.resulxs[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitepchentré) - sum(quantitépchsorté) as quantitépchrest  FROM outtable   WHERE  fournisseur=%s",
                        (self.selected_expediteur,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichedouzettex = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable WHERE  fournisseur=%s",
                        (self.selected_expediteur,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichettex = str(resultpch_att[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable WHERE  fournisseur=%s",
                        (self.selected_expediteur,))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischicheplttex = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable WHERE  fournisseur=%s",
                        (self.selected_expediteur,))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenplttex = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE  fournisseur=%s",
                        (self.selected_expediteur,))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentvertttex = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE  fournisseur=%s",
                        (self.selected_expediteur,))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougettex = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE  fournisseur=%s",
                        (self.selected_expediteur,))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimpttex = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable WHERE  fournisseur=%s",
                        (self.selected_expediteur,))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbttex = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable  WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneufttex = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE  fournisseur=%s",
                        (self.selected_expediteur,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouitttex = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE  fournisseur=%s",
                        (self.selected_expediteur,))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqttex = str(resultlensinqtt[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable  WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    resultpch_attex = curstt.fetchone()
                    self.restpoichichett = str(resultpch_att[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable   WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischicheplttex = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable  WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenplttex = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentvertttex = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougettex = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimptt = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable   WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbttex = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable  WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneufttex = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouitttex = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqttex = str(resultlensinqtt[0])
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\t\t\t\tSITUATION DES STOCKS DES LEGUMES SECS', level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(18)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading
                    paragraph0 = self.doc.add_paragraph()
                    paragraph0.style.font.name = 'Times New Roman'
                    left_run0 = paragraph0.add_run(
                        'Période du :' + self.selected_dates + "  au:" + self.selected_datesAU)
                    paragraph0.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

                    paragraph1 = self.doc.add_paragraph()
                    paragraph1.style.font.name = 'Times New Roman'
                    current_date = QDate.currentDate().getDate()
                    left_run1 = paragraph1.add_run(
                        "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Date d'édition : {}/{}/{}".format(current_date[2],
                                                                                                current_date[1],
                                                                                                current_date[0]))
                    left_run1.font.size = Pt(9)

                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(12)
                    left_run = paragraph.add_run(self.selected_magasin + '\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True

                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'PRODUIT'
                    hdr_cells[2].text = 'ORIGINE'
                    hdr_cells[3].text = 'QUANTITE'
                    hdr_cells[4].text = 'MAGASIN DE STOCK'
                    hdr_cells[5].text = 'SASHERIE  CND'
                    hdr_cells[6].text = 'EXPIDITEUR'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(0.5)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2)
                    hdr_cells[2].width = Inches(1)
                    hdr_cells[3].width = Inches(0.4)
                    hdr_cells[4].width = Inches(1.3)
                    hdr_cells[5].width = Inches(1)
                    hdr_cells[6].width = Inches(1)
                    hdr_cells[7].width = Inches(1)
                    hdr_cells[8].width = Inches(0.5)
                    hdr_cells[9].width = Inches(0.5)
                    hdr_cells[10].width = Inches(0.5)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                        cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        cell.paragraphs[0].runs[0].font.bold = True
                        cell.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(9.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.3)
                    # Create the document
                    # Create the table
                    self.doc.add_paragraph().add_run().add_break()
                    table_b = self.doc.add_table(rows=14, cols=2)
                    table_b.style = "Table Grid"
                    # Add table headers
                    hdr_colum = table_b.rows[0].cells
                    hdr_colum[0].text = "PRODUIT"
                    hdr_colum[1].text = "STOCK"
                    for hdr_colum in table_b.rows[0].cells:
                        hdr_colum.paragraphs[0].runs[0].font.name = 'Calibri'
                        hdr_colum.paragraphs[0].runs[0].font.size = Pt(10.5)
                        hdr_colum.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        hdr_colum.paragraphs[0].runs[0].font.bold = True
                        hdr_colum.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    hdr_colum = table_b.rows[1].cells
                    hdr_colum[0].text = "POIS CHICHES PL"
                    hdr_colum[1].text = ""
                    hdr_colum = table_b.rows[2].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 12 mm"
                    hdr_colum[1].text = self.restpoichichedouzetto + "  QX"
                    hdr_colum = table_b.rows[3].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 09 mm"
                    hdr_colum[1].text = self.restpoichicheneuftto + " QX"
                    hdr_colum = table_b.rows[4].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 08 mm"
                    hdr_colum[1].text = self.restpoichicheouittto + " QX"
                    hdr_colum = table_b.rows[5].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 06 mm"
                    hdr_colum[1].text = self.restpoichichetto + " QX"
                    hdr_colum = table_b.rows[6].cells
                    hdr_colum[0].text = "HARICOT BLANC IMP"
                    hdr_colum[1].text = self.restharicotimptto + " QX"
                    hdr_colum = table_b.rows[7].cells
                    hdr_colum[0].text = "HARICOT LSB"
                    hdr_colum[1].text = self.restharicotlsbtto + " QX"
                    hdr_colum = table_b.rows[8].cells
                    hdr_colum[0].text = "LENTILLE PL"
                    hdr_colum[1].text = self.restlenpltto + " QX"
                    hdr_colum = table_b.rows[9].cells
                    hdr_colum[0].text = "LENTILLE IMP 05-07 mm"
                    hdr_colum[1].text = self.restlentsinqtto + " QX"
                    hdr_colum = table_b.rows[10].cells
                    hdr_colum[0].text = "LENTILLE IMP vert"
                    hdr_colum[1].text = self.restlentverttto + " QX"
                    hdr_colum = table_b.rows[11].cells
                    hdr_colum[0].text = "LENTILLE IMP ROUGE"
                    hdr_colum[1].text = self.restlentrougetto + " QX"
                    hdr_colum = table_b.rows[12].cells
                    hdr_colum[0].text = "RIZ IMP"
                    hdr_colum[1].text = self.resulxtto + " QX"
                    hdr_colum = table_b.rows[13].cells
                    hdr_colum[0].text = "RIZ IMP"
                    hdr_colum[1].text = self.resulxtto + " QX"
                    for row in table_b.rows[1:14]:
                        for cell in row.cells:
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "open")
                    conn.close()

            except Exception as e:
                print(e)

        def print_docxStockDatabaseSortie(self):
            self.poischicheDouze()
            self.poischicheNeuf()
            self.poischicheOuit()
            self.poichichSIxSept()
            self.operation_dattabase()
            self.haricot()
            self.haricotLsb()
            self.lentilleCinqSept()
            self.lenVert()
            self.lenRouge()
            self.lenpl()
            self.poichichepl()
            self.rizeEtuve()
            self.selected_produit = self.Produits.currentText()
            self.selected_magasin = self.Unites.currentText()
            self.selected_origine = self.OrigineDuProduits.currentText()
            self.selected_expediteur = self.expediteur.currentText()
            self.selected_dates = self.date_edits.text()
            self.selected_datesAU = self.date_edit2.text()
            try:
                if self.selected_produit and self.selected_magasin and self.selected_origine and self.selected_dates == "--" and self.selected_datesAU == "--":
                    conn = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                   database="datta_legumsec_out")
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT le,produit,origine,quantité,unité,sacherie,fournisseur, imatricule,date_recoltes, date_CND, DLUM FROM outtable WHERE produit = %s AND unité = %s AND fournisseur=%s  AND date_recoltes IS NOT NULL AND date_CND IS NOT NULL AND DLUM IS NOT NULL ",
                        (self.selected_produit, self.selected_magasin, self.selected_expediteur,)
                    )
                    rows = cursor.fetchall()

                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\t\t\t\tSITUATION DES STOCKS DES LEGUMES SECS\n\t\t\t\t\t\t\t\tPRODUITS LIVRÉE',
                        level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(14)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading
                    paragraph0 = self.doc.add_paragraph()
                    paragraph0.style.font.name = 'Times New Roman'
                    left_run0 = paragraph0.add_run(
                        'Période du :' + self.selected_dates + "  au:" + self.selected_datesAU)
                    paragraph0.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

                    paragraph1 = self.doc.add_paragraph()
                    paragraph1.style.font.name = 'Times New Roman'
                    current_date = QDate.currentDate().getDate()
                    left_run1 = paragraph1.add_run(
                        "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Date d'édition : {}/{}/{}".format(current_date[2],
                                                                                                current_date[1],
                                                                                                current_date[0]))
                    left_run1.font.size = Pt(9)

                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(12)
                    left_run = paragraph.add_run(self.selected_magasin + '\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True

                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'PRODUIT'
                    hdr_cells[2].text = 'ORIGINE'
                    hdr_cells[3].text = 'QUANTITE'
                    hdr_cells[4].text = 'MAGASIN DE STOCK'
                    hdr_cells[5].text = 'SASHERIE  CND'
                    hdr_cells[6].text = 'EXPIDITEUR'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(0.5)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2)
                    hdr_cells[2].width = Inches(1)
                    hdr_cells[3].width = Inches(0.4)
                    hdr_cells[4].width = Inches(1.3)
                    hdr_cells[5].width = Inches(1)
                    hdr_cells[6].width = Inches(1)
                    hdr_cells[7].width = Inches(1)
                    hdr_cells[8].width = Inches(0.5)
                    hdr_cells[9].width = Inches(0.5)
                    hdr_cells[10].width = Inches(0.5)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                        cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        cell.paragraphs[0].runs[0].font.bold = True
                        cell.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(9.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.3)
                    # Create the document
                    # Create the table
                    self.doc.add_paragraph().add_run().add_break()
                    table_b = self.doc.add_table(rows=14, cols=2)
                    table_b.style = "Table Grid"
                    # Add table headers
                    hdr_colum = table_b.rows[0].cells
                    hdr_colum[0].text = "PRODUIT"
                    hdr_colum[1].text = "STOCK"
                    for hdr_colum in table_b.rows[0].cells:
                        hdr_colum.paragraphs[0].runs[0].font.name = 'Calibri'
                        hdr_colum.paragraphs[0].runs[0].font.size = Pt(10.5)
                        hdr_colum.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        hdr_colum.paragraphs[0].runs[0].font.bold = True
                        hdr_colum.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    hdr_colum = table_b.rows[1].cells
                    hdr_colum[0].text = "POIS CHICHES PL"
                    hdr_colum[1].text = ""
                    hdr_colum = table_b.rows[2].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 12 mm"
                    hdr_colum[1].text = self.restpoichichedouze + "  QX"
                    hdr_colum = table_b.rows[3].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 09 mm"
                    hdr_colum[1].text = self.restpoichicheneuf + " QX"
                    hdr_colum = table_b.rows[4].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 08 mm"
                    hdr_colum[1].text = self.restpoichicheouit + " QX"
                    hdr_colum = table_b.rows[5].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 06 mm"
                    hdr_colum[1].text = self.restpoichiche + " QX"
                    hdr_colum = table_b.rows[6].cells
                    hdr_colum[0].text = "HARICOT BLANC IMP"
                    hdr_colum[1].text = self.restharicotimp + " QX"
                    hdr_colum = table_b.rows[7].cells
                    hdr_colum[0].text = "HARICOT LSB"
                    hdr_colum[1].text = self.restharicotlsb + " QX"
                    hdr_colum = table_b.rows[8].cells
                    hdr_colum[0].text = "LENTILLE PL"
                    hdr_colum[1].text = self.restlenpl + " QX"
                    hdr_colum = table_b.rows[9].cells
                    hdr_colum[0].text = "LENTILLE IMP 05-07 mm"
                    hdr_colum[1].text = self.restlentsinq + " QX"
                    hdr_colum = table_b.rows[10].cells
                    hdr_colum[0].text = "LENTILLE IMP vert"
                    hdr_colum[1].text = self.restlentvert + " QX"
                    hdr_colum = table_b.rows[11].cells
                    hdr_colum[0].text = "LENTILLE IMP ROUGE"
                    hdr_colum[1].text = self.restlentrouge + " QX"
                    hdr_colum = table_b.rows[12].cells
                    hdr_colum[0].text = "RIZ IMP"
                    hdr_colum[1].text = self.resulxtt + " QX"
                    hdr_colum = table_b.rows[13].cells
                    hdr_colum[0].text = "RIZ ETUVE"
                    hdr_colum[1].text = self.resulxttv + " QX"
                    for row in table_b.rows[1:13]:
                        for cell in row.cells:
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False

                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "open")
                    conn.close()
                elif self.selected_produit and self.selected_magasin and self.selected_origine and self.selected_dates and self.selected_datesAU:

                    conn = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                   database="datta_legumsec_out")
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT le,produit,origine,quantité,unité,sacherie,fournisseur, imatricule,date_recoltes,date_CND, DLUM FROM outtable WHERE produit = %s AND unité = %s AND fournisseur=%s AND le BETWEEN %s AND %s AND date_recoltes IS NOT NULL AND date_CND IS NOT NULL AND DLUM IS NOT NULL",
                        (self.selected_produit, self.selected_magasin, self.selected_expediteur, self.selected_dates,
                         self.selected_datesAU))
                    rows = cursor.fetchall()

                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\t\t\t\tSITUATION DES STOCKS DES LEGUMES SECS', level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(18)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading
                    # add second heading
                    paragraph0 = self.doc.add_paragraph()
                    paragraph0.style.font.name = 'Times New Roman'
                    left_run0 = paragraph0.add_run(
                        'Période du :' + self.selected_dates + "  au:" + self.selected_datesAU)
                    paragraph0.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

                    paragraph1 = self.doc.add_paragraph()
                    paragraph1.style.font.name = 'Times New Roman'
                    current_date = QDate.currentDate().getDate()
                    left_run1 = paragraph1.add_run(
                        "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Date d'édition : {}/{}/{}".format(current_date[2],
                                                                                                current_date[1],
                                                                                                current_date[0]))
                    left_run1.font.size = Pt(9)

                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(12)
                    left_run = paragraph.add_run(self.selected_magasin + '\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True

                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'PRODUIT'
                    hdr_cells[2].text = 'ORIGINE'
                    hdr_cells[3].text = 'QUANTITE'
                    hdr_cells[4].text = 'MAGASIN DE STOCK'
                    hdr_cells[5].text = 'SASHERIE  CND'
                    hdr_cells[6].text = 'EXPIDITEUR'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(0.5)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2)
                    hdr_cells[2].width = Inches(1)
                    hdr_cells[3].width = Inches(0.4)
                    hdr_cells[4].width = Inches(1.3)
                    hdr_cells[5].width = Inches(1)
                    hdr_cells[6].width = Inches(1)
                    hdr_cells[7].width = Inches(1)
                    hdr_cells[8].width = Inches(0.5)
                    hdr_cells[9].width = Inches(0.5)
                    hdr_cells[10].width = Inches(0.5)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                        cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        cell.paragraphs[0].runs[0].font.bold = True
                        cell.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(9.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.3)
                    # Create the document
                    # Create the table
                    self.doc.add_paragraph().add_run().add_break()
                    table_b = self.doc.add_table(rows=14, cols=2)
                    table_b.style = "Table Grid"
                    # Add table headers
                    hdr_colum = table_b.rows[0].cells
                    hdr_colum[0].text = "PRODUIT"
                    hdr_colum[1].text = "STOCK"
                    for hdr_colum in table_b.rows[0].cells:
                        hdr_colum.paragraphs[0].runs[0].font.name = 'Calibri'
                        hdr_colum.paragraphs[0].runs[0].font.size = Pt(10.5)
                        hdr_colum.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        hdr_colum.paragraphs[0].runs[0].font.bold = True
                        hdr_colum.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    hdr_colum = table_b.rows[1].cells
                    hdr_colum[0].text = "POIS CHICHES PL"
                    hdr_colum[1].text = ""
                    hdr_colum = table_b.rows[2].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 12 mm"
                    hdr_colum[1].text = self.restpoichichedouze + "  QX"
                    hdr_colum = table_b.rows[3].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 09 mm"
                    hdr_colum[1].text = self.restpoichicheneuf + " QX"
                    hdr_colum = table_b.rows[4].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 08 mm"
                    hdr_colum[1].text = self.restpoichicheouit + " QX"
                    hdr_colum = table_b.rows[5].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 06 mm"
                    hdr_colum[1].text = self.restpoichiche + " QX"
                    hdr_colum = table_b.rows[6].cells
                    hdr_colum[0].text = "HARICOT BLANC IMP"
                    hdr_colum[1].text = self.restharicotimp + " QX"
                    hdr_colum = table_b.rows[7].cells
                    hdr_colum[0].text = "HARICOT LSB"
                    hdr_colum[1].text = self.restharicotlsb + " QX"
                    hdr_colum = table_b.rows[8].cells
                    hdr_colum[0].text = "LENTILLE PL"
                    hdr_colum[1].text = self.restlenpl + " QX"
                    hdr_colum = table_b.rows[9].cells
                    hdr_colum[0].text = "LENTILLE IMP 05-07 mm"
                    hdr_colum[1].text = self.restlentsinq + " QX"
                    hdr_colum = table_b.rows[10].cells
                    hdr_colum[0].text = "LENTILLE IMP vert"
                    hdr_colum[1].text = self.restlentvert + " QX"
                    hdr_colum = table_b.rows[11].cells
                    hdr_colum[0].text = "LENTILLE IMP ROUGE"
                    hdr_colum[1].text = self.restlentrouge + " QX"
                    hdr_colum = table_b.rows[12].cells
                    hdr_colum[0].text = "RIZ IMP"
                    hdr_colum[1].text = self.resulxtt + " QX"
                    hdr_colum = table_b.rows[13].cells
                    hdr_colum[0].text = "RIZ ETUVE"
                    hdr_colum[1].text = self.resulxtt + " QX"
                    for row in table_b.rows[1:14]:
                        for cell in row.cells:
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False

                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "open")
                    conn.close()
                elif self.selected_produit == "" and self.selected_magasin == "" and self.selected_origine == "" and self.selected_expediteur == "" and self.selected_dates == "--" and self.selected_datesAU == "--":

                    conn = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                   database="datta_legumsec_out")
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT le,produit,origine,quantité,unité,sacherie,fournisseur,imatricule,date_recoltes,date_CND,DLUM FROM outtable WHERE  date_recoltes IS NOT NULL AND date_CND IS NOT NULL AND DLUM IS NOT NULL")
                    rows = cursor.fetchall()

                    ########################################################################

                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\t\t\t\tSITUATION DES STOCKS DES LEGUMES SECS\n\t\t\t\t\t\t\t\tPRODUITS LIVRÉE',
                        level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(14)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading
                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(9)
                    left_run = paragraph.add_run('\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True
                    current_date = QDate.currentDate().getDate()
                    right_run = paragraph.add_run(
                        "Date d'édition : {}/{}/{}".format(current_date[2], current_date[1], current_date[0]))
                    right_run.bold = False
                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'PRODUIT'
                    hdr_cells[2].text = 'ORIGINE'
                    hdr_cells[3].text = 'QUANTITE'
                    hdr_cells[4].text = 'MAGASIN DE STOCK'
                    hdr_cells[5].text = 'SASHERIE  CND'
                    hdr_cells[6].text = 'FOURNISSEUR'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(0.5)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2)
                    hdr_cells[2].width = Inches(1)
                    hdr_cells[3].width = Inches(0.4)
                    hdr_cells[4].width = Inches(1.3)
                    hdr_cells[5].width = Inches(1)
                    hdr_cells[6].width = Inches(1)
                    hdr_cells[7].width = Inches(1)
                    hdr_cells[8].width = Inches(0.5)
                    hdr_cells[9].width = Inches(0.5)
                    hdr_cells[10].width = Inches(0.5)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                        cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        cell.paragraphs[0].runs[0].font.bold = True
                        cell.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(9.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.3)
                    # Create the document
                    # Create the table
                    self.doc.add_paragraph().add_run().add_break()
                    table_b = self.doc.add_table(rows=14, cols=2)
                    table_b.style = "Table Grid"
                    # Add table headers
                    hdr_colum = table_b.rows[0].cells
                    hdr_colum[0].text = "PRODUIT"
                    hdr_colum[1].text = "STOCK"
                    for hdr_colum in table_b.rows[0].cells:
                        hdr_colum.paragraphs[0].runs[0].font.name = 'Calibri'
                        hdr_colum.paragraphs[0].runs[0].font.size = Pt(10.5)
                        hdr_colum.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        hdr_colum.paragraphs[0].runs[0].font.bold = True
                        hdr_colum.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    hdr_colum = table_b.rows[1].cells
                    hdr_colum[0].text = "POIS CHICHES PL"
                    hdr_colum[1].text = self.restpoischichepltt + "  QX"
                    hdr_colum = table_b.rows[2].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 12 mm"
                    hdr_colum[1].text = self.restpoichichedouzett + "  QX"
                    hdr_colum = table_b.rows[3].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 09 mm"
                    hdr_colum[1].text = self.restpoichicheneuftt + " QX"
                    hdr_colum = table_b.rows[4].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 08 mm"
                    hdr_colum[1].text = self.restpoichicheouittt + " QX"
                    hdr_colum = table_b.rows[5].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 06 mm"
                    hdr_colum[1].text = self.restpoichichett + " QX"
                    hdr_colum = table_b.rows[6].cells
                    hdr_colum[0].text = "HARICOT BLANC IMP"
                    hdr_colum[1].text = self.restharicotimptt + " QX"
                    hdr_colum = table_b.rows[7].cells
                    hdr_colum[0].text = "HARICOT LSB"
                    hdr_colum[1].text = self.restharicotlsbtt + " QX"
                    hdr_colum = table_b.rows[8].cells
                    hdr_colum[0].text = "LENTILLE PL"
                    hdr_colum[1].text = self.restlenpltt + " QX"
                    hdr_colum = table_b.rows[9].cells
                    hdr_colum[0].text = "LENTILLE IMP 05-07 mm"
                    hdr_colum[1].text = self.restlentsinqtt + " QX"
                    hdr_colum = table_b.rows[10].cells
                    hdr_colum[0].text = "LENTILLE IMP vert"
                    hdr_colum[1].text = self.restlentvertt + " QX"
                    hdr_colum = table_b.rows[11].cells
                    hdr_colum[0].text = "LENTILLE IMP ROUGE"
                    hdr_colum[1].text = self.restlentrougett + " QX"
                    hdr_colum = table_b.rows[12].cells
                    hdr_colum[0].text = "RIZ IMP"
                    hdr_colum[1].text = self.resultt + " QX"
                    hdr_colum = table_b.rows[13].cells
                    hdr_colum[0].text = "RIZ ETUVE"
                    hdr_colum[1].text = self.resuletv + " QX"
                    for row in table_b.rows[1:14]:
                        for cell in row.cells:
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "open")
                elif self.selected_produit == "" and self.selected_magasin == "" and self.selected_origine == "" and self.selected_dates and self.selected_datesAU:

                    dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                         database='datta_legumsec_out')
                    cursor = dattabase1.cursor()
                    cursor.execute(
                        "SELECT le,produit,origine,quantité,unité,sacherie,fournisseur, imatricule,date_recoltes, date_CND, DLUM FROM outtable WHERE le BETWEEN %s AND %s  AND date_recoltes IS NOT NULL AND date_CND IS NOT NULL AND DLUM IS NOT NULL",
                        (self.selected_dates, self.selected_datesAU))
                    rows = cursor.fetchall()
                    curs1x = dattabase1.cursor()
                    curs1x.execute(
                        "SELECT SUM(quantitérizentré) - SUM(quantitérizesorté) as quantitérizerest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    self.resulxs = curs1x.fetchone()
                    self.resulxttm = str(self.resulxs[0])
                    curs1xtv = dattabase1.cursor()
                    curs1xtv.execute(
                        "SELECT SUM(quantitérizetvntré) - SUM(quantitérizetvsorté) as quantitérizetvrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    self.resulxstv = curs1xtv.fetchone()
                    self.resulxtttvm = str(self.resulxs[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitepchentré) - sum(quantitépchsorté) as quantitépchrest  FROM outtable   WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichedouzettsd = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichettm = str(resultpch_att[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischicheplttm = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenplttm = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentvertttm = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougettm = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimpttm = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbttm = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneufttm = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouitttm = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqttm = str(resultlensinqtt[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultpch_attm = curstt.fetchone()
                    self.restpoichichett = str(resultpch_att[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischicheplttm = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenplttm = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentvertttm = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougettm = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimptt = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbttm = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneufttm = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouitttm = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE  le BETWEEN %s AND %s",
                        (self.selected_dates, self.selected_datesAU))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqttm = str(resultlensinqtt[0])

                    ########################################################################
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\t\t\t\tSITUATION DES STOCKS DES LEGUMES SECS\n\t\t\t\t\t\t\t\tPRODUITS LIVRÉE',
                        level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(14)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading
                    paragraph0 = self.doc.add_paragraph()
                    paragraph0.style.font.name = 'Times New Roman'
                    left_run0 = paragraph0.add_run(
                        'Période du :' + self.selected_dates + "  au:" + self.selected_datesAU)
                    paragraph0.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

                    paragraph1 = self.doc.add_paragraph()
                    paragraph1.style.font.name = 'Times New Roman'
                    current_date = QDate.currentDate().getDate()
                    left_run1 = paragraph1.add_run(
                        "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Date d'édition : {}/{}/{}".format(current_date[2],
                                                                                                current_date[1],
                                                                                                current_date[0]))
                    left_run1.font.size = Pt(9)

                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(12)
                    left_run = paragraph.add_run(self.selected_magasin + '\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True

                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'PRODUIT'
                    hdr_cells[2].text = 'ORIGINE'
                    hdr_cells[3].text = 'QUANTITE'
                    hdr_cells[4].text = 'MAGASIN DE STOCK'
                    hdr_cells[5].text = 'SASHERIE  CND'
                    hdr_cells[6].text = 'EXPIDITEUR'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(0.5)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2)
                    hdr_cells[2].width = Inches(1)
                    hdr_cells[3].width = Inches(0.4)
                    hdr_cells[4].width = Inches(1.3)
                    hdr_cells[5].width = Inches(1)
                    hdr_cells[6].width = Inches(1)
                    hdr_cells[7].width = Inches(1)
                    hdr_cells[8].width = Inches(0.5)
                    hdr_cells[9].width = Inches(0.5)
                    hdr_cells[10].width = Inches(0.5)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                        cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        cell.paragraphs[0].runs[0].font.bold = True
                        cell.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(9.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.3)
                    # Create the document
                    # Create the table
                    self.doc.add_paragraph().add_run().add_break()
                    table_b = self.doc.add_table(rows=14, cols=2)
                    table_b.style = "Table Grid"
                    # Add table headers
                    hdr_colum = table_b.rows[0].cells
                    hdr_colum[0].text = "PRODUIT"
                    hdr_colum[1].text = "STOCK"
                    for hdr_colum in table_b.rows[0].cells:
                        hdr_colum.paragraphs[0].runs[0].font.name = 'Calibri'
                        hdr_colum.paragraphs[0].runs[0].font.size = Pt(10.5)
                        hdr_colum.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        hdr_colum.paragraphs[0].runs[0].font.bold = True
                        hdr_colum.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    hdr_colum = table_b.rows[1].cells
                    hdr_colum[0].text = "POIS CHICHES PL"
                    hdr_colum[1].text = ""
                    hdr_colum = table_b.rows[2].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 12 mm"
                    hdr_colum[1].text = self.restpoichichedouzettsd + "  QX"
                    hdr_colum = table_b.rows[3].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 09 mm"
                    hdr_colum[1].text = self.restpoichicheneufttm + " QX"
                    hdr_colum = table_b.rows[4].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 08 mm"
                    hdr_colum[1].text = self.restpoichicheouitttm + " QX"
                    hdr_colum = table_b.rows[5].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 06 mm"
                    hdr_colum[1].text = self.restpoichichettm + " QX"
                    hdr_colum = table_b.rows[6].cells
                    hdr_colum[0].text = "HARICOT BLANC IMP"
                    hdr_colum[1].text = self.restharicotimpttm + " QX"
                    hdr_colum = table_b.rows[7].cells
                    hdr_colum[0].text = "HARICOT LSB"
                    hdr_colum[1].text = self.restharicotlsbttm + " QX"
                    hdr_colum = table_b.rows[8].cells
                    hdr_colum[0].text = "LENTILLE PL"
                    hdr_colum[1].text = self.restlenplttm + " QX"
                    hdr_colum = table_b.rows[9].cells
                    hdr_colum[0].text = "LENTILLE IMP 05-07 mm"
                    hdr_colum[1].text = self.restlentsinqttm + " QX"
                    hdr_colum = table_b.rows[10].cells
                    hdr_colum[0].text = "LENTILLE IMP vert"
                    hdr_colum[1].text = self.restlentvertttm + " QX"
                    hdr_colum = table_b.rows[11].cells
                    hdr_colum[0].text = "LENTILLE IMP ROUGE"
                    hdr_colum[1].text = self.restlentrougettm + " QX"
                    hdr_colum = table_b.rows[12].cells
                    hdr_colum[0].text = "RIZ IMP"
                    hdr_colum[1].text = self.resulxttm + " QX"
                    hdr_colum = table_b.rows[13].cells
                    hdr_colum[0].text = "RIZ ETUVE"
                    hdr_colum[1].text = self.resulxttm + " QX"
                    for row in table_b.rows[1:14]:
                        for cell in row.cells:
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "open")
                    dattabase1.close()
                elif self.selected_produit == "" and self.selected_magasin and self.selected_origine == "" and self.selected_dates == "--" and self.selected_datesAU == "--":

                    dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                         database='datta_legumsec_out')
                    cursor = dattabase1.cursor()
                    cursor.execute(
                        "SELECT le,produit,origine,quantité,unité,sacherie,fournisseur, imatricule,date_recoltes, date_CND, DLUM FROM outtable WHERE unité = %s AND date_recoltes IS NOT NULL AND date_CND IS NOT NULL AND DLUM IS NOT NULL",
                        (self.selected_magasin,))
                    rows = cursor.fetchall()
                    curs1x = dattabase1.cursor()
                    curs1x.execute(
                        "SELECT SUM(quantitérizentré) - SUM(quantitérizesorté) as quantitérizerest FROM outtable WHERE  unité=%s",
                        (self.selected_magasin,))
                    self.resulxs = curs1x.fetchone()
                    self.resulxttm = str(self.resulxs[0])
                    curs1xtv = dattabase1.cursor()
                    curs1xtv.execute(
                        "SELECT SUM(quantitérizetvntré) - SUM(quantitérizetvsorté) as quantitérizetvrest FROM outtable WHERE  unité=%s",
                        (self.selected_magasin,))
                    self.resulxstv = curs1xtv.fetchone()
                    self.resulxtttvm = str(self.resulxstv[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitepchentré) - sum(quantitépchsorté) as quantitépchrest  FROM outtable   WHERE   unité=%s",
                        (self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichedouzettm = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable WHERE   unité=%s",
                        (self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichettm = str(resultpch_att[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable WHERE   unité=%s",
                        (self.selected_magasin,))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischicheplttm = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable WHERE   unité=%s",
                        (self.selected_magasin,))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenplttm = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE   unité=%s",
                        (self.selected_magasin,))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentvertttm = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE   unité=%s",
                        (self.selected_magasin,))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougettm = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE   unité=%s",
                        (self.selected_magasin,))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimpttm = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable WHERE   unité=%s",
                        (self.selected_magasin,))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbttm = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable   WHERE unité=%s",
                        (self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneufttm = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE   unité=%s",
                        (self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouitttm = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE   unité=%s",
                        (self.selected_magasin,))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqttm = str(resultlensinqtt[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable  WHERE unité=%s",
                        (self.selected_magasin,))
                    resultpch_attm = curstt.fetchone()
                    self.restpoichichett = str(resultpch_att[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable   WHERE unité=%s",
                        (self.selected_magasin,))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischicheplttm = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable  WHERE unité=%s",
                        (self.selected_magasin,))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenplttm = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE unité=%s",
                        (self.selected_magasin,))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentvertttm = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE unité=%s",
                        (self.selected_magasin,))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougettm = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE  unité=%s",
                        (self.selected_magasin,))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimptt = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable   WHERE unité=%s",
                        (self.selected_magasin,))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbttm = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable  WHERE unité=%s",
                        (self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneufttm = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE unité=%s",
                        (self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouitttm = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE  unité=%s",
                        (self.selected_magasin,))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqttm = str(resultlensinqtt[0])

                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\t\t\t\tSITUATION DES STOCKS DES LEGUMES SECS\n\t\t\t\t\t\t\t\tPRODUITS LIVRÉE',
                        level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(14)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading

                    paragraph1 = self.doc.add_paragraph()
                    paragraph1.style.font.name = 'Times New Roman'
                    current_date = QDate.currentDate().getDate()
                    left_run1 = paragraph1.add_run(
                        "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Date d'édition : {}/{}/{}".format(current_date[2],
                                                                                                current_date[1],
                                                                                                current_date[0]))
                    left_run1.font.size = Pt(9)

                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(12)
                    left_run = paragraph.add_run(self.selected_magasin + '\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True

                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'PRODUIT'
                    hdr_cells[2].text = 'ORIGINE'
                    hdr_cells[3].text = 'QUANTITE'
                    hdr_cells[4].text = 'MAGASIN DE STOCK'
                    hdr_cells[5].text = 'SASHERIE  CND'
                    hdr_cells[6].text = 'EXPIDITEUR'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(0.5)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2)
                    hdr_cells[2].width = Inches(1)
                    hdr_cells[3].width = Inches(0.4)
                    hdr_cells[4].width = Inches(1.3)
                    hdr_cells[5].width = Inches(1)
                    hdr_cells[6].width = Inches(1)
                    hdr_cells[7].width = Inches(1)
                    hdr_cells[8].width = Inches(0.5)
                    hdr_cells[9].width = Inches(0.5)
                    hdr_cells[10].width = Inches(0.5)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                        cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        cell.paragraphs[0].runs[0].font.bold = True
                        cell.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(9.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.3)
                    # Create the document
                    # Create the table
                    self.doc.add_paragraph().add_run().add_break()
                    table_b = self.doc.add_table(rows=14, cols=2)
                    table_b.style = "Table Grid"
                    # Add table headers
                    hdr_colum = table_b.rows[0].cells
                    hdr_colum[0].text = "PRODUIT"
                    hdr_colum[1].text = "STOCK"
                    for hdr_colum in table_b.rows[0].cells:
                        hdr_colum.paragraphs[0].runs[0].font.name = 'Calibri'
                        hdr_colum.paragraphs[0].runs[0].font.size = Pt(10.5)
                        hdr_colum.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        hdr_colum.paragraphs[0].runs[0].font.bold = True
                        hdr_colum.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    hdr_colum = table_b.rows[1].cells
                    hdr_colum[0].text = "POIS CHICHES PL"
                    hdr_colum[1].text = ""
                    hdr_colum = table_b.rows[2].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 12 mm"
                    hdr_colum[1].text = self.restpoichichedouzettm + "  QX"
                    hdr_colum = table_b.rows[3].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 09 mm"
                    hdr_colum[1].text = self.restpoichicheneufttm + " QX"
                    hdr_colum = table_b.rows[4].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 08 mm"
                    hdr_colum[1].text = self.restpoichicheouitttm + " QX"
                    hdr_colum = table_b.rows[5].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 06 mm"
                    hdr_colum[1].text = self.restpoichichettm + " QX"
                    hdr_colum = table_b.rows[6].cells
                    hdr_colum[0].text = "HARICOT BLANC IMP"
                    hdr_colum[1].text = self.restharicotimpttm + " QX"
                    hdr_colum = table_b.rows[7].cells
                    hdr_colum[0].text = "HARICOT LSB"
                    hdr_colum[1].text = self.restharicotlsbttm + " QX"
                    hdr_colum = table_b.rows[8].cells
                    hdr_colum[0].text = "LENTILLE PL"
                    hdr_colum[1].text = self.restlenplttm + " QX"
                    hdr_colum = table_b.rows[9].cells
                    hdr_colum[0].text = "LENTILLE IMP 05-07 mm"
                    hdr_colum[1].text = self.restlentsinqttm + " QX"
                    hdr_colum = table_b.rows[10].cells
                    hdr_colum[0].text = "LENTILLE IMP vert"
                    hdr_colum[1].text = self.restlentvertttm + " QX"
                    hdr_colum = table_b.rows[11].cells
                    hdr_colum[0].text = "LENTILLE IMP ROUGE"
                    hdr_colum[1].text = self.restlentrougettm + " QX"
                    hdr_colum = table_b.rows[12].cells
                    hdr_colum[0].text = "RIZ IMP"
                    hdr_colum[1].text = self.resulxttm + " QX"
                    hdr_colum = table_b.rows[13].cells
                    hdr_colum[0].text = "RIZ ETUVE"
                    hdr_colum[1].text = self.resulxttm + " QX"
                    for row in table_b.rows[1:14]:
                        for cell in row.cells:
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "open")
                    dattabase1.close()
                elif self.selected_produit and self.selected_magasin == "" and self.selected_origine == "" and self.selected_dates == "--" and self.selected_datesAU == "--":

                    dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                         database='datta_legumsec_out')
                    cursor = dattabase1.cursor()
                    cursor.execute(
                        "SELECT le,produit,origine,quantité,unité,sacherie,fournisseur, imatricule,date_recoltes ,date_CND, DLUM FROM outtable WHERE produit = %s  and date_recoltes IS NOT NULL AND date_CND IS NOT NULL AND DLUM IS NOT NULL",
                        (self.selected_produit,))
                    rows = cursor.fetchall()
                    curs1x = dattabase1.cursor()
                    curs1x.execute(
                        "SELECT SUM(quantitérizentré) - SUM(quantitérizesorté) as quantitérizerest FROM outtable WHERE  produit= %s",
                        (self.selected_produit,))
                    self.resulxs = curs1x.fetchone()
                    self.resulxttp = str(self.resulxs[0])
                    curs1xtv = dattabase1.cursor()
                    curs1xtv.execute(
                        "SELECT SUM(quantitérizetvntré) - SUM(quantitérizetvsorté) as quantitérizetvrest FROM outtable WHERE  produit= %s",
                        (self.selected_produit,))
                    self.resulxstv = curs1xtv.fetchone()
                    self.resulxtttvp = str(self.resulxstv[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitepchentré) - sum(quantitépchsorté) as quantitépchrest  FROM outtable   WHERE   produit=%s",
                        (self.selected_produit,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichedouzettp = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable WHERE   produit=%s",
                        (self.selected_produit,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichettp = str(resultpch_att[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable WHERE   produit=%s",
                        (self.selected_produit,))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischicheplttp = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable WHERE   produit=%s",
                        (self.selected_produit,))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenplttp = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE   produit=%s",
                        (self.selected_produit,))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentvertttp = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE   produit=%s",
                        (self.selected_produit,))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougettp = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE   produit=%s",
                        (self.selected_produit,))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimpttp = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable WHERE   produit=%s",
                        (self.selected_produit,))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbttp = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable   WHERE produit=%s",
                        (self.selected_produit,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneufttp = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE   produit=%s",
                        (self.selected_produit,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouitttp = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE   produit=%s",
                        (self.selected_produit,))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqttp = str(resultlensinqtt[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable  WHERE produit=%s",
                        (self.selected_produit,))
                    resultpch_attp = curstt.fetchone()
                    self.restpoichichettp = str(resultpch_attp[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable   WHERE produit=%s",
                        (self.selected_produit,))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischicheplttp = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable  WHERE produit=%s",
                        (self.selected_produit,))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenplttp = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE produit=%s",
                        (self.selected_produit,))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentvertttp = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE produit=%s",
                        (self.selected_produit,))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougettp = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE  produit=%s",
                        (self.selected_produit,))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimpttp = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable   WHERE produit=%s",
                        (self.selected_produit,))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbttp = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable  WHERE produit=%s",
                        (self.selected_produit,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneufttp = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE produit=%s",
                        (self.selected_produit,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouitttp = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE  produit=%s",
                        (self.selected_produit,))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqttp = str(resultlensinqtt[0])
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\t\t\t\tSITUATION DES STOCKS DES LEGUMES SECS\n\t\t\t\t\t\t\t\tPRODUITS LIVRÉE',
                        level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(14)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading

                    paragraph1 = self.doc.add_paragraph()
                    paragraph1.style.font.name = 'Times New Roman'
                    current_date = QDate.currentDate().getDate()
                    left_run1 = paragraph1.add_run(
                        "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Date d'édition : {}/{}/{}".format(current_date[2],
                                                                                                current_date[1],
                                                                                                current_date[0]))
                    left_run1.font.size = Pt(9)

                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(12)
                    left_run = paragraph.add_run("PRODUIT :" + self.selected_produit + '\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True

                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'PRODUIT'
                    hdr_cells[2].text = 'ORIGINE'
                    hdr_cells[3].text = 'QUANTITE'
                    hdr_cells[4].text = 'MAGASIN DE STOCK'
                    hdr_cells[5].text = 'SASHERIE  CND'
                    hdr_cells[6].text = 'EXPIDITEUR'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(0.5)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2)
                    hdr_cells[2].width = Inches(1)
                    hdr_cells[3].width = Inches(0.4)
                    hdr_cells[4].width = Inches(1.3)
                    hdr_cells[5].width = Inches(1)
                    hdr_cells[6].width = Inches(1)
                    hdr_cells[7].width = Inches(1)
                    hdr_cells[8].width = Inches(0.5)
                    hdr_cells[9].width = Inches(0.5)
                    hdr_cells[10].width = Inches(0.5)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                        cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        cell.paragraphs[0].runs[0].font.bold = True
                        cell.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(9.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.3)
                    # Create the document
                    # Create the table
                    self.doc.add_paragraph().add_run().add_break()
                    table_b = self.doc.add_table(rows=2, cols=2)
                    table_b.style = "Table Grid"
                    # Add table headers
                    hdr_colum = table_b.rows[0].cells
                    hdr_colum[0].text = "PRODUIT"
                    hdr_colum[1].text = "STOCK"
                    for hdr_colum in table_b.rows[0].cells:
                        hdr_colum.paragraphs[0].runs[0].font.name = 'Calibri'
                        hdr_colum.paragraphs[0].runs[0].font.size = Pt(10.5)
                        hdr_colum.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        hdr_colum.paragraphs[0].runs[0].font.bold = True
                        hdr_colum.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    hdr_colum = table_b.rows[1].cells

                    if self.selected_produit == "POIS CHICHES IMP 12 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restpoichichedouzettp + "  QX"

                    if self.selected_produit == "POIS CHICHES IMP 12 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restpoichichedouzettp + "  QX"
                    if self.selected_produit == "POIS CHICHES IMP 09 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restpoichicheneufttp + " QX"
                    if self.selected_produit == "POIS CHICHES IMP 08 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restpoichicheouitttp + " QX"
                    if self.selected_produit == "POIS CHICHES IMP 06 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restpoichichettp + " QX"
                    if self.selected_produit == "HARICOT BLANC IMP":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restharicotimpttp + " QX"
                    if self.selected_produit == "HARICOT LSB":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restharicotlsbttp + " QX"
                    if self.selected_produit == "LENTILLE PL":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restlenplttp + " QX"
                    if self.selected_produit == "LENTILLE IMP 05-07 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restlentsinqttp + " QX"
                    if self.selected_produit == "LENTILLE IMP vert":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restlentvertttp + " QX"
                    if self.selected_produit == "LENTILLE IMP ROUGE":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restlentrougettp + " QX"
                    if self.selected_produit == "RIZ IMP":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.resulxttp + " QX"
                    if self.selected_produit == "RIZ ETUVE":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.resulxtttvp + " QX"
                    for row in table_b.rows[1:2]:
                        for cell in row.cells:
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "open")
                    dattabase1.close()
                elif self.selected_produit and self.selected_magasin and self.selected_origine == "" and self.selected_dates == "--" and self.selected_datesAU == "--":
                    conn = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                   database="datta_legumesec_entry")
                    dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                         database='datta_legumsec_out')
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT le,produit,origine,quantité,unité,sacherie,fournisseur, imatricule,date_recoltes,date_CND,DLUM FROM entrytable WHERE produit = %s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    rows = cursor.fetchall()
                    curs1x = dattabase1.cursor()
                    curs1x.execute(
                        "SELECT SUM(quantitérizentré) - SUM(quantitérizesorté) as quantitérizerest FROM outtable WHERE  produit= %s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    self.resulxs = curs1x.fetchone()
                    self.resulxttp = str(self.resulxs[0])
                    curs1xtv = dattabase1.cursor()
                    curs1xtv.execute(
                        "SELECT SUM(quantitérizetvntré) - SUM(quantitérizetvsorté) as quantitérizetvrest FROM outtable WHERE  produit= %s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    self.resulxstv = curs1xtv.fetchone()
                    self.resulxtttvp = str(self.resulxstv[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitepchentré) - sum(quantitépchsorté) as quantitépchrest  FROM outtable   WHERE   produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichedouzettp = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable WHERE   produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichettp = str(resultpch_att[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable WHERE   produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischicheplttp = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable WHERE   produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenplttp = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE   produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentvertttp = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE   produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougettp = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE   produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimpttp = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable WHERE   produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbttp = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable   WHERE produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneufttp = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE   produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouitttp = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE   produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqttp = str(resultlensinqtt[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable  WHERE produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultpch_attp = curstt.fetchone()
                    self.restpoichichettp = str(resultpch_attp[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable   WHERE produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischicheplttp = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable  WHERE produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenplttp = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentvertttp = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougettp = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE  produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimpttp = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable   WHERE produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbttp = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable  WHERE produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneufttp = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouitttp = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE  produit=%s AND unité = %s",
                        (self.selected_produit, self.selected_magasin,))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqttp = str(resultlensinqtt[0])
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\t\t\t\tSITUATION DES STOCKS DES LEGUMES SECS\n\t\t\t\t\t\t\t\tPRODUITS LIVRÉE',
                        level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(14)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading

                    paragraph1 = self.doc.add_paragraph()
                    paragraph1.style.font.name = 'Times New Roman'
                    current_date = QDate.currentDate().getDate()
                    left_run1 = paragraph1.add_run(
                        "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Date d'édition : {}/{}/{}".format(current_date[2],
                                                                                                current_date[1],
                                                                                                current_date[0]))
                    left_run1.font.size = Pt(9)

                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(12)
                    left_run = paragraph.add_run(
                        self.selected_magasin + "\nPRODUIT :" + self.selected_produit + '\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True

                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'PRODUIT'
                    hdr_cells[2].text = 'ORIGINE'
                    hdr_cells[3].text = 'QUANTITE'
                    hdr_cells[4].text = 'MAGASIN DE STOCK'
                    hdr_cells[5].text = 'SASHERIE  CND'
                    hdr_cells[6].text = 'EXPIDITEUR'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(0.5)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2)
                    hdr_cells[2].width = Inches(1)
                    hdr_cells[3].width = Inches(0.4)
                    hdr_cells[4].width = Inches(1.3)
                    hdr_cells[5].width = Inches(1)
                    hdr_cells[6].width = Inches(1)
                    hdr_cells[7].width = Inches(1)
                    hdr_cells[8].width = Inches(0.5)
                    hdr_cells[9].width = Inches(0.5)
                    hdr_cells[10].width = Inches(0.5)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                        cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        cell.paragraphs[0].runs[0].font.bold = True
                        cell.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(9.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.3)
                    # Create the document
                    # Create the table
                    self.doc.add_paragraph().add_run().add_break()
                    table_b = self.doc.add_table(rows=2, cols=2)
                    table_b.style = "Table Grid"
                    # Add table headers
                    hdr_colum = table_b.rows[0].cells
                    hdr_colum[0].text = "PRODUIT"
                    hdr_colum[1].text = "STOCK"
                    for hdr_colum in table_b.rows[0].cells:
                        hdr_colum.paragraphs[0].runs[0].font.name = 'Calibri'
                        hdr_colum.paragraphs[0].runs[0].font.size = Pt(10.5)
                        hdr_colum.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        hdr_colum.paragraphs[0].runs[0].font.bold = True
                        hdr_colum.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    hdr_colum = table_b.rows[1].cells

                    if self.selected_produit == "POIS CHICHES IMP 12 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restpoichichedouzettp + "  QX"

                    if self.selected_produit == "POIS CHICHES IMP 12 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restpoichichedouzettp + "  QX"
                    if self.selected_produit == "POIS CHICHES IMP 09 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restpoichicheneufttp + " QX"
                    if self.selected_produit == "POIS CHICHES IMP 08 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restpoichicheouitttp + " QX"
                    if self.selected_produit == "POIS CHICHES IMP 06 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restpoichichettp + " QX"
                    if self.selected_produit == "HARICOT BLANC IMP":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restharicotimpttp + " QX"
                    if self.selected_produit == "HARICOT LSB":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restharicotlsbttp + " QX"
                    if self.selected_produit == "LENTILLE PL":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restlenplttp + " QX"
                    if self.selected_produit == "LENTILLE IMP 05-07 mm":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restlentsinqttp + " QX"
                    if self.selected_produit == "LENTILLE IMP vert":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restlentvertttp + " QX"
                    if self.selected_produit == "LENTILLE IMP ROUGE":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.restlentrougettp + " QX"
                    if self.selected_produit == "RIZ IMP":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.resulxttp + " QX"
                    if self.selected_produit == "RIZ ETUVE":
                        hdr_colum[0].text = self.selected_produit
                        hdr_colum[1].text = self.resulxtttvp + " QX"
                    for row in table_b.rows[1:2]:
                        for cell in row.cells:
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "open")
                    conn.close()
                elif self.selected_produit == "" and self.selected_magasin == "" and self.selected_origine and self.selected_dates == "--" and self.selected_datesAU == "--":
                    dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                         database='datta_legumsec_out')
                    cursor = dattabase1.cursor()
                    cursor.execute(
                        "SELECT le,produit,origine,quantité,produit,sacherie,fournisseur, imatricule,date_recoltes,date_CND, DLUM FROM outtable WHERE origine=%s AND date_recoltes IS NOT NULL AND date_CND IS NOT NULL AND DLUM IS NOT NULL",
                        (self.selected_origine,))
                    rows = cursor.fetchall()
                    curs1x = dattabase1.cursor()
                    curs1x.execute(
                        "SELECT SUM(quantitérizentré) - SUM(quantitérizesorté) as quantitérizerest FROM outtable WHERE origine=%s",
                        (self.selected_origine,))
                    self.resulxs = curs1x.fetchone()
                    self.resulxtto = str(self.resulxs[0])
                    curs1xtv = dattabase1.cursor()
                    curs1xtv.execute(
                        "SELECT SUM(quantitérizetvntré) - SUM(quantitérizetvsorté) as quantitérizetvrest FROM outtable WHERE origine=%s",
                        (self.selected_origine,))
                    self.resulxstv = curs1xtv.fetchone()
                    self.resulxtttvo = str(self.resulxstv[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitepchentré) - sum(quantitépchsorté) as quantitépchrest  FROM outtable   WHERE  origine=%s",
                        (self.selected_origine,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichedouzetto = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable WHERE  origine=%s",
                        (self.selected_origine,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichetto = str(resultpch_att[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable WHERE  origine=%s",
                        (self.selected_origine,))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischichepltto = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable WHERE  origine=%s",
                        (self.selected_origine,))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenpltto = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE  origine=%s",
                        (self.selected_origine,))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentverttto = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE  origine=%s",
                        (self.selected_origine,))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougetto = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE  origine=%s",
                        (self.selected_origine,))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimptto = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable WHERE  origine=%s",
                        (self.selected_origine,))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbtto = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable  WHERE origine=%s",
                        (self.selected_origine,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneuftto = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE  origine=%s",
                        (self.selected_origine,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouittto = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE  origine=%s",
                        (self.selected_origine,))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqtto = str(resultlensinqtt[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable  WHERE origine=%s",
                        (self.selected_origine,))
                    resultpch_atto = curstt.fetchone()
                    self.restpoichichett = str(resultpch_att[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable   WHERE origine=%s",
                        (self.selected_origine,))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischichepltto = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable  WHERE origine=%s",
                        (self.selected_origine,))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenpltto = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE origine=%s",
                        (self.selected_origine,))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentverttto = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE origine=%s",
                        (self.selected_origine,))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougetto = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE origine=%s",
                        (self.selected_origine,))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimptt = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable   WHERE origine=%s",
                        (self.selected_origine,))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbtto = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable  WHERE origine=%s",
                        (self.selected_origine,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneuftto = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE origine=%s",
                        (self.selected_origine,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouittto = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE origine=%s",
                        (self.selected_origine,))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqtto = str(resultlensinqtt[0])
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\t\t\t\tSITUATION DES STOCKS DES LEGUMES SECS\n\t\t\t\t\t\t\t\tPRODUITS LIVRÉE',
                        level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(14)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading

                    paragraph1 = self.doc.add_paragraph()
                    paragraph1.style.font.name = 'Times New Roman'
                    current_date = QDate.currentDate().getDate()
                    left_run1 = paragraph1.add_run(
                        "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Date d'édition : {}/{}/{}".format(current_date[2],
                                                                                                current_date[1],
                                                                                                current_date[0]))
                    left_run1.font.size = Pt(9)

                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(12)
                    left_run = paragraph.add_run(self.selected_magasin + '\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True

                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'PRODUIT'
                    hdr_cells[2].text = 'ORIGINE'
                    hdr_cells[3].text = 'QUANTITE'
                    hdr_cells[4].text = 'MAGASIN DE STOCK'
                    hdr_cells[5].text = 'SASHERIE  CND'
                    hdr_cells[6].text = 'EXPIDITEUR'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(0.5)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2)
                    hdr_cells[2].width = Inches(1)
                    hdr_cells[3].width = Inches(0.4)
                    hdr_cells[4].width = Inches(1.3)
                    hdr_cells[5].width = Inches(1)
                    hdr_cells[6].width = Inches(1)
                    hdr_cells[7].width = Inches(1)
                    hdr_cells[8].width = Inches(0.5)
                    hdr_cells[9].width = Inches(0.5)
                    hdr_cells[10].width = Inches(0.5)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                        cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        cell.paragraphs[0].runs[0].font.bold = True
                        cell.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(9.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.3)
                    # Create the document
                    # Create the table
                    self.doc.add_paragraph().add_run().add_break()
                    table_b = self.doc.add_table(rows=14, cols=2)
                    table_b.style = "Table Grid"
                    # Add table headers
                    hdr_colum = table_b.rows[0].cells
                    hdr_colum[0].text = "PRODUIT"
                    hdr_colum[1].text = "STOCK"
                    for hdr_colum in table_b.rows[0].cells:
                        hdr_colum.paragraphs[0].runs[0].font.name = 'Calibri'
                        hdr_colum.paragraphs[0].runs[0].font.size = Pt(10.5)
                        hdr_colum.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        hdr_colum.paragraphs[0].runs[0].font.bold = True
                        hdr_colum.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    hdr_colum = table_b.rows[1].cells
                    hdr_colum[0].text = "POIS CHICHES PL"
                    hdr_colum[1].text = ""
                    hdr_colum = table_b.rows[2].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 12 mm"
                    hdr_colum[1].text = self.restpoichichedouzetto + "  QX"
                    hdr_colum = table_b.rows[3].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 09 mm"
                    hdr_colum[1].text = self.restpoichicheneuftto + " QX"
                    hdr_colum = table_b.rows[4].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 08 mm"
                    hdr_colum[1].text = self.restpoichicheouittto + " QX"
                    hdr_colum = table_b.rows[5].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 06 mm"
                    hdr_colum[1].text = self.restpoichichetto + " QX"
                    hdr_colum = table_b.rows[6].cells
                    hdr_colum[0].text = "HARICOT BLANC IMP"
                    hdr_colum[1].text = self.restharicotimptto + " QX"
                    hdr_colum = table_b.rows[7].cells
                    hdr_colum[0].text = "HARICOT LSB"
                    hdr_colum[1].text = self.restharicotlsbtto + " QX"
                    hdr_colum = table_b.rows[8].cells
                    hdr_colum[0].text = "LENTILLE PL"
                    hdr_colum[1].text = self.restlenpltto + " QX"
                    hdr_colum = table_b.rows[9].cells
                    hdr_colum[0].text = "LENTILLE IMP 05-07 mm"
                    hdr_colum[1].text = self.restlentsinqtto + " QX"
                    hdr_colum = table_b.rows[10].cells
                    hdr_colum[0].text = "LENTILLE IMP vert"
                    hdr_colum[1].text = self.restlentverttto + " QX"
                    hdr_colum = table_b.rows[11].cells
                    hdr_colum[0].text = "LENTILLE IMP ROUGE"
                    hdr_colum[1].text = self.restlentrougetto + " QX"
                    hdr_colum = table_b.rows[12].cells
                    hdr_colum[0].text = "RIZ IMP"
                    hdr_colum[1].text = self.resulxtto + " QX"
                    hdr_colum = table_b.rows[13].cells
                    hdr_colum[0].text = "RIZ ETUVE"
                    hdr_colum[1].text = self.resulxtto + " QX"
                    for row in table_b.rows[1:14]:
                        for cell in row.cells:
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "open")
                    dattabase1.close()
                else:
                    print("hello world")
                    conn = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                   database="datta_legumesec_entry")
                    dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                         database='datta_legumsec_out')
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT le,produit,origine,quantité,produit,sacherie,fournisseur, imatricule, date_CND, DLUM FROM entrytable WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    rows = cursor.fetchall()
                    curs1x = dattabase1.cursor()
                    curs1x.execute(
                        "SELECT SUM(quantitérizentré) - SUM(quantitérizesorté) as quantitérizerest FROM outtable WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    self.resulxs = curs1x.fetchone()
                    self.resulxttex = str(self.resulxs[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitepchentré) - sum(quantitépchsorté) as quantitépchrest  FROM outtable   WHERE  fournisseur=%s",
                        (self.selected_expediteur,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichedouzettex = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable WHERE  fournisseur=%s",
                        (self.selected_expediteur,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichichettex = str(resultpch_att[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable WHERE  fournisseur=%s",
                        (self.selected_expediteur,))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischicheplttex = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable WHERE  fournisseur=%s",
                        (self.selected_expediteur,))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenplttex = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE  fournisseur=%s",
                        (self.selected_expediteur,))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentvertttex = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE  fournisseur=%s",
                        (self.selected_expediteur,))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougettex = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE  fournisseur=%s",
                        (self.selected_expediteur,))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimpttex = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable WHERE  fournisseur=%s",
                        (self.selected_expediteur,))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbttex = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable  WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneufttex = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE  fournisseur=%s",
                        (self.selected_expediteur,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouitttex = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE  fournisseur=%s",
                        (self.selected_expediteur,))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqttex = str(resultlensinqtt[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable  WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    resultpch_attex = curstt.fetchone()
                    self.restpoichichett = str(resultpch_att[0])

                    curs5tt = dattabase1.cursor()
                    curs5tt.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable   WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    resultpchpl_att = curs5tt.fetchone()
                    self.restpoischicheplttex = str(resultpchpl_att[0])
                    curs7tt = dattabase1.cursor()
                    curs7tt.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable  WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    resultlenpl_att = curs7tt.fetchone()
                    self.restlenplttex = str(resultlenpl_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    resultlenverttt = curs9tt.fetchone()
                    self.restlentvertttex = str(resultlenverttt[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    resultlenrougett = curs9tt.fetchone()
                    self.restlentrougettex = str(resultlenrougett[0])
                    curs11tt = dattabase1.cursor()
                    curs11tt.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    resulthar_att = curs11tt.fetchone()
                    self.restharicotimptt = str(resulthar_att[0])
                    curs11tt.execute(
                        "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable   WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    resultharlsb_att = curs11tt.fetchone()
                    self.restharicotlsbttex = str(resultharlsb_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable  WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheneufttex = str(resultpch_att[0])
                    curstt = dattabase1.cursor()
                    curstt.execute(
                        "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    resultpch_att = curstt.fetchone()
                    self.restpoichicheouitttex = str(resultpch_att[0])
                    curs9tt = dattabase1.cursor()
                    curs9tt.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE fournisseur=%s",
                        (self.selected_expediteur,))
                    resultlensinqtt = curs9tt.fetchone()
                    self.restlentsinqttex = str(resultlensinqtt[0])
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\t\t\t\tSITUATION DES STOCKS DES LEGUMES SECS', level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(18)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading
                    paragraph0 = self.doc.add_paragraph()
                    paragraph0.style.font.name = 'Times New Roman'
                    left_run0 = paragraph0.add_run(
                        'Période du :' + self.selected_dates + "  au:" + self.selected_datesAU)
                    paragraph0.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

                    paragraph1 = self.doc.add_paragraph()
                    paragraph1.style.font.name = 'Times New Roman'
                    current_date = QDate.currentDate().getDate()
                    left_run1 = paragraph1.add_run(
                        "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Date d'édition : {}/{}/{}".format(current_date[2],
                                                                                                current_date[1],
                                                                                                current_date[0]))
                    left_run1.font.size = Pt(9)

                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(12)
                    left_run = paragraph.add_run(self.selected_magasin + '\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True

                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'PRODUIT'
                    hdr_cells[2].text = 'ORIGINE'
                    hdr_cells[3].text = 'QUANTITE'
                    hdr_cells[4].text = 'MAGASIN DE STOCK'
                    hdr_cells[5].text = 'SASHERIE  CND'
                    hdr_cells[6].text = 'EXPIDITEUR'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(0.5)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2)
                    hdr_cells[2].width = Inches(1)
                    hdr_cells[3].width = Inches(0.4)
                    hdr_cells[4].width = Inches(1.3)
                    hdr_cells[5].width = Inches(1)
                    hdr_cells[6].width = Inches(1)
                    hdr_cells[7].width = Inches(1)
                    hdr_cells[8].width = Inches(0.5)
                    hdr_cells[9].width = Inches(0.5)
                    hdr_cells[10].width = Inches(0.5)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                        cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        cell.paragraphs[0].runs[0].font.bold = True
                        cell.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(9.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.3)
                    # Create the document
                    # Create the table
                    self.doc.add_paragraph().add_run().add_break()
                    table_b = self.doc.add_table(rows=14, cols=2)
                    table_b.style = "Table Grid"
                    # Add table headers
                    hdr_colum = table_b.rows[0].cells
                    hdr_colum[0].text = "PRODUIT"
                    hdr_colum[1].text = "STOCK"
                    for hdr_colum in table_b.rows[0].cells:
                        hdr_colum.paragraphs[0].runs[0].font.name = 'Calibri'
                        hdr_colum.paragraphs[0].runs[0].font.size = Pt(10.5)
                        hdr_colum.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                        hdr_colum.paragraphs[0].runs[0].font.bold = True
                        hdr_colum.paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    hdr_colum = table_b.rows[1].cells
                    hdr_colum[0].text = "POIS CHICHES PL"
                    hdr_colum[1].text = ""
                    hdr_colum = table_b.rows[2].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 12 mm"
                    hdr_colum[1].text = self.restpoichichedouzetto + "  QX"
                    hdr_colum = table_b.rows[3].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 09 mm"
                    hdr_colum[1].text = self.restpoichicheneuftto + " QX"
                    hdr_colum = table_b.rows[4].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 08 mm"
                    hdr_colum[1].text = self.restpoichicheouittto + " QX"
                    hdr_colum = table_b.rows[5].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 06 mm"
                    hdr_colum[1].text = self.restpoichichetto + " QX"
                    hdr_colum = table_b.rows[6].cells
                    hdr_colum[0].text = "HARICOT BLANC IMP"
                    hdr_colum[1].text = self.restharicotimptto + " QX"
                    hdr_colum = table_b.rows[7].cells
                    hdr_colum[0].text = "HARICOT LSB"
                    hdr_colum[1].text = self.restharicotlsbtto + " QX"
                    hdr_colum = table_b.rows[8].cells
                    hdr_colum[0].text = "LENTILLE PL"
                    hdr_colum[1].text = self.restlenpltto + " QX"
                    hdr_colum = table_b.rows[9].cells
                    hdr_colum[0].text = "LENTILLE IMP 05-07 mm"
                    hdr_colum[1].text = self.restlentsinqtto + " QX"
                    hdr_colum = table_b.rows[10].cells
                    hdr_colum[0].text = "LENTILLE IMP vert"
                    hdr_colum[1].text = self.restlentverttto + " QX"
                    hdr_colum = table_b.rows[11].cells
                    hdr_colum[0].text = "LENTILLE IMP ROUGE"
                    hdr_colum[1].text = self.restlentrougetto + " QX"
                    hdr_colum = table_b.rows[12].cells
                    hdr_colum[0].text = "RIZ IMP"
                    hdr_colum[1].text = self.resulxtto + " QX"
                    hdr_colum = table_b.rows[13].cells
                    hdr_colum[0].text = "RIZ IMP"
                    hdr_colum[1].text = self.resulxtto + " QX"
                    for row in table_b.rows[1:14]:
                        for cell in row.cells:
                            cell.paragraphs[0].runs[0].font.name = 'Calibri'
                            cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                            cell.paragraphs[0].runs[0].font.spacing = Pt(0.1)
                            cell.paragraphs[0].runs[0].font.bold = False
                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "open")
                    conn.close()

            except Exception as e:
                print(e)

        def operation_dattabase(self):
            try:
                # Riz operation
                with mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                             database='datta_legumesec_entry') as dattabase:
                    with dattabase.cursor() as curs:
                        curs.execute("SELECT SUM(quantitérizentrée) FROM entrytable")
                        result = curs.fetchone()

                with mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                             database='datta_legumsec_out') as dattabase1:
                    with dattabase1.cursor() as curs1:
                        curs1.execute(
                            "SELECT SUM(quantitérizentré) - SUM(quantitérizesorté) as quantitérizerest FROM outtable")
                        self.resul = curs1.fetchone()
                        self.resultt = str(self.resul[0])
                    with dattabase1.cursor() as curs:
                        curs.execute(
                            "SELECT SUM(quantitérizentré) - SUM(quantitérizesorté) as quantitérizerest FROM outtable WHERE produit=%s AND unité=%s OR origine=%s OR fournisseur=%s",
                            (self.Produits.currentText(), self.Unites.currentText(),
                             self.OrigineDuProduits.currentText(), self.expediteur.currentText()))
                        resultpch_a = curs.fetchone()
                        self.resultstock = str(resultpch_a[0])
                        self.resulttext = str(self.resul[0])
                    with dattabase1.cursor() as curstt:
                        curstt.execute(
                            "SELECT SUM(quantitérizentré) - SUM(quantitérizesorté) as quantitérizerest FROM outtable WHERE produit=%s AND unité=%s OR origine=%s OR fournisseur=%s",
                            (self.Produits.currentText(), self.Unites.currentText(),
                             self.OrigineDuProduits.currentText(), self.expediteur.currentText()))
                        resultpch_ax = curstt.fetchone()
                        self.resulxtt = str(resultpch_ax[0])
                    ########################for docx out
                    with mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                 database='datta_legumsec_out') as dattabase1:
                        with dattabase1.cursor() as curs1x:
                            curs1x.execute(
                                "SELECT SUM(quantitérizentré) - SUM(quantitérizesorté) as quantitérizerest FROM outtable WHERE produit=%s AND unité=%s AND le BETWEEN %s AND %s",
                                (self.selected_produit, self.selected_magasin, self.selected_dates,
                                 self.selected_datesAU))
                            self.resulxs = curs1x.fetchone()
                            self.resulx = str(self.resulxs[0])

            except mysql.connector.Error as e:
                # Handle the error more gracefully, for example, log it or raise a custom exception
                print(f"An error occurred: {e}")

        def rizeEtuve(self):
            try:
                # Riz operation
                with mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                             database='datta_legumesec_entry') as dattabase:
                    with dattabase.cursor() as curs:
                        curs.execute("SELECT SUM(quantitérizetvntrée) FROM entrytable")
                        result = curs.fetchone()

                with mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                             database='datta_legumsec_out') as dattabase1:
                    with dattabase1.cursor() as curs1:
                        curs1.execute(
                            "SELECT SUM(quantitérizetvntré) - SUM(quantitérizetvsorté) as quantitérizetvrest FROM outtable")
                        resulterzetv = curs1.fetchone()
                        self.resuletv = str(resulterzetv[0])
                    with dattabase1.cursor() as curs:
                        curs.execute(
                            "SELECT SUM(quantitérizetvntré) - SUM(quantitérizetvsorté) as quantitérizetvrest FROM outtable WHERE produit=%s AND unité=%s OR origine=%s OR fournisseur=%s",
                            (self.Produits.currentText(), self.Unites.currentText(),
                             self.OrigineDuProduits.currentText(), self.expediteur.currentText()))
                        resultpch_a = curs.fetchone()
                        self.resultstocktv = str(resultpch_a[0])
                        self.resulttextv = str(self.resul[0])
                    with dattabase1.cursor() as curstt:
                        curstt.execute(
                            "SELECT SUM(quantitérizetvntré) - SUM(quantitérizetvsorté) as quantitérizetvrest FROM outtable WHERE produit=%s AND unité=%s OR origine=%s OR fournisseur=%s",
                            (self.Produits.currentText(), self.Unites.currentText(),
                             self.OrigineDuProduits.currentText(), self.expediteur.currentText()))
                        resultpch_axtv = curstt.fetchone()
                        self.resulxttv = str(resultpch_axtv[0])
                    ########################for docx out
                    with mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                 database='datta_legumsec_out') as dattabase1:
                        with dattabase1.cursor() as curs1x:
                            curs1x.execute(
                                "SELECT SUM(quantitérizetvntré) - SUM(quantitérizetvsorté) as quantitérizetvrest FROM outtable WHERE produit=%s AND unité=%s AND le BETWEEN %s AND %s",
                                (self.selected_produit, self.selected_magasin, self.selected_dates,
                                 self.selected_datesAU))
                            self.resulxstv = curs1x.fetchone()
                            self.resulxtv = str(self.resulxstv[0])

            except mysql.connector.Error as e:
                # Handle the error more gracefully, for example, log it or raise a custom exception
                print(f"An error occurred: {e}")

        def poichichSIxSept(self):
            try:
                # Pois chiches operation
                dattabase = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                    database='datta_legumesec_entry')
                dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                     database='datta_legumsec_out')
                curs = dattabase.cursor()
                curs.execute("SELECT SUM(quantitépchsixntrée) AS quantitépchsixtotal FROM entrytable")
                resultpch = curs.fetchone()
                curs = dattabase1.cursor()
                curs.execute(
                    "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable WHERE produit=%s AND unité=%s OR origine=%s OR fournisseur=%s",
                    (self.Produits.currentText(), self.Unites.currentText(), self.OrigineDuProduits.currentText(),
                     self.expediteur.currentText()))
                resultpch_a = curs.fetchone()
                self.restpoichiche = str(resultpch_a[0])
                curs = dattabase1.cursor()
                curs.execute(
                    "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable ")
                resultpch_at = curs.fetchone()
                self.restpoichichett = str(resultpch_at[0])
                ##################for docx out
                curstt = dattabase1.cursor()
                curstt.execute(
                    "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable WHERE produit=%s AND unité=%s AND le BETWEEN %s AND %s",
                    (self.selected_produit, self.selected_magasin, self.selected_dates, self.selected_datesAU))
                resultpch_att = curstt.fetchone()
                self.restpoichichettx = str(resultpch_att[0])
            except Exception as e:
                # Handle the error more gracefully, for example, log it or raise a custom exception
                print(f"An error occurred: {e}")

        def poichichepl(self):
            try:
                ####################pois chichz pl operation
                dattabase = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                    database='datta_legumesec_entry')
                dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                     database='datta_legumsec_out')
                curs4 = dattabase.cursor()
                curs4.execute("SELECT SUM(quantitépchplentrée) AS quantitépchpltotale FROM entrytable ")
                resultpchpl = curs4.fetchone()

                dattabase.commit()
                curs5 = dattabase1.cursor()
                curs5.execute(
                    "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable WHERE produit=%s AND unité=%s OR origine=%s OR fournisseur=%s",
                    (self.Produits.currentText(), self.Unites.currentText(), self.OrigineDuProduits.currentText(),
                     self.expediteur.currentText()))
                resultpchpl_a = curs5.fetchone()
                self.restpoischichepl = str(resultpchpl_a[0])
                dattabase.commit()
                curs5 = dattabase1.cursor()
                curs5.execute(
                    "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable ")
                resultpchpl_at = curs5.fetchone()
                self.restpoischichepltt = str(resultpchpl_at[0])
                dattabase.commit()
                #####for docx out
                curs5tt = dattabase1.cursor()
                curs5tt.execute(
                    "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable WHERE produit=%s AND unité=%s AND le BETWEEN %s AND %s",
                    (self.selected_produit, self.selected_magasin, self.selected_dates, self.selected_datesAU))
                resultpchpl_att = curs5tt.fetchone()
                self.restpoischicheplttx = str(resultpchpl_att[0])
                dattabase.commit()
                dattabase.close()

            except Exception as e:
                print(e)

        def lenpl(self):
            try:
                ###############lentille pl operation
                dattabase = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                    database='datta_legumesec_entry')
                dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                     database='datta_legumsec_out')
                curs6 = dattabase.cursor()
                curs6.execute("SELECT SUM(quantitélenplntrée) AS quantitélenpltotale FROM entrytable ")
                resultlenpl = curs6.fetchone()

                dattabase.commit()

                curs7 = dattabase1.cursor()
                curs7.execute(
                    "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable WHERE produit=%s AND unité=%s OR origine=%s OR fournisseur=%s",
                    (self.Produits.currentText(), self.Unites.currentText(), self.OrigineDuProduits.currentText(),
                     self.expediteur.currentText()))
                resultlenpl_a = curs7.fetchone()
                self.restlenpl = str(resultlenpl_a[0])
                dattabase.commit()
                curs7 = dattabase1.cursor()
                curs7.execute(
                    "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable")
                resultlenpl_att = curs7.fetchone()
                self.restlenpltt = str(resultlenpl_att[0])
                dattabase.commit()
                ###############for docx out
                curs7tt = dattabase1.cursor()
                curs7tt.execute(
                    "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable WHERE produit=%s AND unité=%s AND le BETWEEN %s AND %s",
                    (self.selected_produit, self.selected_magasin, self.selected_dates, self.selected_datesAU))
                resultlenpl_at = curs7tt.fetchone()
                self.restlenplttx = str(resultlenpl_at[0])
                dattabase.commit()
                dattabase.close()

            except Exception as e:
                print(e)

        def lenVert(self):
            try:
                ###########lentille
                dattabase = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                    database='datta_legumesec_entry')
                dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                     database='datta_legumsec_out')
                curs8 = dattabase.cursor()
                curs8.execute("SELECT SUM(quantitélenvertntrée) AS quantitélentotale FROM entrytable ")
                resultlen = curs8.fetchone()

                dattabase.commit()
                curs9 = dattabase1.cursor()
                curs9.execute(
                    "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE produit=%s AND unité=%s OR origine=%s OR fournisseur=%s",
                    (self.Produits.currentText(), self.Unites.currentText(), self.OrigineDuProduits.currentText(),
                     self.expediteur.currentText()))
                resultlenvert = curs9.fetchone()
                self.restlentvert = str(resultlenvert[0])
                dattabase.commit()
                dattabase.commit()
                curs9 = dattabase1.cursor()
                curs9.execute(
                    "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable ")
                resultlenvertt = curs9.fetchone()
                self.restlentvertt = str(resultlenvertt[0])
                dattabase.commit()
                #################for docx out
                curs9tt = dattabase1.cursor()
                curs9tt.execute(
                    "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE produit=%s AND unité=%s AND le BETWEEN %s AND %s",
                    (self.selected_produit, self.selected_magasin, self.selected_dates, self.selected_datesAU))
                resultlenverttt = curs9tt.fetchone()
                self.restlentverttx = str(resultlenverttt[0])
                dattabase.commit()
                dattabase.close()

            except Exception as e:
                print(e)

        def lenRouge(self):
            try:
                ###########lentilleRouge
                dattabase = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                    database='datta_legumesec_entry')
                dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                     database='datta_legumsec_out')
                curs8 = dattabase.cursor()
                curs8.execute("SELECT SUM(quantitélenrougeentrée) AS quantitélenrougetotale FROM entrytable ")
                resultlen = curs8.fetchone()

                dattabase.commit()
                curs9 = dattabase1.cursor()
                curs9.execute(
                    "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE produit=%s AND unité=%s OR origine=%s OR fournisseur=%s",
                    (self.Produits.currentText(), self.Unites.currentText(), self.OrigineDuProduits.currentText(),
                     self.expediteur.currentText()))
                resultlenrouge = curs9.fetchone()
                self.restlentrouge = str(resultlenrouge[0])
                dattabase.commit()
                dattabase.commit()
                curs9 = dattabase1.cursor()
                curs9.execute(
                    "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable ")
                resultlenrouget = curs9.fetchone()
                self.restlentrougett = str(resultlenrouget[0])
                dattabase.commit()
                #################for docx out
                curs9tt = dattabase1.cursor()
                curs9tt.execute(
                    "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE produit=%s AND unité=%s AND le BETWEEN %s AND %s",
                    (self.selected_produit, self.selected_magasin, self.selected_dates, self.selected_datesAU))
                resultlenrougettx = curs9tt.fetchone()
                self.restlentrougettx = str(resultlenrougettx[0])
                dattabase.commit()
                dattabase.close()

            except Exception as e:
                print(e)

        def haricot(self):
            try:
                ####################haricot operation
                dattabase = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                    database='datta_legumesec_entry')
                dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                     database='datta_legumsec_out')
                curs10 = dattabase.cursor()
                curs10.execute("SELECT SUM(quantitéharntrée) AS quantitéhartotale FROM entrytable ")
                resulthar = curs10.fetchone()

                dattabase.commit()
                curs11 = dattabase1.cursor()
                curs11.execute(
                    "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE produit=%s AND unité=%s OR origine=%s OR fournisseur=%s",
                    (self.Produits.currentText(), self.Unites.currentText(), self.OrigineDuProduits.currentText(),
                     self.expediteur.currentText()))
                resulthar_a = curs11.fetchone()
                self.restharicotimp = str(resulthar_a[0])
                dattabase.commit()
                dattabase.commit()
                curs11 = dattabase1.cursor()
                curs11.execute("SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable")
                resulthar_at = curs11.fetchone()
                self.restharicotimptt = str(resulthar_at[0])
                dattabase.commit()
                ############for docx out
                curs11tt = dattabase1.cursor()
                curs11tt.execute(
                    "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE produit=%s AND unité=%s AND le BETWEEN %s AND %s",
                    (self.selected_produit, self.selected_magasin, self.selected_dates, self.selected_datesAU))
                resulthar_att = curs11tt.fetchone()
                self.restharicotimpttx = str(resulthar_att[0])
                dattabase.commit()
                dattabase.close()
            except Exception as e:
                print(e)

        def haricotLsb(self):
            try:
                # Connect to the first database
                with mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                             database='datta_legumesec_entry') as dattabase:
                    with dattabase.cursor() as curs10:
                        # Query for entrytable
                        curs10.execute("SELECT SUM(quantitéharlsbntrée) AS quantitéharlsbtotal FROM entrytable")
                        resulthar = curs10.fetchone()
                        self.quantiteharlsbtotal = str(resulthar[0])

                # Connect to the second database
                with mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                             database='datta_legumsec_out') as dattabase1:
                    with dattabase1.cursor() as curs11:
                        # Query for outtable with specific conditions
                        curs11.execute(
                            "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable WHERE produit=%s AND unité=%s AND origine=%s AND fournisseur=%s",
                            (self.Produits.currentText(), self.Unites.currentText(),
                             self.OrigineDuProduits.currentText(), self.expediteur.currentText()))
                        resultharlsb_a = curs11.fetchone()
                        self.restharicotlsb = str(resultharlsb_a[0]) if resultharlsb_a is not None else "No data found"
                        print(self.restharicotlsb)

                        # Connect to the second database
                        with mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                     database='datta_legumsec_out') as dattabase1:
                            with dattabase1.cursor() as curs11:
                                # Query for outtable with specific conditions
                                curs11.execute(
                                    "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable WHERE produit=%s AND unité=%s AND origine=%s AND fournisseur=%s",
                                    (self.Produits.currentText(), self.Unites.currentText(),
                                     self.OrigineDuProduits.currentText(), self.expediteur.currentText()))
                                resultharlsb_a = curs11.fetchone()
                                self.restharicotlsb = str(
                                    resultharlsb_a[0]) if resultharlsb_a is not None else "No data found"
                                print(self.restharicotlsb)
                            with dattabase1.cursor() as curs11:
                                # Query for outtable with specific conditions
                                curs11.execute(
                                    "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable ")
                                resultharlsb_at = curs11.fetchone()
                                self.restharicotlsbtt = str(resultharlsb_at[0])
                    # Additional query (docx)
                    with dattabase1.cursor() as curs11tt:
                        curs11tt.execute(
                            "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable WHERE produit=%s AND unité=%s AND le BETWEEN %s AND %s",
                            (self.selected_produit, self.selected_magasin, self.selected_dates, self.selected_datesAU))
                        resultharlsb_att = curs11tt.fetchone()
                        self.restharicotlsbtt = str(
                            resultharlsb_att[0]) if resultharlsb_att is not None else "No data found"
                        print("result=" + self.restharicotlsbtt)

            except mysql.connector.Error as e:
                print(f"Error: {e}")
                # Handle the exception appropriately

        def poischicheDouze(self):
            try:
                produitstock = self.Produits.currentText()
                expediteurstock = self.expediteur.currentText()
                unitestock = self.Unites.currentText()
                originestock = self.OrigineDuProduits.currentText()

                # Connect to the first database
                with mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                             database='datta_legumesec_entry') as dattabase:
                    with dattabase.cursor() as curs:
                        curs.execute("SELECT SUM(quantitépchentrée) AS quantitépchtotale FROM entrytable ")
                        resultpch = curs.fetchone()
                        self.poischichdouzeS = str(resultpch[0])
                        dattabase.commit()

                # Connect to the second database
                with mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                             database='datta_legumsec_out') as dattabase1:
                    with dattabase1.cursor() as curs:
                        curs.execute(
                            "SELECT sum(quantitepchentré) - sum(quantitépchsorté) as quantitépchrest FROM outtable WHERE produit=%s AND unité=%s AND origine=%s AND fournisseur=%s",
                            (produitstock, unitestock, originestock, expediteurstock))

                        resultpch_a = curs.fetchone()
                        if resultpch_a is not None:
                            self.restpoichichedouze = str(resultpch_a[0])
                        else:
                            # Handle the case where no results are returned
                            self.restpoichichedouze = "No data found"

                    # Additional query (docx)
                    with dattabase1.cursor() as curstt:
                        query = """
                                SELECT sum(quantitepchentré) - sum(quantitépchsorté) as quantitépchrest 
                                FROM outtable 
                                WHERE produit=%s AND unité=%s AND le BETWEEN %s AND %s
                            """
                        curstt.execute(query, (
                            self.selected_produit, self.selected_magasin, self.selected_dates, self.selected_datesAU))

                        resultpch_att = curstt.fetchone()

                        if resultpch_att is not None:
                            self.restpoichichedouzetts = str(resultpch_att[0])
                        else:
                            self.restpoichichedouzetts = "No result found"

                    with dattabase1.cursor() as cursstt:
                        cursstt.execute(
                            "SELECT sum(quantitepchentré) - sum(quantitépchsorté) as quantitépchrest FROM outtable  "

                        )

                        resultpch_astt = cursstt.fetchone()

                        self.restpoichichedouzett = str(resultpch_astt[0])
            except mysql.connector.Error as e:
                print(f"Error: {e}")
                # Handle the exception appropriately
                dattabase.commit()

        def poischicheNeuf(self):
            try:
                ########pois chiches operatio
                dattabase = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                    database='datta_legumesec_entry')
                dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                     database='datta_legumsec_out')
                curs = dattabase.cursor()
                curs.execute("SELECT SUM(quantitépchneufentrée) AS quantitépchneufetotal FROM entrytable ")
                resultpch = curs.fetchone()
                dattabase.commit()

                curs = dattabase1.cursor()
                curs.execute(
                    "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable WHERE produit=%s AND unité=%s OR origine=%s OR fournisseur=%s",
                    (self.Produits.currentText(), self.Unites.currentText(), self.OrigineDuProduits.currentText(),
                     self.expediteur.currentText()))
                resultpch_a = curs.fetchone()
                self.restpoichicheneuf = str(resultpch_a[0])
                curs = dattabase1.cursor()
                curs.execute(
                    "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable ")
                resultpch_at = curs.fetchone()
                self.restpoichicheneuftt = str(resultpch_at[0])
                ########################for docx out
                curstt = dattabase1.cursor()
                curstt.execute(
                    "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable WHERE produit=%s AND unité=%s AND le BETWEEN %s AND %s",
                    (self.selected_produit, self.selected_magasin, self.selected_dates, self.selected_datesAU))
                resultpch_att = curstt.fetchone()
                self.restpoichicheneufttx = str(resultpch_att[0])
                dattabase.commit()
            except Exception as e:
                print(e)
            pass

        def poischicheOuit(self):
            try:
                ########pois chiches operatio
                dattabase = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                    database='datta_legumesec_entry')
                dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                     database='datta_legumsec_out')
                curs = dattabase.cursor()
                curs.execute("SELECT SUM(quantitépchhuitntrée) AS quantitépchhuittotal FROM entrytable ")
                resultpch = curs.fetchone()

                dattabase.commit()

                curs = dattabase1.cursor()
                curs.execute(
                    "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE produit=%s AND unité=%s OR origine=%s OR fournisseur=%s",
                    (self.Produits.currentText(), self.Unites.currentText(), self.OrigineDuProduits.currentText(),
                     self.expediteur.currentText()))
                resultpch_a = curs.fetchone()
                self.restpoichicheouit = str(resultpch_a[0])
                curs = dattabase1.cursor()
                curs.execute(
                    "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable")
                resultpch_at = curs.fetchone()
                self.restpoichicheouittt = str(resultpch_at[0])
                ##############for docx out
                curstt = dattabase1.cursor()
                curstt.execute(
                    "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE produit=%s AND unité=%s AND le BETWEEN %s AND %s",
                    (self.selected_produit, self.selected_magasin, self.selected_dates, self.selected_datesAU))
                resultpch_att = curstt.fetchone()
                self.restpoichicheouitttx = str(resultpch_att[0])
                dattabase.commit()
                dattabase.close()
            except Exception as e:
                print(e)
            pass

        def lentilleCinqSept(self):
            try:
                ###########lentille
                dattabase = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                    database='datta_legumesec_entry')
                dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                     database='datta_legumsec_out')
                curs8 = dattabase.cursor()
                curs8.execute("SELECT SUM(quantitélenentrée) AS quantitélentotale FROM entrytable ")
                resultlen = curs8.fetchone()

                dattabase.commit()

                curs9 = dattabase1.cursor()
                curs9.execute(
                    "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE produit=%s AND unité=%s OR origine=%s OR fournisseur=%s",
                    (self.Produits.currentText(), self.Unites.currentText(), self.OrigineDuProduits.currentText(),
                     self.expediteur.currentText()))
                resultlensinq = curs9.fetchone()
                self.restlentsinq = str(resultlensinq[0])
                curs9 = dattabase1.cursor()
                curs9.execute("SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable ")
                resultlensinqt = curs9.fetchone()
                self.restlentsinqtt = str(resultlensinqt[0])
                ################for docx out
                curs9tt = dattabase1.cursor()
                curs9tt.execute(
                    "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE produit=%s AND unité=%s AND le BETWEEN %s AND %s",
                    (self.selected_produit, self.selected_magasin, self.selected_dates, self.selected_datesAU))
                resultlensinqtt = curs9tt.fetchone()
                self.restlentsinqttx = str(resultlensinqtt[0])
                dattabase.commit()

            except Exception as e:
                print(e)
            pass

        def totalfunction(self):
            try:
                dattabase = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                    database='datta_legumesec_entry')
                dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                     database='datta_legumsec_out')
                curstotal = dattabase.cursor()
                curstotal.execute(
                    "SELECT (SUM(quantitérizentrée)+SUM(quantitépchentrée)+SUM(quantitépchplentrée)+SUM(quantitélenplntrée)+SUM(quantitélenentrée)+SUM(quantitéharntrée) ) as quantitéentrétotal FROM entrytable")

                totatentre = curstotal.fetchone()

                dattabase.commit()
                curstotalrest = dattabase1.cursor()
                curstotalrest.execute(
                    "SELECT ( SUM(quantitérizentré) + SUM(quantitepchentré)+ SUM(quantitépchplentré) + SUM(quantitélenplentré)+ SUM(quantitélenentré) + SUM(quantitéharentré))-(SUM(quantitérizesorté)+SUM(quantitépchsorté)+SUM(quantitépchplsorté)+SUM(quantitélenplsorté)+SUM(quantitélensorté)+SUM(quantitéharsorté))  as quantitérestotal  FROM outtable")
                totalrest = curstotalrest.fetchone()
                self.rest.setValue(totalrest[0])
                dattabase1.commit()
            except Exception as e:
                print(e)

        def impot_all(self):
            try:
                dattabase = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                    database='datta_legumesec_entry')
                curs = dattabase.cursor()
                curs.execute(
                    "SELECT id,nlot,nlotsch,le,produit,origine,quantité,unité,sacherie,fournisseur,imatricule ,date_recolte,date_CND ,DLUM  FROM entrytable")
                result = curs.fetchall()
                self.textEdit.setRowCount(0)
                for row, row_datta in enumerate(result):
                    self.textEdit.insertRow(row)
                    for colum, datta in enumerate(row_datta):
                        self.textEdit.setItem(row, colum, QTableWidgetItem(str(datta)))
                dattabase.commit()
                dattabase.close()
            except Exception as e:
                print(e)

        def impot_all_sortie(self):
            try:
                dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                     database='datta_legumsec_out')
                curs1 = dattabase1.cursor()
                curs1.execute(
                    "SELECT id, nlot,nlotsch, le, unité, produit, origine, quantité, achteur, sacherie, imatricule, date_recoltes, date_CND, DLUM FROM outtable WHERE  date_recoltes IS NOT NULL AND date_CND IS NOT NULL AND DLUM IS NOT NULL")
                result1 = curs1.fetchall()
                self.textEdit_1.setRowCount(0)
                for row1, row_datta1 in enumerate(result1):
                    print(row1)
                    self.textEdit_1.insertRow(row1)
                    for colum1, datta1 in enumerate(row_datta1):
                        self.textEdit_1.setItem(row1, colum1, QTableWidgetItem(str(datta1)))
                dattabase1.commit()
                dattabase1.close()
            except Exception as e:
                print(e)

        def delete_entry(self):
            try:
                msgbox = QMessageBox()
                msgbox.setWindowTitle("Alerte")
                msgbox.setText("Voulez-vous supprimer !")
                yesbutton = QtWidgets.QPushButton("OUI")
                nobuttons = QtWidgets.QPushButton("NON")
                # msgbox.setStandardButtons(QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
                msgbox.addButton(yesbutton, QMessageBox.ButtonRole.ActionRole)
                msgbox.addButton(nobuttons, QMessageBox.ButtonRole.ActionRole)
                push = msgbox.exec()
                clicked_button = msgbox.clickedButton()
                if clicked_button == nobuttons:
                    print("NO")
                elif clicked_button == yesbutton:
                    print("yes clicked")
                    curentrow = self.textEdit.currentRow()
                    id_ = self.textEdit.item(curentrow, 0).text()
                    database = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                       database='datta_legumesec_entry')
                    curs = database.cursor()
                    curs.execute("DELETE FROM entrytable WHERE id=%s", (id_,))
                    database.commit()
                    curs.close()
                    database.close()
                    database = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                       database="datta_legumsec_out")
                    curs = database.cursor()
                    curs.execute("DELETE FROM outtable WHERE id=%s", (id_,))
                    database.commit()
                    database.close()
                    self.impot_all()
            except mysql.connector.Error as e:
                print(e)

        def delete_out(self):
            try:
                msgbox = QMessageBox()
                msgbox.setStyleSheet(""" QWidget
                    {
                        color: #eff0f1;
                        background-color: #31363b;
                        border-width: 1px;
                        border-color: #1e1e1e;
                        border-style: solid;
                        border-radius: 6;
                        padding: 3px;
                        font-size: 12px;
                        padding-left: 5px;
                        padding-right: 5px
                    }
                    QWidget:item:hover
                    {
                        background-color: #3daee9;
                        color: #eff0f1;
                    }
                    QWidget:item:selected
                    {
                        background-color: #3daee9;
                    }
                    QWidget:disabled
                    {
                        color: #454545;
                        background-color: #31363b;
                    }
                    QPushButton
                    {
                        color: #b1b1b1;
                        background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646);
                        border-width: 1px;
                        border-color: #1e1e1e;
                        border-style: solid;
                        border-radius: 6;
                        padding: 3px;
                        font-size: 12px;
                        padding-left: 5px;
                        padding-right: 5px;
                        min-width: 40px;
                    }
                    QPushButton:disabled
                    {
                        background-color: #31363b;
                        border-width: 1px;
                        border-color: #454545;
                        border-style: solid;
                        padding-top: 5px;
                        padding-bottom: 5px;
                        padding-left: 10px;
                        padding-right: 10px;
                        border-radius: 2px;
                        color: #454545;
                    }

                    QPushButton:pressed
                    {
                        background-color: #3daee9;
                        padding-top: -15px;
                        padding-bottom: -17px;
                    }
                    QPushButton:hover
                    {
                        border: 1px solid #ff8c00;
                        color: #eff0f1;
                    }
                     QLabel
                    {
                        font-size: 18px;
                        border: 1px solid orange;
                    }

                """)
                msgbox.setWindowTitle("Alerte")
                msgbox.setText("Voulez-vous supprimer !")
                yesbutton = QtWidgets.QPushButton("OUI")
                nobuttons = QtWidgets.QPushButton("NON")
                # msgbox.setStandardButtons(QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
                msgbox.addButton(yesbutton, QMessageBox.ButtonRole.ActionRole)
                msgbox.addButton(nobuttons, QMessageBox.ButtonRole.ActionRole)
                push = msgbox.exec()
                if msgbox.clickedButton() == nobuttons:
                    print("no")
                elif msgbox.clickedButton() == yesbutton:
                    curentrow = self.textEdit_1.currentRow()
                    id_ = self.textEdit_1.item(curentrow, 0).text()
                    database = mysql.connector.connect(
                        host="localhost",
                        user="qualite",
                        password="qualite48",
                        database="datta_legumsec_out"
                    )
                    curs = database.cursor()
                    curs.execute("DELETE FROM outtable WHERE id=%s", (id_,))
                    database.commit()
                    database.close()
                    self.impot_all_sortie()
            except:
                print(' ')

        def print_docx(self):
            self.poischicheDouze()
            self.poischicheNeuf()
            self.poischicheOuit()
            self.poichichSIxSept()
            self.operation_dattabase()
            self.haricot()
            self.haricotLsb()
            self.lentilleCinqSept()
            self.lenVert()
            self.lenpl()
            self.poichichepl()
            dialog = QMessageBox()
            dialog.setStyleSheet(""" QWidget
                    {
                        color: #000000;
                        background-color: #ffffff;
                        border-width: 1px;
                        border-color: #1e1e1e;
                        border-style: solid;
                        border-radius: 6;
                        padding: 3px;
                        font-size: 18px;
                        padding-left: 5px;
                        padding-right: 5px
                    }
                    QWidget:item:hover
                    {
                        background-color: #3daee9;
                        color: #eff0f1;
                    }
                    QWidget:item:selected
                    {
                        background-color: #3daee9;
                    }
                    QWidget:disabled
                    {
                        color: #454545;
                        background-color: #31363b;
                    }
                    QPushButton
                    {
                        color: #b1b1b1;
                        background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646);
                        border-width: 1px;
                        border-color: #1e1e1e;
                        border-style: solid;
                        border-radius: 6;
                        padding: 3px;
                        font-size: 12px;
                        padding-left: 5px;
                        padding-right: 5px;
                        min-width: 40px;
                    }
                    QPushButton:disabled
                    {
                        background-color: #31363b;
                        border-width: 1px;
                        border-color: #454545;
                        border-style: solid;
                        padding-top: 5px;
                        padding-bottom: 5px;
                        padding-left: 10px;
                        padding-right: 10px;
                        border-radius: 2px;
                        color: #454545;
                    }

                    QPushButton:pressed
                    {
                        background-color: #3daee9;
                        padding-top: -15px;
                        padding-bottom: -17px;
                    }
                    QPushButton:hover
                    {
                        border: 1px solid #ff8c00;
                        color: #eff0f1;
                    }
                     QLabel
                    {
                        font-size: 18px;
                        border: 0px solid orange;
                    }

                """)
            dialog.setWindowTitle("Select a Date")
            dialog.setText("Sélectionnez la date et produit souhaitée\n")
            self.date_edit = QtWidgets.QLineEdit(dialog)
            self.date_edit.setInputMask("99-99-9999")
            self.date_edit.resize(180, 30)
            self.date_edit.move(40, 82)
            self.produitphytofiltre = QtWidgets.QComboBox(dialog)
            self.produitphytofiltre.setGeometry(40, 42, 180, 30)
            self.produitphytofiltre.addItem("")
            self.produitphytofiltre.addItem("POIS CHICHES")
            self.produitphytofiltre.addItem("LENTILLE")
            self.produitphytofiltre.addItem("RIZ")
            self.produitphytofiltre.addItem("HARICOT")
            self.produitphytofiltre.addItem("LENTILLE PL")
            self.produitphytofiltre.addItem("POIS CHICHES PL")
            ok_button = QtWidgets.QPushButton("OK", dialog)
            cancel_button = QtWidgets.QPushButton("Cancel", dialog)
            dialog.addButton(ok_button, QMessageBox.ButtonRole.ActionRole)
            dialog.addButton(cancel_button, QMessageBox.ButtonRole.ActionRole)
            dialog.exec()
            try:
                self.produitphyto = self.produitphytofiltre.currentText()
                self.selected_date = self.date_edit.text()
                if dialog.clickedButton() == ok_button and self.produitphytofiltre.currentText() not in ['POIS CHICHES',
                                                                                                         'LENTILLE',
                                                                                                         'RIZ',
                                                                                                         'HARICOT',
                                                                                                         'LENTILLE PL',
                                                                                                         'POIS CHICHES PL'] and self.selected_date == "00-00-0000":
                    conn = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                   database="datta_legumesec_entry")
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT le,produit,origine,quantité,unité,sacherie,fournisseur,imatricule,date_recolte,date_CND,DLUM FROM entrytable")
                    rows = cursor.fetchall()
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(1.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\tSITUATION DES STOCKS DES LEGUMES SECS\n\t\t\t\t\t\t\t\t\t\t\tENTRE', level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(30)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading
                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(14)
                    left_run = paragraph.add_run('CCLS RELIZANE\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True
                    right_run = paragraph.add_run('Global')
                    right_run.bold = True

                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'PRODUIT'
                    hdr_cells[2].text = 'ORIGINE'
                    hdr_cells[3].text = 'QUANTITE'
                    hdr_cells[4].text = 'MAGASIN DE STOCK'
                    hdr_cells[5].text = 'SASHERIE  CND'
                    hdr_cells[6].text = 'FOURNISSEUR'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(1)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(1)
                    hdr_cells[2].width = Inches(1)
                    hdr_cells[3].width = Inches(1)
                    hdr_cells[4].width = Inches(1)
                    hdr_cells[5].width = Inches(1)
                    hdr_cells[6].width = Inches(1)
                    hdr_cells[7].width = Inches(1)
                    hdr_cells[8].width = Inches(1)
                    hdr_cells[9].width = Inches(1)
                    hdr_cells[10].width = Inches(1)
                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                        cell.paragraphs[0].runs[0].font.size = Pt(11.5)
                        cell.paragraphs[0].runs[0].font.bold = True
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                            cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.6)
                    # Create the document
                    # Create the table
                    table_b = self.doc.add_table(rows=12, cols=2)
                    table_b.style = "Table Grid"
                    # Add table headers
                    hdr_colum = table_b.rows[0].cells
                    hdr_colum[0].text = "PRODUIT"
                    hdr_colum[1].text = "STOCK"
                    hdr_colum = table_b.rows[1].cells
                    hdr_colum[0].text = "POIS CHICHES PL"
                    hdr_colum[1].text = ""
                    hdr_colum = table_b.rows[2].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 12 mm"
                    hdr_colum[1].text = self.restpoichichedouze + "  QX"
                    hdr_colum = table_b.rows[3].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 09 mm"
                    hdr_colum[1].text = self.restpoichicheneufs + " QX"
                    hdr_colum = table_b.rows[4].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 08 mm"
                    hdr_colum[1].text = self.restpoichicheouits + " QX"
                    hdr_colum = table_b.rows[5].cells
                    hdr_colum[0].text = "POIS CHICHES IMP 06 mm"
                    hdr_colum[1].text = self.restpoichiches + " QX"
                    hdr_colum = table_b.rows[6].cells
                    hdr_colum[0].text = "HARICOT BLANC IMP"
                    hdr_colum[1].text = self.restharicotimps + " QX"
                    hdr_colum = table_b.rows[7].cells
                    hdr_colum[0].text = "HARICOT LSB"
                    hdr_colum[1].text = self.restharicotlsbs + " QX"
                    hdr_colum = table_b.rows[8].cells
                    hdr_colum[0].text = "LENTILLE PL"
                    hdr_colum[1].text = self.restlenpls + " QX"
                    hdr_colum = table_b.rows[9].cells
                    hdr_colum[0].text = "LENTILLE IMP 05-07 mm"
                    hdr_colum[1].text = self.restlentsinqs + " QX"
                    hdr_colum = table_b.rows[10].cells
                    hdr_colum[0].text = "LENTILLE IMP vert"
                    hdr_colum[1].text = self.restlentverts + " QX"
                    hdr_colum = table_b.rows[11].cells
                    hdr_colum[0].text = "RIZ IMP"
                    hdr_colum[1].text = self.resulxs + " QX"

                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "open")
                elif dialog.clickedButton() == ok_button and self.produitphytofiltre.currentText() not in [
                    'POIS CHICHES', 'LENTILLE', 'RIZ', 'HARICOT', 'LENTILLE PL',
                    'POIS CHICHES PL'] and self.date_edit.text() == self.selected_date:
                    print(self.selected_date)
                    conn = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                   database="datta_legumesec_entry")
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT le,produit,origine,quantité,unité,sacherie,fournisseur, imatricule, date_CND, DLUM FROM entrytable WHERE le = %s",
                        (self.selected_date,))
                    rows = cursor.fetchall()
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(1.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\tSITUATION DES STOCKS DES LEGUMES SECS\n\t\t\t\t\t\t\t\t\t\t\tENTRE', level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(30)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading
                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(14)
                    left_run = paragraph.add_run('CCLS RELIZANE\t\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True
                    right_run = paragraph.add_run('Mois de:' + self.selected_date)
                    right_run.bold = True
                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'PRODUIT'
                    hdr_cells[2].text = 'ORIGINE'
                    hdr_cells[3].text = 'QUANTITE'
                    hdr_cells[4].text = 'MAGASIN DE STOCK'
                    hdr_cells[5].text = 'SASHERIE  CND'
                    hdr_cells[6].text = 'FOURNISSEUR'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(1)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(1)
                    hdr_cells[2].width = Inches(1)
                    hdr_cells[3].width = Inches(1)
                    hdr_cells[4].width = Inches(1)
                    hdr_cells[5].width = Inches(1)
                    hdr_cells[6].width = Inches(1)
                    hdr_cells[7].width = Inches(1)
                    hdr_cells[8].width = Inches(1)
                    hdr_cells[9].width = Inches(1)
                    hdr_cells[10].width = Inches(1)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                        cell.paragraphs[0].runs[0].font.size = Pt(11.5)
                        cell.paragraphs[0].runs[0].font.bold = True
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                            cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.6)
                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "print")
                    conn.close()

                elif dialog.clickedButton() == ok_button and self.produitphytofiltre.currentText() == self.produitphyto:

                    conn = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                   database="datta_legumesec_entry")
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT le,produit,origine,quantité,unité,sacherie,fournisseur, imatricule, date_CND, DLUM FROM entrytable WHERE produit= %s",
                        (self.produitphyto,))
                    rows = cursor.fetchall()
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(1.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\tSITUATION DES STOCKS DES LEGUMES SECS\n\t\t\t\t\t\t\t\t\t\t\tENTRE ', level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(30)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading
                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(14)
                    left_run = paragraph.add_run('CCLS RELIZANE\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True
                    right_run = paragraph.add_run('Produit:' + self.produitphyto)
                    right_run.bold = True
                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'PRODUIT'
                    hdr_cells[2].text = 'ORIGINE'
                    hdr_cells[3].text = 'QUANTITE'
                    hdr_cells[4].text = 'MAGASIN DE STOCK'
                    hdr_cells[5].text = 'SASHERIE  CND'
                    hdr_cells[6].text = 'FOURNISSEUR'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(1)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(1)
                    hdr_cells[2].width = Inches(1)
                    hdr_cells[3].width = Inches(1)
                    hdr_cells[4].width = Inches(1)
                    hdr_cells[5].width = Inches(1)
                    hdr_cells[6].width = Inches(1)
                    hdr_cells[7].width = Inches(1)
                    hdr_cells[8].width = Inches(1)
                    hdr_cells[9].width = Inches(1)
                    hdr_cells[10].width = Inches(1)
                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                        cell.paragraphs[0].runs[0].font.size = Pt(11.5)
                        cell.paragraphs[0].runs[0].font.bold = True
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                            cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.6)
                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "print")
                    conn.close()
            except Exception as e:
                print(e)

        def print_facture_sortie(self):
            try:
                self.msgbox = QtWidgets.QDialog()
                self.msgbox.setGeometry(300, 40, 810, 670)
                self.msgbox.setStyleSheet(""" QWidget
                                       {
                                           color: #eff0f1;
                                           background-color: #31363b;
                                           border-width: 1px;
                                           border-color: #1e1e1e;
                                           border-style: solid;
                                           border-radius: 6;
                                           padding: 0px;
                                           font-size: 18px;
                                           padding-left: 5px;
                                           padding-right: 5px
                                       }
                                       QWidget:item:hover
                                       {
                                           background-color: #3daee9;
                                           color: #eff0f1;
                                       }
                                       QWidget:item:selected
                                       {
                                           background-color: #3daee9;
                                       }
                                       QWidget:disabled
                                       {
                                           color: #454545;
                                           background-color: #31363b;
                                       }
                                       QPushButton
                                       {
                                           color: #b1b1b1;
                                           background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646);
                                           border-width: 1px;
                                           border-color: #1e1e1e;
                                           border-style: solid;
                                           border-radius: 6;
                                           padding: 3px;
                                           font-size: 16px;
                                           padding-left: 5px;
                                           padding-right: 5px;
                                           min-width: 40px;
                                       }
                                       QPushButton:disabled
                                       {
                                           background-color: #31363b;
                                           border-width: 1px;
                                           border-color: #454545;
                                           border-style: solid;
                                           padding-top: 5px;
                                           padding-bottom: 5px;
                                           padding-left: 10px;
                                           padding-right: 10px;
                                           border-radius: 2px;
                                           color: #454545;
                                       }

                                       QPushButton:pressed
                                       {
                                           background-color: #3daee9;
                                           padding-top: -15px;
                                           padding-bottom: -17px;
                                       }
                                       QPushButton:hover
                                       {
                                           border: 1px solid #ff8c00;
                                           color: #eff0f1;
                                       }
                                        QLabel
                                       {
                                           font-size: 16px;
                                           border: 0px solid orange;
                                       }

                                       QTableView
        {
            border: 1px solid #76797C;
            gridline-color: #31363b;
            background-color: #302629;

        }


        QTableView, QHeaderView
        {
            border-radius: 0px;
        }

        QTableView::item:pressed, QListView::item:pressed, QTreeView::item:pressed  {
            background: #3daee9;
            color: #eff0f1;
            font-size: 16px;
        }

        QTableView::item:selected:active, QTreeView::item:selected:active, QListView::item:selected:active  {
            background: #3daee9;
            color: #eff0f1;
            font-size: 16px;
        }


        QHeaderView
        {
            background-color: #31363b;
            border: 1px transparent;
            border-radius: 0px;
            margin: 0px;
            padding: 0px;
            font-size: 16px;

        }

        QHeaderView::section  {
            background-color: #31363b;
            color: #eff0f1;
            padding: 1px;
            border: 1px solid #76797C;
            border-radius: 0px;
            text-align: center;
            font-size: 16px;
        }

        QHeaderView::section::vertical::first, QHeaderView::section::vertical::only-one
        {
            border-top: 1px solid #76797C;
        }

        QHeaderView::section::vertical
        {
            border-top: transparent;
        }

        QHeaderView::section::horizontal::first, QHeaderView::section::horizontal::only-one
        {
            border-left: 1px solid #76797C;
        }

        QHeaderView::section::horizontal
        {
            border-left: transparent;
        }


        QHeaderView::section:checked
         {
            color: white;
            background-color: #334e5e;
            font-size: 16px;
         }

         /* style the sort indicator */
        QHeaderView::down-arrow {

        }

        QHeaderView::up-arrow {

        }


        QTableCornerButton::section {
            background-color: #31363b;
            border: 1px transparent #76797C;
            border-radius: 0px;
        }

                                   """)
                self.msgbox.setWindowTitle("Fiche de traitement")

                self.ok_button = QtWidgets.QPushButton("Imprimer", self.msgbox,
                                                       clicked=lambda: self.docx_facture_sortie())
                self.ok_button.setGeometry(100, 580, 200, 40)
                self.cancel_button = QtWidgets.QPushButton("Annuler", self.msgbox, clicked=lambda: self.msgbox.close())
                self.cancel_button.setGeometry(500, 580, 200, 40)

                self.save_button = QtWidgets.QPushButton("Enregistrer", self.msgbox,
                                                         clicked=lambda: self.save_facture_sortie())
                self.save_button.setGeometry(300, 580, 200, 40)

                self.addd_button = QtWidgets.QPushButton("Insérer", self.msgbox, clicked=lambda: self.add_table())
                self.addd_button.setGeometry(400, 295, 390, 40)

                # msgbox.setText("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")

                # msgbox.addButton(ok_button,QMessageBox.ButtonRole.ActionRole)
                # msgbox.addButton(cancel_button,QMessageBox.ButtonRole.ActionRole)
                fichetraitementxt = QtWidgets.QLabel("LA FACTURE", self.msgbox)
                fichetraitementxt.setGeometry(300, 5, 200, 60)
                dateDeFacturetx = QtWidgets.QLabel("Date de facture:", self.msgbox)
                dateDeFacturetx.setGeometry(5, 60, 160, 30)
                self.dateDeFacture = QtWidgets.QLineEdit("Date", self.msgbox)
                self.dateDeFacture.setInputMask("99/99/9999")
                self.dateDeFacture.setGeometry(190, 60, 170, 30)
                NmDeFacturetxt = QtWidgets.QLabel("Numero de facture :", self.msgbox)
                NmDeFacturetxt.setGeometry(400, 60, 300, 30)
                self.NmDeFacture = QtWidgets.QLineEdit(self.msgbox, readOnly=True)
                self.NmDeFacture.setGeometry(620, 60, 170, 30)
                self.NmDeFacture.setText(str(self.textEdit_1.rowCount()))

                self.Nomtxt = QtWidgets.QLabel("Client:", self.msgbox)
                self.Nomtxt.setGeometry(5, 115, 300, 30)

                self.Nom = QtWidgets.QLineEdit(self.msgbox)
                self.Nom.setGeometry(190, 115, 170, 30)

                self.IMATRICULEtxt = QtWidgets.QLabel("Imatricule:", self.msgbox)
                self.IMATRICULEtxt.setGeometry(5, 175, 242, 30)

                self.IMATRICULE = QtWidgets.QLineEdit(self.msgbox)
                self.IMATRICULE.setGeometry(190, 175, 170, 30)
                self.IMATRICULE.setInputMask("99999-999-99")

                self.Unitetxt = QtWidgets.QLabel("Unité de stock:", self.msgbox)
                self.Unitetxt.setGeometry(5, 305, 300, 30)

                self.Unite = QtWidgets.QComboBox(self.msgbox, editable=True)
                self.Unite.addItem(" ")
                self.Unite.addItem("Dock Central")
                self.Unite.addItem("Mesra")
                self.Unite.addItem("Kef lazreg")
                self.Unite.addItem("Zemmoura")
                self.Unite.addItem("N.S.Mendes")
                self.Unite.addItem(" Mendes")
                self.Unite.addItem("OFLA ")
                self.Unite.addItem("Magasin Belhacel ")
                self.Unite.setGeometry(190, 305, 170, 30)

                self.Produittxt = QtWidgets.QLabel(" Produit :", self.msgbox)
                self.Produittxt.setGeometry(400, 115, 300, 30)

                self.Produit = QtWidgets.QComboBox(self.msgbox, editable=True)
                self.Produit.setGeometry(620, 115, 170, 30)
                self.Produit.addItem("")
                self.Produit.addItem("POIS CHICHES")
                self.Produit.addItem("LENTILLE")
                self.Produit.addItem("RIZ")
                self.Produit.addItem("HARICOT")
                self.Produit.addItem("LENTILLE PL")
                self.Produit.addItem("POIS CHICHES PL")

                self.OrigineDuProduittxt = QtWidgets.QLabel("Origine de produit:", self.msgbox)
                self.OrigineDuProduittxt.setGeometry(400, 305, 300, 30)

                self.OrigineDuProduit = QtWidgets.QLineEdit(self.msgbox)
                self.OrigineDuProduit.setGeometry(620, 305, 170, 30)

                self.DLUMtxt = QtWidgets.QLabel("DLUM:", self.msgbox)
                self.DLUMtxt.setGeometry(5, 295, 160, 30)

                self.DLUM = QtWidgets.QLineEdit(self.msgbox)
                self.DLUM.setGeometry(190, 295, 170, 30)
                self.DLUM.setInputMask("99/99/9999")

                self.quantitetxt = QtWidgets.QLabel("Quantité:", self.msgbox)
                self.quantitetxt.setGeometry(400, 175, 160, 30)
                self.quantite = QtWidgets.QLineEdit(self.msgbox)
                self.quantite.setGeometry(620, 175, 170, 30)

                self.txtfacturetxt = QtWidgets.QLabel(" ", self.msgbox)
                self.txtfacturetxt.setGeometry(400, 400, 100, 20)
                self.txtfacture = QtWidgets.QTableWidget(self.msgbox)
                self.txtfacture.setGeometry(10, 350, 780, 200)
                self.txtfacture.setStyleSheet(" background-color: #302629 ")
                self.txtfacture.setRowCount(0)
                self.txtfacture.setColumnCount(5)
                self.txtfacture.setColumnWidth(0, 140)
                self.txtfacture.setColumnWidth(1, 140)
                self.txtfacture.setColumnWidth(2, 145)
                self.txtfacture.setColumnWidth(3, 175)
                self.txtfacture.setColumnWidth(4, 145)
                self.txtfacture.setHorizontalHeaderLabels(
                    ("UNITÉ", "PRODUIT", "QUANTITÉ", "ORIGINE DE PRODUIT", "DLUM"))

                for row in range(self.txtfacture.rowCount()):
                    for col in range(self.txtfacture.columnCount()):
                        item = self.txtfacture.item(row, col)
                        if item is not None:
                            global cell_text
                            cell_text = item.text()
                            print(f"Row {row}, Column {col}: {self.cell_text}")
                self.msgbox.show()
                self.msgbox.exec()
            except Exception as e:
                print(e)

        def docx_facture_sortie(self):
            try:
                # Retrieve data from various widgets
                dateFactur = self.dateDeFacture.text()
                nom = self.Nom.text()
                imatricule = self.IMATRICULE.text()
                unité = self.Unite.currentText()
                produit = self.Produit.currentText()
                origineProduit = self.OrigineDuProduit.text()
                DLUM = self.DLUM.text()
                quantite = self.quantite.text()

                # Loop through the table to get cell data
                table_data = []
                for row in range(self.txtfacture.rowCount()):
                    row_data = []
                    for col in range(self.txtfacture.columnCount()):
                        item = self.txtfacture.item(row, col)
                        if item is not None:
                            cell_text = item.text()
                            row_data.append(cell_text)
                    if row_data:
                        table_data.append(row_data)
                # Accessing the database (you may need to uncomment this part)
                # database = mysql.connector.connect(host="localhost",user="qualite",password="qualite48",database='datta_legumsec_out')
                # cursor = database.cursor()
                # cursor.execute("SELECT id FROM outtable WHERE  quantité  IS  NOT NULL ORDER BY id DESC LIMIT 1")
                # result = cursor.fetchone()
                # if result is not None:
                #     last_id = result[0]
                #     numeroDeFacture = str(last_id)
                # Calculate row count (you may need to uncomment this part)
                # rowcount = self.textEdit_1.rowCount()
                # self.numeroDeFacture = rowcount
                # Render the template with the data
                self.docFacture = DocxTemplate("fiche_legume-sec/legum_sec_templfactur.docx")
                context = {
                    "dtf": dateFactur,
                    # "nmf": self.numeroDeFacture,
                    "nom": nom,
                    "imt": imatricule,
                    "msn": unité,
                    "prd": produit,
                    "org": origineProduit,
                    "dlm": DLUM,
                    "qtt": quantite,
                    "msn": table_data[0][0],
                    "msna": table_data[1][0],
                    "msnb": table_data[2][0],
                    "msnc": table_data[3][0],
                    "msnd": table_data[4][0],
                    "msne": table_data[0][1],
                    "prda": table_data[5][0],
                    "prd": table_data[1][1],
                    "prdb": table_data[2][1],
                    "prdc": table_data[3][1],
                    "prdd": table_data[4][1],
                    "prde": table_data[5][1]
                }
                self.docFacture.render(context)
                # Save the template to a temporary file
                tempfilebd = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                self.docFacture.save(tempfilebd)
                # Open the temporary file
                os.startfile(tempfilebd, "open")
            except Exception as e:
                print(e)

        def save_facture_sortie(self):
            try:
                dateFatur = self.dateedite_1.text()
                client = self.magasincombo_1.currentText()
                imatricule = self.imatricullineeditr_1.text()
                unité = self.magasincombos.currentText()
                produit = self.produitcombo_1.currentText()
                origineProduit = self.originel_1.text()
                DLUM = self.dateEditdlum_1.text()
                qauntite = self.quatitelineEdit_1.text()
                try:
                    # database = mysql.connector.connect(host="localhost",user="qualite",password="qualite48",database='datta_legumsec_out')
                    # cursor = database.cursor()
                    # cursor.execute("SELECT id FROM outtable WHERE  quantité  IS  NOT NULL ORDER BY id DESC LIMIT 1")
                    # result = cursor.fetchone()
                    # if result is not None:
                    # last_id = result[0]
                    # numeroDeFacture=(str(last_id))
                    rowcount = self.textEdit_1.rowCount()
                    numeroDeFacture = rowcount
                except sqlite3.Error as e:
                    print("Error accessing the database:", e)
                self.docFacture = DocxTemplate("fiche_legume-sec/legum_sec_templfactur.docx")
                self.docFacture.render({"dtf": dateFatur,
                                        "nmf": numeroDeFacture,
                                        "prn": client,
                                        "imt": imatricule,
                                        "msn": unité,
                                        "prd": produit,
                                        "org": origineProduit,
                                        "dlm": DLUM,
                                        "qtt": qauntite, })

                path, _ = QFileDialog.getSaveFileName(None, "Enregistrer la fiche", "", "Fichiers DOCX (*.docx)")
                if path:
                    self.docFacture.save(path)
                    msgbox = QtWidgets.QMessageBox()
                    msgbox.setWindowTitle('confirmation')
                    msgbox.setText('fiche de traitemen a été enregistrée')
                    msgbox.exec()

            except Exception as e:
                print(e)

        def print_docx_sortie(self):
            dialog = QMessageBox()
            dialog.setStyleSheet(""" QWidget
                    {
                        color: #eff0f1;
                        background-color: #31363b;
                        border-width: 1px;
                        border-color: #1e1e1e;
                        border-style: solid;
                        border-radius: 6;
                        padding: 3px;
                        font-size: 18px;
                        padding-left: 5px;
                        padding-right: 5px
                    }
                    QWidget:item:hover
                    {
                        background-color: #3daee9;
                        color: #eff0f1;
                    }
                    QWidget:item:selected
                    {
                        background-color: #3daee9;
                    }
                    QWidget:disabled
                    {
                        color: #454545;
                        background-color: #31363b;
                    }
                    QPushButton
                    {
                        color: #b1b1b1;
                        background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646);
                        border-width: 1px;
                        border-color: #1e1e1e;
                        border-style: solid;
                        border-radius: 6;
                        padding: 3px;
                        font-size: 12px;
                        padding-left: 5px;
                        padding-right: 5px;
                        min-width: 40px;
                    }
                    QPushButton:disabled
                    {
                        background-color: #31363b;
                        border-width: 1px;
                        border-color: #454545;
                        border-style: solid;
                        padding-top: 5px;
                        padding-bottom: 5px;
                        padding-left: 10px;
                        padding-right: 10px;
                        border-radius: 2px;
                        color: #454545;
                    }

                    QPushButton:pressed
                    {
                        background-color: #3daee9;
                        padding-top: -15px;
                        padding-bottom: -17px;
                    }
                    QPushButton:hover
                    {
                        border: 1px solid #ff8c00;
                        color: #eff0f1;
                    }
                     QLabel
                    {
                        font-size: 18px;
                        border: 0px solid orange;
                    }

                """)
            dialog.setWindowTitle("Select a Date")
            dialog.setText("Sélectionnez la date et produit souhaitée\n")
            self.date_edit = QtWidgets.QLineEdit(dialog)
            self.date_edit.setInputMask("99-99-9999")
            self.date_edit.resize(180, 30)
            self.date_edit.move(40, 82)
            self.produitphytofiltre = QtWidgets.QComboBox(dialog)
            self.produitphytofiltre.setGeometry(40, 42, 180, 30)
            self.produitphytofiltre.addItem("")
            self.produitphytofiltre.addItem("POIS CHICHES")
            self.produitphytofiltre.addItem("LENTILLE")
            self.produitphytofiltre.addItem("RIZ")
            self.produitphytofiltre.addItem("HARICOT")
            self.produitphytofiltre.addItem("LENTILLE PL")
            self.produitphytofiltre.addItem("POIS CHICHES PL")
            ok_button = QtWidgets.QPushButton("OK", dialog)
            cancel_button = QtWidgets.QPushButton("Cancel", dialog)
            dialog.addButton(ok_button, QMessageBox.ButtonRole.ActionRole)
            dialog.addButton(cancel_button, QMessageBox.ButtonRole.ActionRole)
            dialog.exec()
            try:
                self.produitphyto = self.produitphytofiltre.currentText()
                self.selected_date = self.date_edit.text()
                if dialog.clickedButton() == ok_button and self.produitphytofiltre.currentText() not in ['POIS CHICHES',
                                                                                                         'LENTILLE',
                                                                                                         'RIZ',
                                                                                                         'HARICOT',
                                                                                                         'LENTILLE PL',
                                                                                                         'POIS CHICHES PL'] and self.selected_date == "00-00-0000":
                    conn = sqlite3.connect('datta_legumsec_out.db')
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT le,unité,produit ,origine ,quantité ,achteur ,sacherie ,imatricule,date_recoltes,date_CND ,DLUM FROM outtable  WHERE  quantité  IS  NOT NULL")
                    rows = cursor.fetchall()
                    print(rows)

                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(1.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\t\t\t\t\tSITUATION DES STOCKS DES LEGUMES SECS\n\t\t\t\t\t\t\t\t\t\t\tSORTIE', level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(30)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading
                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(14)
                    left_run = paragraph.add_run('CCLS RELIZANE\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True
                    right_run = paragraph.add_run('Global')
                    right_run.bold = True
                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'MAGASIN DE STOCK'
                    hdr_cells[2].text = 'PRODUIT'
                    hdr_cells[3].text = 'ORIGINE'
                    hdr_cells[4].text = 'QUANTITE'
                    hdr_cells[5].text = 'ACHTEUR'
                    hdr_cells[6].text = 'SACHERIE DE CND'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(2)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2)
                    hdr_cells[2].width = Inches(2)
                    hdr_cells[3].width = Inches(1.5)
                    hdr_cells[4].width = Inches(1.5)
                    hdr_cells[5].width = Inches(3)
                    hdr_cells[6].width = Inches(1.5)
                    hdr_cells[7].width = Inches(1.5)
                    hdr_cells[8].width = Inches(2)
                    hdr_cells[9].width = Inches(2)
                    hdr_cells[10].width = Inches(2)
                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                        cell.paragraphs[0].runs[0].font.size = Pt(11.5)
                        cell.paragraphs[0].runs[0].font.bold = True
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                            cell.paragraphs[0].runs[0].font.size = Pt(10)
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.6)
                    database = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                       database='datta_legumesec_entry')
                    database1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                        database='datta_legumsec_out')
                    curs = database.cursor()
                    curs1 = database1.cursor()
                    # Execute the queries
                    curs.execute("SELECT SUM(quantitérizentrée) FROM entrytable")
                    sumresultriz = curs.fetchone()
                    curs1.execute(
                        "SELECT SUM(quantitérizentré)-SUM(quantitérizesorté) as quantitérizerest FROM outtable")
                    resultriz = curs1.fetchone()

                    dattabase = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                        database='datta_legumesec_entry')
                    dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                         database='datta_legumsec_out')
                    curs = dattabase.cursor()
                    curs.execute("SELECT SUM(quantitépchentrée) AS quantitépchtotale FROM entrytable ")
                    resultpch = curs.fetchone()
                    dattabase.commit()
                    curs = dattabase1.cursor()
                    curs.execute(
                        "SELECT sum(quantitepchentré) - sum(quantitépchsorté) as quantitépchrest FROM outtable")
                    resultpch_a = curs.fetchone()
                    dattabase.commit()

                    ####################pois chichz pl operation
                    dattabase = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                        database='datta_legumesec_entry')
                    dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                         database='datta_legumsec_out')
                    curs4 = dattabase.cursor()
                    curs4.execute("SELECT SUM(quantitépchplentrée) AS quantitépchpltotale FROM entrytable ")
                    resultpchpl = curs4.fetchone()
                    dattabase.commit()

                    curs5 = dattabase1.cursor()
                    curs5.execute(
                        "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable")
                    resultpchpl_a = curs5.fetchone()
                    dattabase.commit()

                    ###############lentille pl operation
                    dattabase = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                        database='datta_legumesec_entry')
                    dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                         database='datta_legumsec_out')
                    curs6 = dattabase.cursor()
                    curs6.execute("SELECT SUM(quantitélenplntrée) AS quantitélenpltotale FROM entrytable ")
                    resultlenpl = curs6.fetchone()
                    dattabase.commit()
                    curs7 = dattabase1.cursor()
                    curs7.execute(
                        "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable")
                    resultlenpl_a = curs7.fetchone()
                    dattabase.commit()

                    ###########lentille
                    dattabase = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                        database='datta_legumesec_entry')
                    dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                         database='datta_legumsec_out')
                    curs8 = dattabase.cursor()
                    curs8.execute("SELECT SUM(quantitélenentrée) AS quantitélentotale FROM entrytable ")
                    resultlen = curs8.fetchone()

                    dattabase.commit()
                    curs9 = dattabase1.cursor()
                    curs9.execute(
                        "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable")
                    resultlen_a = curs9.fetchone()
                    dattabase.commit()
                    ####################haricot operation
                    dattabase = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                        database='datta_legumesec_entry')
                    dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                         database='datta_legumsec_out')
                    curs10 = dattabase.cursor()
                    curs10.execute("SELECT SUM(quantitéharntrée) AS quantitéhartotale FROM entrytable ")
                    resulthar = curs10.fetchone()
                    dattabase.commit()
                    curs11 = dattabase1.cursor()
                    curs11.execute(
                        "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable")
                    resulthar_a = curs11.fetchone()
                    dattabase.commit()
                    dattabase.close()

                    # Create the document
                    # Create the table
                    table_b = self.doc.add_table(rows=3, cols=7)
                    table_b.style = "Table Grid"
                    # Add table headers
                    hdr_colum = table_b.rows[0].cells
                    hdr_colum[0].text = "PRODUIT"
                    hdr_colum[1].text = "POIS CHICHES"
                    hdr_colum[2].text = "POIS CHICHES PL"
                    hdr_colum[3].text = "RIZ"
                    hdr_colum[4].text = "HARICOT"
                    hdr_colum[5].text = "LENTILLE"
                    hdr_colum[6].text = "LENTILLE PL"
                    hdr_colum = table_b.rows[1].cells
                    hdr_colum[0].text = "TOTAL"
                    hdr_colum[1].text = str(resultpch[0]) + " QX"
                    hdr_colum[3].text = str(sumresultriz[0]) + " QX"
                    hdr_colum[2].text = str(resultpchpl[0]) + " QX"
                    hdr_colum[4].text = str(resulthar[0]) + " QX"
                    hdr_colum[5].text = str(resultlen[0]) + " QX"
                    hdr_colum[6].text = str(resultlenpl[0]) + " QX"
                    hdr_colum = table_b.rows[2].cells
                    hdr_colum[0].text = "REST"
                    hdr_colum[3].text = str(resultriz[0]) + " QX"
                    hdr_colum[1].text = str(resultpch_a[0]) + " QX"
                    hdr_colum[2].text = str(resultpchpl_a[0]) + " QX"
                    hdr_colum[5].text = str(resultlen_a[0]) + " QX"
                    hdr_colum[6].text = str(resultlenpl_a[0]) + " QX"
                    hdr_colum[4].text = str(resulthar_a[0]) + " QX"
                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "print")

                elif dialog.clickedButton() == ok_button and self.produitphytofiltre.currentText() not in [
                    'POIS CHICHES', 'LENTILLE', 'RIZ', 'HARICOT', 'LENTILLE PL',
                    'POIS CHICHES PL'] and self.date_edit.text() == self.selected_date:
                    print(self.selected_date)
                    conn = sqlite3.connect('datta_legumsec_out.db')
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT le ,unité,produit,origine,quantité,achteur,sacherie,imatricule ,date_CND,DLUM FROM outtable WHERE le = %s",
                        (self.selected_date,))
                    rows = cursor.fetchall()
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(1.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\t\t\t\t\tSITUATION DES STOCKS DES LEGUMES SECS\n\t\t\t\t\t\t\t\t\t\t\tSORTIE', level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(30)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading
                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(14)
                    left_run = paragraph.add_run('CCLS RELIZANE\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True
                    right_run = paragraph.add_run('Date:' + self.selected_date)
                    right_run.bold = True
                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'MAGASIN DE STOCK'
                    hdr_cells[2].text = 'PRODUIT'
                    hdr_cells[3].text = 'ORIGINE'
                    hdr_cells[4].text = 'QUANTITE'
                    hdr_cells[5].text = 'ACHTEUR'
                    hdr_cells[6].text = 'SACHERIE DE CND'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(2)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2)
                    hdr_cells[2].width = Inches(2)
                    hdr_cells[3].width = Inches(1.5)
                    hdr_cells[4].width = Inches(1.5)
                    hdr_cells[5].width = Inches(3)
                    hdr_cells[6].width = Inches(1.5)
                    hdr_cells[7].width = Inches(1.5)
                    hdr_cells[8].width = Inches(2)
                    hdr_cells[9].width = Inches(2)
                    hdr_cells[10].width = Inches(2)
                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                        cell.paragraphs[0].runs[0].font.size = Pt(11.5)
                        cell.paragraphs[0].runs[0].font.bold = True
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                            cell.paragraphs[0].runs[0].font.size = Pt(10)
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.6)
                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "print")
                    conn.close()

                elif dialog.clickedButton() == ok_button and self.produitphytofiltre.currentText() == self.produitphyto:
                    print("nooooooooo" + self.selected_date, self.produitphyto)
                    conn = sqlite3.connect('datta_legumsec_out.db')
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT le ,unité,produit,origine,quantité,achteur,sacherie,imatricule ,date_CND,DLUM FROM outtable WHERE produit= %s",
                        (self.produitphyto,))
                    rows = cursor.fetchall()
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(1.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.right_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1.5)
                    heading1 = self.doc.add_heading(
                        '\t\t\t\t\t\t\tSITUATION DES STOCKS DES LEGUMES SECS\n\t\t\t\t\t\t\t\t\t\t\tSORTIE', level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(30)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    # add second heading
                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(14)
                    left_run = paragraph.add_run('CCLS RELIZANE\t\t\t\t\t\t\t\t\t\t\t\t\t')
                    left_run.bold = True
                    right_run = paragraph.add_run('Produit:' + self.produitphyto)
                    right_run.bold = True
                    table = self.doc.add_table(rows=1, cols=11)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    hdr_cells[0].text = 'DATE'
                    hdr_cells[1].text = 'MAGASIN DE STOCK'
                    hdr_cells[2].text = 'PRODUIT'
                    hdr_cells[3].text = 'ORIGINE'
                    hdr_cells[4].text = 'QUANTITE'
                    hdr_cells[5].text = 'ACHTEUR'
                    hdr_cells[6].text = 'SACHERIE DE CND'
                    hdr_cells[7].text = 'IMATRICUL'
                    hdr_cells[8].text = 'Date de récolte'
                    hdr_cells[9].text = 'Date de CND'
                    hdr_cells[10].text = 'Date de DLUM'
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(2)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2)
                    hdr_cells[2].width = Inches(2)
                    hdr_cells[3].width = Inches(1.5)
                    hdr_cells[4].width = Inches(1.5)
                    hdr_cells[5].width = Inches(3)
                    hdr_cells[6].width = Inches(1.5)
                    hdr_cells[7].width = Inches(1.5)
                    hdr_cells[8].width = Inches(2)
                    hdr_cells[9].width = Inches(2)
                    hdr_cells[10].width = Inches(2)
                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                        cell.paragraphs[0].runs[0].font.size = Pt(11.5)
                        cell.paragraphs[0].runs[0].font.bold = True
                    # Add the data to the table
                    table_rows = len(rows)
                    table_cols = len(rows[0])
                    for row in range(table_rows):
                        table.add_row()
                        for col in range(table_cols):
                            cell = table.cell(row + 1, col)
                            cell.text = str(rows[row][col])
                            # Set font properties
                            cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                            cell.paragraphs[0].runs[0].font.size = Pt(10)
                            cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    for row in table.rows:
                        row.height = Inches(0.6)
                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    os.startfile(temp_file, "print")
                    conn.close()
            except Exception as e:
                print('e')

        def add_table(self):
            try:

                unité = self.Unite.currentText()
                produit = self.Produit.currentText()
                origineProduit = self.OrigineDuProduit.text()
                DLUM = self.DLUM.text()
                qauntite = self.quantite.text()
                rows = self.txtfacture.rowCount()
                self.txtfacture.insertRow(rows)
                self.txtfacture.setItem(rows, 0, QTableWidgetItem(unité))
                self.txtfacture.setItem(rows, 1, QTableWidgetItem(produit))
                self.txtfacture.setItem(rows, 2, QTableWidgetItem(qauntite))
                self.txtfacture.setItem(rows, 3, QTableWidgetItem(origineProduit))
                self.txtfacture.setItem(rows, 4, QTableWidgetItem(DLUM))
            except Exception as e:
                print(e)

        def stock_final_magasin(self):
            if self.selected_produit and self.selected_magasin and self.selected_origine and self.selected_expediteur and self.selected_dates == "--" and self.selected_datesAU == "--":
                if self.Produits.currentText() == "RIZ IMP":
                    self.operation_dattabase()
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.resultstock + " QX")
                elif self.Produits.currentText() == "POIS CHICHES IMP 12 mm":
                    self.poischicheDouze()
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.restpoichichedouze + " QX")
                elif self.Produits.currentText() == "POIS CHICHES IMP 09 mm":
                    self.poischicheNeuf()
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.restpoichicheneuf + " QX")
                elif self.Produits.currentText() == "POIS CHICHES IMP 08 mm":
                    self.poischicheOuit()
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.restpoichicheouit + " QX")
                elif self.Produits.currentText() == "POIS CHICHES IMP 06 mm":
                    self.poichichSIxSept()
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.restpoichiche + " QX")
                elif self.Produits.currentText() == "LENTILLE PL":
                    self.lenpl()
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.restlenpl + " QX")
                elif self.Produits.currentText() == "LENTILLE IMP 05-07 mm":
                    self.lentilleCinqSept()
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.restlentsinq + " QX")
                elif self.Produits.currentText() == "LENTILLE IMP vert":
                    self.lenVert()
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.restlentvert + " QX")

                elif self.Produits.currentText() == "LENTILLE IMP ROUGE":
                    self.lenRouge()
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.restlentrouge + " QX")
                elif self.Produits.currentText() == "HARICOT BLANC IMP":
                    self.haricot()
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.restharicotimp + " QX")
                elif self.Produits.currentText() == "HARICOT LSB":
                    self.haricotLsb()
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.restharicotlsb + " QX")
            elif self.selected_produit and self.selected_magasin and self.selected_origine == "" and self.selected_expediteur == "" and self.selected_dates == "--" and self.selected_datesAU == "--":
                conn = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                               database="datta_legumesec_entry")
                dattabase1 = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                     database='datta_legumsec_out')
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT le,produit,origine,quantité,unité,sacherie,fournisseur, imatricule,date_recolte,date_CND, DLUM FROM entrytable WHERE produit = %s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                rows = cursor.fetchall()
                curs1x = dattabase1.cursor()
                curs1x.execute(
                    "SELECT SUM(quantitérizentré) - SUM(quantitérizesorté) as quantitérizerest FROM outtable WHERE  produit= %s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                self.resulxs = curs1x.fetchone()
                self.resulxttp = str(self.resulxs[0])
                curs1xtv = dattabase1.cursor()
                curs1xtv.execute(
                    "SELECT SUM(quantitérizetvntré) - SUM(quantitérizetvsorté) as quantitérizetvrest FROM outtable WHERE  produit= %s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                self.resulxstv = curs1xtv.fetchone()
                self.resulxtttvp = str(self.resulxstv[0])
                curstt = dattabase1.cursor()
                curstt.execute(
                    "SELECT sum(quantitepchentré) - sum(quantitépchsorté) as quantitépchrest  FROM outtable   WHERE   produit=%s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                resultpch_att = curstt.fetchone()
                self.restpoichichedouzettp = str(resultpch_att[0])
                curstt = dattabase1.cursor()
                curstt.execute(
                    "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable WHERE   produit=%s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                resultpch_att = curstt.fetchone()
                self.restpoichichettp = str(resultpch_att[0])

                curs5tt = dattabase1.cursor()
                curs5tt.execute(
                    "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable WHERE   produit=%s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                resultpchpl_att = curs5tt.fetchone()
                self.restpoischicheplttp = str(resultpchpl_att[0])
                curs7tt = dattabase1.cursor()
                curs7tt.execute(
                    "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable WHERE   produit=%s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                resultlenpl_att = curs7tt.fetchone()
                self.restlenplttp = str(resultlenpl_att[0])
                curs9tt = dattabase1.cursor()
                curs9tt.execute(
                    "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE   produit=%s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                resultlenverttt = curs9tt.fetchone()
                self.restlentvertttp = str(resultlenverttt[0])
                curs9tt = dattabase1.cursor()
                curs9tt.execute(
                    "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE   produit=%s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                resultlenrougett = curs9tt.fetchone()
                self.restlentrougettp = str(resultlenrougett[0])
                curs11tt = dattabase1.cursor()
                curs11tt.execute(
                    "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE   produit=%s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                resulthar_att = curs11tt.fetchone()
                self.restharicotimpttp = str(resulthar_att[0])
                curs11tt.execute(
                    "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable WHERE   produit=%s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                resultharlsb_att = curs11tt.fetchone()
                self.restharicotlsbttp = str(resultharlsb_att[0])
                curstt = dattabase1.cursor()
                curstt.execute(
                    "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable   WHERE produit=%s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                resultpch_att = curstt.fetchone()
                self.restpoichicheneufttp = str(resultpch_att[0])
                curstt = dattabase1.cursor()
                curstt.execute(
                    "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE   produit=%s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                resultpch_att = curstt.fetchone()
                self.restpoichicheouitttp = str(resultpch_att[0])
                curs9tt = dattabase1.cursor()
                curs9tt.execute(
                    "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE   produit=%s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                resultlensinqtt = curs9tt.fetchone()
                self.restlentsinqttp = str(resultlensinqtt[0])
                curstt = dattabase1.cursor()
                curstt.execute(
                    "SELECT SUM(quantitépchsixentré) - SUM(quantitépchsixsorté) as quantitépchsixrest FROM outtable  WHERE produit=%s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                resultpch_attp = curstt.fetchone()
                self.restpoichichettp = str(resultpch_attp[0])

                curs5tt = dattabase1.cursor()
                curs5tt.execute(
                    "SELECT sum(quantitépchplentré) - sum(quantitépchplsorté) as quantitépchplhrest FROM outtable   WHERE produit=%s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                resultpchpl_att = curs5tt.fetchone()
                self.restpoischicheplttp = str(resultpchpl_att[0])
                curs7tt = dattabase1.cursor()
                curs7tt.execute(
                    "SELECT sum(quantitélenplentré) - sum(quantitélenplsorté) as quantitélenplrest FROM outtable  WHERE produit=%s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                resultlenpl_att = curs7tt.fetchone()
                self.restlenplttp = str(resultlenpl_att[0])
                curs9tt = dattabase1.cursor()
                curs9tt.execute(
                    "SELECT sum(quantitélenvertentré) - sum(quantitélenvertsorté) as quantitélenrest FROM outtable WHERE produit=%s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                resultlenverttt = curs9tt.fetchone()
                self.restlentvertttp = str(resultlenverttt[0])
                curs9tt = dattabase1.cursor()
                curs9tt.execute(
                    "SELECT sum(quantitélenrougeentré) - sum(quantitélenrougesorté) as quantitélenrougerest FROM outtable WHERE produit=%s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                resultlenrougett = curs9tt.fetchone()
                self.restlentrougettp = str(resultlenrougett[0])
                curs11tt = dattabase1.cursor()
                curs11tt.execute(
                    "SELECT sum(quantitéharentré) - sum(quantitéharsorté) as quantitéharrest FROM outtable WHERE  produit=%s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                resulthar_att = curs11tt.fetchone()
                self.restharicotimpttp = str(resulthar_att[0])
                curs11tt.execute(
                    "SELECT SUM(quantitéharlsbentré) - SUM(quantitéharlsbsorté) as quantitéharlsbrest FROM outtable   WHERE produit=%s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                resultharlsb_att = curs11tt.fetchone()
                self.restharicotlsbttp = str(resultharlsb_att[0])
                curstt = dattabase1.cursor()
                curstt.execute(
                    "SELECT sum(quantitépchneufeentré) - sum(quantitépchneufesorté) as quantitépchneuferest FROM outtable  WHERE produit=%s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                resultpch_att = curstt.fetchone()
                self.restpoichicheneufttp = str(resultpch_att[0])
                curstt = dattabase1.cursor()
                curstt.execute(
                    "SELECT sum(quantitépchhuitentré) - sum(quantitépchhuitsorté) as quantitépchhuitrest FROM outtable WHERE produit=%s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                resultpch_att = curstt.fetchone()
                self.restpoichicheouitttp = str(resultpch_att[0])
                curs9tt = dattabase1.cursor()
                curs9tt.execute(
                    "SELECT sum(quantitélenentré) - sum(quantitélensorté) as quantitélenrest FROM outtable WHERE  produit=%s AND unité = %s",
                    (self.selected_produit, self.selected_magasin,))
                resultlensinqtt = curs9tt.fetchone()
                self.restlentsinqttp = str(resultlensinqtt[0])
                if self.selected_produit == "POIS CHICHES IMP 12 mm":
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.restpoichichedouzettp + " QX")
                if self.selected_produit == "POIS CHICHES IMP 09 mm":
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.restpoichicheneufttpp + " QX")
                if self.selected_produit == "POIS CHICHES IMP 08 mm":
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.restpoichicheouitttp + " QX")
                if self.selected_produit == "POIS CHICHES IMP 06 mm":
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.restpoichichettp + " QX")
                if self.selected_produit == "HARICOT BLANC IMP":
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.restharicotimpttp + " QX")
                if self.selected_produit == "HARICOT LSB":
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.restharicotlsbttp + " QX")
                if self.selected_produit == "LENTILLE PL":
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.restlenplttp + " QX")
                if self.selected_produit == "LENTILLE IMP 05-07 mm":
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.restlentsinqttp + " QX")
                if self.selected_produit == "LENTILLE IMP vert":
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.restlentvertttp + " QX")
                if self.selected_produit == "LENTILLE IMP ROUGE":
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.restlentrougettp + " QX")
                if self.selected_produit == "RIZ IMP":
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.resulxttp + " QX")
                if self.selected_produit == "RIZ ETUVE":
                    self.impot_filter_stock()
                    self.style = self.stockFinal.setStyleSheet(
                        "font: bold 16px;background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.stockFinal.setText(self.Produits.currentText() + "=" + self.resulxtttvp + " QX")


            else:
                self.stockFinal.setStyleSheet(
                    "font: bold 16px;background-color:#ffffff;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                self.stockFinal.setText("0 ")

        def impot_filter_stock(self):
            try:
                produitstock = self.Produits.currentText()
                expediteurstock = self.expediteur.currentText()
                unitestock = self.Unites.currentText()
                originestock = self.OrigineDuProduits.currentText()
                dattabase = mysql.connector.connect(host="localhost", user="qualite", password="qualite48",
                                                    database='datta_legumesec_entry')
                curs = dattabase.cursor()
                curs.execute(
                    "SELECT unité,produit ,quantité ,origine,date_CND,DLUM,nlot,nlotsch,fournisseur  FROM entrytable WHERE produit = %s AND  unité= %s  AND fournisseur= %s  AND origine= %s",
                    (produitstock, unitestock, expediteurstock, originestock,))

                result = curs.fetchall()
                self.txtfactures.setRowCount(0)
                for row, row_datta in enumerate(result):
                    self.txtfactures.insertRow(row)
                    for colum, datta in enumerate(row_datta):
                        self.txtfactures.setItem(row, colum, QTableWidgetItem(str(datta)))
                dattabase.commit()
                dattabase.close()
            except mysql.connector.Error as e:
                print(e)

        def docxStock(self):
            try:
                dialog = QDialog()
                dialog.setStyleSheet(""" 
                                    QPushButton
        {
            color: #00000;
            background-color:#ade3e7;
            border-width: 1px;
            border-color: #1e1e1e;
            border-style: solid;
            border-radius: 6;
            padding: 3px;
            font-size: 12px;
            padding-left: 5px;
            padding-right: 5px;
            min-width: 40px;

        }

        QPushButton:disabled
        {
            background-color:#03ecff;
            border-width: 1px;
            border-color: #454545;
            border-style: solid;
            padding-top: 5px;
            padding-bottom: 5px;
            padding-left: 10px;
            padding-right: 10px;
            border-radius: 2px;
            color: #454545;
        }
        QPushButton:pressed
        {
            background-color: #3daee9;
            padding-top: -15px;
            padding-bottom: -17px;
        }
                                     QLabel
                                    {
                                        font-size: 18px;
                                        border: 0px solid orange;
                                    }

                                """)
                dialog.setGeometry(QtCore.QRect(500, 200, 300, 100))
                dialog.setWindowTitle("Sélectionnez  ")
                # dialog.setText("Sélectionnez la date et produit souhaitée\n")
                ok_button = QtWidgets.QPushButton("ENTRE", dialog, clicked=lambda: self.print_docxStockDatabase())
                ok_button.setGeometry(QtCore.QRect(40, 30, 100, 40))
                cancel_button = QtWidgets.QPushButton("SORTIE", dialog,
                                                      clicked=lambda: self.print_docxStockDatabaseSortie())
                cancel_button.setGeometry(QtCore.QRect(160, 30, 100, 40))
                # dialog.addButton(ok_button, QMessageBox.ButtonRole.ActionRole)
                # dialog.addButton(cancel_button, QMessageBox.ButtonRole.ActionRole)
                dialog.exec()
            except Exception as e:
                print(e)

        def RunlegumesecWindow(self):
                app = QtWidgets.QApplication(sys.argv)
                MainWindow = QtWidgets.QMainWindow()
                ui = Stock_Legumesec()
                ui.stock_legumesec(MainWindow)
                MainWindow.show()
                sys.exit(app.exec())
except Exception as e:
    print(e)

#################################AgreageClass
###############################################################################
##############################################################################
###########################################################################
######################################################################
###############################################################
database = sqlite3.connect("data_orge.db")
cur = database.cursor()
cur.execute("""create table if not exists orgetable
                       (
                        num_bulletin INTEGER PRIMARY KEY,
                        date TEXT,
                        nom_producteur TEXT,
                        pere TEXT,
                        matricule INTEGER,
                        point_collect TEXT,
                        nom_agreeur TEXT,
                        quantite INTEGER,
                        ps INTEGER,
                        total INTEGER,
                        path TEXT
                        )
                        """)
database.commit()
database.close()

database = sqlite3.connect("data_orge.db")
cur = database.cursor()
cur.execute("""create table if not exists orgetablebulletinsortie
                       (
                        num_bulletinor INTEGER PRIMARY KEY,
                        dateor TEXT,
                        nom_producteuror TEXT,
                        pereor TEXT,
                        quantiteor  INTEGER,
                        pathor TEXT,
                        date_sortieor,
                        ncartesor INTEGER
                        )
                        """)
database.commit()
database.close()

databasebd = sqlite3.connect("data_bd.db")
cur = databasebd.cursor()
cur.execute("""create table if not exists bdtable
                       (
                        num_bulletinbd INTEGER PRIMARY KEY,
                        datebd TEXT,
                        nom_producteurbd TEXT,
                        perebd TEXT,
                        matriculebd INTEGER,
                        point_collectbd TEXT,
                        nom_agreeurbd TEXT,
                        quantitebd INTEGER,
                        psbd INTEGER,
                        totalbd INTEGER,
                        pathbd TEXT,
                        date_sortie TEXT,
                        num_cart TEXT
                        )
                        """)
databasebd.commit()
databasebd.close()
databasebd = sqlite3.connect("data_bd.db")
cur = databasebd.cursor()
cur.execute("""create table if not exists bdtable_bulletin_sortie
                       (
                        num_bulletinbd INTEGER PRIMARY KEY,
                        datebd TEXT,
                        nom_producteurbd TEXT,
                        perebd TEXT,
                        quantite INTEGER,
                        pathbd TEXT,
                        date_sortie TEXT,
                        num_cart TEXT
                        )
                        """)
databasebd.commit()
databasebd.close()

databasebt = sqlite3.connect("data_bt.db")
cur = databasebt.cursor()
cur.execute("""create table if not exists bttable
                       (
                        num_bulletinbt INTEGER PRIMARY KEY,
                        datebt TEXT,
                        nom_producteurbt TEXT,
                        perebt TEXT,
                        matriculebt INTEGER,
                        point_collectbt TEXT,
                        nom_agreeurbt TEXT,
                        quantitebt INTEGER,
                        psbt INTEGER,
                        totalbt INTEGER,
                        pathbt TEXT,
                        date_sortie TEXT,
                        num_cart TEXT
                        )
                        """)
databasebt.commit()
databasebt.close()
databasebt = sqlite3.connect("data_bt.db")
cur = databasebt.cursor()
cur.execute("""create table if not exists bttable_bulletin_sortie
                       (
                        num_bulletinbts INTEGER PRIMARY KEY,
                        datebts TEXT,
                        nom_producteurbts TEXT,
                        perebts TEXT,
                        quantites INTEGER,
                        pathbts TEXT,
                        date_sortie TEXT,
                        num_carts TEXT
                        )
                        """)
databasebt.commit()
databasebt.close()
try:
    class Agréage_Window(object):
        ################################ORGE########################
        ############################################################
        def bonification_ps_orge(self):
            self.bpsor.clear()
            self.bpsor.setStyleSheet("background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            while self.vpsor.value() >= 62.01:
                self.bpsor.setValue(0.24)
                self.bpsor.setStyleSheet(
                    "background-color:#88ffaa;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                if self.vpsor.value() <= 62.50:
                    self.bpsor.setValue(0.24)
                elif self.vpsor.value() >= 62.51 and self.vpsor.value() <= 63.00:
                    self.bpsor.setValue(0.48)
                elif self.vpsor.value() >= 63.01 and self.vpsor.value() <= 63.50:
                    self.bpsor.setValue(0.72)
                elif self.vpsor.value() >= 63.51 and self.vpsor.value() <= 64.00:
                    self.bpsor.setValue(0.96)
                elif self.vpsor.value() >= 64.01 and self.vpsor.value() <= 64.50:
                    self.bpsor.setValue(1.20)
                elif self.vpsor.value() >= 64.51 and self.vpsor.value() <= 65.00:
                    self.bpsor.setValue(1.44)
                elif self.vpsor.value() >= 65.01 and self.vpsor.value() <= 65.50:
                    self.bpsor.setValue(1.68)
                elif self.vpsor.value() >= 65.51 and self.vpsor.value() <= 66.00:
                    self.bpsor.setValue(1.92)
                elif self.vpsor.value() >= 66.01 and self.vpsor.value() <= 66.50:
                    self.bpsor.setValue(2.16)
                elif self.vpsor.value() >= 66.51 and self.vpsor.value() <= 67.00:
                    self.bpsor.setValue(2.40)
                elif self.vpsor.value() >= 67.01 and self.vpsor.value() <= 67.50:
                    self.bpsor.setValue(2.64)
                elif self.vpsor.value() >= 67.51 and self.vpsor.value() <= 68.00:
                    self.bpsor.setValue(2.88)
                elif self.vpsor.value() >= 68.01 and self.vpsor.value() <= 68.50:
                    self.bpsor.setValue(3.12)
                elif self.vpsor.value() >= 68.51 and self.vpsor.value() <= 69.00:
                    self.bpsor.setValue(3.36)
                elif self.vpsor.value() >= 69.01 and self.vpsor.value() <= 69.50:
                    self.bpsor.setValue(3.60)
                elif self.vpsor.value() >= 69.51 and self.vpsor.value() <= 70.00:
                    self.bpsor.setValue(3.84)
                elif self.vpsor.value() >= 70.01 and self.vpsor.value() <= 70.50:
                    self.bpsor.setValue(4.08)
                elif self.vpsor.value() >= 70.51 and self.vpsor.value() <= 71.00:
                    self.bpsor.setValue(4.32)
                elif self.vpsor.value() >= 61.01 and self.vpsor.value() <= 71.50:
                    self.bpsor.setValue(4.56)
                elif self.vpsor.value() >= 71.51 and self.vpsor.value() <= 72.00:
                    self.bpsor.setValue(4.70)
                else:
                    self.bpsor.setStyleSheet(
                        "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.bpsor.setValue(0)

                break

        def réfaction_ps_orge(self):
            self.rpsor.clear()
            self.rpsor.setStyleSheet("background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")

            while self.vpsor.value() >= 52.00:
                self.rpsor.setValue(1.44)
                self.rpsor.setStyleSheet(
                    "background-color:#e22630;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                if self.vpsor.value() <= 52.49:
                    self.rpsor.setValue(1.44)
                elif self.vpsor.value() >= 52.50 and self.vpsor.value() <= 52.99:
                    self.rpsor.setValue(1.32)
                elif self.vpsor.value() >= 53.00 and self.vpsor.value() <= 53.49:
                    self.rpsor.setValue(1.20)
                elif self.vpsor.value() >= 53.50 and self.vpsor.value() <= 53.99:
                    self.rpsor.setValue(1.08)
                elif self.vpsor.value() >= 54.00 and self.vpsor.value() <= 54.49:
                    self.rpsor.setValue(0.96)
                elif self.vpsor.value() >= 54.50 and self.vpsor.value() <= 54.99:
                    self.rpsor.setValue(0.84)
                elif self.vpsor.value() >= 55.00 and self.vpsor.value() <= 55.49:
                    self.rpsor.setValue(0.72)
                elif self.vpsor.value() >= 55.50 and self.vpsor.value() <= 55.99:
                    self.rpsor.setValue(0.60)
                elif self.vpsor.value() >= 56.00 and self.vpsor.value() <= 56.49:
                    self.rpsor.setValue(0.48)
                elif self.vpsor.value() >= 56.50 and self.vpsor.value() <= 56.99:
                    self.rpsor.setValue(0.36)
                elif self.vpsor.value() >= 57.00 and self.vpsor.value() <= 57.49:
                    self.rpsor.setValue(0.24)
                elif self.vpsor.value() >= 57.50 and self.vpsor.value() <= 57.99:
                    self.rpsor.setValue(0.12)
                else:
                    self.rpsor.setStyleSheet(
                        "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding:0px")
                    self.rpsor.setValue(0)

                break

        def refaction_impurté_orge(self):
            self.rtotalor.clear()
            self.rtotalor.setStyleSheet(
                "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            while self.vtotalor.value() >= 2.01:
                self.rtotalor.setValue(0.12)
                self.rtotalor.setStyleSheet(
                    "background-color:#e22630;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                if self.vtotalor.value() <= 2.50:
                    self.rtotalor.setValue(0.12)
                elif self.vtotalor.value() >= 2.51 and self.vtotalor.value() <= 3.00:
                    self.rtotalor.setValue(0.24)
                elif self.vtotalor.value() >= 3.01 and self.vtotalor.value() <= 3.50:
                    self.rtotalor.setValue(0.36)
                elif self.vtotalor.value() >= 3.51 and self.vtotalor.value() <= 4.00:
                    self.rtotalor.setValue(0.48)
                elif self.vtotalor.value() >= 4.01 and self.vtotalor.value() <= 4.50:
                    self.rtotalor.setValue(0.60)
                elif self.vtotalor.value() >= 4.51 and self.vtotalor.value() <= 5.00:
                    self.rtotalor.setValue(0.72)
                elif self.vtotalor.value() >= 5.01 and self.vtotalor.value() <= 5.50:
                    self.rtotalor.setValue(0.84)
                elif self.vtotalor.value() >= 5.51 and self.vtotalor.value() <= 6.00:
                    self.rtotalor.setValue(0.96)
                elif self.vtotalor.value() >= 6.01 and self.vtotalor.value() <= 6.50:
                    self.rtotalor.setValue(1.08)
                elif self.vtotalor.value() >= 6.51 and self.vtotalor.value() <= 7.00:
                    self.rtotalor.setValue(1.20)
                elif self.vtotalor.value() >= 7.01 and self.vtotalor.value() <= 7.50:
                    self.rtotalor.setValue(1.32)
                elif self.vtotalor.value() >= 7.51 and self.vtotalor.value() <= 8.00:
                    self.rtotalor.setValue(1.44)
                elif self.vtotalor.value() >= 8.01 and self.vtotalor.value() <= 8.50:
                    self.rtotalor.setValue(1.56)
                elif self.vtotalor.value() >= 8.51 and self.vtotalor.value() <= 9.00:
                    self.rtotalor.setValue(1.68)
                elif self.vtotalor.value() >= 9.01 and self.vtotalor.value() <= 9.50:
                    self.rtotalor.setValue(1.80)
                elif self.vtotalor.value() >= 9.51 and self.vtotalor.value() <= 10.00:
                    self.rtotalor.setValue(1.92)
                elif self.vtotalor.value() >= 10.01 and self.vtotalor.value() <= 20.00:
                    self.rtotalor.setValue(0)
                    self.rtotalor.setSuffix("P/D")
                    self.observationor.setText("PRIX A DEBATTRE")
                else:
                    self.rtotalor.setStyleSheet(
                        "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.rtotalor.setValue(0)
                break

        def plus_orge(self):
            a = self.bpsor.value()
            b = self.btotalor.value()
            c = self.rpsor.value()
            d = self.rtotalor.value()
            e = self.vGrainsanvaleuror.value()
            f = self.vmatierinertor.value()
            self.vtotalor.setValue(e + f)
            self.bglobaltotalor.setValue(a + b)
            self.rglobaltotalor.setValue(c + d)
            if self.bpsor.text() == "":
                self.bglobaltotalor.clear()

        def clear_orge(self):
            self.vpsor.clear()
            self.vpsor.setValue(0)
            self.vergotor.clear()
            self.vGrainsanvaleuror.clear()
            self.vGrainsanvaleuror.setValue(0)
            self.vmatierinertor.clear()
            self.vmatierinertor.setValue(0)
            self.vtotalor.clear()
            self.vtotalor.setValue(0)
            self.bpsor.clear()
            self.bpsor.setValue(0)
            self.btotalor.clear()
            self.btotalor.setValue(0)
            self.bglobaltotalor.clear()
            self.bglobaltotalor.setValue(0)
            self.rpsor.clear()
            self.rpsor.setValue(0)
            self.rtotalor.clear()
            self.rtotalor.setValue(0)
            self.rtotalor.setSuffix("")
            self.rglobaltotalor.clear()
            self.rglobaltotalor.setValue(0)
            self.observationor.clear()

        def calcul_orge(self):
            self.réfaction_ps_orge()
            self.bonification_ps_orge()
            self.refaction_impurté_orge()
            self.plus_orge()

        def bulletin_orge_print(self):
            try:
                nbulltin = self.n_bultin.text()
                nomproducteur = self.nome_du_producteur.text()
                pere = self.pére.text()
                matricul = self.adresse.text()
                poindecollecte = self.pointdecollect.currentText()
                dateorge = self.dattereceptiont.text()
                agreeur = self.agréeeurcomboorge.currentText()
                quantite = self.quantiteorge.value()
                vpsorge = self.vpsor.value()
                bpsorge = self.bpsor.value()
                rpsorge = self.rpsor.value()
                vergot = self.vergotor.value()
                grainsanvaleur = self.vGrainsanvaleuror.value()
                matiéreinerte = self.vmatierinertor.value()
                vtotal = self.vtotalor.value()
                btotalorge = self.btotalor.value()
                rtotalorge = self.rtotalor.value()
                ndcarteorge = self.n_carte.text()
                observation = self.observationor.toPlainText()
                date = QDate.currentDate()
                current_date = QDate.currentDate()
                current_day = current_date.day()
                current_month = current_date.month()
                current_year = current_date.year()
                current_time = QTime.currentTime()
                current_hour = current_time.hour()
                current_minute = current_time.minute()
                # Format the date as "dd-mm-yyyy"
                self.current_days = f"{current_day:02d}-{current_month:02d}-{current_year}-{current_hour}-{current_minute}"
                self.docorge = DocxTemplate("bulletin agreage/bulletin_orge/bulletin_orge.docx")
                context = {
                    "nmp": nomproducteur,
                    "per": pere,
                    "mat": matricul,
                    "ptt": poindecollecte,
                    "dt": dateorge,
                    "agr": agreeur,
                    "qtt": quantite,
                    'vps': vpsorge,
                    'bps': bpsorge,
                    'rps': rpsorge,
                    'vtt': vtotal,
                    'btt': btotalorge,
                    'rtt': rtotalorge,
                    'ncn': ndcarteorge,
                    "vrg": vergot,
                    "vmt": matiéreinerte,
                    "vgs": grainsanvaleur,
                    "oo": observation,
                    "nm": nbulltin
                }
                self.docorge.render(context)
                data = sqlite3.connect("data_orge.db")
                cursbd = data.cursor()
                cursbd.execute(
                    "SELECT * FROM orgetablebulletinsortie WHERE num_bulletinor AND dateor=? AND nom_producteuror = ? AND pereor = ?  AND quantiteor=?",
                    (dateorge, nomproducteur, pere, quantite,))
                existing_data = cursbd.fetchone()
                if existing_data:
                    self.msgbox = QtWidgets.QDialog()
                    self.msgbox.setWindowTitle('Confirmation de sortie')
                    self.msgbox.setGeometry(550, 200, 305, 100)
                    self.msgbox.setStyleSheet(""" QWidget
                            {
                                color: #000000;
                                background-color: #ffffff;
                                border-width: 1px;
                                border-color: #1e1e1e;
                                border-style: solid;
                                border-radius: 6;
                                padding: 0px;
                                font-size: 18px;
                                padding-left: 1px;
                                padding-right: 1px
                            }
                            QWidget:item:hover
                            {
                                background-color: #3daee9;
                                color: #eff0f1;
                            }
                            QWidget:item:selected
                            {
                                background-color: #3daee9;
                            }
                            QWidget:disabled
                            {
                                color: #454545;
                                background-color: #31363b;
                            }
                            QPushButton
                            {
                                color: #000000;
                                background-color:#ade3e7;
                                border-width: 1px;
                                border-color: #1e1e1e;
                                border-style: solid;
                                border-radius: 6;
                                padding: 3px;
                                font-size: 12px;
                                padding-left: 5px;
                                padding-right: 5px;
                                min-width: 40px
                            }
                            QPushButton:disabled
                            {
                                background-color: #31363b;
                                border-width: 1px;
                                border-color: #454545;
                                border-style: solid;
                                padding-top: 5px;
                                padding-bottom: 5px;
                                padding-left: 10px;
                                padding-right: 10px;
                                border-radius: 2px;
                                color: #454545;
                            }

                            QPushButton:pressed
                            {
                                background-color: #3daee9;
                                padding-top: -15px;
                                padding-bottom: -17px;
                            }
                            QPushButton:hover
                            {
                                border: 1px solid #ff8c00;
                                color: #000000;
                            }
                             QLabel
                            {
                                font-size: 18px;
                                border: 0px solid orange;
                            }

                        """)
                    self.oui_button = QtWidgets.QPushButton("Oui", self.msgbox,
                                                            clicked=lambda: self.print_other_docx_orge())
                    self.oui_button.setGeometry(90, 60, 60, 30)
                    self.non_button = QtWidgets.QPushButton("Non", self.msgbox, clicked=lambda: self.msgbox.close())
                    self.non_button.setGeometry(160, 60, 60, 30)
                    labelmgboxorge = QtWidgets.QLabel("Veuillez , imprimer autre fichier ?", self.msgbox)
                    labelmgboxorge.setGeometry(25, 15, 260, 30)
                    self.msgbox.exec()
                else:
                    doc_names = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    doc_pdf = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False).name
                    self.docorge.save(doc_names)
                    try:
                        if doc_names:
                            a = self.progress_bar()
                            sys.stderr = open("consoleoutput.log", "w")
                            convert(doc_names, doc_pdf)
                            # Open the resulting .pdf file using the default associated application
                            # os.startfile(doc_pdf, 'open')
                            app_path = 'C:\\Program Files\\Okular\\bin\\okular.exe'
                            subprocess.Popen([app_path, doc_pdf])
                    except Exception as e:
                        print(e)

                    nameorge = nomproducteur + '-' + self.current_days + '-' + str(quantite) + ".docx"
                    self.docorge.save("bulletin agreage/bulletin_orge/" + nameorge)
                    pathorge = os.path.abspath("bulletin agreage/bulletin_orge/" + nameorge)
                    databasebd = sqlite3.connect("data_orge.db")
                    curs = databasebd.cursor()
                    curs.execute(
                        "INSERT INTO orgetablebulletinsortie (dateor, nom_producteuror, pereor,quantiteor, pathor,date_sortieor) VALUES (?,?,?, ?, ?, ?)",
                        (dateorge, nomproducteur, pere, quantite, pathorge, current_day,))
                    databasebd.commit()
                    databasebd.close()
            except Exception as e:
                print(e)

        def print_other_docx_orge(self):
            self.msgbox.close()
            quantite = self.quantiteorge.value()
            nomproducteur = self.nome_du_producteur.text()
            doc_names = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
            doc_pdf = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False).name
            self.docorge.save(doc_names)
            try:
                if doc_names:
                    a = self.progress_bar()
                    sys.stderr = open("consoleoutput.log", "w")
                    convert(doc_names, doc_pdf)
                    # Open the resulting .pdf file using the default associated application
                    # os.startfile(doc_pdf, 'open')
                    app_path = 'C:\\Program Files\\Okular\\bin\\okular.exe'
                    subprocess.Popen([app_path, doc_pdf])
            except Exception as e:
                print(e)
            nameorge = nomproducteur + '-' + self.current_days + '-' + str(quantite) + ".docx"
            self.docorge.save("bulletin agreage/bulletin_orge/" + nameorge)
            pathorge = os.path.abspath("bulletin agreage/bulletin_orge/" + nameorge)

        def add_datta_orge(self):
            try:
                nbulltin = self.n_bultin.text()
                nomproducteur = self.nome_du_producteur.text()
                pere = self.pére.text()
                matricul = self.adresse.text()
                poindecollecte = self.pointdecollect.currentText()
                dateorge = self.dattereceptiont.text()
                agreeur = self.agréeeurcomboorge.currentText()
                quantite = self.quantiteorge.value()
                vpsorge = self.vpsor.value()
                bpsorge = self.bpsor.value()
                rpsorge = self.rpsor.value()
                vergot = self.vergotor.value()
                grainsanvaleur = self.vGrainsanvaleuror.value()
                matiéreinerte = self.vmatierinertor.value()
                vtotal = self.vtotalor.value()
                btotalorge = self.btotalor.value()
                rtotalorge = self.rtotalor.value()
                ndcarteorge = self.n_carte.text()
                observation = self.observationor.toPlainText()
                date = QDate.currentDate()
                current_date = QDate.currentDate()
                current_day = current_date.day()
                current_month = current_date.month()
                current_year = current_date.year()
                current_time = QTime.currentTime()
                current_hour = current_time.hour()
                current_minute = current_time.minute()
                # Format the date as "dd-mm-yyyy"
                current_days = f"{current_day:02d}-{current_month:02d}-{current_year}-{current_hour}-{current_minute}"
                docorge = DocxTemplate("bulletin agreage/bulletin_orge/bulletin_orge.docx")
                context = {
                    "nmp": nomproducteur,
                    "per": pere,
                    "mat": matricul,
                    "ptt": poindecollecte,
                    "dt": dateorge,
                    "agr": agreeur,
                    "qtt": quantite,
                    'vps': vpsorge,
                    'bps': bpsorge,
                    'rps': rpsorge,
                    'vtt': vtotal,
                    'btt': btotalorge,
                    'rtt': rtotalorge,
                    'ncn': ndcarteorge,
                    "vrg": vergot,
                    "vmt": matiéreinerte,
                    "vgs": grainsanvaleur,
                    "oo": observation,
                    "nm": nbulltin
                }
                docorge.render(context)
                nameorge = nomproducteur + '-' + current_days + '-' + str(quantite) + ".docx"
                docorge.save("bulletin agreage/bulletin_orge/" + nameorge)
                pathorge = os.path.abspath("bulletin agreage/bulletin_orge/" + nameorge)
                database = sqlite3.connect('data_orge.db')
                curs = database.cursor()

                # Check if the data already exists
                curs.execute(
                    "SELECT * FROM orgetable WHERE date=? AND nom_producteur=? AND pere=? AND matricule=? AND point_collect=? AND nom_agreeur=? AND quantite=? AND ps=? AND total=? AND path=?",
                    (dateorge, nomproducteur, pere, matricul, poindecollecte, agreeur, quantite, vpsorge,
                     vtotal,
                     pathorge,))
                existing_data = curs.fetchone()

                if existing_data:
                    msgbox = QtWidgets.QMessageBox()
                    msgbox.setWindowTitle('confirmation')
                    msgbox.setText('Les données existent déjà.')
                    msgbox.exec()

                else:
                    curs.execute(
                        "INSERT INTO orgetable (date ,nom_producteur ,pere ,matricule ,point_collect ,nom_agreeur ,quantite ,ps ,total,path )  values(?,?,?,?,?,?,?,?,?,?)",
                        (dateorge, nomproducteur, pere, matricul, poindecollecte, agreeur, quantite, vpsorge, vtotal,
                         pathorge,))
                    database.commit()
                    database.close()
                    msgbox = QtWidgets.QMessageBox()
                    msgbox.setWindowTitle('confirmation')
                    msgbox.setText('Les données sont sauvegardées')
                    msgbox.exec()
            except sqlite3.Error as e:
                print("Error accessing the database:", e)

        def number_bulletin_orge(self):
            try:
                database = sqlite3.connect("data_orge.db")
                cursor = database.cursor()
                cursor.execute("SELECT num_bulletin FROM orgetable ORDER BY num_bulletin DESC LIMIT 1")
                result = cursor.fetchone()
                if result is not None:
                    last_id = result[0]
                    self.n_bultin.setText("DC-" + str(last_id))
                else:
                    # Handle the case when there are no records in the orgetable
                    self.n_bultin.setText("")
            except sqlite3.Error as e:
                print("Error accessing the database:", e)

        def print_day(self):
            try:
                dialog = QtWidgets.QMessageBox()
                dialog.setStyleSheet("""
                                          QWidget {
                                              color: #000000;
                                              background-color: #feffbd;
                                              border-width: 1px;
                                              border-color: #1e1e1e;
                                              border-style: solid;
                                              border-radius: 6;
                                              padding: 3px;
                                              font-size: 18px;
                                              padding-left: 5px;
                                              padding-right: 5px;
                                          }
                                          QWidget:item:hover {
                                              background-color: #3daee9;
                                              color: #eff0f1;
                                          }
                                          QWidget:item:selected {
                                              background-color: #3daee9;
                                          }
                                          QWidget:disabled {
                                              color: #454545;
                                              background-color: #31363b;
                                          }
                                          QPushButton {
                                              color: #000000;
                                              background-color:#84dbc8;
                                              border-width: 1px;
                                              border-color: #1e1e1e;
                                              border-style: solid;
                                              border-radius: 6;
                                              padding: 3px;
                                              font-size: 12px;
                                              padding-left: 5px;
                                              padding-right: 5px;
                                              min-width: 40px;
                                          }
                                          QPushButton:disabled {
                                              background-color: #31363b;
                                              border-width: 1px;
                                              border-color: #454545;
                                              border-style: solid;
                                              padding-top: 5px;
                                              padding-bottom: 5px;
                                              padding-left: 10px;
                                              padding-right: 10px;
                                              border-radius: 2px;
                                              color: #454545;
                                          }
                                          QPushButton:pressed {
                                              background-color: #3daee9;
                                              padding-top: -15px;
                                              padding-bottom: -17px;
                                          }
                                          QPushButton:hover {
                                              border: 1px solid #ff8c00;
                                              color: #eff0f1;
                                          }
                                          QLabel {
                                              font-size: 18px;
                                              border: 0px solid orange;
                                          }
                                      """)
                dialog.setWindowTitle("Sélectionnez la date")
                dialog.setText("Sélectionnez la date  \t\n")
                self.date_edit = QtWidgets.QDateEdit()
                self.dateor = QtWidgets.QDateEdit(dialog)
                self.dateor.setDisplayFormat("dd-MM-yyyy")
                self.dateor.setDate(self.datedaytime)
                self.dateor.resize(180, 30)
                self.dateor.move(40, 50)

                self.date_edit.setDate(QDate.currentDate())
                ok_button = QtWidgets.QPushButton("OK", dialog)
                cancel_button = QtWidgets.QPushButton("Cancel", dialog)
                dialog.addButton(ok_button, QMessageBox.ButtonRole.ActionRole)
                dialog.addButton(cancel_button, QMessageBox.ButtonRole.ActionRole)
                dialog.exec()

                if dialog.clickedButton() == ok_button:
                    self.selected_date = self.dateor.text()
                    if self.dateor.text() == self.selected_date:
                        # selected_date = self.date_edit.date().toString("dd-MM-yyyy")
                        # locale.setlocale(locale.LC_ALL, 'fr_FR.utf8')
                        # QtCore.QLocale.setDefault(QtCore.QLocale(QtCore.QLocale.Language.French))
                        # selected_date1 = self.date_edit.date().toPyDate()
                        # mois = selected_date1.strftime("%B").lower()

                        selected_date1 = self.date_edit.date().toString("dd-MM-yyyy")
                        selected_date = self.dateor.text()

                        conn = sqlite3.connect('data_orge.db')
                        cursor = conn.cursor()
                        cursor.execute(
                            "SELECT num_bulletin, date, nom_producteur, pere, matricule, point_collect, nom_agreeur, quantite FROM orgetable WHERE DATE(substr(date, 7, 4) || '-' || substr(date, 4, 2) || '-' || substr(date, 1, 2)) =?;",
                            (selected_date,))
                        rows = cursor.fetchall()
                        ########################################################################
                        # Create a new document and add a table
                        self.doc = docx.Document()
                        section = self.doc.sections[0]
                        section.page_width = docx.shared.Cm(29.7)
                        section.page_height = docx.shared.Cm(21.0)
                        section.top_margin = docx.shared.Cm(1.5)
                        section.bottom_margin = docx.shared.Cm(1.5)
                        heading1 = self.doc.add_heading("\t\t\t\t\t\t les entre de l'orge ", level=1)
                        heading1.style.font.name = 'Times New Roman'
                        heading1.style.font.size = Pt(22)
                        heading1.style.font.bold = True
                        heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                        # add second heading
                        paragraph = self.doc.add_paragraph()
                        paragraph.style.font.name = 'Times New Roman'
                        paragraph.style.font.size = Pt(14)
                        left_run = paragraph.add_run('CCLS RELIZANE\t\t\t\t\t\t\t\t\t\t\t\t')
                        left_run.bold = True
                        right_run = paragraph.add_run('Date:' + self.selected_date)
                        right_run.bold = True

                        table = self.doc.add_table(rows=1, cols=9)
                        table.style = "Table Grid"  # set the table style
                        hdr_cells = table.rows[0].cells
                        hdr_cells[0].text = 'N° Bulletin \nDC'
                        hdr_cells[1].text = 'Date'
                        hdr_cells[2].text = 'Nom et Prénom'
                        hdr_cells[3].text = 'Pére'
                        hdr_cells[4].text = 'Matricule'
                        hdr_cells[5].text = 'point de collect'
                        hdr_cells[6].text = 'Quantité'
                        hdr_cells[7].text = 'Date de sortie '
                        hdr_cells[8].text = 'N° de la carte '

                        # Set the width of the header cells
                        hdr_cells[0].width = Inches(1.5)  # set the width of the first column to 1.5 inches
                        hdr_cells[1].width = Inches(1.5)
                        hdr_cells[2].width = Inches(2)
                        hdr_cells[3].width = Inches(1)
                        hdr_cells[4].width = Inches(1.5)
                        hdr_cells[5].width = Inches(1.5)
                        hdr_cells[6].width = Inches(1)
                        hdr_cells[7].width = Inches(1.5)
                        hdr_cells[8].width = Inches(1.5)

                        # set hight of the column
                        hdr_cells[0].height = Inches(1)  # set the width of the first column to 1.5 inches
                        hdr_cells[1].height = Inches(1)
                        hdr_cells[2].height = Inches(1)
                        hdr_cells[3].height = Inches(1)
                        hdr_cells[4].height = Inches(1)
                        hdr_cells[5].height = Inches(1)
                        hdr_cells[6].height = Inches(1)
                        hdr_cells[7].width = Inches(1)
                        hdr_cells[8].width = Inches(1)

                        for cell in table.rows[0].cells:
                            cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                            cell.paragraphs[0].runs[0].font.size = Pt(12)
                            cell.paragraphs[0].runs[0].font.bold = True
                        # Add the data to the table
                        table_rows = len(rows)
                        table_cols = len(rows[0])
                        for row in range(table_rows):
                            table.add_row()
                            for col in range(table_cols):
                                cell = table.cell(row + 1, col)
                                cell.text = str(rows[row][col])
                                # Set font properties
                                cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                                cell.paragraphs[0].runs[0].font.size = Pt(12)
                                cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                        for row in table.rows:
                            row.height = Inches(0.3)
                        # Save and open the document for printing
                        doc_names = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                        doc_pdf = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False).name
                        self.doc.save(doc_names)
                        try:
                            if doc_names:
                                a = self.progress_bar()
                                sys.stderr = open("consoleoutput.log", "w")
                                convert(doc_names, doc_pdf)
                                # Open the resulting .pdf file using the default associated application
                                # os.startfile(doc_pdf, 'open')
                                app_path = 'C:\\Program Files\\Okular\\bin\\okular.exe'
                                subprocess.Popen([app_path, doc_pdf])
                        except Exception as e:
                            print(e)
                    else:
                        msgbox = QtWidgets.QMessageBox()
                        msgbox.setWindowTitle('Erreur')
                        msgbox.setText("Il n'ya pas des données à cette date.")
                        msgbox.exec()
                if dialog.clickedButton() == cancel_button:
                    dialog.close()
            except Exception as e:
                print(e)

        def printBulltinProducteurOrge(self):
            dialogor = QMessageBox()
            dialogor.setFixedSize(300, 600)
            dialogor.setStyleSheet("""
                                          QWidget {
                                              color: #000000;
                                              background-color: #feffbd;
                                              border-width: 1px;
                                              border-color: #1e1e1e;
                                              border-style: solid;
                                              border-radius: 6;
                                              padding: 3px;
                                              font-size: 18px;
                                              padding-left: 5px;
                                              padding-right: 5px;
                                          }
                                          QWidget:item:hover {
                                              background-color: #3daee9;
                                              color: #eff0f1;
                                          }
                                          QWidget:item:selected {
                                              background-color: #3daee9;
                                          }
                                          QWidget:disabled {
                                              color: #454545;
                                              background-color: #31363b;
                                          }
                                          QPushButton {
                                              color: #000000;
                                              background-color:#84dbc8;
                                              border-width: 1px;
                                              border-color: #1e1e1e;
                                              border-style: solid;
                                              border-radius: 6;
                                              padding: 3px;
                                              font-size: 12px;
                                              padding-left: 5px;
                                              padding-right: 5px;
                                              min-width: 40px;
                                          }
                                          QPushButton:disabled {
                                              background-color: #31363b;
                                              border-width: 1px;
                                              border-color: #454545;
                                              border-style: solid;
                                              padding-top: 5px;
                                              padding-bottom: 5px;
                                              padding-left: 10px;
                                              padding-right: 10px;
                                              border-radius: 2px;
                                              color: #454545;
                                          }
                                          QPushButton:pressed {
                                              background-color: #3daee9;
                                              padding-top: -15px;
                                              padding-bottom: -17px;
                                          }
                                          QPushButton:hover {
                                              border: 1px solid #ff8c00;
                                              color: #eff0f1;
                                          }
                                          QLabel {
                                              font-size: 18px;
                                              border: 0px solid orange;
                                          }
                                      """)
            dialogor.setWindowTitle("Sélectionnez le Nom et Prénom et pére")
            dialogor.setText("Sélectionnez le Nom et Prénom et pére  \t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t")
            self.nomproductureor = QtWidgets.QLineEdit(dialogor)
            self.nomproductureor.setPlaceholderText("Nom et Prénom")
            self.nomproductureor.resize(180, 30)
            self.nomproductureor.move(40, 40)
            self.péreor = QtWidgets.QLineEdit(dialogor)
            self.péreor.setPlaceholderText("Pére")
            self.péreor.resize(180, 30)
            self.péreor.move(240, 40)
            self.datetxt = QtWidgets.QLabel("Date entré", dialogor)
            self.datetxt.setGeometry(QtCore.QRect(30, 80, 100, 20))
            self.dateor = QDateTimeEdit(dialogor)
            self.dateor.setDisplayFormat("dd-MM-yyyy hh:mm")
            self.dateor.resize(180, 30)
            self.dateor.move(40, 105)
            self.quantiteptext = QtWidgets.QLabel("Quantité", dialogor)
            self.quantiteptext.setGeometry(QtCore.QRect(230, 80, 100, 20))
            self.quantiteor = QtWidgets.QDoubleSpinBox(dialogor)
            self.quantiteor.setRange(1, 10000)
            self.quantiteor.setSuffix('  QX')
            self.quantiteor.setSpecialValueText(" ")
            self.quantiteor.setValue(0.0)
            self.quantiteor.resize(180, 30)
            self.quantiteor.move(240, 105)
            ok_button = QtWidgets.QPushButton("OK", dialogor)
            cancel_button = QtWidgets.QPushButton("Cancel", dialogor)
            dialogor.addButton(ok_button, QMessageBox.ButtonRole.ActionRole)
            dialogor.addButton(cancel_button, QMessageBox.ButtonRole.ActionRole)
            dialogor.exec()
            date = QDate.currentDate()
            current_date = QDate.currentDate()
            current_day = current_date.day()
            current_month = current_date.month()
            current_year = current_date.year()

            # Format the date as "dd-mm-yyyy"
            current_day = f"{current_day:02d}-{current_month:02d}-{current_year}"

            if dialogor.clickedButton() == ok_button:
                producteur = self.nomproductureor.text()
                pere = self.péreor.text()
                dateentré = self.dateor.text()
                quantite = self.quantiteor.value()

                try:
                    data = sqlite3.connect("data_orge.db")
                    cursbd = data.cursor()
                    cursbd.execute(
                        "SELECT * FROM orgetablebulletinsortie WHERE num_bulletinor AND dateor=? AND nom_producteuror = ? AND pereor = ?  AND quantiteor=?",
                        (dateentré, producteur, pere, quantite))
                    existing_data = cursbd.fetchone()
                    if existing_data:
                        msgbox = QtWidgets.QMessageBox()
                        msgbox.setWindowTitle('Confirmation')
                        msgbox.setText('Le Bulletin sortie  déjà.')
                        msgbox.exec()
                    else:
                        curs = data.cursor()
                        curs.execute(
                            "SELECT path FROM orgetable WHERE date=? AND nom_producteur=? AND pere=? AND quantite=?",
                            (dateentré, producteur, pere, quantite,))
                        result = curs.fetchall()
                        if result:
                            # Iterate over the paths and open each file
                            for row in result:
                                file_path = row[0]
                                if file_path:
                                    doc_pdf = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False).name
                                    try:
                                        a = self.progress_bar()
                                        sys.stderr = open("consoleoutput.log", "w")
                                        convert(file_path, doc_pdf)
                                        # Open the resulting .pdf file using the default associated application
                                        # os.startfile(doc_pdf, 'open')
                                        app_path = 'C:\\Program Files\\Okular\\bin\\okular.exe'
                                        subprocess.Popen([app_path, doc_pdf])
                                    except Exception as e:
                                        print(e)
                                    # os.startfile(file_path, "open")
                                    curs.execute(
                                        "INSERT INTO orgetablebulletinsortie (dateor, nom_producteuror, pereor, quantiteor, pathor, date_sortieor) VALUES (?,?,?,?,?,?)",
                                        (dateentré, producteur, pere, quantite, file_path, current_day))
                                    data.commit()
                            data.close()
                        else:
                            msgbox = QtWidgets.QMessageBox()
                            msgbox.setWindowTitle('Confirmation')
                            msgbox.setText('Le Bulletin ne existe pas.')
                            msgbox.exec()

                except Exception as e:
                    print(e)

        def eticket_orge(self):
            try:
                dialogor = QtWidgets.QMessageBox()
                dialogor.setFixedSize(300, 600)
                dialogor.setStyleSheet("""
                                          QWidget {
                                              color: #000000;
                                              background-color: #feffbd;
                                              border-width: 1px;
                                              border-color: #1e1e1e;
                                              border-style: solid;
                                              border-radius: 6;
                                              padding: 3px;
                                              font-size: 18px;
                                              padding-left: 5px;
                                              padding-right: 5px;
                                          }
                                          QWidget:item:hover {
                                              background-color: #3daee9;
                                              color: #eff0f1;
                                          }
                                          QWidget:item:selected {
                                              background-color: #3daee9;
                                          }
                                          QWidget:disabled {
                                              color: #454545;
                                              background-color: #31363b;
                                          }
                                          QPushButton {
                                              color: #000000;
                                              background-color:#84dbc8;
                                              border-width: 1px;
                                              border-color: #1e1e1e;
                                              border-style: solid;
                                              border-radius: 6;
                                              padding: 3px;
                                              font-size: 12px;
                                              padding-left: 5px;
                                              padding-right: 5px;
                                              min-width: 40px;
                                          }
                                          QPushButton:disabled {
                                              background-color: #31363b;
                                              border-width: 1px;
                                              border-color: #454545;
                                              border-style: solid;
                                              padding-top: 5px;
                                              padding-bottom: 5px;
                                              padding-left: 10px;
                                              padding-right: 10px;
                                              border-radius: 2px;
                                              color: #454545;
                                          }
                                          QPushButton:pressed {
                                              background-color: #3daee9;
                                              padding-top: -15px;
                                              padding-bottom: -17px;
                                          }
                                          QPushButton:hover {
                                              border: 1px solid #ff8c00;
                                              color: #eff0f1;
                                          }
                                          QLabel {
                                              font-size: 18px;
                                              border: 0px solid orange;
                                          }
                                          QLineEdit
            {
                background-color: #ffffff;
                padding: 1px;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 0px;
                color: #000000;
            }
            QDoubleSpinBox
            {
                background-color: #ffffff;
                padding: 1px;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 0px;
                color:#000000;
                font-size: 11px;
                font-weight: bold;

            }
            QComboBox
            {
               background-color: #ffffff;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 2px;
                min-width: 40px;
            }
                                      """)
                dialogor.setWindowTitle("Sélectionnez le Nom et Prénom et pére")
                dialogor.setText("ORGE \t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t")
                nomproductureor = QtWidgets.QLineEdit(dialogor)
                nomproductureor.setPlaceholderText("Nom et Prénom")
                nomproductureor.resize(180, 30)
                nomproductureor.move(40, 125)
                pereor = QtWidgets.QLineEdit(dialogor)
                pereor.setPlaceholderText("Pére")
                pereor.resize(180, 30)
                pereor.move(240, 125)
                matricultxt = QtWidgets.QLabel("Matricul", dialogor)
                matricultxt.setGeometry(QtCore.QRect(30, 165, 100, 20))
                mator = QtWidgets.QLineEdit(dialogor)
                mator.setInputMask("99999-999-99")
                mator.resize(180, 30)
                mator.move(40, 190)
                pointdecollector = QtWidgets.QComboBox(dialogor)
                pointdecollector.setPlaceholderText("Point de collect")
                pointdecollector.addItem('')
                pointdecollector.addItem('Dock central')
                pointdecollector.addItem('Magasin Zemmoura')
                pointdecollector.addItem('Magasin Kef-lazreg')
                pointdecollector.addItem('Magasin Messra')
                pointdecollector.addItem('Magasin Marche gros belacel')
                pointdecollector.resize(180, 30)
                pointdecollector.move(40, 65)

                psor = QtWidgets.QLineEdit(dialogor)
                validator = QDoubleValidator(10, 100, 2)
                psor.setValidator(validator)
                psor.setPlaceholderText("PS")
                psor.resize(180, 30)
                psor.move(240, 65)
                quantiteptext = QtWidgets.QLabel("Quantité", dialogor)
                quantiteptext.setGeometry(QtCore.QRect(230, 165, 100, 20))
                quantiteor = QtWidgets.QDoubleSpinBox(dialogor)
                quantiteor.setRange(1, 10000)
                quantiteor.setSuffix('  QX')
                quantiteor.setSpecialValueText(" ")
                quantiteor.setValue(0.0)
                quantiteor.resize(180, 30)
                quantiteor.move(240, 190)
                ok_button = QtWidgets.QPushButton("OK", dialogor)
                cancel_button = QtWidgets.QPushButton("Cancel", dialogor)
                dialogor.addButton(ok_button, QtWidgets.QMessageBox.ButtonRole.ActionRole)
                dialogor.addButton(cancel_button, QtWidgets.QMessageBox.ButtonRole.ActionRole)
                dialogor.exec()
                current_date = QtCore.QDate.currentDate().toString(QtCore.QDate.currentDate().toString("yyyy-MM-dd"))
                current_day = current_date.split("-")[2]
                current_month = current_date.split("-")[1]
                current_year = current_date.split("-")[0]
                current_daya = f"{current_day}-{current_month}-{current_year}"

                if dialogor.clickedButton() == ok_button:
                    producteur = nomproductureor.text()
                    pere = pereor.text()
                    quantite = quantiteor.text()
                    pointdecolect = pointdecollector.currentText()
                    mator = mator.text()
                    psor = psor.text()

                    eticketorge = DocxTemplate("eticket/Eticket_orge/Eticket_orge.docx")
                    eticketorge.render(
                        {"dt": current_date, "ptt": pointdecolect, "nmp": producteur, "mat": mator, "qtt": quantite,
                         "ps": psor, "per": pere})
                    doc_names = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    doc_pdf = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False).name
                    eticketorge.save(doc_names)
                    try:
                        if doc_names:
                            a = self.progress_bar()
                            sys.stderr = open("consoleoutput.log", "w")
                            convert(doc_names, doc_pdf)
                            # Open the resulting .pdf file using the default associated application
                            # os.startfile(doc_pdf, 'open')
                            app_path = 'C:\\Program Files\\Okular\\bin\\okular.exe'
                            subprocess.Popen([app_path, doc_pdf])
                    except Exception as e:
                        print(e)
                    name = f"ORGE_{producteur}_{current_daya}.docx"
                    eticketorge.save("eticket/Eticket_orge/" + name)
            except Exception as e:
                print(e)

        ######################################################function blé dur############################
        ##################################################################################################
        ############################################################
        def bonification_ps_bd(self):
            self.bpsbd.clear()
            self.bpsbd.setStyleSheet("background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            while self.vpsbd.value() >= 80.01:
                self.bpsbd.setValue(0.15)
                self.bpsbd.setStyleSheet(
                    "background-color:#88ffaa;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                if self.vpsbd.value() <= 80.25:
                    self.bpsbd.setValue(0.15)
                elif self.vpsbd.value() >= 80.26 and self.vpsbd.value() <= 80.50:
                    self.bpsbd.setValue(0.30)
                elif self.vpsbd.value() >= 80.51 and self.vpsbd.value() <= 80.75:
                    self.bpsbd.setValue(0.45)
                elif self.vpsbd.value() >= 80.76 and self.vpsbd.value() <= 81.00:
                    self.bpsbd.setValue(0.60)
                elif self.vpsbd.value() >= 81.01 and self.vpsbd.value() <= 81.25:
                    self.bpsbd.setValue(0.75)
                elif self.vpsbd.value() >= 81.26 and self.vpsbd.value() <= 81.50:
                    self.bpsbd.setValue(0.90)
                elif self.vpsbd.value() >= 81.51 and self.vpsbd.value() <= 81.75:
                    self.bpsbd.setValue(1.05)
                elif self.vpsbd.value() >= 81.76 and self.vpsbd.value() <= 82.00:
                    self.bpsbd.setValue(1.20)
                elif self.vpsbd.value() >= 82.01 and self.vpsbd.value() <= 82.25:
                    self.bpsbd.setValue(1.30)
                elif self.vpsbd.value() >= 82.26 and self.vpsbd.value() <= 82.50:
                    self.bpsbd.setValue(1.40)
                elif self.vpsbd.value() >= 82.51 and self.vpsbd.value() <= 82.75:
                    self.bpsbd.setValue(1.50)
                elif self.vpsbd.value() >= 82.76 and self.vpsbd.value() <= 83.00:
                    self.bpsbd.setValue(1.60)
                elif self.vpsbd.value() >= 83.01 and self.vpsbd.value() <= 83.25:
                    self.bpsbd.setValue(1.65)
                elif self.vpsbd.value() >= 83.26 and self.vpsbd.value() <= 83.50:
                    self.bpsbd.setValue(1.70)
                elif self.vpsbd.value() >= 83.51 and self.vpsbd.value() <= 83.75:
                    self.bpsbd.setValue(1.75)
                elif self.vpsbd.value() >= 83.76 and self.vpsbd.value() <= 84.00:
                    self.bpsbd.setValue(1.80)
                else:
                    self.bpsbd.setValue(0)
                    self.bpsbd.setStyleSheet(
                        "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                break

        def réfaction_ps_bd(self):
            self.rpsbd.clear()
            self.rpsbd.setStyleSheet("background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            if self.vpsbd.value() < 72 and self.vpsbd.value() > 60:
                self.obesrvationbd.setText("REFUS: POIDS SPECIFIQUE INFERIEUR DE 72 Kg/hl ")
                self.obesrvationbd.setStyleSheet(
                    "background-color:#e22630;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                self.bpsbd.clear()
                self.rpsbd.clear()
            else:
                self.obesrvationbd.clear()
                self.obesrvationbd.setStyleSheet(
                    "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            while self.vpsbd.value() >= 72.00:
                self.rpsbd.setValue(3.60)
                self.rpsbd.setStyleSheet(
                    "background-color:#e22630;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                self.bpsbd.clear()
                if self.vpsbd.value() <= 72.24:
                    self.rpsbd.setValue(3.60)
                elif self.vpsbd.value() >= 72.25 and self.vpsbd.value() <= 72.49:
                    self.rpsbd.setValue(3.30)
                elif self.vpsbd.value() >= 72.50 and self.vpsbd.value() <= 72.74:
                    self.rpsbd.setValue(3.00)
                elif self.vpsbd.value() >= 72.75 and self.vpsbd.value() <= 72.99:
                    self.rpsbd.setValue(2.70)
                elif self.vpsbd.value() >= 73.00 and self.vpsbd.value() <= 73.24:
                    self.rpsbd.setValue(2.40)
                elif self.vpsbd.value() >= 73.25 and self.vpsbd.value() <= 73.49:
                    self.rpsbd.setValue(2.10)
                elif self.vpsbd.value() >= 73.50 and self.vpsbd.value() <= 73.74:
                    self.rpsbd.setValue(1.80)
                elif self.vpsbd.value() >= 73.75 and self.vpsbd.value() <= 73.99:
                    self.rpsbd.setValue(1.50)
                elif self.vpsbd.value() >= 74.00 and self.vpsbd.value() <= 74.24:
                    self.rpsbd.setValue(1.20)
                elif self.vpsbd.value() >= 74.25 and self.vpsbd.value() <= 74.49:
                    self.rpsbd.setValue(1.00)
                elif self.vpsbd.value() >= 74.50 and self.vpsbd.value() <= 74.74:
                    self.rpsbd.setValue(0.80)
                elif self.vpsbd.value() >= 74.75 and self.vpsbd.value() <= 74.99:
                    self.rpsbd.setValue(0.60)
                elif self.vpsbd.value() >= 75.00 and self.vpsbd.value() <= 75.24:
                    self.rpsbd.setValue(0.40)
                elif self.vpsbd.value() >= 75.25 and self.vpsbd.value() <= 75.49:
                    self.rpsbd.setValue(0.30)
                elif self.vpsbd.value() >= 75.50 and self.vpsbd.value() <= 75.74:
                    self.rpsbd.setValue(0.20)
                elif self.vpsbd.value() >= 75.75 and self.vpsbd.value() <= 75.99:
                    self.rpsbd.setValue(0.10)
                else:
                    self.rpsbd.setValue(0)
                    self.rpsbd.setStyleSheet(
                        "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                break

        def bonification_pimpurte_er_bd(self):
            self.btotalprembd.clear()
            self.btotalprembd.setStyleSheet(
                "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            while self.vtotalprembd.value() >= 0.01:
                self.btotalprembd.setValue(0.125)
                self.btotalprembd.setStyleSheet(
                    "background-color:#88ffaa;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                if self.vtotalprembd.value() <= 0.25:
                    self.btotalprembd.setValue(0.125)
                elif self.vtotalprembd.value() >= 0.26 and self.vtotalprembd.value() <= 0.50:
                    self.btotalprembd.setValue(0.250)
                elif self.vtotalprembd.value() >= 0.51 and self.vtotalprembd.value() <= 0.75:
                    self.btotalprembd.setValue(0.375)
                elif self.vtotalprembd.value() >= 0.76 and self.vtotalprembd.value() <= 1.00:
                    self.btotalprembd.setValue(0.500)
                else:
                    self.btotalprembd.setValue(0)
                    self.btotalprembd.clear()
                    self.btotalprembd.setStyleSheet(
                        "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                break

        def refaction_impurté_er_bd(self):
            self.rtotalprembd.clear()
            self.rtotalprembd.setStyleSheet(
                "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            while self.vtotalprembd.value() >= 3.01:
                self.rtotalprembd.setValue(0.125)
                self.rtotalprembd.setStyleSheet(
                    "background-color:#e22630;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                self.btotalprembd.clear()
                if self.vtotalprembd.value() <= 3.25:
                    self.rtotalprembd.setValue(0.125)
                elif self.vtotalprembd.value() >= 3.26 and self.vtotalprembd.value() <= 3.50:
                    self.rtotalprembd.setValue(0.250)
                elif self.vtotalprembd.value() >= 3.51 and self.vtotalprembd.value() <= 3.75:
                    self.rtotalprembd.setValue(0.375)
                elif self.vtotalprembd.value() >= 3.76 and self.vtotalprembd.value() <= 4.00:
                    self.rtotalprembd.setValue(0.500)
                elif self.vtotalprembd.value() >= 4.01 and self.vtotalprembd.value() <= 4.25:
                    self.rtotalprembd.setValue(0.625)
                elif self.vtotalprembd.value() >= 4.26 and self.vtotalprembd.value() <= 4.50:
                    self.rtotalprembd.setValue(0.750)
                elif self.vtotalprembd.value() >= 4.51 and self.vtotalprembd.value() <= 4.75:
                    self.rtotalprembd.setValue(0.875)
                elif self.vtotalprembd.value() >= 4.76 and self.vtotalprembd.value() <= 5.00:
                    self.rtotalprembd.setValue(1.000)
                elif self.vtotalprembd.value() >= 5.01 and self.vtotalprembd.value() <= 5.25:
                    self.rtotalprembd.setValue(1.56)
                elif self.vtotalprembd.value() >= 8.51 and self.vtotalprembd.value() <= 9.00:
                    self.rtotalprembd.setValue(1.125)
                elif self.vtotalprembd.value() >= 5.26 and self.vtotalprembd.value() <= 5.50:
                    self.rtotalprembd.setValue(1.250)
                elif self.vtotalprembd.value() >= 5.51 and self.vtotalprembd.value() <= 5.75:
                    self.rtotalprembd.setValue(1.375)
                elif self.vtotalprembd.value() >= 5.76 and self.vtotalprembd.value() <= 6.00:
                    self.rtotalprembd.setValue(1.500)
                elif self.vtotalprembd.value() >= 6.01 and self.vtotalprembd.value() <= 30:
                    self.rtotalprembd.setValue(0)
                    self.obesrvationbd.setText("PRIX A DEBATTRE")

                else:
                    self.rtotalprembd.setValue(0)
                    self.rtotalprembd.clear
                    self.rtotalprembd.setStyleSheet(
                        "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                break

        def refaction_impurte_eme_bd(self):
            self.rtotaldembd.clear()
            self.rtotaldembd.setStyleSheet(
                "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            while self.vtotaldembd.value() >= 10.01:
                self.rtotaldembd.setValue(0.50)
                self.rtotaldembd.setStyleSheet(
                    "background-color:#e22630;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                self.btotaldembd.clear()
                if self.vtotaldembd.value() <= 11.00:
                    self.rtotaldembd.setValue(0.50)
                elif self.vtotaldembd.value() >= 11.01 and self.vtotaldembd.value() <= 12.00:
                    self.rtotaldembd.setValue(1.00)
                elif self.vtotaldembd.value() >= 12.01 and self.vtotaldembd.value() <= 13.00:
                    self.rtotaldembd.setValue(1.50)
                elif self.vtotaldembd.value() >= 13.01 and self.vtotaldembd.value() <= 14.00:
                    self.rtotaldembd.setValue(2.00)
                elif self.vtotaldembd.value() >= 14.01 and self.vtotaldembd.value() <= 15.00:
                    self.rtotaldembd.setValue(2.50)
                elif self.vtotaldembd.value() >= 15.01 and self.vtotaldembd.value() <= 16.00:
                    self.rtotaldembd.setValue(3.00)
                elif self.vtotaldembd.value() >= 16.01 and self.vtotaldembd.value() <= 17.00:
                    self.rtotaldembd.setValue(3.50)
                elif self.vtotaldembd.value() >= 17.01 and self.vtotaldembd.value() <= 18.00:
                    self.rtotaldembd.setValue(4.00)
                elif self.vtotaldembd.value() >= 18.01 and self.vtotaldembd.value() <= 19.00:
                    self.rtotaldembd.setValue(4.50)
                elif self.vtotaldembd.value() >= 19.01 and self.vtotaldembd.value() <= 20.00:
                    self.rtotaldembd.setValue(5.00)
                elif self.vtotaldembd.value() >= 20.01 and self.vtotaldembd.value() <= 50.00:
                    self.rtotaldembd.setValue(0)
                    self.obesrvationbd.setText("PRIX A DEBATTRE")
                else:
                    self.rtotaldembd.setValue(0)
                    self.rtotaldembd.clear()
                    self.rtotaldembd.setStyleSheet(
                        "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                break

        def rGrains_casse(self):
            self.rgrainscassébd.clear()
            self.rgrainscassébd.setStyleSheet(
                "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            while self.vgrainscassébd.value() >= 5.01:
                self.rgrainscassébd.setValue(0.075)
                self.rgrainscassébd.setStyleSheet(
                    "background-color:#e22630;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                if self.vgrainscassébd.value() <= 5.25:
                    self.rgrainscassébd.setValue(0.075)
                elif self.vgrainscassébd.value() >= 5.26 and self.vgrainscassébd.value() <= 5.50:
                    self.rgrainscassébd.setValue(0.150)
                elif self.vgrainscassébd.value() >= 5.51 and self.vgrainscassébd.value() <= 5.75:
                    self.rgrainscassébd.setValue(0.225)
                elif self.vgrainscassébd.value() >= 5.76 and self.vgrainscassébd.value() <= 6.00:
                    self.rgrainscassébd.setValue(0.300)
                elif self.vgrainscassébd.value() >= 6.01 and self.vgrainscassébd.value() <= 6.25:
                    self.rgrainscassébd.setValue(0.375)
                elif self.vgrainscassébd.value() >= 6.26 and self.vgrainscassébd.value() <= 6.50:
                    self.rgrainscassébd.setValue(0.450)
                elif self.vgrainscassébd.value() >= 6.51 and self.vgrainscassébd.value() <= 6.75:
                    self.rgrainscassébd.setValue(0.525)
                elif self.vgrainscassébd.value() >= 6.76 and self.vgrainscassébd.value() <= 7.00:
                    self.rgrainscassébd.setValue(0.600)
                elif self.vgrainscassébd.value() >= 7.01 and self.vgrainscassébd.value() <= 7.25:
                    self.rgrainscassébd.setValue(0.675)
                elif self.vgrainscassébd.value() >= 7.26 and self.vgrainscassébd.value() <= 7.50:
                    self.rgrainscassébd.setValue(0.750)
                elif self.vgrainscassébd.value() >= 7.51 and self.vgrainscassébd.value() <= 7.75:
                    self.rgrainscassébd.setValue(0.825)
                elif self.vgrainscassébd.value() >= 7.76 and self.vgrainscassébd.value() <= 8.00:
                    self.rgrainscassébd.setValue(0.900)
                elif self.vgrainscassébd.value() >= 8.01 and self.vgrainscassébd.value() <= 8.25:
                    self.rgrainscassébd.setValue(0.975)
                elif self.vgrainscassébd.value() >= 8.26 and self.vgrainscassébd.value() <= 8.50:
                    self.rgrainscassébd.setValue(1.050)
                elif self.vgrainscassébd.value() >= 8.51 and self.vgrainscassébd.value() <= 8.75:
                    self.rgrainscassébd.setValue(1.125)
                elif self.vgrainscassébd.value() >= 8.76 and self.vgrainscassébd.value() <= 9.00:
                    self.rgrainscassébd.setValue(1.200)
                elif self.vgrainscassébd.value() >= 9.01 and self.vgrainscassébd.value() <= 30:
                    self.rgrainscassébd.setValue(0)
                    self.obesrvationbd.setText("PRIX A DEBATTRE")
                else:
                    self.rgrainscassébd.setValue(0)
                    self.rgrainscassébd.clear()
                    self.rgrainscassébd.setStyleSheet(
                        "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                break

        def bonification_mitadinage(self):
            self.bgrainmitadinésbd.setStyleSheet(
                "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.bgrainmitadinésbd.clear()
            self.bgrainmitadinésbd.setValue(0)
            while self.vgrainmitadinésbd.value() >= 0.01:
                self.bgrainmitadinésbd.setValue(0.25)
                if self.vgrainmitadinésbd.value() <= 20.00:
                    self.bgrainmitadinésbd.setStyleSheet(
                        "background-color:#88ffaa;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.bgrainmitadinésbd.setValue(0.25)
                else:
                    self.bgrainmitadinésbd.setStyleSheet(
                        "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                    self.bgrainmitadinésbd.clear()
                    self.bgrainmitadinésbd.setValue(0)

                break

        def mitadinage_bd(self):
            self.rgrainmitadinésbd.clear()
            self.bgrainmitadinésbd.clear()
            self.bgrainmitadinésbd.setStyleSheet(
                "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.rgrainmitadinésbd.setStyleSheet(
                "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            while self.vgrainmitadinésbd.value() >= 20.01:
                self.rgrainmitadinésbd.setValue(0.05)
                self.rgrainmitadinésbd.setStyleSheet(
                    "background-color:#e22630;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                if self.vgrainmitadinésbd.value() <= 21.00:
                    self.rgrainmitadinésbd.setValue(0.05)
                elif self.vgrainmitadinésbd.value() >= 21.01 and self.vgrainmitadinésbd.value() <= 22.00:
                    self.rgrainmitadinésbd.setValue(0.10)
                elif self.vgrainmitadinésbd.value() >= 22.01 and self.vgrainmitadinésbd.value() <= 23.00:
                    self.rgrainmitadinésbd.setValue(0.15)
                elif self.vgrainmitadinésbd.value() >= 23.01 and self.vgrainmitadinésbd.value() <= 24.00:
                    self.rgrainmitadinésbd.setValue(0.20)
                elif self.vgrainmitadinésbd.value() >= 24.01 and self.vgrainmitadinésbd.value() <= 25.00:
                    self.rgrainmitadinésbd.setValue(0.25)
                elif self.vgrainmitadinésbd.value() >= 25.01 and self.vgrainmitadinésbd.value() <= 26.00:
                    self.rgrainmitadinésbd.setValue(0.30)
                elif self.vgrainmitadinésbd.value() >= 26.01 and self.vgrainmitadinésbd.value() <= 27.00:
                    self.rgrainmitadinésbd.setValue(0.35)
                elif self.vgrainmitadinésbd.value() >= 27.01 and self.vgrainmitadinésbd.value() <= 28.00:
                    self.rgrainmitadinésbd.setValue(0.40)
                elif self.vgrainmitadinésbd.value() >= 28.01 and self.vgrainmitadinésbd.value() <= 29.00:
                    self.rgrainmitadinésbd.setValue(0.45)
                elif self.vgrainmitadinésbd.value() >= 29.01 and self.vgrainmitadinésbd.value() <= 30.00:
                    self.rgrainmitadinésbd.setValue(0.50)
                elif self.vgrainmitadinésbd.value() >= 30.01 and self.vgrainmitadinésbd.value() <= 31.00:
                    self.rgrainmitadinésbd.setValue(0.55)
                elif self.vgrainmitadinésbd.value() >= 31.01 and self.vgrainmitadinésbd.value() <= 32.00:
                    self.rgrainmitadinésbd.setValue(0.60)
                elif self.vgrainmitadinésbd.value() >= 32.01 and self.vgrainmitadinésbd.value() <= 33.00:
                    self.rgrainmitadinésbd.setValue(0.65)
                elif self.vgrainmitadinésbd.value() >= 33.01 and self.vgrainmitadinésbd.value() <= 34.00:
                    self.rgrainmitadinésbd.setValue(0.70)
                elif self.vgrainmitadinésbd.value() >= 34.01 and self.vgrainmitadinésbd.value() <= 35.00:
                    self.rgrainmitadinésbd.setValue(0.75)
                elif self.vgrainmitadinésbd.value() >= 35.01 and self.vgrainmitadinésbd.value() <= 36.00:
                    self.rgrainmitadinésbd.setValue(0.80)
                elif self.vgrainmitadinésbd.value() >= 36.01 and self.vgrainmitadinésbd.value() <= 37.00:
                    self.rgrainmitadinésbd.setValue(0.85)
                elif self.vgrainmitadinésbd.value() >= 37.01 and self.vgrainmitadinésbd.value() <= 38.00:
                    self.rgrainmitadinésbd.setValue(0.90)
                elif self.vgrainmitadinésbd.value() >= 38.01 and self.vgrainmitadinésbd.value() <= 39.00:
                    self.rgrainmitadinésbd.setValue(0.95)
                elif self.vgrainmitadinésbd.value() >= 39.01 and self.vgrainmitadinésbd.value() <= 40.00:
                    self.rgrainmitadinésbd.setValue(1.00)
                elif self.vgrainmitadinésbd.value() >= 40.01 and self.vgrainmitadinésbd.value() <= 41.00:
                    self.rgrainmitadinésbd.setValue(1.05)
                elif self.vgrainmitadinésbd.value() >= 41.01 and self.vgrainmitadinésbd.value() <= 42.00:
                    self.rgrainmitadinésbd.setValue(1.10)
                elif self.vgrainmitadinésbd.value() >= 42.01 and self.vgrainmitadinésbd.value() <= 43.00:
                    self.rgrainmitadinésbd.setValue(1.15)
                elif self.vgrainmitadinésbd.value() >= 43.01 and self.vgrainmitadinésbd.value() <= 44.00:
                    self.rgrainmitadinésbd.setValue(1.20)
                elif self.vgrainmitadinésbd.value() >= 44.01 and self.vgrainmitadinésbd.value() <= 45.00:
                    self.rgrainmitadinésbd.setValue(1.25)
                elif self.vgrainmitadinésbd.value() >= 45.01 and self.vgrainmitadinésbd.value() <= 46.00:
                    self.rgrainmitadinésbd.setValue(1.30)
                elif self.vgrainmitadinésbd.value() >= 46.01 and self.vgrainmitadinésbd.value() <= 47.00:
                    self.rgrainmitadinésbd.setValue(1.35)
                elif self.vgrainmitadinésbd.value() >= 47.01 and self.vgrainmitadinésbd.value() <= 48.00:
                    self.rgrainmitadinésbd.setValue(1.40)
                elif self.vgrainmitadinésbd.value() >= 48.01 and self.vgrainmitadinésbd.value() <= 49.00:
                    self.rgrainmitadinésbd.setValue(1.45)
                elif self.vgrainmitadinésbd.value() >= 49.01 and self.vgrainmitadinésbd.value() <= 50.00:
                    self.rgrainmitadinésbd.setValue(1.50)
                elif self.vgrainmitadinésbd.value() >= 50.01 and self.vgrainmitadinésbd.value() <= 51.00:
                    self.rgrainmitadinésbd.setValue(1.55)
                elif self.vgrainmitadinésbd.value() >= 51.01 and self.vgrainmitadinésbd.value() <= 52.00:
                    self.rgrainmitadinésbd.setValue(1.60)
                elif self.vgrainmitadinésbd.value() >= 52.01 and self.vgrainmitadinésbd.value() <= 53.00:
                    self.rgrainmitadinésbd.setValue(1.65)
                elif self.vgrainmitadinésbd.value() >= 53.01 and self.vgrainmitadinésbd.value() <= 54.00:
                    self.rgrainmitadinésbd.setValue(1.70)
                elif self.vgrainmitadinésbd.value() >= 54.01 and self.vgrainmitadinésbd.value() <= 55.00:
                    self.rgrainmitadinésbd.setValue(1.75)
                elif self.vgrainmitadinésbd.value() >= 55.01 and self.vgrainmitadinésbd.value() <= 56.00:
                    self.rgrainmitadinésbd.setValue(1.80)
                elif self.vgrainmitadinésbd.value() >= 56.01 and self.vgrainmitadinésbd.value() <= 57.00:
                    self.rgrainmitadinésbd.setValue(1.85)
                elif self.vgrainmitadinésbd.value() >= 57.01 and self.vgrainmitadinésbd.value() <= 58.00:
                    self.rgrainmitadinésbd.setValue(1.90)
                elif self.vgrainmitadinésbd.value() >= 58.01 and self.vgrainmitadinésbd.value() <= 59.00:
                    self.rgrainmitadinésbd.setValue(1.95)
                elif self.vgrainmitadinésbd.value() >= 59.01 and self.vgrainmitadinésbd.value() <= 60.00:
                    self.rgrainmitadinésbd.setValue(2.00)
                elif self.vgrainmitadinésbd.value() >= 60.01 and self.vgrainmitadinésbd.value() <= 61.00:
                    self.rgrainmitadinésbd.setValue(2.05)
                elif self.vgrainmitadinésbd.value() >= 61.01 and self.vgrainmitadinésbd.value() <= 62.00:
                    self.rgrainmitadinésbd.setValue(2.10)
                elif self.vgrainmitadinésbd.value() >= 62.01 and self.vgrainmitadinésbd.value() <= 63.00:
                    self.rgrainmitadinésbd.setValue(2.15)
                elif self.vgrainmitadinésbd.value() >= 63.01 and self.vgrainmitadinésbd.value() <= 64.00:
                    self.rgrainmitadinésbd.setValue(2.20)
                elif self.vgrainmitadinésbd.value() >= 64.01 and self.vgrainmitadinésbd.value() <= 65.00:
                    self.rgrainmitadinésbd.setValue(2.25)
                elif self.vgrainmitadinésbd.value() >= 65.01 and self.vgrainmitadinésbd.value() <= 66.00:
                    self.rgrainmitadinésbd.setValue(2.30)
                elif self.vgrainmitadinésbd.value() >= 66.01 and self.vgrainmitadinésbd.value() <= 67.00:
                    self.rgrainmitadinésbd.setValue(2.35)
                elif self.vgrainmitadinésbd.value() >= 67.01 and self.vgrainmitadinésbd.value() <= 68.00:
                    self.rgrainmitadinésbd.setValue(2.40)
                elif self.vgrainmitadinésbd.value() >= 68.01 and self.vgrainmitadinésbd.value() <= 69.00:
                    self.rgrainmitadinésbd.setValue(2.45)
                elif self.vgrainmitadinésbd.value() >= 69.01 and self.vgrainmitadinésbd.value() <= 70.00:
                    self.rgrainmitadinésbd.setValue(2.50)
                elif self.vgrainmitadinésbd.value() >= 70.01 and self.vgrainmitadinésbd.value() <= 100:
                    self.rgrainmitadinésbd.setValue(0)
                    self.obesrvationbd.setText("PRIX A DEBATTRE")
                    self.rgrainmitadinésbd.setStyleSheet(
                        "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                else:
                    self.rgrainmitadinésbd.clear()
                    self.vgrainmitadinésbd.clear()
                    self.bgrainmitadinésbd.clear()
                    self.rgrainmitadinésbd.setStyleSheet(
                        "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                break

        def grain_pounaisée(self):
            self.rgrainepunaisésbd.setValue(0)
            self.rgrainepunaisésbd.clear()
            self.rgrainepunaisésbd.setStyleSheet(
                "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            while self.vgrainepunaisésbd.value() >= 2.01:
                self.rgrainepunaisésbd.setValue(0.08)
                self.rgrainepunaisésbd.setStyleSheet(
                    "background-color:#e22630;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                if self.vgrainepunaisésbd.value() <= 2.25:
                    self.rgrainepunaisésbd.setValue(0.08)
                elif self.vgrainepunaisésbd.value() >= 2.26 and self.vgrainepunaisésbd.value() <= 2.50:
                    self.rgrainepunaisésbd.setValue(0.16)
                elif self.vgrainepunaisésbd.value() >= 2.51 and self.vgrainepunaisésbd.value() <= 2.75:
                    self.rgrainepunaisésbd.setValue(0.24)
                elif self.vgrainepunaisésbd.value() >= 2.76 and self.vgrainepunaisésbd.value() <= 3.00:
                    self.rgrainepunaisésbd.setValue(0.32)
                elif self.vgrainepunaisésbd.value() >= 3.01 and self.vgrainepunaisésbd.value() <= 3.25:
                    self.rgrainepunaisésbd.setValue(0.40)
                elif self.vgrainepunaisésbd.value() >= 3.26 and self.vgrainepunaisésbd.value() <= 3.50:
                    self.rgrainepunaisésbd.setValue(0.48)
                elif self.vgrainepunaisésbd.value() >= 3.51 and self.vgrainepunaisésbd.value() <= 3.75:
                    self.rgrainepunaisésbd.setValue(0.56)
                elif self.vgrainepunaisésbd.value() >= 3.76 and self.vgrainepunaisésbd.value() <= 4.00:
                    self.rgrainepunaisésbd.setValue(0.64)
                elif self.vgrainepunaisésbd.value() >= 4.01 and self.vgrainepunaisésbd.value() <= 4.25:
                    self.rgrainepunaisésbd.setValue(0.72)
                elif self.vgrainepunaisésbd.value() >= 4.26 and self.vgrainepunaisésbd.value() <= 4.50:
                    self.rgrainepunaisésbd.setValue(0.80)
                elif self.vgrainepunaisésbd.value() >= 4.51 and self.vgrainepunaisésbd.value() <= 4.75:
                    self.rgrainepunaisésbd.setValue(0.88)
                elif self.vgrainepunaisésbd.value() >= 4.76 and self.vgrainepunaisésbd.value() <= 5.00:
                    self.rgrainepunaisésbd.setValue(0.96)
                elif self.vgrainepunaisésbd.value() >= 5.01 and self.vgrainepunaisésbd.value() <= 5.25:
                    self.rgrainepunaisésbd.setValue(1.04)
                elif self.vgrainepunaisésbd.value() >= 5.26 and self.vgrainepunaisésbd.value() <= 5.50:
                    self.rgrainepunaisésbd.setValue(1.12)
                elif self.vgrainepunaisésbd.value() >= 5.51 and self.vgrainepunaisésbd.value() <= 5.75:
                    self.rgrainepunaisésbd.setValue(1.20)
                elif self.vgrainepunaisésbd.value() >= 5.76 and self.vgrainepunaisésbd.value() <= 6.00:
                    self.rgrainepunaisésbd.setValue(1.28)
                elif self.vgrainepunaisésbd.value() >= 6.01 and self.vgrainepunaisésbd.value() <= 6.25:
                    self.rgrainepunaisésbd.setValue(1.36)
                elif self.vgrainepunaisésbd.value() >= 6.26 and self.vgrainepunaisésbd.value() <= 6.50:
                    self.rgrainepunaisésbd.setValue(1.44)
                elif self.vgrainepunaisésbd.value() >= 6.51 and self.vgrainepunaisésbd.value() <= 6.75:
                    self.rgrainepunaisésbd.setValue(1.52)
                elif self.vgrainepunaisésbd.value() >= 6.76 and self.vgrainepunaisésbd.value() <= 7.00:
                    self.rgrainepunaisésbd.setValue(1.60)
                elif self.vgrainepunaisésbd.value() >= 7.01 and self.vgrainepunaisésbd.value() <= 7.25:
                    self.rgrainepunaisésbd.setValue(1.68)
                elif self.vgrainepunaisésbd.value() >= 7.26 and self.vgrainepunaisésbd.value() <= 7.50:
                    self.rgrainepunaisésbd.setValue(1.76)
                elif self.vgrainepunaisésbd.value() >= 7.51 and self.vgrainepunaisésbd.value() <= 7.75:
                    self.rgrainepunaisésbd.setValue(1.84)
                elif self.vgrainepunaisésbd.value() >= 7.76 and self.vgrainepunaisésbd.value() <= 8.00:
                    self.rgrainepunaisésbd.setValue(1.92)
                elif self.vgrainepunaisésbd.value() >= 8.01 and self.vgrainepunaisésbd.value() <= 8.25:
                    self.rgrainepunaisésbd.setValue(2.00)
                elif self.vgrainepunaisésbd.value() >= 8.26 and self.vgrainepunaisésbd.value() <= 8.50:
                    self.rgrainepunaisésbd.setValue(2.08)
                elif self.vgrainepunaisésbd.value() >= 8.51 and self.vgrainepunaisésbd.value() <= 8.75:
                    self.rgrainepunaisésbd.setValue(2.16)
                elif self.vgrainepunaisésbd.value() >= 8.76 and self.vgrainepunaisésbd.value() <= 9.00:
                    self.rgrainepunaisésbd.setValue(2.24)
                elif self.vgrainepunaisésbd.value() >= 9.01 and self.vgrainepunaisésbd.value() <= 9.25:
                    self.rgrainepunaisésbd.setValue(2.32)
                elif self.vgrainepunaisésbd.value() >= 9.26 and self.vgrainepunaisésbd.value() <= 9.50:
                    self.rgrainepunaisésbd.setValue(2.40)
                elif self.vgrainepunaisésbd.value() >= 9.51 and self.vgrainepunaisésbd.value() <= 9.75:
                    self.rgrainepunaisésbd.setValue(2.48)
                elif self.vgrainepunaisésbd.value() >= 9.76 and self.vgrainepunaisésbd.value() <= 10.00:
                    self.rgrainepunaisésbd.setValue(2.56)
                elif self.vgrainepunaisésbd.value() >= 10.01 and self.vgrainepunaisésbd.value() <= 40:
                    self.rgrainepunaisésbd.setValue(0)
                    self.obesrvationbd.setText("PRIX A DEBATTRE")
                else:
                    self.rgrainepunaisésbd.setValue(0)
                    self.rgrainepunaisésbd.clear()
                    self.rgrainepunaisésbd.setStyleSheet(
                        "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                break

        def clear_btotalprembd(self):
            if self.vtotalprembd == 0.00:
                self.btotalprembd.setValue(0)
                self.rtotalprembd.setValue(0)
                self.btotalprembd.clear()
                self.rtotalprembd.clear

        def plus_bd(self):
            abd = self.vmatiére20mmbd.value()
            bbd = self.vdébrisvébd.value()
            cbd = self.vgrainnuisiblebd.value()
            dbd = self.vgrainscassébd.value()
            ebd = self.vgrainsboutésbd.value()
            fbd = self.vgrainsrouxbd.value()
            gbd = self.vgrainfortementmouchtébd.value()
            hbd = self.vgrainepunaisésbd.value()
            ibd = self.vgrainpiquebd.value()
            jbd = self.vgrainmitadinésbd.value()
            kbd = self.vbletendredansbledurbd.value()
            totalprembd = abd + bbd + cbd
            totaldem = dbd + ebd + fbd + gbd + hbd + ibd
            totalmitadine = jbd + kbd
            btotalBonietRefacbd = self.btotalprembd.value() + self.btotaldembd.value() + self.btotalmitadinésbd.value() + self.bpsbd.value() + self.bgrainmitadinésbd.value()
            rtotalBonietRefac = self.rtotalprembd.value() + self.rtotaldembd.value() + self.rtotalmitadinésbd.value() + self.rpsbd.value() + self.rgrainmitadinésbd.value() + self.rgrainscassébd.value() + self.rgrainepunaisésbd.value()
            self.btotalbiniEtrefaction.setValue(btotalBonietRefacbd)
            self.rtotalbiniEtrefaction.setValue(rtotalBonietRefac)
            self.vtotalmitadinésbd.setValue(totalmitadine)
            self.vtotalprembd.setValue(totalprembd)
            if self.vgrainscassébd.value() < 5.00:
                self.vtotaldembd.setValue(totaldem)
            elif self.vgrainscassébd.value() >= 5.01:
                self.vtotaldembd.setValue(ebd + fbd + gbd + hbd + ibd)

        def clear_bd(self):
            self.vpsbd.clear()
            self.vpsbd.setValue(0)
            self.vhumiditebd.clear()
            self.vergotbd.clear()
            self.vmatiére20mmbd.clear()
            self.vmatiére20mmbd.setValue(0)
            self.vdébrisvébd.clear()
            self.vdébrisvébd.setValue(0)
            self.vgrainnuisiblebd.clear()
            self.vgrainnuisiblebd.setValue(0)
            self.vtotalprembd.clear()
            self.vtotalprembd.setValue(0)
            self.vgrainscassébd.clear()
            self.vgrainscassébd.setValue(0)
            self.vgrainsboutésbd.clear()
            self.vgrainsboutésbd.setValue(0)
            self.vgrainsrouxbd.clear()
            self.vgrainsrouxbd.setValue(0)
            self.vgrainfortementmouchtébd.clear()
            self.vgrainfortementmouchtébd.setValue(0)
            self.vgrainepunaisésbd.clear()
            self.vgrainepunaisésbd.setValue(0)
            self.vgrainpiquebd.clear()
            self.vgrainpiquebd.setValue(0)
            self.vtotaldembd.clear()
            self.vtotaldembd.setValue(0)
            self.vgrainmitadinésbd.clear()
            self.vgrainmitadinésbd.setValue(0)
            self.vbletendredansbledurbd.clear()
            self.vbletendredansbledurbd.setValue(0)
            self.vtotalmitadinésbd.clear()
            self.vtotalmitadinésbd.setValue(0)
            self.rpsbd.clear()
            self.rpsbd.setValue(0)
            self.rergotbd.clear()
            self.rmatiére20mmbd.clear()
            self.rmatiére20mmbd.setValue(0)
            self.rdébrisvébd.clear()
            self.rdébrisvébd.setValue(0)
            self.rgrainnuisiblebd.clear()
            self.rgrainnuisiblebd.setValue(0)
            self.rtotalprembd.clear()
            self.rtotalprembd.setValue(0)
            self.rgrainscassébd.clear()
            self.rgrainscassébd.setValue(0)
            self.rgrainsboutésbd.clear()
            self.rgrainsboutésbd.setValue(0)
            self.rgrainsrouxbd.clear()
            self.rgrainsrouxbd.setValue(0)
            self.rgrainfortementmouchtébd.clear()
            self.rgrainfortementmouchtébd.setValue(0)
            self.rgrainepunaisésbd.clear()
            self.rgrainepunaisésbd.setValue(0)
            self.rgrainpiquebd.clear()
            self.rgrainpiquebd.setValue(0)
            self.rtotaldembd.clear()
            self.rtotaldembd.setValue(0)
            self.rgrainmitadinésbd.clear()
            self.rgrainmitadinésbd.setValue(0)
            self.rbletendredansbledurbd.clear()
            self.rbletendredansbledurbd.setValue(0)
            self.rtotalmitadinésbd.clear()
            self.rtotalmitadinésbd.setValue(0)
            self.bpsbd.clear()
            self.bpsbd.setValue(0)
            self.bergotbd.clear()
            self.bmatiére20mmbd.clear()
            self.bmatiére20mmbd.setValue(0)
            self.bdébrisvébd.clear()
            self.bdébrisvébd.setValue(0)
            self.bgrainnuisiblebd.clear()
            self.bgrainnuisiblebd.setValue(0)
            self.btotalprembd.clear()
            self.btotalprembd.setValue(0)
            self.bgrainscassébd.clear()
            self.bgrainscassébd.setValue(0)
            self.bgrainsboutésbd.clear()
            self.bgrainsboutésbd.setValue(0)
            self.bgrainsrouxbd.clear()
            self.bgrainsrouxbd.setValue(0)
            self.bgrainfortementmouchtébd.clear()
            self.bgrainfortementmouchtébd.setValue(0)
            self.bgrainepunaisésbd.clear()
            self.bgrainepunaisésbd.setValue(0)
            self.bgrainpiquebd.clear()
            self.bgrainpiquebd.setValue(0)
            self.btotaldembd.clear()
            self.btotaldembd.setValue(0)
            self.bgrainmitadinésbd.clear()
            self.bgrainmitadinésbd.setValue(0)
            self.bbletendredansbledurbd.clear()
            self.bbletendredansbledurbd.setValue(0)
            self.btotalmitadinésbd.clear()
            self.btotalmitadinésbd.setValue(0)

        def calcul_bd(self):
            self.réfaction_ps_bd()
            self.bonification_ps_bd()
            self.refaction_impurté_er_bd()
            self.bonification_pimpurte_er_bd()
            self.refaction_impurte_eme_bd()
            self.rGrains_casse()
            self.mitadinage_bd()
            self.bonification_mitadinage()
            self.grain_pounaisée()
            self.plus_bd()

        def bulletin_bd(self):
            try:
                nbulltinbd = self.n_bultinbd.text()
                nomproducteurbd = self.nome_du_producteurbd.text()
                perebd = self.pérebd.text()
                matriculbd = self.adressebd.text()
                poindecollectebd = self.pointdecollectbd.currentText()
                datebd = self.dattereceptiontbd.dateTime().toString("dd-MM-yyyy hh:mm")
                agreeur = self.agréeeurcombobd.currentText()
                quantitebd = self.quantitebd.value()
                vpsbd = self.vpsbd.value()
                bpsbd = self.bpsbd.text()
                rpsbd = self.rpsbd.text()
                vhumidite = self.vhumiditebd.value()
                vergot = self.vergotbd.value()
                vmatier20mm = self.vmatiére20mmbd.value()
                vdebrit = self.vdébrisvébd.value()
                vgrainnuisible = self.vgrainnuisiblebd.value()
                graincasse = self.vgrainscassébd.value()
                rgraicasse = self.rgrainscassébd.text()
                grainboute = self.vgrainsboutésbd.value()
                grainroux = self.vgrainsrouxbd.value()
                grainfortementmouchte = self.vgrainfortementmouchtébd.value()
                grainpunaise = self.vgrainepunaisésbd.value()
                rgrainpunaise = self.rgrainepunaisésbd.text()
                grainpique = self.vgrainpiquebd.value()
                grainmitadine = self.vgrainmitadinésbd.value()
                bletendedbledur = self.vbletendredansbledurbd.value()
                vtotalbdp = self.vtotalprembd.value()
                vtotalbdd = self.vtotaldembd.value()
                btotalbdp = self.btotalprembd.text()
                btotalbdd = self.btotaldembd.text()
                rtotalbdp = self.rtotalprembd.text()
                rtotalbdd = self.rtotaldembd.text()
                bmitadine = self.bgrainmitadinésbd.text()
                rmitadine = self.rgrainmitadinésbd.text()
                vtotalmitadineetbletendre = self.vtotalmitadinésbd.value()
                btotaldb = self.btotalbiniEtrefaction.text()
                rtotalbd = self.rtotalbiniEtrefaction.text()
                ndcartebd = self.n_cartebd.text()
                observationbd = self.obesrvationbd.toPlainText()
                date = QDate.currentDate()
                current_date = QDate.currentDate()
                current_day = current_date.day()
                current_month = current_date.month()
                current_year = current_date.year()
                current_time = QTime.currentTime()
                current_hour = current_time.hour()
                current_minute = current_time.minute()
                # Format the date as "dd-mm-yyyy"
                current_days = f"{current_day:02d}-{current_month:02d}-{current_year}-{current_hour}-{current_minute}"
                self.docbd = DocxTemplate("bulletin agreage/bulletin_blédur/bulletin_blédur.docx")
                self.docbd.render({
                    "nmp": nomproducteurbd,
                    "per": perebd,
                    "mat": matriculbd,
                    "ptt": poindecollectebd,
                    "dt": datebd,
                    "agr": agreeur,
                    "qtt": quantitebd,
                    "vps": vpsbd,
                    "bps": bpsbd,
                    "rps": rpsbd,
                    "vmh": vhumidite,
                    "vrg": vergot,
                    "vgs": vmatier20mm,
                    "vdb": vdebrit,
                    "vgn": vgrainnuisible,
                    "vgc": graincasse,
                    "rgc": rgraicasse,
                    "vgfb": grainboute,
                    "vgr": grainroux,
                    "vgfm": grainfortementmouchte,
                    "vgpn": grainpunaise,
                    "rgpn": rgrainpunaise,
                    "vgrp": grainpique,
                    "vmt": grainmitadine,
                    "vbtb": bletendedbledur,
                    "vttp": vtotalbdp,
                    "bttp": btotalbdp,
                    "rtt": rtotalbdp,
                    "vtd": vtotalbdd,
                    "btd": btotalbdd,
                    "rtd": rtotalbdd,
                    "btb": btotaldb,
                    "rtr": rtotalbd,
                    "bmt": bmitadine,
                    "rmt": rmitadine,
                    "vttm": vtotalmitadineetbletendre,
                    "ncn": ndcartebd,
                    "oo": observationbd,
                    "nm": nbulltinbd
                })
                datadb = sqlite3.connect("data_bd.db")
                cursbd = datadb.cursor()
                cursbd.execute(
                    "SELECT * FROM bdtable_bulletin_sortie WHERE num_bulletinbd AND datebd=? AND nom_producteurbd = ? AND perebd = ?  AND quantite=?",
                    (datebd, nomproducteurbd, perebd, quantitebd))
                existing_data = cursbd.fetchone()
                if existing_data:
                    msgbox = QtWidgets.QMessageBox()
                    msgbox.setWindowTitle('Confirmation')
                    msgbox.setText('Le Bulletin sortie  déjà.')
                    msgbox.exec()
                    # tempfilebdd = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    # self.docbd.save( tempfilebdd)
                    # os.startfile(tempfilebdd, "print")
                    # tempfilebd = nomproducteurbd + "-" +current_days+ "B.D" + ".docx"
                    # self.docbd.save("bulletin agreage/bulletin_blédur/" + tempfilebd)
                    # pathbd = os.path.abspath("bulletin agreage/bulletin_blédur/" + tempfilebd)
                else:
                    doc_names = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    doc_pdf = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False).name
                    self.docbd.save(doc_names)
                    try:
                        if doc_names:
                            a = self.progress_bar()
                            sys.stderr = open("consoleoutput.log", "w")
                            convert(doc_names, doc_pdf)
                            # Open the resulting .pdf file using the default associated application
                            # os.startfile(doc_pdf, 'open')
                            app_path = 'C:\\Program Files\\Okular\\bin\\okular.exe'
                            subprocess.Popen([app_path, doc_pdf])
                    except Exception as e:
                        print(e)
                    tempfilebd = nomproducteurbd + "-" + current_days + "B.D" + ".docx"
                    self.docbd.save("bulletin agreage/bulletin_blédur/" + tempfilebd)
                    pathbd = os.path.abspath("bulletin agreage/bulletin_blédur/" + tempfilebd)
                    databasebd = sqlite3.connect("data_bd.db")
                    curs = databasebd.cursor()
                    curs.execute(
                        "INSERT INTO bdtable_bulletin_sortie (datebd, nom_producteurbd, perebd,quantite, pathbd,date_sortie) VALUES (?,?,?, ?, ?, ?)",
                        (datebd, nomproducteurbd, perebd, quantitebd, pathbd, current_day,))
                    databasebd.commit()
                    databasebd.close()
            except Exception as e:
                print(e)

        def add_datta_bd(self):
            try:
                nbulltinbd = self.n_bultinbd.text()
                nomproducteurbd = self.nome_du_producteurbd.text()
                perebd = self.pérebd.text()
                matriculbd = self.adressebd.text()
                poindecollectebd = self.pointdecollectbd.currentText()
                datebd = self.dattereceptiontbd.dateTime().toString("MM-dd-yyyy-hh:mm")
                agreeurbd = self.agréeeurcombobd.currentText()
                quantitebd = self.quantitebd.value()
                vpsbd = self.vpsbd.value()
                bpsbd = self.bpsbd.text()
                rpsbd = self.rpsbd.text()
                vhumidite = self.vhumiditebd.value()
                vergot = self.vergotbd.value()
                vmatier20mm = self.vmatiére20mmbd.value()
                vdebrit = self.vdébrisvébd.value()
                vgrainnuisible = self.vgrainnuisiblebd.value()
                graincasse = self.vgrainscassébd.value()
                rgraicasse = self.rgrainscassébd.text()
                grainboute = self.vgrainsboutésbd.value()
                grainroux = self.vgrainsrouxbd.value()
                grainfortementmouchte = self.vgrainfortementmouchtébd.value()
                grainpunaise = self.vgrainepunaisésbd.value()
                rgrainpunaise = self.rgrainepunaisésbd.text()
                grainpique = self.vgrainpiquebd.value()
                grainmitadine = self.vgrainmitadinésbd.value()
                bletendedbledur = self.vbletendredansbledurbd.value()
                vtotalbdp = self.vtotalprembd.value()
                vtotalbdd = self.vtotaldembd.value()
                btotalbdp = self.btotalprembd.text()
                btotalbdd = self.btotaldembd.text()
                rtotalbdp = self.rtotalprembd.text()
                rtotalbdd = self.rtotaldembd.text()
                bmitadine = self.bgrainmitadinésbd.text()
                rmitadine = self.rgrainmitadinésbd.text()
                vtotalmitadineetbletendre = self.vtotalmitadinésbd.value()
                btotaldb = self.btotalbiniEtrefaction.text()
                rtotalbd = self.rtotalbiniEtrefaction.text()
                ndcartebd = self.n_cartebd.text()
                observationbd = self.obesrvationbd.toPlainText()
                date = QDate.currentDate()
                current_date = QDate.currentDate()
                current_day = current_date.day()
                current_month = current_date.month()
                current_year = current_date.year()
                current_time = QTime.currentTime()
                current_hour = current_time.hour()
                current_minute = current_time.minute()
                # Format the date as "dd-mm-yyyy"
                current_days = f"{current_day:02d}-{current_month:02d}-{current_year}-{current_hour}-{current_minute}"
                self.docbd = DocxTemplate("bulletin agreage/bulletin_blédur/bulletin_blédur.docx")
                self.docbd.render({
                    "nmp": nomproducteurbd,
                    "per": perebd,
                    "mat": matriculbd,
                    "ptt": poindecollectebd,
                    "dt": datebd,
                    "agr": agreeurbd,
                    "qtt": quantitebd,
                    "vps": vpsbd,
                    "bps": bpsbd,
                    "rps": rpsbd,
                    "vmh": vhumidite,
                    "vrg": vergot,
                    "vgs": vmatier20mm,
                    "vdb": vdebrit,
                    "vgn": vgrainnuisible,
                    "vgc": graincasse,
                    "rgc": rgraicasse,
                    "vgfb": grainboute,
                    "vgr": grainroux,
                    "vgfm": grainfortementmouchte,
                    "vgpn": grainpunaise,
                    "rgpn": rgrainpunaise,
                    "vgrp": grainpique,
                    "vmt": grainmitadine,
                    "vbtb": bletendedbledur,
                    "vttp": vtotalbdp,
                    "bttp": btotalbdp,
                    "rtt": rtotalbdp,
                    "vtd": vtotalbdd,
                    "btd": btotalbdd,
                    "rtd": rtotalbdd,
                    "btb": btotaldb,
                    "rtr": rtotalbd,
                    "bmt": bmitadine,
                    "rmt": rmitadine,
                    "vttm": vtotalmitadineetbletendre,
                    "ncn": ndcartebd,
                    "oo": observationbd,
                    "nm": nbulltinbd
                })
                tempfilebd = nomproducteurbd + "-" + current_days + "-" + "B.D" + ".docx"
                self.docbd.save("bulletin agreage/bulletin_blédur/" + tempfilebd)
                pathbd = os.path.abspath("bulletin agreage/bulletin_blédur/" + tempfilebd)

                # Check if the data already exists
                datadb = sqlite3.connect("data_bd.db")
                cursbd = datadb.cursor()
                cursbd.execute(
                    "SELECT * FROM bdtable WHERE datebd=? AND nom_producteurbd=? AND perebd=? AND matriculebd=? AND point_collectbd=? AND nom_agreeurbd=? AND quantitebd=? AND psbd=? AND totalbd=? AND pathbd=? ",
                    (datebd, nomproducteurbd, perebd, matriculbd, poindecollectebd, agreeurbd, quantitebd, vpsbd,
                     vtotalbdp, pathbd,))
                existing_data = cursbd.fetchone()

                if existing_data:
                    msgbox = QtWidgets.QMessageBox()
                    msgbox.setWindowTitle('confirmation')
                    msgbox.setText('Les données existent déjà.')
                    msgbox.exec()
                else:
                    cursbd.execute(
                        "INSERT INTO bdtable (datebd ,nom_producteurbd ,perebd ,matriculebd ,point_collectbd ,nom_agreeurbd ,quantitebd ,psbd ,totalbd,pathbd  )  values(?,?,?,?,?,?,?,?,?,?)",
                        (datebd, nomproducteurbd, perebd, matriculbd, poindecollectebd, agreeurbd, quantitebd, vpsbd,
                         vtotalbdp, pathbd,))
                    datadb.commit()
                    datadb.close()

                    msgbox = QtWidgets.QMessageBox()
                    msgbox.setWindowTitle('confirmation')
                    msgbox.setText('Les données sont sauvegardées')
                    msgbox.exec()

            except sqlite3.Error as e:
                print("Error accessing the database:", e)

        def number_bulletin_bd(self):
            try:
                databasebd = sqlite3.connect("data_bd.db")
                cursor = databasebd.cursor()
                cursor.execute("SELECT num_bulletinbd FROM bdtable ORDER BY num_bulletinbd DESC LIMIT 1")
                resultbd = cursor.fetchone()
                if resultbd is not None:
                    last_id = resultbd[0]
                    self.n_bultinbd.setText("DC-" + str(last_id))
                else:
                    # Handle the case when there are no records in the orgetable
                    self.n_bultinbd.setText("DC-")
            except sqlite3.Error as e:
                print("Error accessing the database:", e)

        def print_day_bd(self):
            try:
                dialog = QtWidgets.QMessageBox()
                dialog.setStyleSheet("""
                                          QWidget {
                                              color: #000000;
                                              background-color: #ffc6c9;
                                              border-width: 1px;
                                              border-color: #1e1e1e;
                                              border-style: solid;
                                              border-radius: 6;
                                              padding: 3px;
                                              font-size: 18px;
                                              padding-left: 5px;
                                              padding-right: 5px;
                                          }
                                          QWidget:item:hover {
                                              background-color: #3daee9;
                                              color: #eff0f1;
                                          }
                                          QWidget:item:selected {
                                              background-color: #3daee9;
                                          }
                                          QWidget:disabled {
                                              color: #454545;
                                              background-color: #31363b;
                                          }
                                          QPushButton {
                                              color: #000000;
                                              background-color:#84dbc8;
                                              border-width: 1px;
                                              border-color: #1e1e1e;
                                              border-style: solid;
                                              border-radius: 6;
                                              padding: 3px;
                                              font-size: 12px;
                                              padding-left: 5px;
                                              padding-right: 5px;
                                              min-width: 40px;
                                          }
                                          QPushButton:disabled {
                                              background-color: #31363b;
                                              border-width: 1px;
                                              border-color: #454545;
                                              border-style: solid;
                                              padding-top: 5px;
                                              padding-bottom: 5px;
                                              padding-left: 10px;
                                              padding-right: 10px;
                                              border-radius: 2px;
                                              color: #454545;
                                          }
                                          QPushButton:pressed {
                                              background-color: #3daee9;
                                              padding-top: -15px;
                                              padding-bottom: -17px;
                                          }
                                          QPushButton:hover {
                                              border: 1px solid #ff8c00;
                                              color: #eff0f1;
                                          }
                                          QLabel {
                                              font-size: 18px;
                                              border: 0px solid orange;
                                          }
                                      """)
                dialog.setWindowTitle("Sélectionnez la date")
                dialog.setText("Sélectionnez la date  \t\n")
                self.datebd = QtWidgets.QDateEdit(dialog)
                self.datebd.setDate(self.datedaytime)
                self.datebd.resize(180, 30)
                self.datebd.move(40, 50)
                ok_button = QtWidgets.QPushButton("OK", dialog)
                cancel_button = QtWidgets.QPushButton("Cancel", dialog)
                dialog.addButton(ok_button, QMessageBox.ButtonRole.ActionRole)
                dialog.addButton(cancel_button, QMessageBox.ButtonRole.ActionRole)
                dialog.exec()

                if dialog.clickedButton() == ok_button:
                    self.selected_datebd = self.datebd.text()
                    if self.datebd.text() == self.selected_datebd:

                        conn = sqlite3.connect('data_bd.db')
                        cursor = conn.cursor()
                        cursor.execute(
                            "SELECT num_bulletinbd,datebd ,nom_producteurbd ,perebd ,matriculebd ,point_collectbd  ,quantitebd  FROM bdtable WHERE DATE(substr(datebd, 7, 4) || '-' || substr(datebd, 4, 2) || '-' || substr(datebd, 1, 2)) =? ;",
                            (self.selected_datebd,))
                        rows = cursor.fetchall()

                        ########################################################################
                        # Create a new document and add a table
                        self.doc = docx.Document()
                        section = self.doc.sections[0]
                        section.page_width = docx.shared.Cm(29.7)
                        section.page_height = docx.shared.Cm(21.0)
                        section.top_margin = docx.shared.Cm(1.5)
                        section.bottom_margin = docx.shared.Cm(1.5)
                        heading1 = self.doc.add_heading("\t\t\t\t\t\t les entre de Blé Dur ", level=1)
                        heading1.style.font.name = 'Times New Roman'
                        heading1.style.font.size = Pt(22)
                        heading1.style.font.bold = True
                        heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                        # add second heading
                        paragraph = self.doc.add_paragraph()
                        paragraph.style.font.name = 'Times New Roman'
                        paragraph.style.font.size = Pt(14)
                        left_run = paragraph.add_run('CCLS RELIZANE\t\t\t\t\t\t\t\t\t\t\t\t')
                        left_run.bold = True
                        right_run = paragraph.add_run('Date:' + self.selected_datebd)
                        right_run.bold = True

                        table = self.doc.add_table(rows=1, cols=9)
                        table.style = "Table Grid"  # set the table style
                        hdr_cells = table.rows[0].cells
                        hdr_cells[0].text = 'N° Bulletin \nDC'
                        hdr_cells[1].text = 'Date'
                        hdr_cells[2].text = 'Nom et Prénom'
                        hdr_cells[3].text = 'Pére'
                        hdr_cells[4].text = 'Matricule'
                        hdr_cells[5].text = 'point de collect'
                        hdr_cells[6].text = 'Quantité'
                        hdr_cells[7].text = 'Date de sortie '
                        hdr_cells[8].text = 'N° de la carte '

                        # Set the width of the header cells
                        hdr_cells[0].width = Inches(1.5)  # set the width of the first column to 1.5 inches
                        hdr_cells[1].width = Inches(1.5)
                        hdr_cells[2].width = Inches(2)
                        hdr_cells[3].width = Inches(1)
                        hdr_cells[4].width = Inches(1.5)
                        hdr_cells[5].width = Inches(1.5)
                        hdr_cells[6].width = Inches(1)
                        hdr_cells[7].width = Inches(1.5)
                        hdr_cells[8].width = Inches(1.5)

                        # set hight of the column
                        hdr_cells[0].height = Inches(1)  # set the width of the first column to 1.5 inches
                        hdr_cells[1].height = Inches(1)
                        hdr_cells[2].height = Inches(1)
                        hdr_cells[3].height = Inches(1)
                        hdr_cells[4].height = Inches(1)
                        hdr_cells[5].height = Inches(1)
                        hdr_cells[6].height = Inches(1)
                        hdr_cells[7].width = Inches(1)
                        hdr_cells[8].width = Inches(1)

                        for cell in table.rows[0].cells:
                            cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                            cell.paragraphs[0].runs[0].font.size = Pt(12)
                            cell.paragraphs[0].runs[0].font.bold = True
                        # Add the data to the table
                        table_rows = len(rows)
                        table_cols = len(rows[0])
                        for row in range(table_rows):
                            table.add_row()
                            for col in range(table_cols):
                                cell = table.cell(row + 1, col)
                                cell.text = str(rows[row][col])
                                # Set font properties
                                cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                                cell.paragraphs[0].runs[0].font.size = Pt(12)
                                cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                        for row in table.rows:
                            row.height = Inches(0.3)
                        # Save and open the document for printing
                        doc_names = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                        doc_pdf = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False).name
                        self.doc.save(doc_names)
                        try:
                            if doc_names:
                                a = self.progress_bar()
                                sys.stderr = open("consoleoutput.log", "w")
                                convert(doc_names, doc_pdf)
                                # Open the resulting .pdf file using the default associated application
                                # os.startfile(doc_pdf, 'open')
                                app_path = 'C:\\Program Files\\Okular\\bin\\okular.exe'
                                subprocess.Popen([app_path, doc_pdf])
                        except Exception as e:
                            print(e)
                    else:
                        msgbox = QtWidgets.QMessageBox()
                        msgbox.setWindowTitle('Erreur')
                        msgbox.setText("Il n'ya pas des données à cette date.")
                        msgbox.exec()
                if dialog.clickedButton() == cancel_button:
                    dialog.close()
            except Exception as e:
                print(e)

        def printBulltinProducteur(self):
            dialogor = QMessageBox()
            dialogor.setFixedSize(300, 600)
            dialogor.setStyleSheet("""
                                                  QWidget {
                                                      color: #000000;
                                                      background-color: #ffc6c9;
                                                      border-width: 1px;
                                                      border-color: #1e1e1e;
                                                      border-style: solid;
                                                      border-radius: 6;
                                                      padding: 3px;
                                                      font-size: 18px;
                                                      padding-left: 5px;
                                                      padding-right: 5px;
                                                  }
                                                  QWidget:item:hover {
                                                      background-color: #3daee9;
                                                      color: #eff0f1;
                                                  }
                                                  QWidget:item:selected {
                                                      background-color: #3daee9;
                                                  }
                                                  QWidget:disabled {
                                                      color: #454545;
                                                      background-color: #31363b;
                                                  }
                                                  QPushButton {
                                                      color: #000000;
                                                      background-color:#84dbc8;
                                                      border-width: 1px;
                                                      border-color: #1e1e1e;
                                                      border-style: solid;
                                                      border-radius: 6;
                                                      padding: 3px;
                                                      font-size: 12px;
                                                      padding-left: 5px;
                                                      padding-right: 5px;
                                                      min-width: 40px;
                                                  }
                                                  QPushButton:disabled {
                                                      background-color: #31363b;
                                                      border-width: 1px;
                                                      border-color: #454545;
                                                      border-style: solid;
                                                      padding-top: 5px;
                                                      padding-bottom: 5px;
                                                      padding-left: 10px;
                                                      padding-right: 10px;
                                                      border-radius: 2px;
                                                      color: #454545;
                                                  }
                                                  QPushButton:pressed {
                                                      background-color: #3daee9;
                                                      padding-top: -15px;
                                                      padding-bottom: -17px;
                                                  }
                                                  QPushButton:hover {
                                                      border: 1px solid #ff8c00;
                                                      color: #eff0f1;
                                                  }
                                                  QLabel {
                                                      font-size: 18px;
                                                      border: 0px solid orange;
                                                  }
                                              """)
            dialogor.setWindowTitle("Sélectionnez le Nom et Prénom et pére")
            dialogor.setText("Sélectionnez le Nom et Prénom et pére  \t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t")
            self.nomproducturep = QtWidgets.QLineEdit(dialogor)
            self.nomproducturep.setPlaceholderText("Nom et Prénom")
            self.nomproducturep.resize(180, 30)
            self.nomproducturep.move(40, 40)
            self.pérep = QtWidgets.QLineEdit(dialogor)
            self.pérep.setPlaceholderText("Pére")
            self.pérep.resize(180, 30)
            self.pérep.move(240, 40)
            self.datetxt = QtWidgets.QLabel("Date entré", dialogor)
            self.datetxt.setGeometry(QtCore.QRect(30, 80, 100, 20))
            datep = QDateTimeEdit(dialogor)
            datep.setDisplayFormat("dd-MM-yyyy hh:mm")
            datep.resize(180, 30)
            datep.move(40, 105)
            self.quantiteptext = QtWidgets.QLabel("Quantité", dialogor)
            self.quantiteptext.setGeometry(QtCore.QRect(230, 80, 100, 20))
            self.quantitep = QtWidgets.QDoubleSpinBox(dialogor)
            self.quantitep.setRange(1, 10000)
            self.quantitep.setSuffix('  QX')
            self.quantitep.setSpecialValueText(" ")
            self.quantitep.setValue(0.0)
            self.quantitep.resize(180, 30)
            self.quantitep.move(240, 105)
            ok_button = QtWidgets.QPushButton("OK", dialogor)
            cancel_button = QtWidgets.QPushButton("Cancel", dialogor)
            dialogor.addButton(ok_button, QMessageBox.ButtonRole.ActionRole)
            dialogor.addButton(cancel_button, QMessageBox.ButtonRole.ActionRole)
            dialogor.exec()
            date = QDate.currentDate()
            current_date = QDate.currentDate()
            current_day = current_date.day()
            current_month = current_date.month()
            current_year = current_date.year()

            # Format the date as "dd-mm-yyyy"
            current_day = f"{current_day:02d}-{current_month:02d}-{current_year}"

            if dialogor.clickedButton() == ok_button:
                producteur = self.nomproducturep.text()
                pere = self.pérep.text()
                dateentré = datep.text()

                quantite = self.quantitep.value()
                try:
                    datadb = sqlite3.connect("data_bd.db")
                    cursbd = datadb.cursor()
                    cursbd.execute(
                        "SELECT * FROM bdtable_bulletin_sortie WHERE datebd=? AND nom_producteurbd=? AND perebd=? AND quantite=?",
                        (dateentré, producteur, pere, quantite))
                    existing_data = cursbd.fetchone()
                    if existing_data:
                        msgbox = QtWidgets.QMessageBox()
                        msgbox.setWindowTitle('Confirmation')
                        msgbox.setText('Le Bulletin sortie existe déjà.')
                        msgbox.exec()
                    else:
                        print("Conditions:", dateentré, producteur, pere, quantite)

                        try:
                            curs = datadb.cursor()
                            curs.execute(
                                "SELECT pathbd FROM bdtable WHERE datebd=? AND  nom_producteurbd=? AND perebd=? AND quantitebd=? ",
                                (dateentré, producteur, pere, quantite,)
                            )
                            result = curs.fetchall()
                            print("Result:", result)
                        except sqlite3.Error as e:
                            print(f"Error retrieving data from bdtable: {e}")

                        if result:
                            # Iterate over the paths and open each file
                            for row in result:
                                file_path = row[0]
                                if file_path:
                                    doc_pdf = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False).name
                                    try:
                                        a = self.progress_bar()
                                        sys.stderr = open("consoleoutput.log", "w")
                                        convert(file_path, doc_pdf)
                                        # Open the resulting .pdf file using the default associated application
                                        # os.startfile(doc_pdf, 'open')
                                        app_path = 'C:\\Program Files\\Okular\\bin\\okular.exe'
                                        subprocess.Popen([app_path, doc_pdf])
                                    except Exception as e:
                                        print(e)
                                    # os.startfile(file_path, "open")
                                    curs.execute(
                                        "INSERT INTO bdtable_bulletin_sortie (datebd, nom_producteurbd, perebd, quantite, pathbd, date_sortie) VALUES (?,?,?,?,?,?)",
                                        (dateentré, producteur, pere, quantite, file_path, current_day))
                                    datadb.commit()
                                    datadb.close()


                        else:
                            msgbox = QtWidgets.QMessageBox()
                            msgbox.setWindowTitle('Confirmation')
                            msgbox.setText('Le Bulletin ne existe pas.')
                            msgbox.exec()
                except Exception as e:
                    print(e)

        def eticket_bledur(self):
            try:
                dialogor = QtWidgets.QMessageBox()
                dialogor.setFixedSize(300, 600)
                dialogor.setStyleSheet("""
                                                  QWidget {
                                                      color: #000000;
                                                      background-color: #ffc6c9;
                                                      border-width: 1px;
                                                      border-color: #1e1e1e;
                                                      border-style: solid;
                                                      border-radius: 6;
                                                      padding: 3px;
                                                      font-size: 18px;
                                                      padding-left: 5px;
                                                      padding-right: 5px;
                                                  }
                                                  QWidget:item:hover {
                                                      background-color: #3daee9;
                                                      color: #eff0f1;
                                                  }
                                                  QWidget:item:selected {
                                                      background-color: #3daee9;
                                                  }
                                                  QWidget:disabled {
                                                      color: #454545;
                                                      background-color: #31363b;
                                                  }
                                                  QPushButton {
                                                      color: #000000;
                                                      background-color:#84dbc8;
                                                      border-width: 1px;
                                                      border-color: #1e1e1e;
                                                      border-style: solid;
                                                      border-radius: 6;
                                                      padding: 3px;
                                                      font-size: 12px;
                                                      padding-left: 5px;
                                                      padding-right: 5px;
                                                      min-width: 40px;
                                                  }
                                                  QPushButton:disabled {
                                                      background-color: #31363b;
                                                      border-width: 1px;
                                                      border-color: #454545;
                                                      border-style: solid;
                                                      padding-top: 5px;
                                                      padding-bottom: 5px;
                                                      padding-left: 10px;
                                                      padding-right: 10px;
                                                      border-radius: 2px;
                                                      color: #454545;
                                                  }
                                                  QPushButton:pressed {
                                                      background-color: #3daee9;
                                                      padding-top: -15px;
                                                      padding-bottom: -17px;
                                                  }
                                                  QPushButton:hover {
                                                      border: 1px solid #ff8c00;
                                                      color: #eff0f1;
                                                  }
                                                  QLabel {
                                                      font-size: 18px;
                                                      border: 0px solid orange;
                                                  }
                                                  QLineEdit
            {
                background-color: #ffffff;
                padding: 1px;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 0px;
                color: #000000;
            }
            QDoubleSpinBox
            {
                background-color: #ffffff;
                padding: 1px;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 0px;
                color:#000000;
                font-size: 11px;
                font-weight: bold;

            }
            QComboBox
            {
               background-color: #ffffff;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 2px;
                min-width: 40px;
            }
                                              """)
                dialogor.setWindowTitle("Sélectionnez le Nom et Prénom et pére")
                dialogor.setText(
                    "BLE DUR \t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t")
                nomproductureor = QtWidgets.QLineEdit(dialogor)
                nomproductureor.setPlaceholderText("Nom et Prénom")
                nomproductureor.resize(180, 30)
                nomproductureor.move(40, 125)
                pereor = QtWidgets.QLineEdit(dialogor)
                pereor.setPlaceholderText("Pére")
                pereor.resize(180, 30)
                pereor.move(240, 125)
                matricultxt = QtWidgets.QLabel("Matricul", dialogor)
                matricultxt.setGeometry(QtCore.QRect(30, 165, 100, 20))
                mator = QtWidgets.QLineEdit(dialogor)
                mator.setInputMask("99999-999-99")
                mator.resize(180, 30)
                mator.move(40, 190)
                pointdecollector = QtWidgets.QComboBox(dialogor)
                pointdecollector.setPlaceholderText("Point de collect")
                pointdecollector.addItem('')
                pointdecollector.addItem('Dock central')
                pointdecollector.addItem('Magasin Zemmoura')
                pointdecollector.addItem('Magasin Kef-lazreg')
                pointdecollector.addItem('Magasin Messra')
                pointdecollector.addItem('Magasin Marche gros belacel')
                pointdecollector.resize(180, 30)
                pointdecollector.move(40, 65)

                psor = QtWidgets.QLineEdit(dialogor)
                validator = QDoubleValidator(10, 1000, 2)
                psor.setValidator(validator)
                # psor.setInputMask("99.99")
                psor.setPlaceholderText("PS")
                psor.resize(180, 30)
                psor.move(240, 65)
                quantiteptext = QtWidgets.QLabel("Quantité", dialogor)
                quantiteptext.setGeometry(QtCore.QRect(230, 165, 100, 20))
                quantiteor = QtWidgets.QDoubleSpinBox(dialogor)
                quantiteor.setRange(1, 10000)
                quantiteor.setSuffix('  QX')
                quantiteor.setSpecialValueText(" ")
                quantiteor.setValue(0.0)
                quantiteor.resize(180, 30)
                quantiteor.move(240, 190)
                ok_button = QtWidgets.QPushButton("OK", dialogor)
                cancel_button = QtWidgets.QPushButton("Cancel", dialogor)
                dialogor.addButton(ok_button, QtWidgets.QMessageBox.ButtonRole.ActionRole)
                dialogor.addButton(cancel_button, QtWidgets.QMessageBox.ButtonRole.ActionRole)
                dialogor.exec()
                current_date = QtCore.QDate.currentDate().toString(QtCore.QDate.currentDate().toString("yyyy-MM-dd"))
                current_day = current_date.split("-")[2]
                current_month = current_date.split("-")[1]
                current_year = current_date.split("-")[0]
                current_daya = f"{current_day}-{current_month}-{current_year}"

                if dialogor.clickedButton() == ok_button:
                    producteur = nomproductureor.text()
                    pere = pereor.text()
                    quantite = quantiteor.text()
                    pointdecolect = pointdecollector.currentText()
                    mator = mator.text()
                    psor = psor.text()

                    eticketorge = DocxTemplate("eticket/Eticket_BleDur/Eticket_BleDur.docx")
                    eticketorge.render(
                        {"dt": current_date, "ptt": pointdecolect, "nmp": producteur, "mat": mator, "qtt": quantite,
                         "ps": psor, "per": pere})
                    name = f"B.D_{producteur}_{current_daya}.docx"
                    eticketorge.save("eticket/Eticket_BleDur/" + name)
                    doc_names = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    doc_pdf = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False).name
                    eticketorge.save(doc_names)
                    try:
                        if doc_names:
                            a = self.progress_bar()
                            sys.stderr = open("consoleoutput.log", "w")
                            convert(doc_names, doc_pdf)
                            # Open the resulting .pdf file using the default associated application
                            # os.startfile(doc_pdf, 'open')
                            app_path = 'C:\\Program Files\\Okular\\bin\\okular.exe'
                            subprocess.Popen([app_path, doc_pdf])
                    except Exception as e:
                        print(e)
            except Exception as e:
                print(e)

        ############################################################################################
        ##############################function blé tendre ##########################################
        ############################################################################################
        def bonification_ps_bt(self):
            self.bpsbt.clear()
            self.bpsbt.setStyleSheet("background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            while self.vpsbt.value() >= 77.01:
                self.bpsbt.setValue(0.10)
                self.bpsbt.setStyleSheet(
                    "background-color:#88ffaa;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                if self.vpsbt.value() <= 77.25:
                    self.bpsbt.setValue(0.10)
                elif self.vpsbt.value() >= 77.26 and self.vpsbt.value() <= 77.50:
                    self.bpsbt.setValue(0.20)
                elif self.vpsbt.value() >= 77.51 and self.vpsbt.value() <= 77.75:
                    self.bpsbt.setValue(0.30)
                elif self.vpsbt.value() >= 77.76 and self.vpsbt.value() <= 78.00:
                    self.bpsbt.setValue(0.40)
                elif self.vpsbt.value() >= 78.01 and self.vpsbt.value() <= 78.25:
                    self.bpsbt.setValue(0.45)
                elif self.vpsbt.value() >= 78.26 and self.vpsbt.value() <= 78.50:
                    self.bpsbt.setValue(0.50)
                elif self.vpsbt.value() >= 78.51 and self.vpsbt.value() <= 78.75:
                    self.bpsbt.setValue(0.55)
                elif self.vpsbt.value() >= 78.76 and self.vpsbt.value() <= 79.00:
                    self.bpsbt.setValue(0.60)
                elif self.vpsbt.value() >= 79.01 and self.vpsbt.value() <= 79.25:
                    self.bpsbt.setValue(0.65)
                elif self.vpsbt.value() >= 79.26 and self.vpsbt.value() <= 79.50:
                    self.bpsbt.setValue(0.70)
                elif self.vpsbt.value() >= 79.51 and self.vpsbt.value() <= 79.75:
                    self.bpsbt.setValue(0.75)
                elif self.vpsbt.value() >= 79.76 and self.vpsbt.value() <= 80.00:
                    self.bpsbt.setValue(0.80)
                elif self.vpsbt.value() >= 80.01 and self.vpsbt.value() <= 80.25:
                    self.bpsbt.setValue(0.82)
                elif self.vpsbt.value() >= 80.26 and self.vpsbt.value() <= 80.50:
                    self.bpsbt.setValue(0.84)
                elif self.vpsbt.value() >= 80.51 and self.vpsbt.value() <= 80.75:
                    self.bpsbt.setValue(0.86)
                elif self.vpsbt.value() >= 80.76 and self.vpsbt.value() <= 81.00:
                    self.bpsbt.setValue(0.88)
                elif self.vpsbt.value() >= 81.01 and self.vpsbt.value() <= 81.25:
                    self.bpsbt.setValue(0.90)
                elif self.vpsbt.value() >= 81.26 and self.vpsbt.value() <= 81.50:
                    self.bpsbt.setValue(0.92)
                elif self.vpsbt.value() >= 81.51 and self.vpsbt.value() <= 81.75:
                    self.bpsbt.setValue(0.94)
                elif self.vpsbt.value() >= 81.76 and self.vpsbt.value() <= 82.00:
                    self.bpsbt.setValue(0.96)
                elif self.vpsbt.value() >= 82.01 and self.vpsbt.value() <= 82.25:
                    self.bpsbt.setValue(0.98)
                elif self.vpsbt.value() >= 82.26 and self.vpsbt.value() <= 82.50:
                    self.bpsbt.setValue(1.00)
                elif self.vpsbt.value() >= 82.51 and self.vpsbt.value() <= 82.75:
                    self.bpsbt.setValue(1.02)
                elif self.vpsbt.value() >= 82.76 and self.vpsbt.value() <= 83.00:
                    self.bpsbt.setValue(1.04)
                else:
                    self.bpsbt.setValue(0)
                    self.bpsbt.setStyleSheet(
                        "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                break

        def réfaction_ps_bt(self):
            self.rpsbt.clear()
            self.rpsbt.setStyleSheet("background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            if self.vpsbt.value() < 69 and self.vpsbt.value() > 50:
                self.obesrvationbt.setText("REFUS: POIDS SPECIFIQUE INFERIEUR DE 72 Kg/hl ")
                self.obesrvationbt.setStyleSheet(
                    "background-color:#e22630;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                self.bpsbt.clear()
                self.rpsbt.clear()
            else:
                self.obesrvationbt.clear()
                self.obesrvationbt.setStyleSheet(
                    "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            while self.vpsbt.value() >= 69.00:
                self.rpsbt.setValue(1.36)
                self.rpsbt.setStyleSheet(
                    "background-color:#e22630;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                self.bpsbt.clear()
                if self.vpsbt.value() <= 69.24:
                    self.rpsbt.setValue(1.36)
                elif self.vpsbt.value() >= 69.25 and self.vpsbt.value() <= 69.49:
                    self.rpsbt.setValue(1.16)
                elif self.vpsbt.value() >= 69.50 and self.vpsbt.value() <= 69.74:
                    self.rpsbt.setValue(0.96)
                elif self.vpsbt.value() >= 69.75 and self.vpsbt.value() <= 69.99:
                    self.rpsbt.setValue(0.76)
                elif self.vpsbt.value() >= 70.00 and self.vpsbt.value() <= 71.24:
                    self.rpsbt.setValue(0.56)
                elif self.vpsbt.value() >= 71.25 and self.vpsbt.value() <= 71.49:
                    self.rpsbt.setValue(0.46)
                elif self.vpsbt.value() >= 71.50 and self.vpsbt.value() <= 71.74:
                    self.rpsbt.setValue(0.36)
                elif self.vpsbt.value() >= 71.75 and self.vpsbt.value() <= 71.99:
                    self.rpsbt.setValue(0.26)
                elif self.vpsbt.value() >= 72.00 and self.vpsbt.value() <= 73.24:
                    self.rpsbt.setValue(0.16)
                elif self.vpsbt.value() >= 73.25 and self.vpsbt.value() <= 73.49:
                    self.rpsbt.setValue(0.12)
                elif self.vpsbt.value() >= 73.50 and self.vpsbt.value() <= 73.74:
                    self.rpsbt.setValue(0.08)
                elif self.vpsbt.value() >= 73.75 and self.vpsbt.value() <= 73.99:
                    self.rpsbt.setValue(0.04)
                else:
                    self.rpsbt.setValue(0)
                    self.rpsbt.setStyleSheet(
                        "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                break

        def bonification_pimpurte_er_bt(self):
            self.btotalprembt.clear()
            self.btotalprembt.setStyleSheet(
                "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            while self.vtotalprembt.value() >= 0.01:
                self.btotalprembt.setValue(0.12)
                self.btotalprembt.setStyleSheet(
                    "background-color:#88ffaa;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                if self.vtotalprembt.value() <= 0.25:
                    self.btotalprembt.setValue(0.12)
                elif self.vtotalprembt.value() >= 0.26 and self.vtotalprembt.value() <= 0.50:
                    self.btotalprembt.setValue(0.24)
                elif self.vtotalprembt.value() >= 0.51 and self.vtotalprembt.value() <= 0.75:
                    self.btotalprembt.setValue(0.36)
                elif self.vtotalprembt.value() >= 0.76 and self.vtotalprembt.value() <= 1.00:
                    self.btotalprembt.setValue(0.48)
                else:
                    self.btotalprembt.setValue(0)
                    self.btotalprembt.clear()
                    self.btotalprembt.setStyleSheet(
                        "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                break

        def refaction_impurté_er_bt(self):
            self.rtotalprembt.clear()
            self.rtotalprembt.setStyleSheet(
                "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            while self.vtotalprembt.value() >= 3.01:
                self.rtotalprembt.setValue(0.12)
                self.rtotalprembt.setStyleSheet(
                    "background-color:#e22630;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                self.btotalprembt.clear()
                if self.vtotalprembt.value() <= 3.25:
                    self.rtotalprembt.setValue(0.12)
                elif self.vtotalprembt.value() >= 3.26 and self.vtotalprembt.value() <= 3.50:
                    self.rtotalprembt.setValue(0.24)
                elif self.vtotalprembt.value() >= 3.51 and self.vtotalprembt.value() <= 3.75:
                    self.rtotalprembt.setValue(0.36)
                elif self.vtotalprembt.value() >= 3.76 and self.vtotalprembt.value() <= 4.00:
                    self.rtotalprembt.setValue(0.48)
                elif self.vtotalprembt.value() >= 4.01 and self.vtotalprembt.value() <= 4.25:
                    self.rtotalprembt.setValue(0.60)
                elif self.vtotalprembt.value() >= 4.26 and self.vtotalprembt.value() <= 4.50:
                    self.rtotalprembt.setValue(0.72)
                elif self.vtotalprembt.value() >= 4.51 and self.vtotalprembt.value() <= 4.75:
                    self.rtotalprembt.setValue(0.84)
                elif self.vtotalprembt.value() >= 4.76 and self.vtotalprembt.value() <= 5.00:
                    self.rtotalprembt.setValue(0.96)
                elif self.vtotalprembt.value() >= 5.01 and self.vtotalprembt.value() <= 5.25:
                    self.rtotalprembt.setValue(1.08)
                elif self.vtotalprembt.value() >= 8.51 and self.vtotalprembt.value() <= 9.00:
                    self.rtotalprembt.setValue(1.20)
                elif self.vtotalprembt.value() >= 5.26 and self.vtotalprembt.value() <= 5.50:
                    self.rtotalprembt.setValue(1.32)
                elif self.vtotalprembt.value() >= 5.51 and self.vtotalprembt.value() <= 5.75:
                    self.rtotalprembt.setValue(1.44)
                elif self.vtotalprembt.value() >= 5.76 and self.vtotalprembt.value() <= 6.00:
                    self.rtotalprembt.setValue(1.56)
                elif self.vtotalprembt.value() >= 6.01 and self.vtotalprembt.value() <= 30:
                    self.rtotalprembt.setValue(0)
                    self.obesrvationbt.setText("PRIX A DEBATTRE")

                else:
                    self.rtotalprembt.setValue(0)
                    self.rtotalprembt.clear
                    self.rtotalprembt.setStyleSheet(
                        "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                break

        def refaction_impurte_eme_bt(self):
            self.rtotaldembt.clear()
            self.rtotaldembt.setStyleSheet(
                "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            while self.vtotaldembt.value() >= 6.01:
                self.rtotaldembt.setValue(0.05)
                self.rtotaldembt.setStyleSheet(
                    "background-color:#e22630;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                self.btotaldembt.clear()
                if self.vtotaldembt.value() <= 6.25:
                    self.rtotaldembt.setValue(0.05)
                elif self.vtotaldembt.value() >= 6.26 and self.vtotaldembt.value() <= 6.50:
                    self.rtotaldembt.setValue(0.10)
                elif self.vtotaldembt.value() >= 6.51 and self.vtotaldembt.value() <= 6.75:
                    self.rtotaldembt.setValue(0.15)
                elif self.vtotaldembt.value() >= 6.76 and self.vtotaldembt.value() <= 7.00:
                    self.rtotaldembt.setValue(0.20)
                elif self.vtotaldembt.value() >= 7.01 and self.vtotaldembt.value() <= 7.25:
                    self.rtotaldembt.setValue(0.25)
                elif self.vtotaldembt.value() >= 7.26 and self.vtotaldembt.value() <= 7.50:
                    self.rtotaldembt.setValue(0.30)
                elif self.vtotaldembt.value() >= 7.51 and self.vtotaldembt.value() <= 7.75:
                    self.rtotaldembt.setValue(0.35)
                elif self.vtotaldembt.value() >= 7.76 and self.vtotaldembt.value() <= 8.00:
                    self.rtotaldembt.setValue(0.40)
                elif self.vtotaldembt.value() >= 8.01 and self.vtotaldembt.value() <= 8.25:
                    self.rtotaldembt.setValue(0.45)
                elif self.vtotaldembt.value() >= 8.26 and self.vtotaldembt.value() <= 8.50:
                    self.rtotaldembt.setValue(0.50)
                elif self.vtotaldembt.value() >= 8.51 and self.vtotaldembt.value() <= 8.75:
                    self.rtotaldembt.setValue(0.55)
                elif self.vtotaldembt.value() >= 8.76 and self.vtotaldembt.value() <= 9.00:
                    self.rtotaldembt.setValue(0.60)
                elif self.vtotaldembt.value() >= 9.01 and self.vtotaldembt.value() <= 9.25:
                    self.rtotaldembt.setValue(0.65)
                elif self.vtotaldembt.value() >= 9.26 and self.vtotaldembt.value() <= 9.50:
                    self.rtotaldembt.setValue(0.70)
                elif self.vtotaldembt.value() >= 9.51 and self.vtotaldembt.value() <= 9.75:
                    self.rtotaldembt.setValue(0.75)
                elif self.vtotaldembt.value() >= 9.76 and self.vtotaldembt.value() <= 10.00:
                    self.rtotaldembt.setValue(0.80)
                elif self.vtotaldembt.value() >= 10.01 and self.vtotaldembt.value() <= 10.25:
                    self.rtotaldembt.setValue(0.88)
                elif self.vtotaldembt.value() >= 10.26 and self.vtotaldembt.value() <= 10.50:
                    self.rtotaldembt.setValue(0.96)
                elif self.vtotaldembt.value() >= 10.51 and self.vtotaldembt.value() <= 10.75:
                    self.rtotaldembt.setValue(1.04)
                elif self.vtotaldembt.value() >= 10.76 and self.vtotaldembt.value() <= 11.00:
                    self.rtotaldembt.setValue(1.12)
                elif self.vtotaldembt.value() >= 11.01 and self.vtotaldembt.value() <= 11.25:
                    self.rtotaldembt.setValue(1.20)
                elif self.vtotaldembt.value() >= 11.26 and self.vtotaldembt.value() <= 11.50:
                    self.rtotaldembt.setValue(1.28)
                elif self.vtotaldembt.value() >= 11.51 and self.vtotaldembt.value() <= 11.75:
                    self.rtotaldembt.setValue(1.36)
                elif self.vtotaldembt.value() >= 11.76 and self.vtotaldembt.value() <= 12.00:
                    self.rtotaldembt.setValue(1.44)
                elif self.vtotaldembt.value() >= 12.01 and self.vtotaldembt.value() <= 12.25:
                    self.rtotaldembt.setValue(1.52)
                elif self.vtotaldembt.value() >= 12.26 and self.vtotaldembt.value() <= 12.50:
                    self.rtotaldembt.setValue(1.60)
                elif self.vtotaldembt.value() >= 12.51 and self.vtotaldembt.value() <= 12.75:
                    self.rtotaldembt.setValue(1.68)
                elif self.vtotaldembt.value() >= 12.76 and self.vtotaldembt.value() <= 13.00:
                    self.rtotaldembt.setValue(1.76)
                elif self.vtotaldembt.value() >= 13.01 and self.vtotaldembt.value() <= 13.25:
                    self.rtotaldembt.setValue(1.84)
                elif self.vtotaldembt.value() >= 13.26 and self.vtotaldembt.value() <= 13.50:
                    self.rtotaldembt.setValue(1.92)
                elif self.vtotaldembt.value() >= 13.51 and self.vtotaldembt.value() <= 13.75:
                    self.rtotaldembt.setValue(2.00)
                elif self.vtotaldembt.value() >= 13.76 and self.vtotaldembt.value() <= 14.00:
                    self.rtotaldembt.setValue(2.08)
                elif self.vtotaldembt.value() >= 14.01 and self.vtotaldembt.value() <= 14.25:
                    self.rtotaldembt.setValue(2.16)
                elif self.vtotaldembt.value() >= 14.26 and self.vtotaldembt.value() <= 14.50:
                    self.rtotaldembt.setValue(2.24)
                elif self.vtotaldembt.value() >= 14.51 and self.vtotaldembt.value() <= 14.75:
                    self.rtotaldembt.setValue(2.32)
                elif self.vtotaldembt.value() >= 14.76 and self.vtotaldembt.value() <= 15.00:
                    self.rtotaldembt.setValue(2.40)
                elif self.vtotaldembt.value() >= 15.01 and self.vtotaldembt.value() <= 50.00:
                    self.rtotaldembt.setValue(0)
                    self.obesrvationbt.setText("PRIX A DEBATTRE")
                else:
                    self.rtotaldembt.setValue(0)
                    self.rtotaldembt.clear()
                    self.rtotaldembt.setStyleSheet(
                        "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                break

        def rGrains_cassebt(self):
            self.rgrainscassébt.clear()
            self.rgrainscassébt.setStyleSheet(
                "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            while self.vgrainscassébt.value() >= 4.01:
                self.rgrainscassébt.setValue(0.04)
                self.rgrainscassébt.setStyleSheet(
                    "background-color:#e22630;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                if self.vgrainscassébt.value() <= 4.25:
                    self.rgrainscassébt.setValue(0.04)
                elif self.vgrainscassébt.value() >= 4.26 and self.vgrainscassébt.value() <= 4.50:
                    self.rgrainscassébt.setValue(0.08)
                elif self.vgrainscassébt.value() >= 4.51 and self.vgrainscassébt.value() <= 4.75:
                    self.rgrainscassébt.setValue(0.12)
                elif self.vgrainscassébt.value() >= 4.76 and self.vgrainscassébt.value() <= 5.00:
                    self.rgrainscassébt.setValue(0.16)
                elif self.vgrainscassébt.value() >= 5.01 and self.vgrainscassébt.value() <= 5.25:
                    self.rgrainscassébt.setValue(0.20)
                elif self.vgrainscassébt.value() >= 5.26 and self.vgrainscassébt.value() <= 5.50:
                    self.rgrainscassébt.setValue(0.24)
                elif self.vgrainscassébt.value() >= 5.51 and self.vgrainscassébt.value() <= 5.75:
                    self.rgrainscassébt.setValue(0.28)
                elif self.vgrainscassébt.value() >= 5.76 and self.vgrainscassébt.value() <= 6.00:
                    self.rgrainscassébt.setValue(0.32)
                elif self.vgrainscassébt.value() >= 6.01 and self.vgrainscassébt.value() <= 6.25:
                    self.rgrainscassébt.setValue(0.36)
                elif self.vgrainscassébt.value() >= 6.26 and self.vgrainscassébt.value() <= 6.50:
                    self.rgrainscassébt.setValue(0.40)
                elif self.vgrainscassébt.value() >= 6.51 and self.vgrainscassébt.value() <= 6.75:
                    self.rgrainscassébt.setValue(0.44)
                elif self.vgrainscassébt.value() >= 6.76 and self.vgrainscassébt.value() <= 7.00:
                    self.rgrainscassébt.setValue(0.48)
                elif self.vgrainscassébt.value() >= 7.01 and self.vgrainscassébt.value() <= 7.25:
                    self.rgrainscassébt.setValue(0.52)
                elif self.vgrainscassébt.value() >= 7.26 and self.vgrainscassébt.value() <= 7.50:
                    self.rgrainscassébt.setValue(0.56)
                elif self.vgrainscassébt.value() >= 7.51 and self.vgrainscassébt.value() <= 7.75:
                    self.rgrainscassébt.setValue(0.60)
                elif self.vgrainscassébt.value() >= 7.76 and self.vgrainscassébt.value() <= 8.00:
                    self.rgrainscassébt.setValue(0.64)
                elif self.vgrainscassébt.value() >= 8.01 and self.vgrainscassébt.value() <= 8.25:
                    self.rgrainscassébt.setValue(0.68)
                elif self.vgrainscassébt.value() >= 8.26 and self.vgrainscassébt.value() <= 8.50:
                    self.rgrainscassébt.setValue(0.72)
                elif self.vgrainscassébt.value() >= 8.51 and self.vgrainscassébt.value() <= 8.75:
                    self.rgrainscassébt.setValue(0.76)
                elif self.vgrainscassébt.value() >= 8.76 and self.vgrainscassébt.value() <= 9.00:
                    self.rgrainscassébt.setValue(0.80)
                elif self.vgrainscassébt.value() >= 9.01 and self.vgrainscassébt.value() <= 9.25:
                    self.rgrainscassébt.setValue(0.84)
                elif self.vgrainscassébt.value() >= 9.26 and self.vgrainscassébt.value() <= 9.50:
                    self.rgrainscassébt.setValue(0.88)
                elif self.vgrainscassébt.value() >= 9.51 and self.vgrainscassébt.value() <= 9.75:
                    self.rgrainscassébt.setValue(0.92)
                elif self.vgrainscassébt.value() >= 9.76 and self.vgrainscassébt.value() <= 10.00:
                    self.rgrainscassébt.setValue(0.96)
                elif self.vgrainscassébt.value() >= 10.01 and self.vgrainscassébt.value() <= 10.25:
                    self.rgrainscassébt.setValue(1.00)
                elif self.vgrainscassébt.value() >= 10.26 and self.vgrainscassébt.value() <= 30:
                    self.rgrainscassébt.setValue(0)
                    self.obesrvationbt.setText("PRIX A DEBATTRE")
                else:
                    self.rgrainscassébt.setValue(0)
                    self.rgrainscassébt.clear()
                    self.rgrainscassébt.setStyleSheet(
                        "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                break

        def grain_pounaiséebt(self):
            self.rgrainpunaiséebt.setValue(0)
            self.rgrainpunaiséebt.clear()
            self.rgrainpunaiséebt.setStyleSheet(
                "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            while self.vgrainpunaiséebt.value() >= 2.01:
                self.rgrainpunaiséebt.setValue(0.08)
                self.rgrainpunaiséebt.setStyleSheet(
                    "background-color:#e22630;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                if self.vgrainpunaiséebt.value() <= 2.25:
                    self.rgrainpunaiséebt.setValue(0.08)
                elif self.vgrainpunaiséebt.value() >= 2.26 and self.vgrainpunaiséebt.value() <= 2.50:
                    self.rgrainpunaiséebt.setValue(0.16)
                elif self.vgrainpunaiséebt.value() >= 2.51 and self.vgrainpunaiséebt.value() <= 2.75:
                    self.rgrainpunaiséebt.setValue(0.24)
                elif self.vgrainpunaiséebt.value() >= 2.76 and self.vgrainpunaiséebt.value() <= 3.00:
                    self.rgrainpunaiséebt.setValue(0.32)
                elif self.vgrainpunaiséebt.value() >= 3.01 and self.vgrainpunaiséebt.value() <= 3.25:
                    self.rgrainpunaiséebt.setValue(0.40)
                elif self.vgrainpunaiséebt.value() >= 3.26 and self.vgrainpunaiséebt.value() <= 3.50:
                    self.rgrainpunaiséebt.setValue(0.48)
                elif self.vgrainpunaiséebt.value() >= 3.51 and self.vgrainpunaiséebt.value() <= 3.75:
                    self.rgrainpunaiséebt.setValue(0.56)
                elif self.vgrainpunaiséebt.value() >= 3.76 and self.vgrainpunaiséebt.value() <= 4.00:
                    self.rgrainpunaiséebt.setValue(0.64)
                elif self.vgrainpunaiséebt.value() >= 4.01 and self.vgrainpunaiséebt.value() <= 4.25:
                    self.rgrainpunaiséebt.setValue(0.72)
                elif self.vgrainpunaiséebt.value() >= 4.26 and self.vgrainpunaiséebt.value() <= 4.50:
                    self.rgrainpunaiséebt.setValue(0.80)
                elif self.vgrainpunaiséebt.value() >= 4.51 and self.vgrainpunaiséebt.value() <= 4.75:
                    self.rgrainpunaiséebt.setValue(0.88)
                elif self.vgrainpunaiséebt.value() >= 4.76 and self.vgrainpunaiséebt.value() <= 5.00:
                    self.rgrainpunaiséebt.setValue(0.96)
                elif self.vgrainpunaiséebt.value() >= 5.01 and self.vgrainpunaiséebt.value() <= 5.25:
                    self.rgrainpunaiséebt.setValue(1.04)
                elif self.vgrainpunaiséebt.value() >= 5.26 and self.vgrainpunaiséebt.value() <= 5.50:
                    self.rgrainpunaiséebt.setValue(1.12)
                elif self.vgrainpunaiséebt.value() >= 5.51 and self.vgrainpunaiséebt.value() <= 5.75:
                    self.rgrainpunaiséebt.setValue(1.20)
                elif self.vgrainpunaiséebt.value() >= 5.76 and self.vgrainpunaiséebt.value() <= 6.00:
                    self.rgrainpunaiséebt.setValue(1.28)
                elif self.vgrainpunaiséebt.value() >= 6.01 and self.vgrainpunaiséebt.value() <= 6.25:
                    self.rgrainpunaiséebt.setValue(1.36)
                elif self.vgrainpunaiséebt.value() >= 6.26 and self.vgrainpunaiséebt.value() <= 6.50:
                    self.rgrainpunaiséebt.setValue(1.44)
                elif self.vgrainpunaiséebt.value() >= 6.51 and self.vgrainpunaiséebt.value() <= 6.75:
                    self.rgrainpunaiséebt.setValue(1.52)
                elif self.vgrainpunaiséebt.value() >= 6.76 and self.vgrainpunaiséebt.value() <= 7.00:
                    self.rgrainpunaiséebt.setValue(1.60)
                elif self.vgrainpunaiséebt.value() >= 7.01 and self.vgrainpunaiséebt.value() <= 7.25:
                    self.rgrainpunaiséebt.setValue(1.68)
                elif self.vgrainpunaiséebt.value() >= 7.26 and self.vgrainpunaiséebt.value() <= 7.50:
                    self.rgrainpunaiséebt.setValue(1.76)
                elif self.vgrainpunaiséebt.value() >= 7.51 and self.vgrainpunaiséebt.value() <= 7.75:
                    self.rgrainpunaiséebt.setValue(1.84)
                elif self.vgrainpunaiséebt.value() >= 7.76 and self.vgrainpunaiséebt.value() <= 8.00:
                    self.rgrainpunaiséebt.setValue(1.92)
                elif self.vgrainpunaiséebt.value() >= 8.01 and self.vgrainpunaiséebt.value() <= 8.25:
                    self.rgrainpunaiséebt.setValue(2.00)
                elif self.vgrainpunaiséebt.value() >= 8.26 and self.vgrainpunaiséebt.value() <= 8.50:
                    self.rgrainpunaiséebt.setValue(2.08)
                elif self.vgrainpunaiséebt.value() >= 8.51 and self.vgrainpunaiséebt.value() <= 8.75:
                    self.rgrainpunaiséebt.setValue(2.16)
                elif self.vgrainpunaiséebt.value() >= 8.76 and self.vgrainpunaiséebt.value() <= 9.00:
                    self.rgrainpunaiséebt.setValue(2.24)
                elif self.vgrainpunaiséebt.value() >= 9.01 and self.vgrainpunaiséebt.value() <= 9.25:
                    self.rgrainpunaiséebt.setValue(2.32)
                elif self.vgrainpunaiséebt.value() >= 9.26 and self.vgrainpunaiséebt.value() <= 9.50:
                    self.rgrainpunaiséebt.setValue(2.40)
                elif self.vgrainpunaiséebt.value() >= 9.51 and self.vgrainpunaiséebt.value() <= 9.75:
                    self.rgrainpunaiséebt.setValue(2.48)
                elif self.vgrainpunaiséebt.value() >= 9.76 and self.vgrainpunaiséebt.value() <= 10.00:
                    self.rgrainpunaiséebt.setValue(2.56)
                elif self.vgrainpunaiséebt.value() >= 10.01 and self.vgrainpunaiséebt.value() <= 40:
                    self.rgrainpunaiséebt.setValue(0)
                    self.obesrvationbt.setText("PRIX A DEBATTRE")
                else:
                    self.rgrainpunaiséebt.setValue(0)
                    self.rgrainpunaiséebt.clear()
                    self.rgrainpunaiséebt.setStyleSheet(
                        "background-color:#ffffff;border: 2px solid bleu;border-radius: 4px;padding: 0px")
                break

        def plus_bt(self):
            a = self.vmatiére20mmbt.value()
            b = self.vdébrisvébt.value()
            c = self.vgrainnuisiblebt.value()
            d = self.vgrainscassébt.value()
            e = self.vgrainpunaiséebt.value()
            f = self.vgrainsfortementboutésbt.value()
            g = self.vgrainsfaiblementboutésbt.value()
            h = self.vgrainefortementmouchetesbt.value()
            i = self.vgrainetrangebt.value()
            totalprembt = a + b + c
            totaldem = d + e + f + g + h + i
            btotalBonietRefac = self.btotalprembt.value() + self.btotaldembt.value() + self.bpsbt.value()
            rtotalRefac = self.rtotalprembt.value() + self.rtotaldembt.value() + self.rpsbt.value() + self.rgrainscassébt.value() + self.rgrainpunaiséebt.value()
            self.btotalbiniEtrefactionbt.setValue(btotalBonietRefac)
            self.rtotalbiniEtrefactionbt.setValue(rtotalRefac)
            self.vtotalprembt.setValue(totalprembt)
            if self.vgrainscassébt.value() <= 4.00 and self.vgrainpunaiséebt.value() <= 2:
                self.vtotaldembt.setValue(totaldem)
            elif self.vgrainscassébt.value() >= 4.01 and self.vgrainpunaiséebt.value() >= 2.01:
                self.vtotaldembt.setValue(f + g + h + i)

        def clear_bt(self):
            self.vpsbt.clear()
            self.vpsbt.setValue(0)
            self.vhumiditebt.clear()
            self.vergotbt.clear()
            self.vmatiére20mmbt.clear()
            self.vmatiére20mmbt.setValue(0)
            self.vdébrisvébt.clear()
            self.vdébrisvébt.setValue(0)
            self.vgrainnuisiblebt.clear()
            self.vgrainnuisiblebt.setValue(0)
            self.vtotalprembt.clear()
            self.vtotalprembt.setValue(0)
            self.vgrainscassébt.clear()
            self.vgrainscassébt.setValue(0)
            self.vgrainpunaiséebt.clear()
            self.vgrainpunaiséebt.setValue(0)
            self.vgrainsfortementboutésbt.clear()
            self.vgrainsfortementboutésbt.setValue(0)
            self.vgrainsfaiblementboutésbt.clear()
            self.vgrainsfaiblementboutésbt.setValue(0)
            self.vgrainefortementmouchetesbt.clear()
            self.vgrainefortementmouchetesbt.setValue(0)
            self.vgrainetrangebt.clear()
            self.vgrainetrangebt.setValue(0)
            self.vtotaldembt.clear()
            self.vtotaldembt.setValue(0)
            self.rpsbt.clear()
            self.rpsbt.setValue(0)
            self.rergotbt.clear()
            self.rmatiére20mmbt.clear()
            self.rmatiére20mmbt.setValue(0)
            self.rdébrisvébt.clear()
            self.rdébrisvébt.setValue(0)
            self.rgrainnuisiblebt.clear()
            self.rgrainnuisiblebt.setValue(0)
            self.rtotalprembt.clear()
            self.rtotalprembt.setValue(0)
            self.rgrainscassébt.clear()
            self.rgrainscassébt.setValue(0)
            self.rgrainpunaiséebt.clear()
            self.rgrainpunaiséebt.setValue(0)
            self.rgrainetrangebt.clear()
            self.rgrainetrangebt.setValue(0)
            self.bpsbt.clear()
            self.bpsbt.setValue(0)
            self.bergotbt.clear()
            self.bmatiére20mmbt.clear()
            self.bmatiére20mmbt.setValue(0)
            self.btébrisvébt.clear()
            self.btébrisvébt.setValue(0)
            self.bgrainnuisiblebt.clear()
            self.bgrainnuisiblebt.setValue(0)
            self.btotalprembt.clear()
            self.btotalprembt.setValue(0)
            self.bgrainscassébt.clear()
            self.bgrainscassébt.setValue(0)
            self.bgrainpunaiséebt.clear()
            self.bgrainpunaiséebt.setValue(0)
            self.bgrainsfaiblementboutésbt.clear()
            self.bgrainsfaiblementboutésbt.setValue(0)
            self.bgrainefortementmouchetesbt.clear()
            self.bgrainefortementmouchetesbt.setValue(0)
            self.bgrainetrangebt.clear()
            self.bgrainetrangebt.setValue(0)
            self.btotaldembt.clear()
            self.btotaldembt.setValue(0)

        def calcul_bt(self):
            self.réfaction_ps_bt()
            self.bonification_ps_bt()
            self.refaction_impurté_er_bt()
            self.bonification_pimpurte_er_bt()
            self.refaction_impurte_eme_bt()
            self.rGrains_cassebt()
            self.grain_pounaiséebt()
            self.plus_bt()

        def bulletin_bt(self):
            try:
                nbulltinbt = self.n_bultinbt.text()
                nomproducteurbt = self.nome_du_producteurbt.text()
                perebt = self.pérebt.text()
                matriculbt = self.adressebt.text()
                poindecollectebt = self.pointdecollectbt.currentText()
                datebt = self.dattereceptiontbt.text()
                agreeurbt = self.agréeeurcombobt.currentText()
                quantitebt = self.quantitebt.value()
                vpsbt = self.vpsbt.value()
                bpsbt = self.bpsbt.text()
                rpsbt = self.rpsbt.text()
                vhumidite = self.vhumiditebt.value()
                vergot = self.vergotbt.value()
                vmatier20mm = self.vmatiére20mmbt.value()
                vdebrit = self.vdébrisvébt.value()
                vgrainnuisible = self.vgrainnuisiblebt.value()
                graincasse = self.vgrainscassébt.value()
                rgraicasse = self.rgrainscassébt.text()
                grainpunaise = self.vgrainpunaiséebt.value()
                grainfboute = self.vgrainsfortementboutésbt.value()
                grainfaboute = self.vgrainsfaiblementboutésbt.value()
                grainfortementmouchte = self.vgrainefortementmouchetesbt.value()
                grainetrange = self.vgrainetrangebt.value()
                rgrainpunaise = self.rgrainpunaiséebt.text()
                vtotalbtp = self.vtotalprembt.value()
                vtotalbtd = self.vtotaldembt.value()
                btotalbtp = self.btotalprembt.text()
                btotalbtd = self.btotaldembt.text()
                rtotalbtp = self.rtotalprembt.text()
                rtotalbtd = self.rtotaldembt.text()
                btotalbt = self.btotalbiniEtrefaction.text()
                rtotalbt = self.rtotalbiniEtrefaction.text()
                ndcartebt = self.n_cartebt.text()
                observationbt = self.obesrvationbt.toPlainText()
                date = QDate.currentDate()
                current_date = QDate.currentDate()
                current_day = current_date.day()
                current_month = current_date.month()
                current_year = current_date.year()
                current_time = QTime.currentTime()
                current_hour = current_time.hour()
                current_minute = current_time.minute()
                # Format the date as "dd-mm-yyyy"
                current_days = f"{current_day:02d}-{current_month:02d}-{current_year}-{current_hour}-{current_minute}"
                self.docbt = DocxTemplate("bulletin agreage/bulletin_blétendre/bulletin_blétendre.docx")
                self.docbt.render({
                    "nmp": nomproducteurbt,
                    "per": perebt,
                    "mat": matriculbt,
                    "ptt": poindecollectebt,
                    "dt": datebt,
                    "agr": agreeurbt,
                    "qtt": quantitebt,
                    "vps": vpsbt,
                    "bps": bpsbt,
                    "rps": rpsbt,
                    "vmh": vhumidite,
                    "vrg": vergot,
                    "vgs": vmatier20mm,
                    "vdb": vdebrit,
                    "vgn": vgrainnuisible,
                    "vgc": graincasse,
                    "vgfb": grainpunaise,
                    "vgr": grainfboute,
                    "vgfm": grainfaboute,
                    "vgpn": grainfortementmouchte,
                    "vgrp": grainetrange,
                    "rgp": rgrainpunaise,
                    "rgc": rgraicasse,
                    "vttp": vtotalbtp,
                    "bttp": btotalbtp,
                    "rtt": rtotalbtp,
                    "vtd": vtotalbtd,
                    "btd": btotalbtd,
                    "rtd": rtotalbtd,
                    "btb": btotalbt,
                    "rtr": rtotalbt,
                    "ncn": ndcartebt,
                    "oo": observationbt,
                    "nm": nbulltinbt, })
                databt = sqlite3.connect("data_bt.db")
                cursbt = databt.cursor()
                cursbt.execute(
                    "SELECT * FROM bttable_bulletin_sortie WHERE num_bulletinbts AND datebts=? AND nom_producteurbts = ? AND perebts = ?  AND quantites=?",
                    (datebt, nomproducteurbt, perebt, quantitebt))
                existing_data = cursbt.fetchone()
                if existing_data:
                    msgbox = QtWidgets.QMessageBox()
                    msgbox.setWindowTitle('Confirmation')
                    msgbox.setText('Le Bulletin sortie  déjà.')
                    msgbox.exec()
                    # tempfilebtd = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    # self.docbt.save( tempfilebtd)
                    # os.startfile(tempfilebtd, "print")
                    # tempfilebt = nomproducteurbt + "-" + current_days + "B.T" + ".docx"
                    # self.docbt.save("bulletin agreage/bulletin_blétendre/" + tempfilebt)
                    # pathbt = os.path.abspath("bulletin agreage/bulletin_blétendre/" + tempfilebt)

                else:
                    doc_names = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    doc_pdf = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False).name
                    self.docbt.save(doc_names)
                    try:
                        if doc_names:
                            a = self.progress_bar()
                            sys.stderr = open("consoleoutput.log", "w")
                            convert(doc_names, doc_pdf)
                            # Open the resulting .pdf file using the default associated application
                            # os.startfile(doc_pdf, 'open')
                            app_path = 'C:\\Program Files\\Okular\\bin\\okular.exe'
                            subprocess.Popen([app_path, doc_pdf])
                    except Exception as e:
                        print(e)
                    tempfilebt = nomproducteurbt + "-" + current_days + "B.T" + ".docx"
                    self.docbt.save("bulletin agreage/bulletin_blétendre/" + tempfilebt)
                    pathbt = os.path.abspath("bulletin agreage/bulletin_blétendre/" + tempfilebt)
                    databasebt = sqlite3.connect("data_bt.db")
                    curs = databasebt.cursor()
                    curs.execute(
                        "INSERT INTO bttable_bulletin_sortie (datebts, nom_producteurbts, perebts,quantites, pathbts,date_sortie) VALUES (?,?,?, ?, ?, ?)",
                        (datebt, nomproducteurbt, perebt, quantitebt, pathbt, current_day,))
                    databasebt.commit()
                    databasebt.close()
            except Exception as e:
                print(e)

        def add_datta_bt(self):
            try:
                nbulltinbt = self.n_bultinbt.text()
                nomproducteurbt = self.nome_du_producteurbt.text()
                perebt = self.pérebt.text()
                matriculbt = self.adressebt.text()
                poindecollectebt = self.pointdecollectbt.currentText()
                datebt = self.dattereceptiontbt.text()
                agreeurbt = self.agréeeurcombobt.currentText()
                quantitebt = self.quantitebt.value()
                vpsbt = self.vpsbt.value()
                bpsbt = self.bpsbt.text()
                rpsbt = self.rpsbt.text()
                vhumidite = self.vhumiditebt.value()
                vergot = self.vergotbt.value()
                vmatier20mm = self.vmatiére20mmbt.value()
                vdebrit = self.vdébrisvébt.value()
                vgrainnuisible = self.vgrainnuisiblebt.value()
                graincasse = self.vgrainscassébt.value()
                rgraicasse = self.rgrainscassébt.text()
                grainpunaise = self.vgrainpunaiséebt.value()
                grainfboute = self.vgrainsfortementboutésbt.value()
                grainfaboute = self.vgrainsfaiblementboutésbt.value()
                grainfortementmouchte = self.vgrainefortementmouchetesbt.value()
                grainetrange = self.vgrainetrangebt.value()
                rgrainpunaise = self.rgrainpunaiséebt.text()
                vtotalbtp = self.vtotalprembt.value()
                vtotalbtd = self.vtotaldembt.value()
                btotalbtp = self.btotalprembt.text()
                btotalbtd = self.btotaldembt.text()
                rtotalbtp = self.rtotalprembt.text()
                rtotalbtd = self.rtotaldembt.text()
                btotalbt = self.btotalbiniEtrefaction.text()
                rtotalbt = self.rtotalbiniEtrefaction.text()
                ndcartebt = self.n_cartebt.text()
                observationbt = self.obesrvationbt.toPlainText()
                date = QDate.currentDate()
                current_date = QDate.currentDate()
                current_day = current_date.day()
                current_month = current_date.month()
                current_year = current_date.year()
                current_time = QTime.currentTime()
                current_hour = current_time.hour()
                current_minute = current_time.minute()
                # Format the date as "dd-mm-yyyy"
                current_days = f"{current_day:02d}-{current_month:02d}-{current_year}-{current_hour}-{current_minute}"
                self.docbt = DocxTemplate("bulletin agreage/bulletin_blétendre/bulletin_blétendre.docx")
                self.docbt.render({
                    "nmp": nomproducteurbt,
                    "per": perebt,
                    "mat": matriculbt,
                    "ptt": poindecollectebt,
                    "dt": datebt,
                    "agr": agreeurbt,
                    "qtt": quantitebt,
                    "vps": vpsbt,
                    "bps": bpsbt,
                    "rps": rpsbt,
                    "vmh": vhumidite,
                    "vrg": vergot,
                    "vgs": vmatier20mm,
                    "vdb": vdebrit,
                    "vgn": vgrainnuisible,
                    "vgc": graincasse,
                    "vgfb": grainpunaise,
                    "vgr": grainfboute,
                    "vgfm": grainfaboute,
                    "vgpn": grainfortementmouchte,
                    "vgrp": grainetrange,
                    "rgp": rgrainpunaise,
                    "rgc": rgraicasse,
                    "vttp": vtotalbtp,
                    "bttp": btotalbtp,
                    "rtt": rtotalbtp,
                    "vtd": vtotalbtd,
                    "btd": btotalbtd,
                    "rtd": rtotalbtd,
                    "btb": btotalbt,
                    "rtr": rtotalbt,
                    "ncn": ndcartebt,
                    "oo": observationbt,
                    "nm": nbulltinbt
                })
                tempfilebt = nomproducteurbt + "-" + current_days + "B.T" + ".docx"
                self.docbt.save("bulletin agreage/bulletin_blétendre/" + tempfilebt)
                pathbt = os.path.abspath("bulletin agreage/bulletin_blétendre/" + tempfilebt)
                # Check if the data already exists
                datadb = sqlite3.connect("data_bt.db")
                cursbt = datadb.cursor()
                cursbt.execute(
                    "SELECT * FROM bttable WHERE datebt=? AND nom_producteurbt=? AND perebt=? AND matriculebt=? AND point_collectbt=? AND nom_agreeurbt=? AND quantitebt=? AND psbt=? AND totalbt=? AND pathbt=? ",
                    (datebt, nomproducteurbt, perebt, matriculbt, poindecollectebt, agreeurbt, quantitebt, vpsbt,
                     vtotalbtp, pathbt,))
                existing_data = cursbt.fetchone()

                if existing_data:
                    msgbox = QtWidgets.QMessageBox()
                    msgbox.setWindowTitle('confirmation')
                    msgbox.setText('Les données existent déjà.')
                    msgbox.exec()
                else:
                    cursbt.execute(
                        "INSERT INTO bttable (datebt ,nom_producteurbt ,perebt ,matriculebt ,point_collectbt ,nom_agreeurbt ,quantitebt ,psbt ,totalbt,pathbt  )  values(?,?,?,?,?,?,?,?,?,?)",
                        (datebt, nomproducteurbt, perebt, matriculbt, poindecollectebt, agreeurbt, quantitebt, vpsbt,
                         vtotalbtp, pathbt,))
                    datadb.commit()
                    datadb.close()

                    msgbox = QtWidgets.QMessageBox()
                    msgbox.setWindowTitle('confirmation')
                    msgbox.setText('Les données sont sauvegardées')
                    msgbox.exec()

            except sqlite3.Error as e:
                print("Error accessing the database:", e)

        def number_bulletin_bt(self):
            try:
                databasebt = sqlite3.connect("data_bt.db")
                cursor = databasebt.cursor()
                cursor.execute("SELECT num_bulletinbt FROM bttable ORDER BY num_bulletinbt DESC LIMIT 1")
                resultbt = cursor.fetchone()
                if resultbt is not None:
                    last_id = resultbt[0]
                    self.n_bultinbt.setText("DC-" + str(last_id))
                else:
                    # Handle the case when there are no records in the orgetable
                    self.n_bultinbt.setText("DC-")
            except sqlite3.Error as e:
                print("Error accessing the database:", e)
            pass

        def today_bt(self):
            try:
                dialog = QtWidgets.QMessageBox()
                dialog.setStyleSheet("""
                                          QWidget {
                                              color: #000000;
                                              background-color: #D8F9DB;
                                              border-width: 1px;
                                              border-color: #1e1e1e;
                                              border-style: solid;
                                              border-radius: 6;
                                              padding: 3px;
                                              font-size: 18px;
                                              padding-left: 5px;
                                              padding-right: 5px;
                                          }
                                          QWidget:item:hover {
                                              background-color: #3daee9;
                                              color: #eff0f1;
                                          }
                                          QWidget:item:selected {
                                              background-color: #3daee9;
                                          }
                                          QWidget:disabled {
                                              color: #454545;
                                              background-color: #31363b;
                                          }
                                          QPushButton {
                                              color: #000000;
                                              background-color:#84dbc8;
                                              border-width: 1px;
                                              border-color: #1e1e1e;
                                              border-style: solid;
                                              border-radius: 6;
                                              padding: 3px;
                                              font-size: 12px;
                                              padding-left: 5px;
                                              padding-right: 5px;
                                              min-width: 40px;
                                          }
                                          QPushButton:disabled {
                                              background-color: #31363b;
                                              border-width: 1px;
                                              border-color: #454545;
                                              border-style: solid;
                                              padding-top: 5px;
                                              padding-bottom: 5px;
                                              padding-left: 10px;
                                              padding-right: 10px;
                                              border-radius: 2px;
                                              color: #454545;
                                          }
                                          QPushButton:pressed {
                                              background-color: #3daee9;
                                              padding-top: -15px;
                                              padding-bottom: -17px;
                                          }
                                          QPushButton:hover {
                                              border: 1px solid #ff8c00;
                                              color: #eff0f1;
                                          }
                                          QLabel {
                                              font-size: 18px;
                                              border: 0px solid orange;
                                          }
                                      """)
                dialog.setWindowTitle("Sélectionnez la date")
                dialog.setText("Sélectionnez la date  \t\n")
                self.datebt = QtWidgets.QDateEdit(dialog)
                self.datebt.setDate(self.datedaytime)
                self.datebt.resize(180, 30)
                self.datebt.move(40, 50)
                ok_button = QtWidgets.QPushButton("OK", dialog)
                cancel_button = QtWidgets.QPushButton("Cancel", dialog)
                dialog.addButton(ok_button, QMessageBox.ButtonRole.ActionRole)
                dialog.addButton(cancel_button, QMessageBox.ButtonRole.ActionRole)
                dialog.exec()

                if dialog.clickedButton() == ok_button:
                    self.selected_datebt = self.datebt.text()
                    if self.datebt.text() == self.selected_datebt:

                        conn = sqlite3.connect('data_bt.db')
                        cursor = conn.cursor()
                        cursor.execute(
                            "SELECT num_bulletinbt,datebt ,nom_producteurbt ,perebt ,matriculebt ,point_collectbt  ,quantitebt  FROM bttable WHERE DATE(substr(datebt, 7, 4) || '-' || substr(datebt, 4, 2) || '-' || substr(datebt, 1, 2)) =?; ",
                            (self.selected_datebt,))
                        rows = cursor.fetchall()

                        ########################################################################
                        # Create a new document and add a table
                        self.doc = docx.Document()
                        section = self.doc.sections[0]
                        section.page_width = docx.shared.Cm(29.7)
                        section.page_height = docx.shared.Cm(21.0)
                        section.top_margin = docx.shared.Cm(1.5)
                        section.bottom_margin = docx.shared.Cm(1.5)
                        heading1 = self.doc.add_heading("\t\t\t\t\t\t les entre de Blé Dur ", level=1)
                        heading1.style.font.name = 'Times New Roman'
                        heading1.style.font.size = Pt(22)
                        heading1.style.font.bold = True
                        heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                        # add second heading
                        paragraph = self.doc.add_paragraph()
                        paragraph.style.font.name = 'Times New Roman'
                        paragraph.style.font.size = Pt(14)
                        left_run = paragraph.add_run('CCLS RELIZANE\t\t\t\t\t\t\t\t\t\t\t\t')
                        left_run.bold = True
                        right_run = paragraph.add_run('Date:' + self.selected_datebt)
                        right_run.bold = True

                        table = self.doc.add_table(rows=1, cols=9)
                        table.style = "Table Grid"  # set the table style
                        hdr_cells = table.rows[0].cells
                        hdr_cells[0].text = 'N° Bulletin \nDC'
                        hdr_cells[1].text = 'Date'
                        hdr_cells[2].text = 'Nom et Prénom'
                        hdr_cells[3].text = 'Pére'
                        hdr_cells[4].text = 'Matricule'
                        hdr_cells[5].text = 'point de collect'
                        hdr_cells[6].text = 'Quantité'
                        hdr_cells[7].text = 'Date de sortie '
                        hdr_cells[8].text = 'N° de la carte '

                        # Set the width of the header cells
                        hdr_cells[0].width = Inches(1.5)  # set the width of the first column to 1.5 inches
                        hdr_cells[1].width = Inches(1.5)
                        hdr_cells[2].width = Inches(2)
                        hdr_cells[3].width = Inches(1)
                        hdr_cells[4].width = Inches(1.5)
                        hdr_cells[5].width = Inches(1.5)
                        hdr_cells[6].width = Inches(1)
                        hdr_cells[7].width = Inches(1.5)
                        hdr_cells[8].width = Inches(1.5)

                        # set hight of the column
                        hdr_cells[0].height = Inches(1)  # set the width of the first column to 1.5 inches
                        hdr_cells[1].height = Inches(1)
                        hdr_cells[2].height = Inches(1)
                        hdr_cells[3].height = Inches(1)
                        hdr_cells[4].height = Inches(1)
                        hdr_cells[5].height = Inches(1)
                        hdr_cells[6].height = Inches(1)
                        hdr_cells[7].width = Inches(1)
                        hdr_cells[8].width = Inches(1)

                        for cell in table.rows[0].cells:
                            cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                            cell.paragraphs[0].runs[0].font.size = Pt(12)
                            cell.paragraphs[0].runs[0].font.bold = True
                        # Add the data to the table
                        table_rows = len(rows)
                        table_cols = len(rows[0])
                        for row in range(table_rows):
                            table.add_row()
                            for col in range(table_cols):
                                cell = table.cell(row + 1, col)
                                cell.text = str(rows[row][col])
                                # Set font properties
                                cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                                cell.paragraphs[0].runs[0].font.size = Pt(12)
                                cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                        for row in table.rows:
                            row.height = Inches(0.3)
                        # Save and open the document for printing
                        doc_names = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                        doc_pdf = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False).name
                        self.doc.save(doc_names)
                        try:
                            if doc_names:
                                a = self.progress_bar()
                                sys.stderr = open("consoleoutput.log", "w")
                                convert(doc_names, doc_pdf)
                                # Open the resulting .pdf file using the default associated application
                                # os.startfile(doc_pdf, 'open')
                                app_path = 'C:\\Program Files\\Okular\\bin\\okular.exe'
                                subprocess.Popen([app_path, doc_pdf])
                        except Exception as e:
                            print(e)
                    else:
                        msgbox = QtWidgets.QMessageBox()
                        msgbox.setWindowTitle('Erreur')
                        msgbox.setText("Il n'yapas des données à cette date.")
                        msgbox.exec()
                if dialog.clickedButton() == cancel_button:
                    dialog.close()
            except Exception as e:
                print(e)

        def printBulltinProducteurbt(self):
            try:
                dialog = QtWidgets.QMessageBox()
                dialog.setFixedSize(300, 600)
                dialog.setStyleSheet("""
                                          QWidget {
                                              color: #000000;
                                              background-color: #D8F9DB;
                                              border-width: 1px;
                                              border-color: #1e1e1e;
                                              border-style: solid;
                                              border-radius: 6;
                                              padding: 3px;
                                              font-size: 18px;
                                              padding-left: 5px;
                                              padding-right: 5px;
                                          }
                                          QWidget:item:hover {
                                              background-color: #3daee9;
                                              color: #eff0f1;
                                          }
                                          QWidget:item:selected {
                                              background-color: #3daee9;
                                          }
                                          QWidget:disabled {
                                              color: #454545;
                                              background-color: #31363b;
                                          }
                                          QPushButton {
                                              color: #000000;
                                              background-color:#84dbc8;
                                              border-width: 1px;
                                              border-color: #1e1e1e;
                                              border-style: solid;
                                              border-radius: 6;
                                              padding: 3px;
                                              font-size: 12px;
                                              padding-left: 5px;
                                              padding-right: 5px;
                                              min-width: 40px;
                                          }
                                          QPushButton:disabled {
                                              background-color: #31363b;
                                              border-width: 1px;
                                              border-color: #454545;
                                              border-style: solid;
                                              padding-top: 5px;
                                              padding-bottom: 5px;
                                              padding-left: 10px;
                                              padding-right: 10px;
                                              border-radius: 2px;
                                              color: #454545;
                                          }
                                          QPushButton:pressed {
                                              background-color: #3daee9;
                                              padding-top: -15px;
                                              padding-bottom: -17px;
                                          }
                                          QPushButton:hover {
                                              border: 1px solid #ff8c00;
                                              color: #eff0f1;
                                          }
                                          QLabel {
                                              font-size: 18px;
                                              border: 0px solid orange;
                                          }
                                      """)
                dialog.setWindowTitle("Sélectionnez le Nom et Prénom et pére")
                dialog.setText("Sélectionnez le Nom et Prénom et pére  \t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t")
                self.nomproducture = QtWidgets.QLineEdit(dialog)
                self.nomproducture.setPlaceholderText("Nom et Prénom")
                self.nomproducture.resize(180, 30)
                self.nomproducture.move(40, 40)
                self.pére = QtWidgets.QLineEdit(dialog)
                self.pére.setPlaceholderText("Pére")
                self.pére.resize(180, 30)
                self.pére.move(240, 40)
                self.datetxt = QtWidgets.QLabel("Date entré", dialog)
                self.datetxt.setGeometry(QtCore.QRect(30, 80, 100, 20))
                self.datep = QDateTimeEdit(dialog)
                self.datep.setDisplayFormat("dd-MM-yyyy hh:mm")
                self.datep.resize(180, 30)
                self.datep.move(40, 105)
                self.quantiteptext = QtWidgets.QLabel("Quantité", dialog)
                self.quantiteptext.setGeometry(QtCore.QRect(230, 80, 100, 20))
                self.quantitep = QtWidgets.QDoubleSpinBox(dialog)
                self.quantitep.setRange(1, 10000)
                self.quantitep.setSuffix('  QX')
                self.quantitep.setSpecialValueText(" ")
                self.quantitep.setValue(0.0)
                self.quantitep.resize(180, 30)
                self.quantitep.move(240, 105)
                ok_button = QtWidgets.QPushButton("OK", dialog)
                cancel_button = QtWidgets.QPushButton("Cancel", dialog)
                dialog.addButton(ok_button, QMessageBox.ButtonRole.ActionRole)
                dialog.addButton(cancel_button, QMessageBox.ButtonRole.ActionRole)
                dialog.exec()
                date = QDate.currentDate()
                current_date = QDate.currentDate()
                current_day = current_date.day()
                current_month = current_date.month()
                current_year = current_date.year()

                # Format the date as "dd-mm-yyyy"
                current_day = f"{current_day:02d}-{current_month:02d}-{current_year}"

                if dialog.clickedButton() == ok_button:
                    producteur = self.nomproducture.text()
                    pere = self.pére.text()
                    dateentré = self.datep.text()
                    quantite = self.quantitep.value()
                    datadb = sqlite3.connect("data_bt.db")
                    cursbt = datadb.cursor()
                    cursbt.execute(
                        "SELECT * FROM bttable_bulletin_sortie WHERE num_bulletinbts AND datebts=? AND nom_producteurbts = ? AND perebts = ?  AND quantites=?",
                        (dateentré, producteur, pere, quantite))
                    existing_data = cursbt.fetchone()
                    if existing_data:
                        msgbox = QtWidgets.QMessageBox()
                        msgbox.setWindowTitle('Confirmation')
                        msgbox.setText('Le Bulletin sortie  déjà.')
                        msgbox.exec()
                    else:
                        curs = datadb.cursor()
                        curs.execute(
                            "SELECT pathbt FROM bttable WHERE datebt=? AND nom_producteurbt=? AND perebt=? AND quantitebt=?",
                            (dateentré, producteur, pere, quantite))
                        result = curs.fetchall()
                        if result:
                            # Iterate over the paths and open each file
                            for row in result:
                                file_path = row[0]
                                if file_path:
                                    doc_pdf = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False).name
                                    try:
                                        a = self.progress_bar()
                                        sys.stderr = open("consoleoutput.log", "w")
                                        convert(file_path, doc_pdf)
                                        # Open the resulting .pdf file using the default associated application
                                        # os.startfile(doc_pdf, 'open')
                                        app_path = 'C:\\Program Files\\Okular\\bin\\okular.exe'
                                        subprocess.Popen([app_path, doc_pdf])
                                    except Exception as e:
                                        print(e)
                                    curs.execute(
                                        "INSERT INTO bttable_bulletin_sortie (datebts, nom_producteurbts, perebts, quantites, pathbts, date_sortie) VALUES (?,?,?,?,?,?)",
                                        (dateentré, producteur, pere, quantite, file_path, current_day))
                                    datadb.commit()
                            datadb.close()

                        else:
                            msgbox = QtWidgets.QMessageBox()
                            msgbox.setWindowTitle('Confirmation')
                            msgbox.setText('Le Bulletin ne existe pas.')
                            msgbox.exec()
            except sqlite3.Error as e:
                print(e)

        def eticket_bletendre(self):
            try:
                dialogor = QtWidgets.QMessageBox()
                dialogor.setFixedSize(300, 600)
                dialogor.setStyleSheet("""
                                                  QWidget {
                                                      color: #000000;
                                                      background-color: #D8F9DB;
                                                      border-width: 1px;
                                                      border-color: #1e1e1e;
                                                      border-style: solid;
                                                      border-radius: 6;
                                                      padding: 3px;
                                                      font-size: 18px;
                                                      padding-left: 5px;
                                                      padding-right: 5px;
                                                  }
                                                  QWidget:item:hover {
                                                      background-color: #3daee9;
                                                      color: #eff0f1;
                                                  }
                                                  QWidget:item:selected {
                                                      background-color: #3daee9;
                                                  }
                                                  QWidget:disabled {
                                                      color: #454545;
                                                      background-color: #31363b;
                                                  }
                                                  QPushButton {
                                                      color: #000000;
                                                      background-color:#84dbc8;
                                                      border-width: 1px;
                                                      border-color: #1e1e1e;
                                                      border-style: solid;
                                                      border-radius: 6;
                                                      padding: 3px;
                                                      font-size: 12px;
                                                      padding-left: 5px;
                                                      padding-right: 5px;
                                                      min-width: 40px;
                                                  }
                                                  QPushButton:disabled {
                                                      background-color: #31363b;
                                                      border-width: 1px;
                                                      border-color: #454545;
                                                      border-style: solid;
                                                      padding-top: 5px;
                                                      padding-bottom: 5px;
                                                      padding-left: 10px;
                                                      padding-right: 10px;
                                                      border-radius: 2px;
                                                      color: #454545;
                                                  }
                                                  QPushButton:pressed {
                                                      background-color: #3daee9;
                                                      padding-top: -15px;
                                                      padding-bottom: -17px;
                                                  }
                                                  QPushButton:hover {
                                                      border: 1px solid #ff8c00;
                                                      color: #eff0f1;
                                                  }
                                                  QLabel {
                                                      font-size: 18px;
                                                      border: 0px solid orange;
                                                  }
                                                  QLineEdit
            {
                background-color: #ffffff;
                padding: 1px;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 0px;
                color: #000000;
            }
            QDoubleSpinBox
            {
                background-color: #ffffff;
                padding: 1px;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 0px;
                color:#000000;
                font-size: 11px;
                font-weight: bold;

            }
            QComboBox
            {
               background-color: #ffffff;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 2px;
                min-width: 40px;
            }
                                              """)
                dialogor.setWindowTitle("Sélectionnez le Nom et Prénom et pére")
                dialogor.setText(
                    "BLE TENDRE \t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t")
                nomproductureor = QtWidgets.QLineEdit(dialogor)
                nomproductureor.setPlaceholderText("Nom et Prénom")
                nomproductureor.resize(180, 30)
                nomproductureor.move(40, 125)
                pereor = QtWidgets.QLineEdit(dialogor)
                pereor.setPlaceholderText("Pére")
                pereor.resize(180, 30)
                pereor.move(240, 125)
                matricultxt = QtWidgets.QLabel("Matricul", dialogor)
                matricultxt.setGeometry(QtCore.QRect(30, 165, 100, 20))
                mator = QtWidgets.QLineEdit(dialogor)
                mator.setInputMask("99999-999-99")
                mator.resize(180, 30)
                mator.move(40, 190)
                pointdecollector = QtWidgets.QComboBox(dialogor)
                pointdecollector.setPlaceholderText("Point de collect")
                pointdecollector.addItem('')
                pointdecollector.addItem('Dock central')
                pointdecollector.addItem('Magasin Zemmoura')
                pointdecollector.addItem('Magasin Kef-lazreg')
                pointdecollector.addItem('Magasin Messra')
                pointdecollector.addItem('Magasin Marche gros belacel')
                pointdecollector.resize(180, 30)
                pointdecollector.move(40, 65)
                # pstxt = QtWidgets.QLabel("PS", dialogor)
                # pstxt.setGeometry(QtCore.QRect(240, 40, 100, 20))
                psor = QLineEdit(dialogor)
                validator = QDoubleValidator(10, 1000, 2)
                psor.setValidator(validator)

                # psor.setInputMask("99.99")
                psor.setPlaceholderText("PS")
                psor.resize(180, 30)
                psor.move(240, 65)
                quantiteptext = QtWidgets.QLabel("Quantité", dialogor)
                quantiteptext.setGeometry(QtCore.QRect(230, 165, 100, 20))
                quantiteor = QtWidgets.QDoubleSpinBox(dialogor)
                quantiteor.setRange(1, 10000)
                quantiteor.setSuffix('  QX')
                quantiteor.setSpecialValueText(" ")
                quantiteor.setValue(0.0)
                quantiteor.resize(180, 30)
                quantiteor.move(240, 190)
                ok_button = QtWidgets.QPushButton("OK", dialogor)
                cancel_button = QtWidgets.QPushButton("Cancel", dialogor)
                dialogor.addButton(ok_button, QtWidgets.QMessageBox.ButtonRole.ActionRole)
                dialogor.addButton(cancel_button, QtWidgets.QMessageBox.ButtonRole.ActionRole)
                dialogor.exec()
                current_date = QtCore.QDate.currentDate().toString(QtCore.QDate.currentDate().toString("yyyy-MM-dd"))
                current_day = current_date.split("-")[2]
                current_month = current_date.split("-")[1]
                current_year = current_date.split("-")[0]
                current_daya = f"{current_day}-{current_month}-{current_year}"

                if dialogor.clickedButton() == ok_button:
                    producteur = nomproductureor.text()
                    pere = pereor.text()
                    quantite = quantiteor.text()
                    pointdecolect = pointdecollector.currentText()
                    mator = mator.text()
                    psor = psor.text()

                    eticketorge = DocxTemplate("eticket/Eticket_BleTendre/Eticket_BleTendre.docx")
                    eticketorge.render(
                        {"dt": current_date, "ptt": pointdecolect, "nmp": producteur, "mat": mator, "qtt": quantite,
                         "ps": psor, "per": pere})
                    name = f"B.D_{producteur}_{current_daya}.docx"
                    eticketorge.save("eticket/Eticket_BleDur/" + name)
                    doc_names = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    doc_pdf = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False).name
                    eticketorge.save(doc_names)
                    try:
                        if doc_names:
                            a = self.progress_bar()
                            sys.stderr = open("consoleoutput.log", "w")
                            convert(doc_names, doc_pdf)
                            # Open the resulting .pdf file using the default associated application
                            # os.startfile(doc_pdf, 'open')
                            app_path = 'C:\\Program Files\\Okular\\bin\\okular.exe'
                            subprocess.Popen([app_path, doc_pdf])
                    except Exception as e:
                        print(e)
            except Exception as e:
                print(e)

        def progress_bar(self):
            self.widgetprogress = QtWidgets.QDialog()
            self.widgetprogress.setStyleSheet(""" QWidget
                                   {
                                       color: #000000;
                                       background-color: #ffffff;
                                       border-width: 1px;
                                       border-color: #1e1e1e;
                                       border-style: solid;
                                       border-radius: 6;
                                       padding: 0px;
                                       font-size: 18px;
                                       padding-left: 1px;
                                       padding-right: 1px
                                   }
                                   QWidget:item:hover
                                   {
                                       background-color: #3daee9;
                                       color: #eff0f1;
                                   }
                                   QWidget:item:selected
                                   {
                                       background-color: #3daee9;
                                   }
                                   QWidget:disabled
                                   {
                                       color: #454545;
                                       background-color: #31363b;
                                   }
                                   QPushButton
                                   {
                                       color: #000000;
                                       background-color:#ade3e7;
                                       border-width: 1px;
                                       border-color: #1e1e1e;
                                       border-style: solid;
                                       border-radius: 6;
                                       padding: 3px;
                                       font-size: 12px;
                                       padding-left: 5px;
                                       padding-right: 5px;
                                       min-width: 40px
                                   }
                                   QPushButton:disabled
                                   {
                                       background-color: #31363b;
                                       border-width: 1px;
                                       border-color: #454545;
                                       border-style: solid;
                                       padding-top: 5px;
                                       padding-bottom: 5px;
                                       padding-left: 10px;
                                       padding-right: 10px;
                                       border-radius: 2px;
                                       color: #454545;
                                   }

                                   QPushButton:pressed
                                   {
                                       background-color: #3daee9;
                                       padding-top: -15px;
                                       padding-bottom: -17px;
                                   }
                                   QPushButton:hover
                                   {
                                       border: 1px solid #ff8c00;
                                       color: #000000;
                                   }
                                    QLabel
                                   {
                                       font-size: 18px;
                                       border: 0px solid orange;
                                   }

                               """)
            self.widgetprogress.setWindowTitle("جاري تحميل الملف يرجى الانتظار ")
            self.widgetprogress.setGeometry(550, 450, 250, 20)
            self.progressBar = QtWidgets.QProgressBar(self.widgetprogress)
            self.progressBar.setGeometry(10, 10, 200, 10)
            self.progressBar.setMinimum(0)
            self.progressBar.setMaximum(100)
            self.progressBar.setStyleSheet("""QProgressBar
           {
           border: solid grey;
           border-radius: 15px;
           color: black;
           }
           QProgressBar::chunk 
           {
           background-color: #05B8CC;
           border-radius :15px;
           }      """)
            self.progressBar.setAlignment(Qt.AlignmentFlag.AlignCenter)
            self.vbox = QVBoxLayout(self.widgetprogress)
            self.vbox.addWidget(self.progressBar)
            self.timer = QtCore.QTimer()
            self.timer.timeout.connect(self.update_progress)
            self.timer.start(5)  # Update progress every
            self.widgetprogress.show()

        def update_progress(self):
            # Simulate file download progress
            current_value = self.progressBar.value()
            if current_value < 100:
                new_value = current_value + 10
                self.progressBar.setValue(new_value)
                if current_value == 99:
                    self.timer.stop()
                    self.progressBar.close()
                    self.widgetprogress.close()

        def agréage(self, MainWindow):
            MainWindow.setObjectName("MainWindow")
            MainWindow.resize(1350, 700)

            self.centralwidget = QtWidgets.QWidget(MainWindow)
            self.centralwidget.setObjectName("centralwidget")
            self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
            self.verticalLayout.setObjectName("verticalLayout")
            self.tabagreage = QtWidgets.QTabWidget(self.centralwidget)

            self.tabagreage.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
            self.tabagreage.setIconSize(QtCore.QSize(20, 20))
            self.tabagreage.setObjectName("tabagreage")

            ####################################################################################
            ########################BLE DUR##############################
            #############################################
            self.tabbldur = QtWidgets.QWidget()
            self.tabbldur.setObjectName("tabbldur")
            self.tabbldur.setStyleSheet("""QToolTip
    {
        border: 1px solid #76797C;
        background-color:  #fff8b0;
        color: white;
        padding: 5px;
        opacity: 200;
    }

    QWidget
    {
        color: #000000;
        background-color: #ffc6c9;
        selection-background-color:#3daee9;
        selection-color: #eff0f1;
        background-clip: border;
        border-image: none;
        border: 0px transparent black;
        outline: 0;
    }

    QWidget:item:hover
    {
        background-color: #3daee9;
        color: #eff0f1;
    }

    QWidget:item:selected
    {
        background-color: #3daee9;
    }



    QWidget:disabled
    {
        color: #454545;
        background-color: #31363b;
    }

    QAbstractItemView
    {
        alternate-background-color: #31363b;
        color: #eff0f1;
        border: 1px solid 3A3939;
        border-radius: 2px;
    }

    QWidget:focus, QMenuBar:focus
    {
        border: 1px solid #3daee9;
    }

    QTabWidget:focus, QCheckBox:focus, QRadioButton:focus, QSlider:focus
    {
        border: none;
    }

    QLineEdit
    {
        background-color: #ffffff;
        padding: 1px;
        border-style: solid;
        border: 1px solid #76797C;
        border-radius: 2px;
        color: #000000;
        font-size:12px;
        font-weight:bold;
    }
    QDoubleSpinBox
    {
        background-color: #ffffff;
        padding: 1px;
        border-style: solid;
        border: 1px solid #76797C;
        border-radius: 2px;
        color:#000000;
        font-size:12px;
        font-weight:bold;

    }
    QDoubleSpinBox::drop-down
    {
        subcontrol-origin: padding;
        subcontrol-position: top right;
        width: 1px;

        border-left-width: 0px;
        border-left-color: #232629;
        border-left-style: solid;
        border-top-right-radius: 1px;
        border-bottom-right-radius: 1px;
    }



    QGroupBox {
        border:1px solid #76797C;
        border-radius: 2px;
        margin-top: 20px;
    }

    QGroupBox::title {
        subcontrol-origin: margin;
        subcontrol-position: top center;
        padding-left: 10px;
        padding-right: 10px;
        padding-top: 10px;
    }

    QAbstractScrollArea
    {
        border-radius: 2px;
        border: 1px solid #76797C;
        background-color: transparent;
    }

    QScrollBar:horizontal
    {
        height: 15px;
        margin: 3px 15px 3px 15px;
        border: 1px transparent #2A2929;
        border-radius: 4px;
        background-color: #2A2929;
    }

    QScrollBar::handle:horizontal
    {
        background-color: #605F5F;
        min-width: 5px;
        border-radius: 4px;
    }

    QScrollBar::add-line:horizontal
    {
        margin: 0px 3px 0px 3px;
        border-image: url(:/qss_icons/Dark_rc/right_arrow_disabled.png);
        width: 10px;
        height: 10px;
        subcontrol-position: right;
        subcontrol-origin: margin;
    }

    QScrollBar::sub-line:horizontal
    {
        margin: 0px 3px 0px 3px;
        border-image: url(:/qss_icons/Dark_rc/left_arrow_disabled.png);
        height: 10px;
        width: 10px;
        subcontrol-position: left;
        subcontrol-origin: margin;
    }

    QScrollBar::add-line:horizontal:hover,QScrollBar::add-line:horizontal:on
    {
        border-image: url(:/qss_icons/Dark_rc/right_arrow.png);
        height: 10px;
        width: 10px;
        subcontrol-position: right;
        subcontrol-origin: margin;
    }


    QScrollBar::sub-line:horizontal:hover, QScrollBar::sub-line:horizontal:on
    {
        border-image: url(:/qss_icons/Dark_rc/left_arrow.png);
        height: 10px;
        width: 10px;
        subcontrol-position: left;
        subcontrol-origin: margin;
    }

    QScrollBar::up-arrow:horizontal, QScrollBar::down-arrow:horizontal
    {
        background: none;
    }


    QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal
    {
        background: none;
    }

    QScrollBar:vertical
    {
        background-color: #2A2929;
        width: 15px;
        margin: 15px 3px 15px 3px;
        border: 1px transparent #2A2929;
        border-radius: 4px;
    }

    QScrollBar::handle:vertical
    {
        background-color: #605F5F;
        min-height: 5px;
        border-radius: 4px;
    }

    QScrollBar::sub-line:vertical
    {
        margin: 3px 0px 3px 0px;
        border-image: url(:/qss_icons/Dark_rc/up_arrow_disabled.png);
        height: 10px;
        width: 10px;
        subcontrol-position: top;
        subcontrol-origin: margin;
    }

    QScrollBar::add-line:vertical
    {
        margin: 3px 0px 3px 0px;
        border-image: url(:/qss_icons/Dark_rc/down_arrow_disabled.png);
        height: 10px;
        width: 10px;
        subcontrol-position: bottom;
        subcontrol-origin: margin;
    }

    QScrollBar::sub-line:vertical:hover,QScrollBar::sub-line:vertical:on
    {

        border-image: url(:/qss_icons/Dark_rc/up_arrow.png);
        height: 10px;
        width: 10px;
        subcontrol-position: top;
        subcontrol-origin: margin;
    }


    QScrollBar::add-line:vertical:hover, QScrollBar::add-line:vertical:on
    {
        border-image: url(:/qss_icons/Dark_rc/down_arrow.png);
        height: 10px;
        width: 10px;
        subcontrol-position: bottom;
        subcontrol-origin: margin;
    }

    QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical
    {
        background: none;
    }


    QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical
    {
        background: none;
    }

    QTextEdit
    {
        background-color: #fffff1;
        color: #000000;
        border: 1px solid #76797C;
        font-size:12px;
        font-weight:bold;
    }

    QPlainTextEdit
    {
        background-color: #232629;;
        color: #eff0f1;
        border-radius: 2px;
        border: 1px solid #76797C;
    }

    QHeaderView::section
    {
        background-color: #76797C;
        color: #eff0f1;
        padding: 5px;
        border: 1px solid #76797C;
    }

    QSizeGrip {
        image: url(:/qss_icons/Dark_rc/sizegrip.png);
        width: 12px;
        height: 12px;
    }


    QMainWindow::separator
    {
        background-color: #31363b;
        color: white;
        padding-left: 4px;
        spacing: 2px;
        border: 1px dashed #76797C;
    }

    QMainWindow::separator:hover
    {

        background-color: #787876;
        color: white;
        padding-left: 4px;
        border: 1px solid #76797C;
        spacing: 2px;
    }


    QMenu::separator
    {
        height: 1px;
        background-color: #76797C;
        color: white;
        padding-left: 4px;
        margin-left: 10px;
        margin-right: 5px;
    }


    QFrame
    {
        border-radius: 2px;
        border: 1px solid #76797C;
    }

    QFrame[frameShape="0"]
    {
        border-radius: 2px;
        border: 1px transparent #76797C;
    }

    QStackedWidget
    {
        border: 1px transparent black;
    }


    QPushButton
    {
        color: #000000;
        background-color:#84dbc8;
        border-width: 1px;
        border-color: #1e1e1e;
        border-style: solid;
        border-radius: 6;
        padding: 3px;
        font-size: 12px;
        padding-left: 5px;
        padding-right: 5px;
        min-width: 40px;

    }

    QPushButton:disabled
    {
        background-color: #31363b;
        border-width: 1px;
        border-color: #454545;
        border-style: solid;
        padding-top: 5px;
        padding-bottom: 5px;
        padding-left: 10px;
        padding-right: 10px;
        border-radius: 2px;
        color: #454545;
    }

    QPushButton:focus {
        background-color: #3daee9;
        color: white;
    }

    QPushButton:pressed
    {
        background-color: #3daee9;
        padding-top: -15px;
        padding-bottom: -17px;
    }



    QPushButton:checked{
        background-color: #76797C;
        border-color: #6A6969;
    }

    QComboBox:hover,QDoubleSpinBox:Hover,QPushButton:hover,QAbstractSpinBox:hover,QLineEdit:hover,QTextEdit:hover,QPlainTextEdit:hover,QAbstractView:hover,QTreeView:hover
    {
        border: 1px solid #ff8c00;
        color: #000000;
    }

    QComboBox {
    background-color: #ffffff;
    border: 1px solid #76797C;
    color:#000000;
    border-radius: 0.25em;
    padding: 0.10em 0.10em;
    font-size:12px;
    font-weight:bold;
    cursor: pointer;
}

QComboBox::drop-down {
    subcontrol-origin: padding;
    subcontrol-position: top right;
    width: 1.3em;
    border-left: 0px solid #777;
    border-radius: 0.25em;
}

QComboBox::drop-down::icon {
    image: url('E:/pythonProject_moullin-application.3.5/images/down-arroww.png');
}

        QComboBox:on
        {
            padding-top: 0px;
            padding-left: 0px;        
            selection-background-color: #e4f0f1;
        }
        QComboBox QAbstractItemView
        {
            background-color: #ffffff;
            border-radius: 2px;
            border: 1px solid #76797C;
            color:#000000;
            selection-background-color: #000000;
        }

            QComboBox:hover,QDoubleSpinBox:Hover,QPushButton:hover,QAbstractSpinBox:hover,QLineEdit:hover,QTextEdit:hover,QPlainTextEdit:hover,QAbstractView:hover,QTreeView:hover
            {
                border: 1px solid #ff8c00;
                color: #eff0f1;
            }

    QLabel
    {
        border: 2px solid black;
        font-size:13px;
        font-weight:bold;
    }

    QTabWidget{
        border: 0px transparent black;
    }

    QTabWidget::pane {
        border: 1px solid #76797C;
        padding: 5px;
        margin: 0px;
    }

    QTabBar
    {
        qproperty-drawBase: 0;
        left: 5px; /* move to the right by 5px */
        border-radius: 3px;
    }

    QTabBar:focus
    {
        border: 0px transparent black;
    }

    QTabBar::close-button  {
        image: url(:/qss_icons/Dark_rc/close.png);
        background: transparent;
    }

    QTabBar::close-button:hover
    {
        image: url(:/qss_icons/Dark_rc/close-hover.png);
        background: transparent;
    }

    QTabBar::close-button:pressed {
        image: url(:/qss_icons/Dark_rc/close-pressed.png);
        background: transparent;
    }

    /* TOP TABS */
    QTabBar::tab:top {
        color: #eff0f1;
        border: 1px solid #76797C;
        border-bottom: 1px transparent black;
        background-color: #31363b;
        padding: 5px;
        min-width: 50px;
        border-top-left-radius: 2px;
        border-top-right-radius: 2px;
    }

    QTabBar::tab:top:!selected
    {
        color: #eff0f1;
        background-color: #54575B;
        border: 1px solid #76797C;
        border-bottom: 1px transparent black;
        border-top-left-radius: 2px;
        border-top-right-radius: 2px;    
    }

    QTabBar::tab:top:!selected:hover {
        background-color: #3daee9;
    }

    /* BOTTOM TABS */
    QTabBar::tab:bottom {
        color: #eff0f1;
        border: 1px solid #76797C;
        border-top: 1px transparent black;
        background-color: #31363b;
        padding: 5px;
        border-bottom-left-radius: 2px;
        border-bottom-right-radius: 2px;
        min-width: 50px;
    }

    QTabBar::tab:bottom:!selected
    {
        color: #eff0f1;
        background-color: #54575B;
        border: 1px solid #76797C;
        border-top: 1px transparent black;
        border-bottom-left-radius: 2px;
        border-bottom-right-radius: 2px;
    }

    QTabBar::tab:bottom:!selected:hover {
        background-color: #3daee9;
    }

    /* LEFT TABS */
    QTabBar::tab:left {
        color: #eff0f1;
        border: 1px solid #76797C;
        border-left: 1px transparent black;
        background-color: #31363b;
        padding: 5px;
        border-top-right-radius: 2px;
        border-bottom-right-radius: 2px;
        min-height: 50px;
    }

    QTabBar::tab:left:!selected
    {
        color: #eff0f1;
        background-color: #54575B;
        border: 1px solid #76797C;
        border-left: 1px transparent black;
        border-top-right-radius: 2px;
        border-bottom-right-radius: 2px;
    }

    QTabBar::tab:left:!selected:hover {
        background-color: #3daee9;
    }


    /* RIGHT TABS */
    QTabBar::tab:right {
        color: #eff0f1;
        border: 1px solid #76797C;
        border-right: 1px transparent black;
        background-color: #31363b;
        padding: 5px;
        border-top-left-radius: 2px;
        border-bottom-left-radius: 2px;
        min-height: 50px;
    }

    QTabBar::tab:right:!selected
    {
        color: #eff0f1;
        background-color: #54575B;
        border: 1px solid #76797C;
        border-right: 1px transparent black;
        border-top-left-radius: 2px;
        border-bottom-left-radius: 2px;
    }

    QTabBar::tab:right:!selected:hover {
        background-color: #3daee9;
    }

    QTabBar QToolButton::right-arrow:enabled {
         image: url(:/qss_icons/Dark_rc/right_arrow.png);
     }

     QTabBar QToolButton::left-arrow:enabled {
         image: url(:/qss_icons/Dark_rc/left_arrow.png);
     }

    QTabBar QToolButton::right-arrow:disabled {
         image: url(:/qss_icons/Dark_rc/right_arrow_disabled.png);
     }

     QTabBar QToolButton::left-arrow:disabled {
         image: url(:/qss_icons/Dark_rc/left_arrow_disabled.png);
     }


    QDockWidget {
        background: #31363b;
        border: 1px solid #403F3F;
        titlebar-close-icon: url(:/qss_icons/Dark_rc/close.png);
        titlebar-normal-icon: url(:/qss_icons/Dark_rc/undock.png);
    }

    QDockWidget::close-button, QDockWidget::float-button {
        border: 1px solid transparent;
        border-radius: 2px;
        background: transparent;
    }

    QDockWidget::close-button:hover, QDockWidget::float-button:hover {
        background: rgba(255, 255, 255, 10);
    }

    QDockWidget::close-button:pressed, QDockWidget::float-button:pressed {
        padding: 1px -1px -1px 1px;
        background: rgba(255, 255, 255, 10);
    }


    QSlider::groove:horizontal {
        border: 1px solid #565a5e;
        height: 4px;
        background: #565a5e;
        margin: 0px;
        border-radius: 2px;
    }

    QSlider::handle:horizontal {
        background: #232629;
        border: 1px solid #565a5e;
        width: 16px;
        height: 16px;
        margin: -8px 0;
        border-radius: 9px;
    }

    QSlider::groove:vertical {
        border: 1px solid #565a5e;
        width: 4px;
        background: #565a5e;
        margin: 0px;
        border-radius: 3px;
    }

    QSlider::handle:vertical {
        background: #232629;
        border: 1px solid #565a5e;
        width: 16px;
        height: 16px;
        margin: 0 -8px;
        border-radius: 9px;
    }

    QToolButton {
        background-color: transparent;
        border: 1px transparent #76797C;
        border-radius: 2px;
        margin: 3px;
        padding: 5px;
    }

    QToolButton[popupMode="1"] { /* only for MenuButtonPopup */
     padding-right: 20px; /* make way for the popup button */
     border: 1px #76797C;
     border-radius: 5px;
    }

    QToolButton[popupMode="2"] { /* only for InstantPopup */
     padding-right: 10px; /* make way for the popup button */
     border: 1px #76797C;
    }


    QToolButton:hover, QToolButton::menu-button:hover {
        background-color: transparent;
        border: 1px solid #3daee9;
        padding: 5px;
    }

    QToolButton:checked, QToolButton:pressed,
            QToolButton::menu-button:pressed {
        background-color: #3daee9;
        border: 1px solid #3daee9;
        padding: 5px;
    }

    /* the subcontrol below is used only in the InstantPopup or DelayedPopup mode */
    QToolButton::menu-indicator {
        background-color:ff8c00;
        top: -7px; left: -2px; /* shift it a bit */
    }

    /* the subcontrols below are used only in the MenuButtonPopup mode */
    QToolButton::menu-button {
        border: 1px transparent #76797C;
        border-top-right-radius: 6px;
        border-bottom-right-radius: 6px;
        /* 16px width + 4px for border = 20px allocated above */
        width: 16px;
        outline: none;
    }

    QToolButton::menu-arrow {
       background-color:ff8c00;
    }

    QToolButton::menu-arrow:open {
        border: 1px solid #76797C;
    }

    QPushButton::menu-indicator  {
        subcontrol-origin: padding;
        subcontrol-position: bottom right;
        left: 8px;
    }

    QTableView
    {
        border: 1px solid #76797C;
        gridline-color: #31363b;
        background-color: #232629;
    }


    QTableView, QHeaderView
    {
        border-radius: 0px;
    }

    QTableView::item:pressed, QListView::item:pressed, QTreeView::item:pressed  {
        background: #3daee9;
        color: #eff0f1;
    }

    QTableView::item:selected:active, QTreeView::item:selected:active, QListView::item:selected:active  {
        background: #3daee9;
        color: #eff0f1;
    }


    QHeaderView
    {
        background-color: #31363b;
        border: 1px transparent;
        border-radius: 0px;
        margin: 0px;
        padding: 0px;

    }

    QHeaderView::section  {
        background-color: #31363b;
        color: #eff0f1;
        padding: 5px;
        border: 1px solid #76797C;
        border-radius: 0px;
        text-align: center;
    }

    QHeaderView::section::vertical::first, QHeaderView::section::vertical::only-one
    {
        border-top: 1px solid #76797C;
    }

    QHeaderView::section::vertical
    {
        border-top: transparent;
    }

    QHeaderView::section::horizontal::first, QHeaderView::section::horizontal::only-one
    {
        border-left: 1px solid #76797C;
    }

    QHeaderView::section::horizontal
    {
        border-left: transparent;
    }


    QHeaderView::section:checked
     {
        color: white;
        background-color: #334e5e;
     }

     /* style the sort indicator */
    QHeaderView::down-arrow {
        image: url(:/qss_icons/Dark_rc/down_arrow.png);
    }

    QHeaderView::up-arrow {
        image: url(:/qss_icons/Dark_rc/up_arrow.png);
    }


    QTableCornerButton::section {
        background-color: #31363b;
        border: 1px transparent #76797C;
        border-radius: 0px;
    }

    QToolBox  {
        padding: 5px;
        border: 1px transparent black;
    }

    QToolBox::tab {
        color: #eff0f1;
        background-color: #31363b;
        border: 1px solid #76797C;
        border-bottom: 1px transparent #31363b;
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
    }

    QToolBox::tab:selected { /* italicize selected tabs */
        font: italic;
        background-color: #31363b;
        border-color: #3daee9;
     }

    QStatusBar::item {
        border: 0px transparent dark;
     }


    QFrame[height="3"], QFrame[width="3"] {
        background-color: #76797C;
    }




    QDateTimeEdit
    {
        background-color:#ffffff;
        border-style: solid;
        border: 1px solid #76797C;
        border-radius: 2px;
        padding: 1px;
        min-width: 75px;
    }

    QDateTimeEdit 
    {
        padding-top: 2px;
        padding-left: 2px;
        selection-background-color: #ffffff;
    }

    QDateTimeEdit QAbstractItemView
    {
        background-color: #ffffff;
        border-radius: 2px;
        border: 1px solid #3375A3;
        selection-background-color:ff8c00;
    }

    QDateTimeEdit::drop-down
    {
        subcontrol-origin: padding;
        subcontrol-position: top right;
        width: 15px;
        border-left-width: 0px;
        border-left-color: darkgray;
        border-left-style: solid;
        border-top-right-radius: 3px;
        border-bottom-right-radius: 3px;
    }""")
            self.tabagreage.addTab(self.tabbldur, "")
            self.cclstxt = QtWidgets.QLabel("<h2>COOPERATIVE DES CEREALES ET LEGUMES SECS DE RELIZANE<h2/>",
                                            self.tabbldur)
            self.cclstxt.resize(600, 40)
            self.cclstxt.move(400, 2)

            self.font = QtGui.QFont()
            self.font.setBold(True)
            self.font.setPointSize(10)

            self.txtpsfont = QtGui.QFont()
            self.txtpsfont.setBold(True)
            self.txtpsfont.setPointSize(9)

            self.rtotaldemfont = QtGui.QFont("color:black")
            self.rtotaldemfont.setBold(True)
            self.rtotaldemfont.setPointSize(12)

            self.bulletin_agréagetxt = QtWidgets.QLabel("<h2>Bulletin D'Agréage<h2/>", self.tabbldur)
            self.bulletin_agréagetxt.move(600, 30)
            self.bulletin_agréagetxt.resize(200, 40)

            self.éspécetxt = QtWidgets.QLabel("<h2>Espéce:Blé Dur<h2/>", self.tabbldur)
            self.éspécetxt.move(630, 60)

            self.n_bultinbdtxt = QtWidgets.QLabel("N° Bulletin:", self.tabbldur)
            self.n_bultinbdtxt.move(20, 60)
            self.n_bultinbd = QtWidgets.QLineEdit(self.tabbldur, readOnly=True)
            self.n_bultinbd.move(150, 60)
            self.n_bultinbd.resize(150, 30)

            self.nome_du_producteurbdtxt = QtWidgets.QLabel("Nom du Producteur:", self.tabbldur)
            self.nome_du_producteurbdtxt.move(20, 100)
            self.nome_du_producteurbd = QtWidgets.QLineEdit(self.tabbldur)
            self.nome_du_producteurbd.move(150, 98)
            self.nome_du_producteurbd.resize(150, 30)

            self.péretxtbd = QtWidgets.QLabel("Pére:", self.tabbldur)
            self.péretxtbd.setGeometry(QtCore.QRect(315, 98, 100, 20))
            self.pérebd = QtWidgets.QLineEdit(self.tabbldur)
            self.pérebd.setGeometry(QtCore.QRect(410, 98, 150, 30))

            self.n_cartebdtxt = QtWidgets.QLabel("N.C d'identité:", self.tabbldur)
            self.n_cartebdtxt.setGeometry(QtCore.QRect(315, 138, 100, 20))
            self.n_cartebd = QtWidgets.QLineEdit(self.tabbldur)
            self.n_cartebd.setGeometry(QtCore.QRect(410, 138, 150, 30))
            self.n_cartebd.setInputMask('99999999')

            self.imatriculebdtxt = QtWidgets.QLabel("Adresse:", self.tabbldur)
            self.imatriculebdtxt.move(20, 140)
            self.adressebd = QtWidgets.QLineEdit(self.tabbldur)
            self.adressebd.setInputMask("99999-999-99")
            self.adressebd.move(150, 138)
            self.adressebd.resize(150, 30)

            self.pointdecollectbdtxt = QtWidgets.QLabel("Point de collecte", self.tabbldur)
            self.pointdecollectbdtxt.move(20, 180)
            self.pointdecollectbd = QtWidgets.QComboBox(self.tabbldur)
            self.pointdecollectbd.setStyleSheet("background-color:#ffffff;color:#000000")
            self.pointdecollectbd.move(150, 178)
            self.pointdecollectbd.resize(150, 30)
            self.pointdecollectbd.addItem('')
            self.pointdecollectbd.addItem('Dock central')
            self.pointdecollectbd.addItem('Magasin Zemmoura')
            self.pointdecollectbd.addItem('Magasin Kef-lazreg')
            self.pointdecollectbd.addItem('Magasin Messra')
            self.pointdecollectbd.addItem('Marche gros belacel')
            self.pointdecollectbd.addItem('Station Mendes')
            self.pointdecollectbd.addItem('Nouvelles S.Mendes')

            self.dattereceptionbdtxt = QtWidgets.QLabel("Relizane le :", self.tabbldur)
            self.dattereceptionbdtxt.setGeometry(QtCore.QRect(880, 100, 150, 23))
            self.dattereceptiontbd = QtWidgets.QDateTimeEdit(self.tabbldur)
            self.dattereceptiontbd.setGeometry(QtCore.QRect(1000, 100, 150, 30))
            self.datedaytime = QDate.currentDate()
            self.dattereceptiontbd.setDisplayFormat("dd-MM-yyyy hh:mm")
            self.dattereceptiontbd.setDate(self.datedaytime)

            self.agréeeurbdtxt = QtWidgets.QLabel("Nom de l’Agréeur:", self.tabbldur)
            self.agréeeurbdtxt.setGeometry(QtCore.QRect(880, 135, 150, 23))
            self.agréeeurcombobd = QtWidgets.QComboBox(self.tabbldur, editable=True)
            self.agréeeurcombobd.setStyleSheet("background-color:#ffffff;color:#000000")
            self.agréeeurcombobd.addItem("")
            self.agréeeurcombobd.addItem("FELOUAH OMAR")
            self.agréeeurcombobd.addItem("BEKHEDDA AEK")
            self.agréeeurcombobd.addItem("BENAISSA YOUCEF")
            self.agréeeurcombobd.addItem("REZZAG SOFIANE ")
            self.agréeeurcombobd.addItem("BELBACHA M.NADIR")
            self.agréeeurcombobd.move(1000, 135)
            self.agréeeurcombobd.resize(150, 30)

            self.quantitebdtxt = QtWidgets.QLabel("Quantité", self.tabbldur)
            self.quantitebdtxt.setGeometry(QtCore.QRect(880, 180, 150, 23))

            self.quantitebd = QtWidgets.QDoubleSpinBox(self.tabbldur)
            self.quantitebd.setRange(1, 10000)
            self.quantitebd.setSuffix('  QX')
            self.quantitebd.setSpecialValueText(" ")
            self.quantitebd.setGeometry(QtCore.QRect(1000, 178, 150, 30))

            self.paramétrebd = QtWidgets.QLabel("Paramètre", self.tabbldur)
            self.paramétrebd.move(30, 205)
            self.paramétrebd.resize(90, 20)
            self.paramétrebd.setFont(self.font)
            self.txtpsfontbd = QtGui.QFont()
            self.txtpsfontbd.setBold(True)
            self.txtpsfontbd.setPointSize(9)
            ################Limites(sans bon ni réf)###############
            self.valeurbd = QtWidgets.QLabel("", self.tabbldur)
            self.valeurbd.move(170, 205)
            self.valeurbd.resize(145, 0)
            self.valeurbd.setFont(self.font)
            ######################Limites(sans bon ni réf)################
            self.psbd = QtWidgets.QLineEdit("Poids spécifique (kg/hl)", self.tabbldur, readOnly=True)
            self.psbd.resize(369, 20)
            self.psbd.move(30, 230)
            self.psbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.psbd.setFont(self.txtpsfont)
            self.psbd.setStyleSheet(" border: 2px solid bleu ;border-radius: 4px;padding: 0px")
            ###############################humidite#############
            self.humiditebd = QtWidgets.QLineEdit("Teneur en eau(%)", self.tabbldur, readOnly=True)
            self.humiditebd.resize(369, 20)
            self.humiditebd.move(30, 251)
            self.humiditebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.humiditebd.setFont(self.txtpsfont)

            #######################ergot#########################
            self.ergotbd = QtWidgets.QLineEdit("Ergo(%  ", self.tabbldur, readOnly=True)
            self.ergotbd.resize(369, 20)
            self.ergotbd.move(30, 272)
            self.ergotbd.setStyleSheet("background-color: #232629")
            self.ergotbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.ergotbd.setFont(self.txtpsfont)

            #########################Graines nuisibles (%)##########
            self.matiére20mm = QtWidgets.QLineEdit("Matiéres qui passent à travers \nle tamis 20 mm x 2.1 mm ",
                                                   self.tabbldur, readOnly=True)
            self.matiére20mm.resize(369, 20)
            self.matiére20mm.move(30, 293)
            self.matiére20mm.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.matiére20mm.setFont(self.txtpsfont)
            #############################Débris végétaux (%)########
            self.débrisvébd = QtWidgets.QLineEdit("Les débris végétaux et \nles éléments minéreaux(%)", self.tabbldur,
                                                  readOnly=True)
            self.débrisvébd.resize(369, 20)
            self.débrisvébd.move(30, 314)
            self.débrisvébd.setFont(self.txtpsfont)
            self.débrisvébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Matière inerte (%)################
            self.grainnuisiblebd = QtWidgets.QLineEdit("Graines nuisibles(%)", self.tabbldur, readOnly=True)
            self.grainnuisiblebd.resize(369, 20)
            self.grainnuisiblebd.move(30, 335)
            self.grainnuisiblebd.setFont(self.txtpsfont)
            self.grainnuisiblebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ################################Grains chauffés (%)############################
            self.totalprembd = QtWidgets.QLineEdit("Total(%)", self.tabbldur, readOnly=True)
            self.totalprembd.resize(369, 20)
            self.totalprembd.move(30, 356)
            self.totalprembd.setFont(self.txtpsfont)
            self.totalprembd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################Grains sans valeur (%)#######################################
            self.grainscassébd = QtWidgets.QLineEdit("Grains cassés(%)", self.tabbldur, readOnly=True)
            self.grainscassébd.resize(369, 20)
            self.grainscassébd.move(30, 377)
            self.grainscassébd.setFont(self.txtpsfont)
            self.grainscassébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Grains cariés##########################################
            self.grainsboutésbd = QtWidgets.QLineEdit("Grains fortement boutés", self.tabbldur, readOnly=True)
            self.grainsboutésbd.resize(369, 20)
            self.grainsboutésbd.move(30, 398)
            self.grainsboutésbd.setFont(self.txtpsfont)
            self.grainsboutésbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")

            #######################################Total(%) 1er#####################################################
            self.grainsrouxbd = QtWidgets.QLineEdit("Grains Roux", self.tabbldur, readOnly=True)
            self.grainsrouxbd.resize(369, 20)
            self.grainsrouxbd.move(30, 419)
            self.grainsrouxbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.grainsrouxbd.setFont(self.txtpsfont)
            ##############################################Grains cassés (%) #########################################################
            self.grainfortementmouchtébd = QtWidgets.QLineEdit("Grains fortement mouchtés(%)", self.tabbldur,
                                                               readOnly=True)
            self.grainfortementmouchtébd.move(30, 440)
            self.grainfortementmouchtébd.resize(369, 20)
            self.grainfortementmouchtébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.grainfortementmouchtébd.setFont(self.txtpsfont)
            #########################################################Gains échaudés (%)#####################################################
            self.grainepunaisésbd = QtWidgets.QLineEdit("Gains punaisés(%)", self.tabbldur, readOnly=True)
            self.grainepunaisésbd.move(30, 461)
            self.grainepunaisésbd.resize(369, 20)
            self.grainepunaisésbd.setFont(self.txtpsfont)
            self.grainepunaisésbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #####################################################Grains maigres (%)########################################################
            self.grainpiquebd = QtWidgets.QLineEdit("Grains piqués(%) ", self.tabbldur, readOnly=True)
            self.grainpiquebd.move(30, 482)
            self.grainpiquebd.resize(369, 20)
            self.grainpiquebd.setFont(self.txtpsfont)
            self.grainpiquebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##########################################################Grains germés (%)###################################################
            self.totaldembd = QtWidgets.QLineEdit("Total (%)", self.tabbldur, readOnly=True)
            self.totaldembd.move(30, 503)
            self.totaldembd.resize(369, 20)
            self.totaldembd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.totaldembd.setFont(self.txtpsfont)
            ##########################################################Grain punaisés (%)#########################################################
            self.grainmitadinésbd = QtWidgets.QLineEdit("Grain mitadinés(%) ", self.tabbldur, readOnly=True)
            self.grainmitadinésbd.move(30, 524)
            self.grainmitadinésbd.resize(369, 20)
            self.grainmitadinésbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.grainmitadinésbd.setFont(self.txtpsfont)

            #######################################################################Grains piqués (%)##########################################
            self.bletendredansbledurbd = QtWidgets.QLineEdit("Blé tendre dans blé dure (%)  ", self.tabbldur,
                                                             readOnly=True)
            self.bletendredansbledurbd.move(30, 545)
            self.bletendredansbledurbd.resize(369, 20)
            self.bletendredansbledurbd.setFont(self.txtpsfont)
            self.bletendredansbledurbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################################################Grains boutés « faible » (%)#######################################

            ####################################################################Grains boutés  « forte » (%)######################################
            self.totalmitadinésbd = QtWidgets.QLineEdit("Total (%)", self.tabbldur, readOnly=True)
            self.totalmitadinésbd.move(30, 566)
            self.totalmitadinésbd.resize(369, 20)
            self.totalmitadinésbd.setFont(self.txtpsfont)
            self.totalmitadinésbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")

            self.totalbiniEtrefaction = QtWidgets.QLineEdit("\t\tTotal de bonification et réfaction", self.tabbldur,
                                                            readOnly=True)
            self.totalbiniEtrefaction.move(30, 587)
            self.totalbiniEtrefaction.resize(470, 30)
            self.totalbiniEtrefaction.setFont(self.txtpsfont)
            self.totalbiniEtrefaction.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")

            #################label valeure##############
            self.valeurbd = QtWidgets.QLabel("valeur", self.tabbldur)
            self.valeurbd.move(400, 205)
            self.valeurbd.resize(80, 20)
            self.valeurbd.setFont(self.font)
            ######################Limites(sans bon ni réf)################
            self.vpsbd = QtWidgets.QDoubleSpinBox(self.tabbldur)
            self.vpsbd.setDecimals(3)

            self.vpsbd.setSpecialValueText(' ')
            self.vpsbd.resize(100, 20)
            self.vpsbd.move(400, 230)
            self.vpsbd.setFont(self.txtpsfont)
            self.vpsbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ###############################humidite#############
            self.vhumiditebd = QtWidgets.QDoubleSpinBox(self.tabbldur)
            self.vhumiditebd.setRange(3, 17)
            self.vhumiditebd.resize(100, 20)
            self.vhumiditebd.setSpecialValueText(' ')
            self.vhumiditebd.move(400, 251)
            self.vhumiditebd.setFont(self.txtpsfont)
            self.vhumiditebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################ergot#########################
            self.vergotbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=False)
            self.vergotbd.setRange(0, 10)
            self.vergotbd.setSpecialValueText(' ')
            self.vergotbd.resize(100, 20)
            self.vergotbd.move(400, 272)
            self.vergotbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Graines nuisibles (%)##########
            self.vmatiére20mmbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=False)
            self.vmatiére20mmbd.setRange(0, 10)
            self.vmatiére20mmbd.setSpecialValueText(' ')
            self.vmatiére20mmbd.resize(100, 20)
            self.vmatiére20mmbd.move(400, 293)
            self.vmatiére20mmbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #############################Débris végétaux (%)########
            self.vdébrisvébd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=False)
            self.vdébrisvébd.setRange(0, 10)
            self.vdébrisvébd.setSpecialValueText(' ')
            self.vdébrisvébd.resize(100, 20)
            self.vdébrisvébd.move(400, 314)
            self.vdébrisvébd.setFont(self.txtpsfont)
            self.vdébrisvébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Matière inerte (%)################
            self.vgrainnuisiblebd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=False)
            self.vgrainnuisiblebd.setRange(0, 10)
            self.vgrainnuisiblebd.setSpecialValueText(' ')
            self.vgrainnuisiblebd.resize(100, 20)
            self.vgrainnuisiblebd.move(400, 335)
            self.vgrainnuisiblebd.setFont(self.txtpsfont)
            self.vgrainnuisiblebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ################################Grains chauffés (%)############################
            self.vtotalprembd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.vtotalprembd.setRange(0, 10)
            self.vtotalprembd.setDecimals(3)
            self.vtotalprembd.setSpecialValueText(' ')
            self.vtotalprembd.resize(100, 20)
            self.vtotalprembd.move(400, 356)
            self.vtotalprembd.setFont(self.txtpsfont)
            self.vtotalprembd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################Grains sans valeur (%)#######################################
            self.vgrainscassébd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=False)
            self.vgrainscassébd.setSpecialValueText(' ')
            self.vgrainscassébd.setRange(0, 30)
            self.vgrainscassébd.resize(100, 20)
            self.vgrainscassébd.move(400, 377)
            self.vgrainscassébd.setFont(self.txtpsfont)
            self.vgrainscassébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Grains cariés##########################################
            self.vgrainsboutésbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=False)
            self.vgrainsboutésbd.setSpecialValueText(' ')
            self.vgrainsboutésbd.setRange(0, 10)
            self.vgrainsboutésbd.resize(100, 20)
            self.vgrainsboutésbd.move(400, 398)
            self.vgrainsboutésbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Total(%) 1er#####################################################
            self.vgrainsrouxbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=False)
            self.vgrainsrouxbd.setSpecialValueText(' ')
            self.vgrainsrouxbd.setRange(0, 10)
            self.vgrainsrouxbd.resize(100, 20)
            self.vgrainsrouxbd.move(400, 419)
            self.vgrainsrouxbd.setFont(self.txtpsfont)
            self.vgrainsrouxbd.setStyleSheet(
                "background-color:#ffffff;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##############################################Grains cassés (%) #########################################################
            self.vgrainfortementmouchtébd = QtWidgets.QDoubleSpinBox(self.tabbldur)
            self.vgrainfortementmouchtébd.move(400, 440)
            self.vgrainfortementmouchtébd.resize(100, 20)
            self.vgrainfortementmouchtébd.setRange(0, 10)
            self.vgrainfortementmouchtébd.setSpecialValueText(" ")
            self.vgrainfortementmouchtébd.setFont(self.txtpsfont)
            self.vgrainfortementmouchtébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################################################Gains échaudés (%)#####################################################
            self.vgrainepunaisésbd = QtWidgets.QDoubleSpinBox(self.tabbldur)
            self.vgrainepunaisésbd.setSpecialValueText(" ")
            self.vgrainepunaisésbd.setRange(0, 10)
            self.vgrainepunaisésbd.move(400, 461)
            self.vgrainepunaisésbd.resize(100, 20)
            self.vgrainepunaisésbd.setFont(self.txtpsfont)
            self.vgrainepunaisésbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #####################################################Grains maigres (%)########################################################
            self.vgrainpiquebd = QtWidgets.QDoubleSpinBox(self.tabbldur)
            self.vgrainpiquebd.setRange(0, 10)
            self.vgrainpiquebd.setSpecialValueText(" ")
            self.vgrainpiquebd.move(400, 482)
            self.vgrainpiquebd.setFont(self.txtpsfont)
            self.vgrainpiquebd.resize(100, 20)
            self.vgrainpiquebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grains germés (%)###################################################
            self.vtotaldembd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.vtotaldembd.move(400, 503)
            self.vtotaldembd.resize(100, 20)
            self.vtotaldembd.setSpecialValueText('  ')
            self.vtotaldembd.setFont(self.txtpsfont)
            self.vtotaldembd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grain punaisés (%)#########################################################
            self.vgrainmitadinésbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=False)
            self.vgrainmitadinésbd.move(400, 524)
            self.vgrainmitadinésbd.setRange(0, 100)
            self.vgrainmitadinésbd.resize(100, 20)
            self.vgrainmitadinésbd.setSpecialValueText('   ')
            self.vgrainmitadinésbd.setFont(self.txtpsfont)
            self.vgrainmitadinésbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains piqués (%)##########################################
            self.vbletendredansbledurbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=False)
            self.vbletendredansbledurbd.move(400, 545)
            self.vbletendredansbledurbd.resize(100, 20)
            self.vbletendredansbledurbd.setSpecialValueText('  ')
            self.vbletendredansbledurbd.setFont(self.txtpsfont)
            self.vbletendredansbledurbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains boutés « faible » (%)#######################################

            ####################################################################Grains boutés  « forte » (%)######################################
            self.vtotalmitadinésbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.vtotalmitadinésbd.move(400, 566)
            self.vtotalmitadinésbd.resize(100, 20)
            self.vtotalmitadinésbd.setSpecialValueText('  ')
            self.vtotalmitadinésbd.setFont(self.txtpsfont)
            self.vtotalmitadinésbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")

            #######################################################réfaction##############################################
            #################label valeure##############
            self.rvaleurbd = QtWidgets.QLabel("Réfaction (DA)", self.tabbldur)
            self.rvaleurbd.move(501, 205)
            self.rvaleurbd.resize(100, 20)
            self.rvaleurbd.setFont(self.font)
            ######################Limites(sans bon ni réf)################
            self.rpsbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)

            self.rpsbd.setSpecialValueText(' ')
            self.rpsbd.resize(100, 20)
            self.rpsbd.move(501, 230)
            self.rpsbd.setFont(self.txtpsfont)
            self.rpsbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ###############################humidite#############
            self.rhumiditebd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.rhumiditebd.setRange(8, 14)
            self.rhumiditebd.resize(100, 20)
            self.rhumiditebd.setSpecialValueText(' ')
            self.rhumiditebd.move(501, 251)
            self.rhumiditebd.setFont(self.txtpsfont)
            self.rhumiditebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################ergot#########################
            self.rergotbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.rergotbd.setRange(0, 10)
            self.rergotbd.setSpecialValueText(' ')
            self.rergotbd.resize(100, 20)
            self.rergotbd.move(501, 272)
            self.rergotbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Graines nuisibles (%)##########
            self.rmatiére20mmbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.rmatiére20mmbd.setRange(0, 10)
            self.rmatiére20mmbd.setSpecialValueText(' ')
            self.rmatiére20mmbd.resize(100, 20)
            self.rmatiére20mmbd.move(501, 293)
            self.rmatiére20mmbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #############################Débris végétaux (%)########
            self.rdébrisvébd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.rdébrisvébd.setRange(0, 10)
            self.rdébrisvébd.setSpecialValueText(' ')
            self.rdébrisvébd.resize(100, 20)
            self.rdébrisvébd.move(501, 314)
            self.rdébrisvébd.setFont(self.txtpsfont)
            self.rdébrisvébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Matière inerte (%)################
            self.rgrainnuisiblebd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.rgrainnuisiblebd.setRange(0, 10)
            self.rgrainnuisiblebd.setSpecialValueText(' ')
            self.rgrainnuisiblebd.resize(100, 20)
            self.rgrainnuisiblebd.move(501, 335)
            self.rgrainnuisiblebd.setFont(self.txtpsfont)
            self.rgrainnuisiblebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ################################Grains chauffés (%)############################
            self.rtotalprembd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.rtotalprembd.setRange(0, 10)
            self.rtotalprembd.setDecimals(3)
            self.rtotalprembd.setSpecialValueText(' ')
            self.rtotalprembd.resize(100, 20)
            self.rtotalprembd.move(501, 356)
            self.rtotalprembd.setFont(self.txtpsfont)
            self.rtotalprembd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################Grains sans valeur (%)#######################################
            self.rgrainscassébd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.rgrainscassébd.setSpecialValueText(' ')
            self.rgrainscassébd.setDecimals(3)
            self.rgrainscassébd.resize(100, 20)
            self.rgrainscassébd.move(501, 377)
            self.rgrainscassébd.setFont(self.txtpsfont)
            self.rgrainscassébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Grains cariés##########################################
            self.rgrainsboutésbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.rgrainsboutésbd.setSpecialValueText(' ')
            self.rgrainsboutésbd.setRange(0, 10)
            self.rgrainsboutésbd.resize(100, 20)
            self.rgrainsboutésbd.move(501, 398)
            self.rgrainsboutésbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Total(%) 1er#####################################################
            self.rgrainsrouxbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.rgrainsrouxbd.setSpecialValueText(' ')
            self.rgrainsrouxbd.setRange(0, 10)
            self.rgrainsrouxbd.resize(100, 20)
            self.rgrainsrouxbd.move(501, 419)
            self.rgrainsrouxbd.setFont(self.txtpsfont)
            self.rgrainsrouxbd.setStyleSheet(
                "background-color:#ffffff;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##############################################Grains cassés (%) #########################################################
            self.rgrainfortementmouchtébd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.rgrainfortementmouchtébd.move(501, 440)
            self.rgrainfortementmouchtébd.resize(100, 20)
            self.rgrainfortementmouchtébd.setRange(0, 10)
            self.rgrainfortementmouchtébd.setSpecialValueText(" ")
            self.rgrainfortementmouchtébd.setFont(self.txtpsfont)
            self.rgrainfortementmouchtébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################################################Gains échaudés (%)#####################################################
            self.rgrainepunaisésbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.rgrainepunaisésbd.setSpecialValueText(" ")
            self.rgrainepunaisésbd.setRange(0, 10)
            self.rgrainepunaisésbd.move(501, 461)
            self.rgrainepunaisésbd.resize(100, 20)
            self.rgrainepunaisésbd.setFont(self.txtpsfont)
            self.rgrainepunaisésbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #####################################################Grains maigres (%)########################################################
            self.rgrainpiquebd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.rgrainpiquebd.setRange(0, 10)
            self.rgrainpiquebd.setSpecialValueText(" ")
            self.rgrainpiquebd.move(501, 482)
            self.rgrainpiquebd.setFont(self.txtpsfont)
            self.rgrainpiquebd.resize(100, 20)
            self.rgrainpiquebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grains germés (%)###################################################
            self.rtotaldembd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.rtotaldembd.move(501, 503)
            self.rtotaldembd.resize(100, 20)
            self.rtotaldembd.setSpecialValueText('  ')
            self.rtotaldembd.setFont(self.txtpsfont)
            self.rtotaldembd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grain punaisés (%)#########################################################
            self.rgrainmitadinésbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.rgrainmitadinésbd.move(501, 524)
            self.rgrainmitadinésbd.resize(100, 20)
            self.rgrainmitadinésbd.setSpecialValueText('   ')
            self.rgrainmitadinésbd.setFont(self.txtpsfont)
            self.rgrainmitadinésbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains piqués (%)##########################################
            self.rbletendredansbledurbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.rbletendredansbledurbd.move(501, 545)
            self.rbletendredansbledurbd.resize(100, 20)
            self.rbletendredansbledurbd.setSpecialValueText('  ')
            self.rbletendredansbledurbd.setFont(self.txtpsfont)
            self.rbletendredansbledurbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains boutés « faible » (%)#######################################

            ####################################################################Grains boutés  « forte » (%)######################################
            self.rtotalmitadinésbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.rtotalmitadinésbd.move(501, 566)
            self.rtotalmitadinésbd.resize(100, 20)
            self.rtotalmitadinésbd.setSpecialValueText('  ')
            self.rtotalmitadinésbd.setFont(self.txtpsfont)
            self.rtotalmitadinésbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")

            self.rtotalbiniEtrefaction = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.rtotalbiniEtrefaction.move(501, 587)
            self.rtotalbiniEtrefaction.resize(100, 30)
            self.rtotalbiniEtrefaction.setSpecialValueText('  ')
            self.rtotalbiniEtrefaction.setFont(self.txtpsfont)
            self.rtotalbiniEtrefaction.setStyleSheet(
                "background-color:#e22630;border: 2px solid bleu;border-radius: 4px;padding: 2px")

            ###################################################bonifécation#####################################################
            #################label valeure##############
            self.bvaleurbd = QtWidgets.QLabel("Bonification(DA)", self.tabbldur)
            self.bvaleurbd.move(602, 205)
            self.bvaleurbd.resize(103, 20)
            self.bvaleurbd.setFont(self.font)
            ######################Limites(sans bon ni réf)################
            self.bpsbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.bpsbd.setSpecialValueText(' ')
            self.bpsbd.resize(100, 20)
            self.bpsbd.move(602, 230)
            self.bpsbd.setFont(self.txtpsfont)
            self.bpsbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ###############################humidite#############
            self.bhumiditebd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.bhumiditebd.setRange(8, 14)
            self.bhumiditebd.resize(100, 20)
            self.bhumiditebd.setSpecialValueText(' ')
            self.bhumiditebd.move(602, 251)
            self.bhumiditebd.setFont(self.txtpsfont)
            self.bhumiditebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################ergot#########################
            self.bergotbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.bergotbd.setRange(0, 10)
            self.bergotbd.setSpecialValueText(' ')
            self.bergotbd.resize(100, 20)
            self.bergotbd.move(602, 272)
            self.bergotbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Graines nuisibles (%)##########
            self.bmatiére20mmbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.bmatiére20mmbd.setRange(0, 10)
            self.bmatiére20mmbd.setSpecialValueText(' ')
            self.bmatiére20mmbd.resize(100, 20)
            self.bmatiére20mmbd.move(602, 293)
            self.bmatiére20mmbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #############################Débris végétaux (%)########
            self.bdébrisvébd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.bdébrisvébd.setSpecialValueText(' ')
            self.bdébrisvébd.resize(100, 20)
            self.bdébrisvébd.move(602, 314)
            self.bdébrisvébd.setFont(self.txtpsfont)
            self.bdébrisvébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Matière inerte (%)################
            self.bgrainnuisiblebd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.bgrainnuisiblebd.setSpecialValueText(' ')
            self.bgrainnuisiblebd.resize(100, 20)
            self.bgrainnuisiblebd.move(602, 335)
            self.bgrainnuisiblebd.setFont(self.txtpsfont)
            self.bgrainnuisiblebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ################################Grains chauffés (%)############################
            self.btotalprembd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.btotalprembd.setSpecialValueText(' ')
            self.btotalprembd.resize(100, 20)
            self.btotalprembd.move(602, 356)
            self.btotalprembd.setFont(self.txtpsfont)
            self.btotalprembd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################Grains sans valeur (%)#######################################
            self.bgrainscassébd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.bgrainscassébd.setSpecialValueText(' ')
            self.bgrainscassébd.resize(100, 20)
            self.bgrainscassébd.move(602, 377)
            self.bgrainscassébd.setFont(self.txtpsfont)
            self.bgrainscassébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Grains cariés##########################################
            self.bgrainsboutésbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.bgrainsboutésbd.setSpecialValueText(' ')
            self.bgrainsboutésbd.resize(100, 20)
            self.bgrainsboutésbd.move(602, 398)
            self.bgrainsboutésbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Total(%) 1er#####################################################
            self.bgrainsrouxbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.bgrainsrouxbd.setSpecialValueText(' ')
            self.bgrainsrouxbd.resize(100, 20)
            self.bgrainsrouxbd.move(602, 419)
            self.bgrainsrouxbd.setFont(self.txtpsfont)
            self.bgrainsrouxbd.setStyleSheet(
                "background-color:#ffffff;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##############################################Grains cassés (%) #########################################################
            self.bgrainfortementmouchtébd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.bgrainfortementmouchtébd.move(602, 440)
            self.bgrainfortementmouchtébd.resize(100, 20)
            self.bgrainfortementmouchtébd.setSpecialValueText(" ")
            self.bgrainfortementmouchtébd.setFont(self.txtpsfont)
            self.bgrainfortementmouchtébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################################################Gains échaudés (%)#####################################################
            self.bgrainepunaisésbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.bgrainepunaisésbd.setSpecialValueText(" ")
            self.bgrainepunaisésbd.move(602, 461)
            self.bgrainepunaisésbd.resize(100, 20)
            self.bgrainepunaisésbd.setFont(self.txtpsfont)
            self.bgrainepunaisésbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #####################################################Grains maigres (%)########################################################
            self.bgrainpiquebd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.bgrainpiquebd.setSpecialValueText(" ")
            self.bgrainpiquebd.move(602, 482)
            self.bgrainpiquebd.setFont(self.txtpsfont)
            self.bgrainpiquebd.resize(100, 20)
            self.bgrainpiquebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grains germés (%)###################################################
            self.btotaldembd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.btotaldembd.move(602, 503)
            self.btotaldembd.resize(100, 20)
            self.btotaldembd.setSpecialValueText('  ')
            self.btotaldembd.setFont(self.txtpsfont)
            self.btotaldembd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grain punaisés (%)#########################################################
            self.bgrainmitadinésbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.bgrainmitadinésbd.move(602, 524)
            self.bgrainmitadinésbd.resize(100, 20)
            self.bgrainmitadinésbd.setSpecialValueText('   ')
            self.bgrainmitadinésbd.setFont(self.txtpsfont)
            self.bgrainmitadinésbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains piqués (%)##########################################
            self.bbletendredansbledurbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.bbletendredansbledurbd.move(602, 545)
            self.bbletendredansbledurbd.resize(100, 20)
            self.bbletendredansbledurbd.setSpecialValueText('  ')
            self.bbletendredansbledurbd.setFont(self.txtpsfont)
            self.bbletendredansbledurbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains boutés « faible » (%)#######################################

            ####################################################################Grains boutés  « forte » (%)######################################
            self.btotalmitadinésbd = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.btotalmitadinésbd.move(602, 566)
            self.btotalmitadinésbd.resize(100, 20)
            self.btotalmitadinésbd.setSpecialValueText('  ')
            self.btotalmitadinésbd.setFont(self.txtpsfont)
            self.btotalmitadinésbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")

            self.btotalbiniEtrefaction = QtWidgets.QDoubleSpinBox(self.tabbldur, readOnly=True)
            self.btotalbiniEtrefaction.move(602, 587)
            self.btotalbiniEtrefaction.resize(100, 30)
            self.btotalbiniEtrefaction.setSpecialValueText('  ')
            self.btotalbiniEtrefaction.setFont(self.txtpsfont)
            self.btotalbiniEtrefaction.setStyleSheet(
                "background-color:#88ffaa;border: 2px solid bleu;border-radius: 4px;padding: 2px")

            self.obesrvationbdtxt = QtWidgets.QLabel("Observation", self.tabbldur)
            self.obesrvationbdtxt.setGeometry(QtCore.QRect(710, 205, 100, 20))

            self.obesrvationbd = QtWidgets.QTextEdit(self.tabbldur)
            self.obesrvationbd.setGeometry(QtCore.QRect(704, 230, 100, 386))
            self.obesrvationbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")

            self.btnsavebd = QtWidgets.QPushButton("ENREGISTRER", self.tabbldur, clicked=lambda: self.add_datta_bd())
            self.btnsavebd.move(820, 230)
            self.btnsavebd.resize(180, 85)

            self.btnimprimejour = QtWidgets.QPushButton("IMPRIMER \nLE JOURNALIER", self.tabbldur,
                                                        clicked=lambda: self.print_day_bd())
            self.btnimprimejour.move(820, 430)
            self.btnimprimejour.resize(180, 85)

            self.btnprintbd = QtWidgets.QPushButton("IMPRIMER", self.tabbldur, clicked=lambda: self.bulletin_bd())
            self.btnprintbd.move(820, 330)
            self.btnprintbd.resize(180, 85)

            self.btnefaceor = QtWidgets.QPushButton("EFACER", self.tabbldur, clicked=lambda: self.clear_bd())
            self.btnefaceor.move(820, 530)
            self.btnefaceor.resize(180, 85)

            self.btnprintbulletindocx = QtWidgets.QPushButton("SELECTIONNE \nBULLETIN", self.tabbldur,
                                                              clicked=lambda: self.printBulltinProducteur())
            self.btnprintbulletindocx.move(1020, 230)
            self.btnprintbulletindocx.resize(180, 85)

            self.btnimprimeticket = QtWidgets.QPushButton("IMPRIMER \nLES TICKET", self.tabbldur,
                                                          clicked=lambda: self.eticket_bledur())
            self.btnimprimeticket.move(1020, 330)
            self.btnimprimeticket.resize(180, 85)

            self.timercalculbd = QTimer()
            self.timercalculbd.timeout.connect(self.calcul_bd)
            self.timercalculbd.setInterval(1000)
            self.timercalculbd.start()

            self.timernumbulltinBd = QTimer()
            self.timernumbulltinBd.timeout.connect(self.number_bulletin_bd)
            self.timernumbulltinBd.setInterval(1000)
            self.timernumbulltinBd.start()

            #####################################################################################
            ######################BLE TENDRE##################################
            ###############################################
            self.tabbltendre = QtWidgets.QWidget()
            self.tabbltendre.setObjectName("tabbltendre")
            self.tabbltendre.setStyleSheet("""QToolTip
    {
        border: 1px solid #76797C;
        background-color:  #fff8b0;
        color: white;
        padding: 5px;
        opacity: 200;
    }

    QWidget
    {
        color: #000000;
        background-color: #D8F9DB;
        selection-background-color:#3daee9;
        selection-color: #eff0f1;
        background-clip: border;
        border-image: none;
        border: 0px transparent black;
        outline: 0;
    }

    QWidget:item:hover
    {
        background-color: #3daee9;
        color: #eff0f1;
    }

    QWidget:item:selected
    {
        background-color: #3daee9;
    }



    QWidget:disabled
    {
        color: #454545;
        background-color: #31363b;
    }

    QAbstractItemView
    {
        alternate-background-color: #31363b;
        color: #eff0f1;
        border: 1px solid 3A3939;
        border-radius: 2px;
    }

    QWidget:focus, QMenuBar:focus
    {
        border: 1px solid #3daee9;
    }

    QTabWidget:focus, QCheckBox:focus, QRadioButton:focus, QSlider:focus
    {
        border: none;
    }

    QLineEdit
    {
        background-color: #ffffff;
        padding: 1px;
        border-style: solid;
        border: 1px solid #76797C;
        border-radius: 2px;
        color: #000000;
        font-size:12px;
        font-weight:bold;
    }
    QDoubleSpinBox
    {
        background-color: #ffffff;
        padding: 1px;
        border-style: solid;
        border: 1px solid #76797C;
        border-radius: 2px;
        color:#000000;
        font-size:12px;
        font-weight:bold;

    }
    QDoubleSpinBox::drop-down
    {
        subcontrol-origin: padding;
        subcontrol-position: top right;
        width: 1px;

        border-left-width: 0px;
        border-left-color: #232629;
        border-left-style: solid;
        border-top-right-radius: 1px;
        border-bottom-right-radius: 1px;
    }



    QGroupBox {
        border:1px solid #76797C;
        border-radius: 2px;
        margin-top: 20px;
    }

    QGroupBox::title {
        subcontrol-origin: margin;
        subcontrol-position: top center;
        padding-left: 10px;
        padding-right: 10px;
        padding-top: 10px;
    }

    QAbstractScrollArea
    {
        border-radius: 2px;
        border: 1px solid #76797C;
        background-color: transparent;
    }

    QScrollBar:horizontal
    {
        height: 15px;
        margin: 3px 15px 3px 15px;
        border: 1px transparent #2A2929;
        border-radius: 4px;
        background-color: #2A2929;
    }

    QScrollBar::handle:horizontal
    {
        background-color: #605F5F;
        min-width: 5px;
        border-radius: 4px;
    }

    QScrollBar::add-line:horizontal
    {
        margin: 0px 3px 0px 3px;
        border-image: url(:/qss_icons/Dark_rc/right_arrow_disabled.png);
        width: 10px;
        height: 10px;
        subcontrol-position: right;
        subcontrol-origin: margin;
    }

    QScrollBar::sub-line:horizontal
    {
        margin: 0px 3px 0px 3px;
        border-image: url(:/qss_icons/Dark_rc/left_arrow_disabled.png);
        height: 10px;
        width: 10px;
        subcontrol-position: left;
        subcontrol-origin: margin;
    }

    QScrollBar::add-line:horizontal:hover,QScrollBar::add-line:horizontal:on
    {
        border-image: url(:/qss_icons/Dark_rc/right_arrow.png);
        height: 10px;
        width: 10px;
        subcontrol-position: right;
        subcontrol-origin: margin;
    }


    QScrollBar::sub-line:horizontal:hover, QScrollBar::sub-line:horizontal:on
    {
        border-image: url(:/qss_icons/Dark_rc/left_arrow.png);
        height: 10px;
        width: 10px;
        subcontrol-position: left;
        subcontrol-origin: margin;
    }

    QScrollBar::up-arrow:horizontal, QScrollBar::down-arrow:horizontal
    {
        background: none;
    }


    QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal
    {
        background: none;
    }

    QScrollBar:vertical
    {
        background-color: #2A2929;
        width: 15px;
        margin: 15px 3px 15px 3px;
        border: 1px transparent #2A2929;
        border-radius: 4px;
    }

    QScrollBar::handle:vertical
    {
        background-color: #605F5F;
        min-height: 5px;
        border-radius: 4px;
    }

    QScrollBar::sub-line:vertical
    {
        margin: 3px 0px 3px 0px;
        border-image: url(:/qss_icons/Dark_rc/up_arrow_disabled.png);
        height: 10px;
        width: 10px;
        subcontrol-position: top;
        subcontrol-origin: margin;
    }

    QScrollBar::add-line:vertical
    {
        margin: 3px 0px 3px 0px;
        border-image: url(:/qss_icons/Dark_rc/down_arrow_disabled.png);
        height: 10px;
        width: 10px;
        subcontrol-position: bottom;
        subcontrol-origin: margin;
    }

    QScrollBar::sub-line:vertical:hover,QScrollBar::sub-line:vertical:on
    {

        border-image: url(:/qss_icons/Dark_rc/up_arrow.png);
        height: 10px;
        width: 10px;
        subcontrol-position: top;
        subcontrol-origin: margin;
    }


    QScrollBar::add-line:vertical:hover, QScrollBar::add-line:vertical:on
    {
        border-image: url(:/qss_icons/Dark_rc/down_arrow.png);
        height: 10px;
        width: 10px;
        subcontrol-position: bottom;
        subcontrol-origin: margin;
    }

    QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical
    {
        background: none;
    }


    QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical
    {
        background: none;
    }

    QTextEdit
    {
        background-color: #fffff1;
        color: #000000;
        border: 1px solid #76797C;
        font-size:12px;
        font-weight:bold;
    }

    QPlainTextEdit
    {
        background-color: #232629;;
        color: #eff0f1;
        border-radius: 2px;
        border: 1px solid #76797C;
    }

    QHeaderView::section
    {
        background-color: #76797C;
        color: #eff0f1;
        padding: 5px;
        border: 1px solid #76797C;
    }

    QSizeGrip {
        image: url(:/qss_icons/Dark_rc/sizegrip.png);
        width: 12px;
        height: 12px;
    }


    QMainWindow::separator
    {
        background-color: #31363b;
        color: white;
        padding-left: 4px;
        spacing: 2px;
        border: 1px dashed #76797C;
    }

    QMainWindow::separator:hover
    {

        background-color: #787876;
        color: white;
        padding-left: 4px;
        border: 1px solid #76797C;
        spacing: 2px;
    }


    QMenu::separator
    {
        height: 1px;
        background-color: #76797C;
        color: white;
        padding-left: 4px;
        margin-left: 10px;
        margin-right: 5px;
    }


    QFrame
    {
        border-radius: 2px;
        border: 1px solid #76797C;
    }

    QFrame[frameShape="0"]
    {
        border-radius: 2px;
        border: 1px transparent #76797C;
    }

    QStackedWidget
    {
        border: 1px transparent black;
    }


    QPushButton
    {
        color: #000000;
        background-color:#84dbc8;
        border-width: 1px;
        border-color: #1e1e1e;
        border-style: solid;
        border-radius: 6;
        padding: 3px;
        font-size: 12px;
        padding-left: 5px;
        padding-right: 5px;
        min-width: 40px;

    }

    QPushButton:disabled
    {
        background-color: #31363b;
        border-width: 1px;
        border-color: #454545;
        border-style: solid;
        padding-top: 5px;
        padding-bottom: 5px;
        padding-left: 10px;
        padding-right: 10px;
        border-radius: 2px;
        color: #454545;
    }

    QPushButton:focus {
        background-color: #3daee9;
        color: white;
    }

    QPushButton:pressed
    {
        background-color: #3daee9;
        padding-top: -15px;
        padding-bottom: -17px;
    }



    QPushButton:checked{
        background-color: #76797C;
        border-color: #6A6969;
    }

    QComboBox:hover,QDoubleSpinBox:Hover,QPushButton:hover,QAbstractSpinBox:hover,QLineEdit:hover,QTextEdit:hover,QPlainTextEdit:hover,QAbstractView:hover,QTreeView:hover
    {
        border: 1px solid #ff8c00;
        color: #000000;
    }

   QComboBox {
    background-color: #ffffff;
    border: 1px solid #76797C;
    color:#000000;
    border-radius: 0.25em;
    padding: 0.10em 0.10em;
    font-size:12px;
    font-weight:bold;
    cursor: pointer;
}

QComboBox::drop-down {
    subcontrol-origin: padding;
    subcontrol-position: top right;
    width: 1.3em;
    border-left: 0px solid #777;
    border-radius: 0.25em;
}

QComboBox::drop-down::icon {
    image: url('E:/pythonProject_moullin-application.3.5/images/down-arroww.png');
}

        QComboBox:on
        {
            padding-top: 0px;
            padding-left: 0px;        
            selection-background-color: #e4f0f1;
        }
        QComboBox QAbstractItemView
        {
            background-color: #ffffff;
            border-radius: 2px;
            border: 1px solid #76797C;
            color:#000000;
            selection-background-color: #000000;
        }

            QComboBox:hover,QDoubleSpinBox:Hover,QPushButton:hover,QAbstractSpinBox:hover,QLineEdit:hover,QTextEdit:hover,QPlainTextEdit:hover,QAbstractView:hover,QTreeView:hover
            {
                border: 1px solid #ff8c00;
                color: #eff0f1;
            }


    QLabel
    {
        border: 2px solid black;
        font-size:13px;
        font-weight:bold;
    }

    QTabWidget{
        border: 0px transparent black;
    }

    QTabWidget::pane {
        border: 1px solid #76797C;
        padding: 5px;
        margin: 0px;
    }

    QTabBar
    {
        qproperty-drawBase: 0;
        left: 5px; /* move to the right by 5px */
        border-radius: 3px;
    }

    QTabBar:focus
    {
        border: 0px transparent black;
    }

    QTabBar::close-button  {
        image: url(:/qss_icons/Dark_rc/close.png);
        background: transparent;
    }

    QTabBar::close-button:hover
    {
        image: url(:/qss_icons/Dark_rc/close-hover.png);
        background: transparent;
    }

    QTabBar::close-button:pressed {
        image: url(:/qss_icons/Dark_rc/close-pressed.png);
        background: transparent;
    }

    /* TOP TABS */
    QTabBar::tab:top {
        color: #eff0f1;
        border: 1px solid #76797C;
        border-bottom: 1px transparent black;
        background-color: #31363b;
        padding: 5px;
        min-width: 50px;
        border-top-left-radius: 2px;
        border-top-right-radius: 2px;
    }

    QTabBar::tab:top:!selected
    {
        color: #eff0f1;
        background-color: #54575B;
        border: 1px solid #76797C;
        border-bottom: 1px transparent black;
        border-top-left-radius: 2px;
        border-top-right-radius: 2px;    
    }

    QTabBar::tab:top:!selected:hover {
        background-color: #3daee9;
    }

    /* BOTTOM TABS */
    QTabBar::tab:bottom {
        color: #eff0f1;
        border: 1px solid #76797C;
        border-top: 1px transparent black;
        background-color: #31363b;
        padding: 5px;
        border-bottom-left-radius: 2px;
        border-bottom-right-radius: 2px;
        min-width: 50px;
    }

    QTabBar::tab:bottom:!selected
    {
        color: #eff0f1;
        background-color: #54575B;
        border: 1px solid #76797C;
        border-top: 1px transparent black;
        border-bottom-left-radius: 2px;
        border-bottom-right-radius: 2px;
    }

    QTabBar::tab:bottom:!selected:hover {
        background-color: #3daee9;
    }

    /* LEFT TABS */
    QTabBar::tab:left {
        color: #eff0f1;
        border: 1px solid #76797C;
        border-left: 1px transparent black;
        background-color: #31363b;
        padding: 5px;
        border-top-right-radius: 2px;
        border-bottom-right-radius: 2px;
        min-height: 50px;
    }

    QTabBar::tab:left:!selected
    {
        color: #eff0f1;
        background-color: #54575B;
        border: 1px solid #76797C;
        border-left: 1px transparent black;
        border-top-right-radius: 2px;
        border-bottom-right-radius: 2px;
    }

    QTabBar::tab:left:!selected:hover {
        background-color: #3daee9;
    }


    /* RIGHT TABS */
    QTabBar::tab:right {
        color: #eff0f1;
        border: 1px solid #76797C;
        border-right: 1px transparent black;
        background-color: #31363b;
        padding: 5px;
        border-top-left-radius: 2px;
        border-bottom-left-radius: 2px;
        min-height: 50px;
    }

    QTabBar::tab:right:!selected
    {
        color: #eff0f1;
        background-color: #54575B;
        border: 1px solid #76797C;
        border-right: 1px transparent black;
        border-top-left-radius: 2px;
        border-bottom-left-radius: 2px;
    }

    QTabBar::tab:right:!selected:hover {
        background-color: #3daee9;
    }

    QTabBar QToolButton::right-arrow:enabled {
         image: url(:/qss_icons/Dark_rc/right_arrow.png);
     }

     QTabBar QToolButton::left-arrow:enabled {
         image: url(:/qss_icons/Dark_rc/left_arrow.png);
     }

    QTabBar QToolButton::right-arrow:disabled {
         image: url(:/qss_icons/Dark_rc/right_arrow_disabled.png);
     }

     QTabBar QToolButton::left-arrow:disabled {
         image: url(:/qss_icons/Dark_rc/left_arrow_disabled.png);
     }


    QDockWidget {
        background: #31363b;
        border: 1px solid #403F3F;
        titlebar-close-icon: url(:/qss_icons/Dark_rc/close.png);
        titlebar-normal-icon: url(:/qss_icons/Dark_rc/undock.png);
    }

    QDockWidget::close-button, QDockWidget::float-button {
        border: 1px solid transparent;
        border-radius: 2px;
        background: transparent;
    }

    QDockWidget::close-button:hover, QDockWidget::float-button:hover {
        background: rgba(255, 255, 255, 10);
    }

    QDockWidget::close-button:pressed, QDockWidget::float-button:pressed {
        padding: 1px -1px -1px 1px;
        background: rgba(255, 255, 255, 10);
    }


    QSlider::groove:horizontal {
        border: 1px solid #565a5e;
        height: 4px;
        background: #565a5e;
        margin: 0px;
        border-radius: 2px;
    }

    QSlider::handle:horizontal {
        background: #232629;
        border: 1px solid #565a5e;
        width: 16px;
        height: 16px;
        margin: -8px 0;
        border-radius: 9px;
    }

    QSlider::groove:vertical {
        border: 1px solid #565a5e;
        width: 4px;
        background: #565a5e;
        margin: 0px;
        border-radius: 3px;
    }

    QSlider::handle:vertical {
        background: #232629;
        border: 1px solid #565a5e;
        width: 16px;
        height: 16px;
        margin: 0 -8px;
        border-radius: 9px;
    }

    QToolButton {
        background-color: transparent;
        border: 1px transparent #76797C;
        border-radius: 2px;
        margin: 3px;
        padding: 5px;
    }

    QToolButton[popupMode="1"] { /* only for MenuButtonPopup */
     padding-right: 20px; /* make way for the popup button */
     border: 1px #76797C;
     border-radius: 5px;
    }

    QToolButton[popupMode="2"] { /* only for InstantPopup */
     padding-right: 10px; /* make way for the popup button */
     border: 1px #76797C;
    }


    QToolButton:hover, QToolButton::menu-button:hover {
        background-color: transparent;
        border: 1px solid #3daee9;
        padding: 5px;
    }

    QToolButton:checked, QToolButton:pressed,
            QToolButton::menu-button:pressed {
        background-color: #3daee9;
        border: 1px solid #3daee9;
        padding: 5px;
    }

    /* the subcontrol below is used only in the InstantPopup or DelayedPopup mode */
    QToolButton::menu-indicator {
        background-color:ff8c00;
        top: -7px; left: -2px; /* shift it a bit */
    }

    /* the subcontrols below are used only in the MenuButtonPopup mode */
    QToolButton::menu-button {
        border: 1px transparent #76797C;
        border-top-right-radius: 6px;
        border-bottom-right-radius: 6px;
        /* 16px width + 4px for border = 20px allocated above */
        width: 16px;
        outline: none;
    }

    QToolButton::menu-arrow {
       background-color:ff8c00;
    }

    QToolButton::menu-arrow:open {
        border: 1px solid #76797C;
    }

    QPushButton::menu-indicator  {
        subcontrol-origin: padding;
        subcontrol-position: bottom right;
        left: 8px;
    }

    QTableView
    {
        border: 1px solid #76797C;
        gridline-color: #31363b;
        background-color: #232629;
    }


    QTableView, QHeaderView
    {
        border-radius: 0px;
    }

    QTableView::item:pressed, QListView::item:pressed, QTreeView::item:pressed  {
        background: #3daee9;
        color: #eff0f1;
    }

    QTableView::item:selected:active, QTreeView::item:selected:active, QListView::item:selected:active  {
        background: #3daee9;
        color: #eff0f1;
    }


    QHeaderView
    {
        background-color: #31363b;
        border: 1px transparent;
        border-radius: 0px;
        margin: 0px;
        padding: 0px;

    }

    QHeaderView::section  {
        background-color: #31363b;
        color: #eff0f1;
        padding: 5px;
        border: 1px solid #76797C;
        border-radius: 0px;
        text-align: center;
    }

    QHeaderView::section::vertical::first, QHeaderView::section::vertical::only-one
    {
        border-top: 1px solid #76797C;
    }

    QHeaderView::section::vertical
    {
        border-top: transparent;
    }

    QHeaderView::section::horizontal::first, QHeaderView::section::horizontal::only-one
    {
        border-left: 1px solid #76797C;
    }

    QHeaderView::section::horizontal
    {
        border-left: transparent;
    }


    QHeaderView::section:checked
     {
        color: white;
        background-color: #334e5e;
     }

     /* style the sort indicator */
    QHeaderView::down-arrow {
        image: url(:/qss_icons/Dark_rc/down_arrow.png);
    }

    QHeaderView::up-arrow {
        image: url(:/qss_icons/Dark_rc/up_arrow.png);
    }


    QTableCornerButton::section {
        background-color: #31363b;
        border: 1px transparent #76797C;
        border-radius: 0px;
    }

    QToolBox  {
        padding: 5px;
        border: 1px transparent black;
    }

    QToolBox::tab {
        color: #eff0f1;
        background-color: #31363b;
        border: 1px solid #76797C;
        border-bottom: 1px transparent #31363b;
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
    }

    QToolBox::tab:selected { /* italicize selected tabs */
        font: italic;
        background-color: #31363b;
        border-color: #3daee9;
     }

    QStatusBar::item {
        border: 0px transparent dark;
     }


    QFrame[height="3"], QFrame[width="3"] {
        background-color: #76797C;
    }




    QDateTimeEdit
    {
        background-color:#ffffff;
        border-style: solid;
        border: 1px solid #76797C;
        border-radius: 2px;
        padding: 1px;
        min-width: 75px;
    }

    QDateEdit:on
    {
        padding-top: 2px;
        padding-left: 2px;
        selection-background-color: #4a4a4a;
    }

    QDateEdit QAbstractItemView
    {
        background-color: #ff8c00;
        border-radius: 2px;
        border: 1px solid #3375A3;
        selection-background-color:ff8c00;
    }

    QDateEdit::drop-down
    {
        subcontrol-origin: padding;
        subcontrol-position: top right;
        width: 15px;
        border-left-width: 0px;
        border-left-color: darkgray;
        border-left-style: solid;
        border-top-right-radius: 3px;
        border-bottom-right-radius: 3px;
    }""")
            self.tabagreage.addTab(self.tabbltendre, "")
            self.cclstxt = QtWidgets.QLabel("<h2>COOPERATIVE DES CEREALES ET LEGUMES SECS DE RELIZANE<h2/>",
                                            self.tabbltendre)
            self.cclstxt.resize(600, 40)
            self.cclstxt.move(400, 2)

            self.font = QtGui.QFont()
            self.font.setBold(True)
            self.font.setPointSize(10)

            self.txtpsfont = QtGui.QFont()
            self.txtpsfont.setBold(True)
            self.txtpsfont.setPointSize(9)

            self.rtotaldemfont = QtGui.QFont("color:black")
            self.rtotaldemfont.setBold(True)
            self.rtotaldemfont.setPointSize(12)

            self.bulletin_agréagetxt = QtWidgets.QLabel("<h2>Bulletin D'Agréage<h2/>", self.tabbltendre)
            self.bulletin_agréagetxt.move(600, 30)
            self.bulletin_agréagetxt.resize(200, 40)

            self.éspécetxt = QtWidgets.QLabel("<h2>Espéce:Blé Tendre<h2/>", self.tabbltendre)
            self.éspécetxt.move(630, 60)

            self.n_bultinbttxt = QtWidgets.QLabel("N° Bulletin:", self.tabbltendre)
            self.n_bultinbttxt.move(20, 60)
            self.n_bultinbt = QtWidgets.QLineEdit(self.tabbltendre, readOnly=True)
            self.n_bultinbt.move(150, 60)
            self.n_bultinbt.resize(150, 25)

            self.nome_du_producteurbttxt = QtWidgets.QLabel("Nom du Producteur:", self.tabbltendre)
            self.nome_du_producteurbttxt.move(20, 100)
            self.nome_du_producteurbt = QtWidgets.QLineEdit(self.tabbltendre)
            self.nome_du_producteurbt.move(150, 98)
            self.nome_du_producteurbt.resize(150, 25)

            self.péretxtbt = QtWidgets.QLabel("Pére:", self.tabbltendre)
            self.péretxtbt.setGeometry(QtCore.QRect(315, 98, 100, 20))
            self.pérebt = QtWidgets.QLineEdit(self.tabbltendre)
            self.pérebt.setGeometry(QtCore.QRect(410, 98, 150, 23))

            self.n_cartebttxt = QtWidgets.QLabel("N.C d'identité:", self.tabbltendre)
            self.n_cartebttxt.setGeometry(QtCore.QRect(315, 138, 100, 20))
            self.n_cartebt = QtWidgets.QLineEdit(self.tabbltendre)
            self.n_cartebt.setGeometry(QtCore.QRect(410, 138, 150, 23))
            self.n_cartebt.setInputMask('99999999')

            self.imatriculebttxt = QtWidgets.QLabel("Adresse:", self.tabbltendre)
            self.imatriculebttxt.move(20, 140)
            self.adressebt = QtWidgets.QLineEdit(self.tabbltendre)
            self.adressebt.setInputMask("99999-999-99")
            self.adressebt.move(150, 138)
            self.adressebt.resize(150, 25)

            self.pointdecollectbttxt = QtWidgets.QLabel("Point de collecte", self.tabbltendre)
            self.pointdecollectbttxt.move(20, 180)
            self.pointdecollectbt = QtWidgets.QComboBox(self.tabbltendre)
            self.pointdecollectbt.setStyleSheet("background-color:#ffffff;color:#000000")
            self.pointdecollectbt.move(150, 178)
            self.pointdecollectbt.resize(150, 25)
            self.pointdecollectbt.addItem('')
            self.pointdecollectbt.addItem('Dock central')
            self.pointdecollectbt.addItem('Magasin Zemmoura')
            self.pointdecollectbt.addItem('Magasin Kef-lazreg')
            self.pointdecollectbt.addItem('Magasin Messra')
            self.pointdecollectbt.addItem('Marche gros belacel')
            self.pointdecollectbt.addItem('Station Mendes')
            self.pointdecollectbt.addItem('Nouvelles S.Mendes')

            self.dattereceptionbttxt = QtWidgets.QLabel("Relizane le :", self.tabbltendre)
            self.dattereceptionbttxt.setGeometry(QtCore.QRect(880, 100, 150, 23))
            self.dattereceptiontbt = QtWidgets.QDateTimeEdit(self.tabbltendre)
            self.dattereceptiontbt.setGeometry(QtCore.QRect(1000, 100, 150, 23))
            self.dattereceptiontbt.setDisplayFormat("dd-MM-yyyy hh:mm")
            self.dattereceptiontbt.setDate(self.datedaytime)

            self.agréeeurbttxt = QtWidgets.QLabel("Nom de l’Agréeur:", self.tabbltendre)
            self.agréeeurbttxt.setGeometry(QtCore.QRect(880, 135, 150, 23))
            self.agréeeurcombobt = QtWidgets.QComboBox(self.tabbltendre, editable=True)
            self.agréeeurcombobt.setStyleSheet("background-color:#ffffff;color:#000000")
            self.agréeeurcombobt.addItem("")
            self.agréeeurcombobt.addItem("FELOUAH OMAR")
            self.agréeeurcombobt.addItem("BEKHEDDA AEK")
            self.agréeeurcombobt.addItem("BENAISSA YOUCEF")
            self.agréeeurcombobt.addItem("REZZAG SOFIANE ")
            self.agréeeurcombobt.addItem("BELBACHA M.NADIR")
            self.agréeeurcombobt.move(1000, 135)
            self.agréeeurcombobt.resize(150, 23)

            self.quantitebttxt = QtWidgets.QLabel("Quantité", self.tabbltendre)
            self.quantitebttxt.setGeometry(QtCore.QRect(880, 180, 150, 23))

            self.quantitebt = QtWidgets.QDoubleSpinBox(self.tabbltendre)
            self.quantitebt.setRange(1, 10000)
            self.quantitebt.setSuffix('  QX')
            self.quantitebt.setSpecialValueText(" ")
            self.quantitebt.setGeometry(QtCore.QRect(1000, 178, 150, 23))

            self.paramétrebt = QtWidgets.QLabel("Paramètre", self.tabbltendre)
            self.paramétrebt.move(30, 205)
            self.paramétrebt.resize(80, 20)
            self.paramétrebt.setFont(self.font)
            self.txtpsfontbt = QtGui.QFont()
            self.txtpsfontbt.setBold(True)
            self.txtpsfontbt.setPointSize(9)
            ################Limites(sans bon ni réf)###############
            self.valeurbt = QtWidgets.QLabel("", self.tabbltendre)
            self.valeurbt.move(170, 205)
            self.valeurbt.resize(145, 30)
            self.valeurbt.setFont(self.font)
            ######################Limites(sans bon ni réf)################
            self.psbt = QtWidgets.QLineEdit("Poids spécifique (kg/hl)", self.tabbltendre, readOnly=True)
            self.psbt.resize(369, 20)
            self.psbt.move(30, 230)
            self.psbt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.psbt.setFont(self.txtpsfont)
            self.psbt.setStyleSheet(" border: 2px solid bleu ;border-radius: 4px;padding: 0px")
            ###############################humidite#############
            self.humiditebt = QtWidgets.QLineEdit("Teneur en eau(%)", self.tabbltendre, readOnly=True)
            self.humiditebt.resize(369, 20)
            self.humiditebt.move(30, 251)
            self.humiditebt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.humiditebt.setFont(self.txtpsfont)

            #######################ergot#########################
            self.ergotbt = QtWidgets.QLineEdit("Ergo(%  ", self.tabbltendre, readOnly=True)
            self.ergotbt.resize(369, 20)
            self.ergotbt.move(30, 272)
            self.ergotbt.setStyleSheet("background-color: #232629")
            self.ergotbt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.ergotbt.setFont(self.txtpsfont)

            #########################Graines nuisibles (%)##########
            self.matiére20mm = QtWidgets.QLineEdit("Matiéres qui passent à travers \nle tamis 20 mm x 2.1 mm ",
                                                   self.tabbltendre, readOnly=True)
            self.matiére20mm.resize(369, 20)
            self.matiére20mm.move(30, 293)
            self.matiére20mm.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.matiére20mm.setFont(self.txtpsfont)
            #############################Débris végétaux (%)########
            self.débrisvébt = QtWidgets.QLineEdit("Les débris végétaux et \nles éléments minéreaux(%)",
                                                  self.tabbltendre,
                                                  readOnly=True)
            self.débrisvébt.resize(369, 20)
            self.débrisvébt.move(30, 314)
            self.débrisvébt.setFont(self.txtpsfont)
            self.débrisvébt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Matière inerte (%)################
            self.grainnuisiblebt = QtWidgets.QLineEdit("Graines nuisibles(%)", self.tabbltendre, readOnly=True)
            self.grainnuisiblebt.resize(369, 20)
            self.grainnuisiblebt.move(30, 335)
            self.grainnuisiblebt.setFont(self.txtpsfont)
            self.grainnuisiblebt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ################################Grains chauffés (%)############################
            self.totalprembt = QtWidgets.QLineEdit("Total(%)", self.tabbltendre, readOnly=True)
            self.totalprembt.resize(369, 20)
            self.totalprembt.move(30, 356)
            self.totalprembt.setFont(self.txtpsfont)
            self.totalprembt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################Grains sans valeur (%)#######################################
            self.grainscassébt = QtWidgets.QLineEdit("Grains cassés(%)", self.tabbltendre, readOnly=True)
            self.grainscassébt.resize(369, 20)
            self.grainscassébt.move(30, 377)
            self.grainscassébt.setFont(self.txtpsfont)
            self.grainscassébt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Grains cariés##########################################
            self.grainpunaiséebt = QtWidgets.QLineEdit("Grains punaisés", self.tabbltendre, readOnly=True)
            self.grainpunaiséebt.resize(369, 20)
            self.grainpunaiséebt.move(30, 398)
            self.grainpunaiséebt.setFont(self.txtpsfont)
            self.grainpunaiséebt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")

            #######################################Total(%) 1er#####################################################
            self.grainsfortementboutésbt = QtWidgets.QLineEdit("Grains fortement boutés(%)", self.tabbltendre,
                                                               readOnly=True)
            self.grainsfortementboutésbt.resize(369, 20)
            self.grainsfortementboutésbt.move(30, 419)
            self.grainsfortementboutésbt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.grainsfortementboutésbt.setFont(self.txtpsfont)
            ##############################################Grains cassés (%) #########################################################
            self.grainsfaiblementboutésbt = QtWidgets.QLineEdit("Grains faiblement boutés(%)", self.tabbltendre,
                                                                readOnly=True)
            self.grainsfaiblementboutésbt.move(30, 440)
            self.grainsfaiblementboutésbt.resize(369, 20)
            self.grainsfaiblementboutésbt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.grainsfaiblementboutésbt.setFont(self.txtpsfont)
            #########################################################Gains échaudés (%)#####################################################
            self.grainefortementmouchetesbt = QtWidgets.QLineEdit("Gains fortement mouchetés(%)", self.tabbltendre,
                                                                  readOnly=True)
            self.grainefortementmouchetesbt.move(30, 461)
            self.grainefortementmouchetesbt.resize(369, 20)
            self.grainefortementmouchetesbt.setFont(self.txtpsfont)
            self.grainefortementmouchetesbt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #####################################################Grains maigres (%)########################################################
            self.grainetrangebt = QtWidgets.QLineEdit("Grains étrangers utilisable pour le bétail(%) ",
                                                      self.tabbltendre, readOnly=True)
            self.grainetrangebt.move(30, 482)
            self.grainetrangebt.resize(369, 20)
            self.grainetrangebt.setFont(self.txtpsfont)
            self.grainetrangebt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##########################################################Grains germés (%)###################################################
            self.totaldembt = QtWidgets.QLineEdit("Total (%)", self.tabbltendre, readOnly=True)
            self.totaldembt.move(30, 503)
            self.totaldembt.resize(369, 20)
            self.totaldembt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.totaldembt.setFont(self.txtpsfont)
            ##########################################################Grain punaisés (%)#########################################################
            self.totalbiniEtrefaction = QtWidgets.QLineEdit("\t\tTotal de bonification et réfaction", self.tabbltendre,
                                                            readOnly=True)
            self.totalbiniEtrefaction.move(30, 524)
            self.totalbiniEtrefaction.resize(470, 30)
            self.totalbiniEtrefaction.setFont(self.txtpsfont)
            self.totalbiniEtrefaction.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")

            #################label valeure##############
            self.valeurbt = QtWidgets.QLabel("valeur", self.tabbltendre)
            self.valeurbt.move(400, 205)
            self.valeurbt.resize(100, 20)
            self.valeurbt.setFont(self.font)
            ######################Limites(sans bon ni réf)################
            self.vpsbt = QtWidgets.QDoubleSpinBox(self.tabbltendre)
            self.vpsbt.setDecimals(3)

            self.vpsbt.setSpecialValueText(' ')
            self.vpsbt.resize(100, 20)
            self.vpsbt.move(400, 230)
            self.vpsbt.setFont(self.txtpsfont)
            self.vpsbt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ###############################humidite#############
            self.vhumiditebt = QtWidgets.QDoubleSpinBox(self.tabbltendre)
            self.vhumiditebt.setRange(3, 17)
            self.vhumiditebt.resize(100, 20)
            self.vhumiditebt.setSpecialValueText(' ')
            self.vhumiditebt.move(400, 251)
            self.vhumiditebt.setFont(self.txtpsfont)
            self.vhumiditebt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################ergot#########################
            self.vergotbt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=False)
            self.vergotbt.setRange(0, 10)
            self.vergotbt.setSpecialValueText(' ')
            self.vergotbt.resize(100, 20)
            self.vergotbt.move(400, 272)
            self.vergotbt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Graines nuisibles (%)##########
            self.vmatiére20mmbt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=False)
            self.vmatiére20mmbt.setRange(0, 10)
            self.vmatiére20mmbt.setSpecialValueText(' ')
            self.vmatiére20mmbt.resize(100, 20)
            self.vmatiére20mmbt.move(400, 293)
            self.vmatiére20mmbt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #############################Débris végétaux (%)########
            self.vdébrisvébt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=False)
            self.vdébrisvébt.setRange(0, 10)
            self.vdébrisvébt.setSpecialValueText(' ')
            self.vdébrisvébt.resize(100, 20)
            self.vdébrisvébt.move(400, 314)
            self.vdébrisvébt.setFont(self.txtpsfont)
            self.vdébrisvébt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Matière inerte (%)################
            self.vgrainnuisiblebt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=False)
            self.vgrainnuisiblebt.setRange(0, 10)
            self.vgrainnuisiblebt.setSpecialValueText(' ')
            self.vgrainnuisiblebt.resize(100, 20)
            self.vgrainnuisiblebt.move(400, 335)
            self.vgrainnuisiblebt.setFont(self.txtpsfont)
            self.vgrainnuisiblebt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ################################Grains chauffés (%)############################
            self.vtotalprembt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.vtotalprembt.setRange(0, 10)
            self.vtotalprembt.setDecimals(3)
            self.vtotalprembt.setSpecialValueText(' ')
            self.vtotalprembt.resize(100, 20)
            self.vtotalprembt.move(400, 356)
            self.vtotalprembt.setFont(self.txtpsfont)
            self.vtotalprembt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################Grains sans valeur (%)#######################################
            self.vgrainscassébt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=False)
            self.vgrainscassébt.setSpecialValueText(' ')
            self.vgrainscassébt.setRange(0, 30)
            self.vgrainscassébt.resize(100, 20)
            self.vgrainscassébt.move(400, 377)
            self.vgrainscassébt.setFont(self.txtpsfont)
            self.vgrainscassébt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Grains cariés##########################################
            self.vgrainpunaiséebt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=False)
            self.vgrainpunaiséebt.setSpecialValueText(' ')
            self.vgrainpunaiséebt.setRange(0, 10)
            self.vgrainpunaiséebt.resize(100, 20)
            self.vgrainpunaiséebt.move(400, 398)
            self.vgrainpunaiséebt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Total(%) 1er#####################################################
            self.vgrainsfortementboutésbt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=False)
            self.vgrainsfortementboutésbt.setSpecialValueText(' ')
            self.vgrainsfortementboutésbt.setRange(0, 10)
            self.vgrainsfortementboutésbt.resize(100, 20)
            self.vgrainsfortementboutésbt.move(400, 419)
            self.vgrainsfortementboutésbt.setFont(self.txtpsfont)
            self.vgrainsfortementboutésbt.setStyleSheet(
                "background-color:#ffffff;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##############################################Grains cassés (%) #########################################################
            self.vgrainsfaiblementboutésbt = QtWidgets.QDoubleSpinBox(self.tabbltendre)
            self.vgrainsfaiblementboutésbt.move(400, 440)
            self.vgrainsfaiblementboutésbt.resize(100, 20)
            self.vgrainsfaiblementboutésbt.setRange(0, 10)
            self.vgrainsfaiblementboutésbt.setSpecialValueText(" ")
            self.vgrainsfaiblementboutésbt.setFont(self.txtpsfont)
            self.vgrainsfaiblementboutésbt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################################################Gains échaudés (%)#####################################################
            self.vgrainefortementmouchetesbt = QtWidgets.QDoubleSpinBox(self.tabbltendre)
            self.vgrainefortementmouchetesbt.setSpecialValueText(" ")
            self.vgrainefortementmouchetesbt.setRange(0, 10)
            self.vgrainefortementmouchetesbt.move(400, 461)
            self.vgrainefortementmouchetesbt.resize(100, 20)
            self.vgrainefortementmouchetesbt.setFont(self.txtpsfont)
            self.vgrainefortementmouchetesbt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #####################################################Grains maigres (%)########################################################
            self.vgrainetrangebt = QtWidgets.QDoubleSpinBox(self.tabbltendre)
            self.vgrainetrangebt.setRange(0, 10)
            self.vgrainetrangebt.setSpecialValueText(" ")
            self.vgrainetrangebt.move(400, 482)
            self.vgrainetrangebt.setFont(self.txtpsfont)
            self.vgrainetrangebt.resize(100, 20)
            self.vgrainetrangebt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grains germés (%)###################################################
            self.vtotaldembt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.vtotaldembt.move(400, 503)
            self.vtotaldembt.resize(100, 20)
            self.vtotaldembt.setSpecialValueText('  ')
            self.vtotaldembt.setFont(self.txtpsfont)
            self.vtotaldembt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ###############################################réfaction##############################################
            #################label valeure##############
            self.rvaleurbt = QtWidgets.QLabel("Réfaction (DA)", self.tabbltendre)
            self.rvaleurbt.move(501, 205)
            self.rvaleurbt.resize(100, 20)
            self.rvaleurbt.setFont(self.font)
            ######################Limites(sans bon ni réf)################
            self.rpsbt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)

            self.rpsbt.setSpecialValueText(' ')
            self.rpsbt.resize(100, 20)
            self.rpsbt.move(501, 230)
            self.rpsbt.setFont(self.txtpsfont)
            self.rpsbt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ###############################humidite#############
            self.rhumiditebt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.rhumiditebt.setRange(8, 14)
            self.rhumiditebt.resize(100, 20)
            self.rhumiditebt.setSpecialValueText(' ')
            self.rhumiditebt.move(501, 251)
            self.rhumiditebt.setFont(self.txtpsfont)
            self.rhumiditebt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################ergot#########################
            self.rergotbt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.rergotbt.setRange(0, 10)
            self.rergotbt.setSpecialValueText(' ')
            self.rergotbt.resize(100, 20)
            self.rergotbt.move(501, 272)
            self.rergotbt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Graines nuisibles (%)##########
            self.rmatiére20mmbt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.rmatiére20mmbt.setRange(0, 10)
            self.rmatiére20mmbt.setSpecialValueText(' ')
            self.rmatiére20mmbt.resize(100, 20)
            self.rmatiére20mmbt.move(501, 293)
            self.rmatiére20mmbt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #############################Débris végétaux (%)########
            self.rdébrisvébt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.rdébrisvébt.setRange(0, 10)
            self.rdébrisvébt.setSpecialValueText(' ')
            self.rdébrisvébt.resize(100, 20)
            self.rdébrisvébt.move(501, 314)
            self.rdébrisvébt.setFont(self.txtpsfont)
            self.rdébrisvébt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Matière inerte (%)################
            self.rgrainnuisiblebt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.rgrainnuisiblebt.setRange(0, 10)
            self.rgrainnuisiblebt.setSpecialValueText(' ')
            self.rgrainnuisiblebt.resize(100, 20)
            self.rgrainnuisiblebt.move(501, 335)
            self.rgrainnuisiblebt.setFont(self.txtpsfont)
            self.rgrainnuisiblebt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ################################Grains chauffés (%)############################
            self.rtotalprembt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.rtotalprembt.setRange(0, 10)
            self.rtotalprembt.setDecimals(2)
            self.rtotalprembt.setSpecialValueText(' ')
            self.rtotalprembt.resize(100, 20)
            self.rtotalprembt.move(501, 356)
            self.rtotalprembt.setFont(self.txtpsfont)
            self.rtotalprembt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################Grains sans valeur (%)#######################################
            self.rgrainscassébt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.rgrainscassébt.setSpecialValueText(' ')
            self.rgrainscassébt.setDecimals(2)
            self.rgrainscassébt.resize(100, 20)
            self.rgrainscassébt.move(501, 377)
            self.rgrainscassébt.setFont(self.txtpsfont)
            self.rgrainscassébt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Grains cariés##########################################
            self.rgrainpunaiséebt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.rgrainpunaiséebt.setSpecialValueText(' ')
            self.rgrainpunaiséebt.setRange(0, 10)
            self.rgrainpunaiséebt.resize(100, 20)
            self.rgrainpunaiséebt.move(501, 398)
            self.rgrainpunaiséebt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Total(%) 1er#####################################################
            self.rgrainsfortementboutésbt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.rgrainsfortementboutésbt.setSpecialValueText(' ')
            self.rgrainsfortementboutésbt.setRange(0, 10)
            self.rgrainsfortementboutésbt.resize(100, 20)
            self.rgrainsfortementboutésbt.move(501, 419)
            self.rgrainsfortementboutésbt.setFont(self.txtpsfont)
            self.rgrainsfortementboutésbt.setStyleSheet(
                "background-color:#ffffff;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##############################################Grains cassés (%) #########################################################
            self.rgrainsfaiblementboutésbt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.rgrainsfaiblementboutésbt.move(501, 440)
            self.rgrainsfaiblementboutésbt.resize(100, 20)
            self.rgrainsfaiblementboutésbt.setRange(0, 10)
            self.rgrainsfaiblementboutésbt.setSpecialValueText(" ")
            self.rgrainsfaiblementboutésbt.setFont(self.txtpsfont)
            self.rgrainsfaiblementboutésbt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################################################Gains échaudés (%)#####################################################
            self.rgrainefortementmouchetesbt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.rgrainefortementmouchetesbt.setSpecialValueText(" ")
            self.rgrainefortementmouchetesbt.setRange(0, 10)
            self.rgrainefortementmouchetesbt.move(501, 461)
            self.rgrainefortementmouchetesbt.resize(100, 20)
            self.rgrainefortementmouchetesbt.setFont(self.txtpsfont)
            self.rgrainefortementmouchetesbt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #####################################################Grains maigres (%)########################################################
            self.rgrainetrangebt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.rgrainetrangebt.setRange(0, 10)
            self.rgrainetrangebt.setSpecialValueText(" ")
            self.rgrainetrangebt.move(501, 482)
            self.rgrainetrangebt.setFont(self.txtpsfont)
            self.rgrainetrangebt.resize(100, 20)
            self.rgrainetrangebt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grains germés (%)###################################################
            self.rtotaldembt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.rtotaldembt.move(501, 503)
            self.rtotaldembt.resize(100, 20)
            self.rtotaldembt.setSpecialValueText('  ')
            self.rtotaldembt.setFont(self.txtpsfont)
            self.rtotaldembt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #################Grains piqués (%)##########################################
            self.rtotalbiniEtrefactionbt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.rtotalbiniEtrefactionbt.move(501, 524)
            self.rtotalbiniEtrefactionbt.resize(100, 30)
            self.rtotalbiniEtrefactionbt.setSpecialValueText('  ')
            self.rtotalbiniEtrefactionbt.setFont(self.txtpsfont)
            self.rtotalbiniEtrefactionbt.setStyleSheet(
                "background-color:#e22630;border: 2px solid bleu;border-radius: 4px;padding: 2px")

            ###################################################bonifécation#####################################################
            #################label valeure##############
            self.bvaleurbt = QtWidgets.QLabel("Bonification(DA)", self.tabbltendre)
            self.bvaleurbt.move(602, 205)
            self.bvaleurbt.resize(103, 20)
            self.bvaleurbt.setFont(self.font)
            ######################Limites(sans bon ni réf)################
            self.bpsbt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.bpsbt.setSpecialValueText(' ')
            self.bpsbt.resize(100, 20)
            self.bpsbt.move(602, 230)
            self.bpsbt.setFont(self.txtpsfont)
            self.bpsbt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ###############################humidite#############
            self.bhumiditebt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.bhumiditebt.setRange(8, 14)
            self.bhumiditebt.resize(100, 20)
            self.bhumiditebt.setSpecialValueText(' ')
            self.bhumiditebt.move(602, 251)
            self.bhumiditebt.setFont(self.txtpsfont)
            self.bhumiditebt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################ergot#########################
            self.bergotbt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.bergotbt.setRange(0, 10)
            self.bergotbt.setSpecialValueText(' ')
            self.bergotbt.resize(100, 20)
            self.bergotbt.move(602, 272)
            self.bergotbt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Graines nuisibles (%)##########
            self.bmatiére20mmbt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.bmatiére20mmbt.setRange(0, 10)
            self.bmatiére20mmbt.setSpecialValueText(' ')
            self.bmatiére20mmbt.resize(100, 20)
            self.bmatiére20mmbt.move(602, 293)
            self.bmatiére20mmbt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #############################Débris végétaux (%)########
            self.btébrisvébt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.btébrisvébt.setSpecialValueText(' ')
            self.btébrisvébt.resize(100, 20)
            self.btébrisvébt.move(602, 314)
            self.btébrisvébt.setFont(self.txtpsfont)
            self.btébrisvébt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Matière inerte (%)################
            self.bgrainnuisiblebt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.bgrainnuisiblebt.setSpecialValueText(' ')
            self.bgrainnuisiblebt.resize(100, 20)
            self.bgrainnuisiblebt.move(602, 335)
            self.bgrainnuisiblebt.setFont(self.txtpsfont)
            self.bgrainnuisiblebt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ################################Grains chauffés (%)############################
            self.btotalprembt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.btotalprembt.setSpecialValueText(' ')
            self.btotalprembt.resize(100, 20)
            self.btotalprembt.move(602, 356)
            self.btotalprembt.setFont(self.txtpsfont)
            self.btotalprembt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################Grains sans valeur (%)#######################################
            self.bgrainscassébt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.bgrainscassébt.setSpecialValueText(' ')
            self.bgrainscassébt.resize(100, 20)
            self.bgrainscassébt.move(602, 377)
            self.bgrainscassébt.setFont(self.txtpsfont)
            self.bgrainscassébt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Grains cariés##########################################
            self.bgrainpunaiséebt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.bgrainpunaiséebt.setSpecialValueText(' ')
            self.bgrainpunaiséebt.resize(100, 20)
            self.bgrainpunaiséebt.move(602, 398)
            self.bgrainpunaiséebt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Total(%) 1er#####################################################
            self.brgrainsfortementboutésbt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.brgrainsfortementboutésbt.setSpecialValueText(' ')
            self.brgrainsfortementboutésbt.resize(100, 20)
            self.brgrainsfortementboutésbt.move(602, 419)
            self.brgrainsfortementboutésbt.setFont(self.txtpsfont)
            self.brgrainsfortementboutésbt.setStyleSheet(
                "background-color:#ffffff;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##############################################Grains cassés (%) #########################################################
            self.bgrainsfaiblementboutésbt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.bgrainsfaiblementboutésbt.move(602, 440)
            self.bgrainsfaiblementboutésbt.resize(100, 20)
            self.bgrainsfaiblementboutésbt.setSpecialValueText(" ")
            self.bgrainsfaiblementboutésbt.setFont(self.txtpsfont)
            self.bgrainsfaiblementboutésbt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################################################Gains échaudés (%)#####################################################
            self.bgrainefortementmouchetesbt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.bgrainefortementmouchetesbt.setSpecialValueText(" ")
            self.bgrainefortementmouchetesbt.move(602, 461)
            self.bgrainefortementmouchetesbt.resize(100, 20)
            self.bgrainefortementmouchetesbt.setFont(self.txtpsfont)
            self.bgrainefortementmouchetesbt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #####################################################Grains maigres (%)########################################################
            self.bgrainetrangebt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.bgrainetrangebt.setSpecialValueText(" ")
            self.bgrainetrangebt.move(602, 482)
            self.bgrainetrangebt.setFont(self.txtpsfont)
            self.bgrainetrangebt.resize(100, 20)
            self.bgrainetrangebt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grains germés (%)###################################################
            self.btotaldembt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.btotaldembt.move(602, 503)
            self.btotaldembt.resize(100, 20)
            self.btotaldembt.setSpecialValueText('  ')
            self.btotaldembt.setFont(self.txtpsfont)
            self.btotaldembt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grain punaisés (%)#########################################################

            ####################################################################Grains boutés  « forte » (%)######################################

            self.btotalbiniEtrefactionbt = QtWidgets.QDoubleSpinBox(self.tabbltendre, readOnly=True)
            self.btotalbiniEtrefactionbt.move(602, 524)
            self.btotalbiniEtrefactionbt.resize(100, 30)
            self.btotalbiniEtrefactionbt.setSpecialValueText('  ')
            self.btotalbiniEtrefactionbt.setFont(self.txtpsfont)
            self.btotalbiniEtrefactionbt.setStyleSheet(
                "background-color:#88ffaa;border: 2px solid bleu;border-radius: 4px;padding: 2px")

            self.obesrvationbttxt = QtWidgets.QLabel("Observation", self.tabbltendre)
            self.obesrvationbttxt.setGeometry(QtCore.QRect(710, 205, 100, 20))

            self.obesrvationbt = QtWidgets.QTextEdit(self.tabbltendre)
            self.obesrvationbt.setGeometry(QtCore.QRect(704, 230, 100, 325))
            self.obesrvationbt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")

            self.btnsavebt = QtWidgets.QPushButton("ENREGISTRER", self.tabbltendre, clicked=lambda: self.add_datta_bt())
            self.btnsavebt.move(820, 230)
            self.btnsavebt.resize(180, 70)

            self.btnimprimejour = QtWidgets.QPushButton("IMPRIMER \nLE JOURNALIER", self.tabbltendre,
                                                        clicked=lambda: self.today_bt())
            self.btnimprimejour.move(820, 400)
            self.btnimprimejour.resize(180, 70)

            self.btnprintbt = QtWidgets.QPushButton("IMPRIMER", self.tabbltendre, clicked=lambda: self.bulletin_bt())
            self.btnprintbt.move(820, 315)
            self.btnprintbt.resize(180, 70)

            self.btnefacebt = QtWidgets.QPushButton("EFACER", self.tabbltendre, clicked=lambda: self.clear_bt())
            self.btnefacebt.move(820, 485)
            self.btnefacebt.resize(180, 70)

            self.btnprintbulletindocx = QtWidgets.QPushButton("SELECTIONNE \nBULLETIN", self.tabbltendre,
                                                              clicked=lambda: self.printBulltinProducteurbt())
            self.btnprintbulletindocx.move(1020, 230)
            self.btnprintbulletindocx.resize(180, 70)

            self.btnimprimeticket = QtWidgets.QPushButton("IMPRIMER \nLES TICKET", self.tabbltendre,
                                                          clicked=lambda: self.eticket_bletendre())
            self.btnimprimeticket.move(1020, 315)
            self.btnimprimeticket.resize(180, 70)

            self.timercalculbt = QTimer()
            self.timercalculbt.timeout.connect(self.calcul_bt)
            self.timercalculbt.setInterval(1000)
            self.timercalculbt.start()

            self.timernumbulltinbt = QTimer()
            self.timernumbulltinbt.timeout.connect(self.number_bulletin_bt)
            self.timernumbulltinbt.setInterval(1000)
            self.timernumbulltinbt.start()

            ###################################################################################
            #################################ORGE###############################
            ######################################
            self.taborge = QtWidgets.QWidget()
            self.taborge.setStyleSheet("""QToolTip
    {
        border: 1px solid #76797C;
        background-color:  #fff8b0;
        color: white;
        padding: 5px;
        opacity: 200;
    }

    QWidget
    {
        color: #000000;
        background-color:  #feffbd;
        selection-background-color:#3daee9;
        selection-color: #eff0f1;
        background-clip: border;
        border-image: none;
        border: 0px transparent black;
        outline: 0;
    }

    QWidget:item:hover
    {
        background-color: #3daee9;
        color: #eff0f1;
    }

    QWidget:item:selected
    {
        background-color: #3daee9;
    }



    QWidget:disabled
    {
        color: #454545;
        background-color: #31363b;
    }

    QAbstractItemView
    {
        alternate-background-color: #31363b;
        color: #eff0f1;
        border: 1px solid 3A3939;
        border-radius: 2px;
    }

    QWidget:focus, QMenuBar:focus
    {
        border: 1px solid #3daee9;
    }

    QTabWidget:focus, QCheckBox:focus, QRadioButton:focus, QSlider:focus
    {
        border: none;
    }

    QLineEdit
    {
        background-color: #ffffff;
        padding: 1px;
        border-style: solid;
        border: 1px solid #76797C;
        border-radius: 2px;
        color: #000000;
        font-size:12px;
        font-weight:bold;
    }
    QDoubleSpinBox
    {
        background-color: #ffffff;
        padding: 0px;
        border-style: solid;
        border: 1px solid #76797C;
        border-radius: 2px;
        color:#000000;
        font-size:12px;
        font-weight:bold;

    }
    QDoubleSpinBox::drop-down
    {
        subcontrol-origin: padding;
        subcontrol-position: top right;
        width: 1px;

        border-left-width: 0px;
        border-left-color: #232629;
        border-left-style: solid;
        border-top-right-radius: 1px;
        border-bottom-right-radius: 1px;
    }



    QGroupBox {
        border:1px solid #76797C;
        border-radius: 2px;
        margin-top: 20px;
    }

    QGroupBox::title {
        subcontrol-origin: margin;
        subcontrol-position: top center;
        padding-left: 10px;
        padding-right: 10px;
        padding-top: 10px;
    }

    QAbstractScrollArea
    {
        border-radius: 2px;
        border: 1px solid #76797C;
        background-color: transparent;
    }

    QScrollBar:horizontal
    {
        height: 15px;
        margin: 3px 15px 3px 15px;
        border: 1px transparent #2A2929;
        border-radius: 4px;
        background-color: #2A2929;
    }

    QScrollBar::handle:horizontal
    {
        background-color: #605F5F;
        min-width: 5px;
        border-radius: 4px;
    }

    QScrollBar::add-line:horizontal
    {
        margin: 0px 3px 0px 3px;
        border-image: url(:/qss_icons/Dark_rc/right_arrow_disabled.png);
        width: 10px;
        height: 10px;
        subcontrol-position: right;
        subcontrol-origin: margin;
    }

    QScrollBar::sub-line:horizontal
    {
        margin: 0px 3px 0px 3px;
        border-image: url(:/qss_icons/Dark_rc/left_arrow_disabled.png);
        height: 10px;
        width: 10px;
        subcontrol-position: left;
        subcontrol-origin: margin;
    }

    QScrollBar::add-line:horizontal:hover,QScrollBar::add-line:horizontal:on
    {
        border-image: url(:/qss_icons/Dark_rc/right_arrow.png);
        height: 10px;
        width: 10px;
        subcontrol-position: right;
        subcontrol-origin: margin;
    }


    QScrollBar::sub-line:horizontal:hover, QScrollBar::sub-line:horizontal:on
    {
        border-image: url(:/qss_icons/Dark_rc/left_arrow.png);
        height: 10px;
        width: 10px;
        subcontrol-position: left;
        subcontrol-origin: margin;
    }

    QScrollBar::up-arrow:horizontal, QScrollBar::down-arrow:horizontal
    {
        background: none;
    }


    QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal
    {
        background: none;
    }

    QScrollBar:vertical
    {
        background-color: #2A2929;
        width: 15px;
        margin: 15px 3px 15px 3px;
        border: 1px transparent #2A2929;
        border-radius: 4px;
    }

    QScrollBar::handle:vertical
    {
        background-color: #605F5F;
        min-height: 5px;
        border-radius: 4px;
    }

    QScrollBar::sub-line:vertical
    {
        margin: 3px 0px 3px 0px;
        border-image: url(:/qss_icons/Dark_rc/up_arrow_disabled.png);
        height: 10px;
        width: 10px;
        subcontrol-position: top;
        subcontrol-origin: margin;
    }

    QScrollBar::add-line:vertical
    {
        margin: 3px 0px 3px 0px;
        border-image: url(:/qss_icons/Dark_rc/down_arrow_disabled.png);
        height: 10px;
        width: 10px;
        subcontrol-position: bottom;
        subcontrol-origin: margin;
    }

    QScrollBar::sub-line:vertical:hover,QScrollBar::sub-line:vertical:on
    {

        border-image: url(:/qss_icons/Dark_rc/up_arrow.png);
        height: 10px;
        width: 10px;
        subcontrol-position: top;
        subcontrol-origin: margin;
    }


    QScrollBar::add-line:vertical:hover, QScrollBar::add-line:vertical:on
    {
        border-image: url(:/qss_icons/Dark_rc/down_arrow.png);
        height: 10px;
        width: 10px;
        subcontrol-position: bottom;
        subcontrol-origin: margin;
    }

    QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical
    {
        background: none;
    }


    QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical
    {
        background: none;
    }

    QTextEdit
    {
        background-color: #ffffff;
        color: #000000;
        border: 1px solid #76797C;
        font-size:12px;
        font-weight:bold;
    }

    QPlainTextEdit
    {
        background-color: #232629;;
        color: #eff0f1;
        border-radius: 2px;
        border: 1px solid #76797C;
    }

    QHeaderView::section
    {
        background-color: #76797C;
        color: #eff0f1;
        padding: 5px;
        border: 1px solid #76797C;
    }

    QSizeGrip {
        image: url(:/qss_icons/Dark_rc/sizegrip.png);
        width: 12px;
        height: 12px;
    }


    QMainWindow::separator
    {
        background-color: #31363b;
        color: white;
        padding-left: 4px;
        spacing: 2px;
        border: 1px dashed #76797C;
    }

    QMainWindow::separator:hover
    {

        background-color: #787876;
        color: white;
        padding-left: 4px;
        border: 1px solid #76797C;
        spacing: 2px;
    }


    QMenu::separator
    {
        height: 1px;
        background-color: #76797C;
        color: white;
        padding-left: 4px;
        margin-left: 10px;
        margin-right: 5px;
    }


    QFrame
    {
        border-radius: 2px;
        border: 1px solid #76797C;
    }

    QFrame[frameShape="0"]
    {
        border-radius: 2px;
        border: 1px transparent #76797C;
    }

    QStackedWidget
    {
        border: 1px transparent black;
    }


    QPushButton
    {
        color: #000000;
        background-color:#84dbc8;
        border-width: 1px;
        border-color: #1e1e1e;
        border-style: solid;
        border-radius: 6;
        padding: 3px;
        font-size: 12px;
        padding-left: 5px;
        padding-right: 5px;
        min-width: 40px;

    }

    QPushButton:disabled
    {
        background-color: #31363b;
        border-width: 1px;
        border-color: #454545;
        border-style: solid;
        padding-top: 5px;
        padding-bottom: 5px;
        padding-left: 10px;
        padding-right: 10px;
        border-radius: 2px;
        color: #454545;
    }

    QPushButton:focus {
        background-color: #3daee9;
        color: white;
    }

    QPushButton:pressed
    {
        background-color: #3daee9;
        padding-top: -15px;
        padding-bottom: -17px;
    }



    QPushButton:checked{
        background-color: #76797C;
        border-color: #6A6969;
    }

    QComboBox:hover,QDoubleSpinBox:Hover,QPushButton:hover,QAbstractSpinBox:hover,QLineEdit:hover,QTextEdit:hover,QPlainTextEdit:hover,QAbstractView:hover,QTreeView:hover
    {
        border: 1px solid #ff8c00;
        color: #000000;
    }

    QComboBox {
    background-color: #ffffff;
    border: 1px solid #76797C;
    color:#000000;
    border-radius: 0.25em;
    padding: 0.10em 0.10em;
    font-size:12px;
    font-weight:bold;
    cursor: pointer;
}

QComboBox::drop-down {
    subcontrol-origin: padding;
    subcontrol-position: top right;
    width: 1.3em;
    border-left: 0px solid #777;
    border-radius: 0.25em;
}

QComboBox::drop-down::icon {
    image: url('E:/pythonProject_moullin-application.3.5/images/down-arroww.png');
}

        QComboBox:on
        {
            padding-top: 0px;
            padding-left: 0px;        
            selection-background-color: #e4f0f1;
        }
        QComboBox QAbstractItemView
        {
            background-color: #ffffff;
            border-radius: 2px;
            border: 1px solid #76797C;
            color:#000000;
            selection-background-color: #000000;
        }


    QLabel
    {
        border: 2px solid black;
        font-size:13px;
        font-weight:bold;
    }

    QTabWidget{
        border: 0px transparent black;
    }

    QTabWidget::pane {
        border: 1px solid #76797C;
        padding: 5px;
        margin: 0px;
    }

    QTabBar
    {
        qproperty-drawBase: 0;
        left: 5px; /* move to the right by 5px */
        border-radius: 3px;
    }

    QTabBar:focus
    {
        border: 0px transparent black;
    }

    QTabBar::close-button  {
        image: url(:/qss_icons/Dark_rc/close.png);
        background: transparent;
    }

    QTabBar::close-button:hover
    {
        image: url(:/qss_icons/Dark_rc/close-hover.png);
        background: transparent;
    }

    QTabBar::close-button:pressed {
        image: url(:/qss_icons/Dark_rc/close-pressed.png);
        background: transparent;
    }

    /* TOP TABS */
    QTabBar::tab:top {
        color: #eff0f1;
        border: 1px solid #76797C;
        border-bottom: 1px transparent black;
        background-color: #31363b;
        padding: 5px;
        min-width: 50px;
        border-top-left-radius: 2px;
        border-top-right-radius: 2px;
    }

    QTabBar::tab:top:!selected
    {
        color: #eff0f1;
        background-color: #54575B;
        border: 1px solid #76797C;
        border-bottom: 1px transparent black;
        border-top-left-radius: 2px;
        border-top-right-radius: 2px;    
    }

    QTabBar::tab:top:!selected:hover {
        background-color: #3daee9;
    }

    /* BOTTOM TABS */
    QTabBar::tab:bottom {
        color: #eff0f1;
        border: 1px solid #76797C;
        border-top: 1px transparent black;
        background-color: #31363b;
        padding: 5px;
        border-bottom-left-radius: 2px;
        border-bottom-right-radius: 2px;
        min-width: 50px;
    }

    QTabBar::tab:bottom:!selected
    {
        color: #eff0f1;
        background-color: #54575B;
        border: 1px solid #76797C;
        border-top: 1px transparent black;
        border-bottom-left-radius: 2px;
        border-bottom-right-radius: 2px;
    }

    QTabBar::tab:bottom:!selected:hover {
        background-color: #3daee9;
    }

    /* LEFT TABS */
    QTabBar::tab:left {
        color: #eff0f1;
        border: 1px solid #76797C;
        border-left: 1px transparent black;
        background-color: #31363b;
        padding: 5px;
        border-top-right-radius: 2px;
        border-bottom-right-radius: 2px;
        min-height: 50px;
    }

    QTabBar::tab:left:!selected
    {
        color: #eff0f1;
        background-color: #54575B;
        border: 1px solid #76797C;
        border-left: 1px transparent black;
        border-top-right-radius: 2px;
        border-bottom-right-radius: 2px;
    }

    QTabBar::tab:left:!selected:hover {
        background-color: #3daee9;
    }


    /* RIGHT TABS */
    QTabBar::tab:right {
        color: #eff0f1;
        border: 1px solid #76797C;
        border-right: 1px transparent black;
        background-color: #31363b;
        padding: 5px;
        border-top-left-radius: 2px;
        border-bottom-left-radius: 2px;
        min-height: 50px;
    }

    QTabBar::tab:right:!selected
    {
        color: #eff0f1;
        background-color: #54575B;
        border: 1px solid #76797C;
        border-right: 1px transparent black;
        border-top-left-radius: 2px;
        border-bottom-left-radius: 2px;
    }

    QTabBar::tab:right:!selected:hover {
        background-color: #3daee9;
    }

    QTabBar QToolButton::right-arrow:enabled {
         image: url(:/qss_icons/Dark_rc/right_arrow.png);
     }

     QTabBar QToolButton::left-arrow:enabled {
         image: url(:/qss_icons/Dark_rc/left_arrow.png);
     }

    QTabBar QToolButton::right-arrow:disabled {
         image: url(:/qss_icons/Dark_rc/right_arrow_disabled.png);
     }

     QTabBar QToolButton::left-arrow:disabled {
         image: url(:/qss_icons/Dark_rc/left_arrow_disabled.png);
     }


    QDockWidget {
        background: #31363b;
        border: 1px solid #403F3F;
        titlebar-close-icon: url(:/qss_icons/Dark_rc/close.png);
        titlebar-normal-icon: url(:/qss_icons/Dark_rc/undock.png);
    }

    QDockWidget::close-button, QDockWidget::float-button {
        border: 1px solid transparent;
        border-radius: 2px;
        background: transparent;
    }

    QDockWidget::close-button:hover, QDockWidget::float-button:hover {
        background: rgba(255, 255, 255, 10);
    }

    QDockWidget::close-button:pressed, QDockWidget::float-button:pressed {
        padding: 1px -1px -1px 1px;
        background: rgba(255, 255, 255, 10);
    }


    QSlider::groove:horizontal {
        border: 1px solid #565a5e;
        height: 4px;
        background: #565a5e;
        margin: 0px;
        border-radius: 2px;
    }

    QSlider::handle:horizontal {
        background: #232629;
        border: 1px solid #565a5e;
        width: 16px;
        height: 16px;
        margin: -8px 0;
        border-radius: 9px;
    }

    QSlider::groove:vertical {
        border: 1px solid #565a5e;
        width: 4px;
        background: #565a5e;
        margin: 0px;
        border-radius: 3px;
    }

    QSlider::handle:vertical {
        background: #232629;
        border: 1px solid #565a5e;
        width: 16px;
        height: 16px;
        margin: 0 -8px;
        border-radius: 9px;
    }

    QToolButton {
        background-color: transparent;
        border: 1px transparent #76797C;
        border-radius: 2px;
        margin: 3px;
        padding: 5px;
    }

    QToolButton[popupMode="1"] { /* only for MenuButtonPopup */
     padding-right: 20px; /* make way for the popup button */
     border: 1px #76797C;
     border-radius: 5px;
    }

    QToolButton[popupMode="2"] { /* only for InstantPopup */
     padding-right: 10px; /* make way for the popup button */
     border: 1px #76797C;
    }


    QToolButton:hover, QToolButton::menu-button:hover {
        background-color: transparent;
        border: 1px solid #3daee9;
        padding: 5px;
    }

    QToolButton:checked, QToolButton:pressed,
            QToolButton::menu-button:pressed {
        background-color: #3daee9;
        border: 1px solid #3daee9;
        padding: 5px;
    }

    /* the subcontrol below is used only in the InstantPopup or DelayedPopup mode */
    QToolButton::menu-indicator {
        background-color:ff8c00;
        top: -7px; left: -2px; /* shift it a bit */
    }

    /* the subcontrols below are used only in the MenuButtonPopup mode */
    QToolButton::menu-button {
        border: 1px transparent #76797C;
        border-top-right-radius: 6px;
        border-bottom-right-radius: 6px;
        /* 16px width + 4px for border = 20px allocated above */
        width: 16px;
        outline: none;
    }

    QToolButton::menu-arrow {
       background-color:ff8c00;
    }

    QToolButton::menu-arrow:open {
        border: 1px solid #76797C;
    }

    QPushButton::menu-indicator  {
        subcontrol-origin: padding;
        subcontrol-position: bottom right;
        left: 8px;
    }

    QTableView
    {
        border: 1px solid #76797C;
        gridline-color: #31363b;
        background-color: #232629;
    }


    QTableView, QHeaderView
    {
        border-radius: 0px;
    }

    QTableView::item:pressed, QListView::item:pressed, QTreeView::item:pressed  {
        background: #3daee9;
        color: #eff0f1;
    }

    QTableView::item:selected:active, QTreeView::item:selected:active, QListView::item:selected:active  {
        background: #3daee9;
        color: #eff0f1;
    }


    QHeaderView
    {
        background-color: #31363b;
        border: 1px transparent;
        border-radius: 0px;
        margin: 0px;
        padding: 0px;

    }

    QHeaderView::section  {
        background-color: #31363b;
        color: #eff0f1;
        padding: 5px;
        border: 1px solid #76797C;
        border-radius: 0px;
        text-align: center;
    }

    QHeaderView::section::vertical::first, QHeaderView::section::vertical::only-one
    {
        border-top: 1px solid #76797C;
    }

    QHeaderView::section::vertical
    {
        border-top: transparent;
    }

    QHeaderView::section::horizontal::first, QHeaderView::section::horizontal::only-one
    {
        border-left: 1px solid #76797C;
    }

    QHeaderView::section::horizontal
    {
        border-left: transparent;
    }


    QHeaderView::section:checked
     {
        color: white;
        background-color: #334e5e;
     }

     /* style the sort indicator */
    QHeaderView::down-arrow {
        image: url(:/qss_icons/Dark_rc/down_arrow.png);
    }

    QHeaderView::up-arrow {
        image: url(:/qss_icons/Dark_rc/up_arrow.png);
    }


    QTableCornerButton::section {
        background-color: #31363b;
        border: 1px transparent #76797C;
        border-radius: 0px;
    }

    QToolBox  {
        padding: 5px;
        border: 1px transparent black;
    }

    QToolBox::tab {
        color: #eff0f1;
        background-color: #31363b;
        border: 1px solid #76797C;
        border-bottom: 1px transparent #31363b;
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
    }

    QToolBox::tab:selected { /* italicize selected tabs */
        font: italic;
        background-color: #31363b;
        border-color: #3daee9;
     }

    QStatusBar::item {
        border: 0px transparent dark;
     }


    QFrame[height="3"], QFrame[width="3"] {
        background-color: #76797C;
    }




    QDateTimeEdit
    {
        background-color:#ffffff;
        border-style: solid;
        border: 1px solid #76797C;
        border-radius: 2px;
        padding: 1px;
        min-width: 75px;
    }

    QDateEdit:on
    {
        padding-top: 2px;
        padding-left: 2px;
        selection-background-color: #4a4a4a;
    }

    QDateEdit QAbstractItemView
    {
        background-color: #ff8c00;
        border-radius: 2px;
        border: 1px solid #3375A3;
        selection-background-color:ff8c00;
    }

    QDateEdit::drop-down
    {
        subcontrol-origin: padding;
        subcontrol-position: top right;
        width: 15px;
        border-left-width: 0px;
        border-left-color: darkgray;
        border-left-style: solid;
        border-top-right-radius: 3px;
        border-bottom-right-radius: 3px;
    }""")
            self.taborge.setObjectName("taborge")
            self.tabagreage.addTab(self.taborge, "")
            self.cclstxt = QtWidgets.QLabel("<h2>COOPERATIVE DES CEREALES ET LEGUMES SECS DE RELIZANE<h2/>",
                                            self.taborge)
            self.cclstxt.resize(600, 40)
            self.cclstxt.move(400, 2)

            self.bulletin_agréagetxt = QtWidgets.QLabel("<h2>Bulletin D'Agréage<h2/>", self.taborge)
            self.bulletin_agréagetxt.move(600, 30)
            self.bulletin_agréagetxt.resize(200, 40)

            self.éspécetxt = QtWidgets.QLabel("<h2>Espéce:Orge<h2/>", self.taborge)
            self.éspécetxt.move(630, 60)

            self.n_bultintxt = QtWidgets.QLabel("N° Bulletin:", self.taborge)
            self.n_bultintxt.move(20, 60)
            self.n_bultin = QtWidgets.QLineEdit(self.taborge, readOnly=True)
            self.n_bultin.move(150, 60)
            self.n_bultin.resize(150, 25)

            self.nome_du_producteurtxt = QtWidgets.QLabel("Nom du Producteur:", self.taborge)
            self.nome_du_producteurtxt.move(20, 100)
            self.nome_du_producteur = QtWidgets.QLineEdit(self.taborge)
            self.nome_du_producteur.move(150, 98)
            self.nome_du_producteur.resize(150, 25)

            self.péretxt = QtWidgets.QLabel("Pére:", self.taborge)
            self.péretxt.setGeometry(QtCore.QRect(315, 98, 100, 20))
            self.pére = QtWidgets.QLineEdit(self.taborge)
            self.pére.setGeometry(QtCore.QRect(410, 98, 150, 23))

            self.n_cartetxt = QtWidgets.QLabel("N.C d'identité:", self.taborge)
            self.n_cartetxt.setGeometry(QtCore.QRect(315, 138, 100, 20))
            self.n_carte = QtWidgets.QLineEdit(self.taborge)
            self.n_carte.setGeometry(QtCore.QRect(410, 138, 150, 23))
            self.n_carte.setInputMask('99999999')

            self.imatriculetxt = QtWidgets.QLabel("Adresse:", self.taborge)
            self.imatriculetxt.move(20, 140)
            self.adresse = QtWidgets.QLineEdit(self.taborge)
            self.adresse.setInputMask("99999-999-99")
            self.adresse.move(150, 138)
            self.adresse.resize(150, 25)

            self.pointdecollecttxt = QtWidgets.QLabel("Point de collecte", self.taborge)
            self.pointdecollecttxt.move(20, 180)
            self.pointdecollect = QtWidgets.QComboBox(self.taborge)
            self.pointdecollect.setStyleSheet("background-color:#ffffff;color:#000000")
            self.pointdecollect.move(150, 178)
            self.pointdecollect.resize(150, 25)
            self.pointdecollect.addItem('')
            self.pointdecollect.addItem('Dock central')
            self.pointdecollect.addItem('Magasin Zemmoura')
            self.pointdecollect.addItem('Magasin Kef-lazreg')
            self.pointdecollect.addItem('Magasin Messra')
            self.pointdecollect.addItem('Marche gros belacel')
            self.pointdecollect.addItem('Station Mendes')
            self.pointdecollect.addItem('Nouvelles S.Mendes')

            self.dattereceptiontxt = QtWidgets.QLabel("Relizane le :", self.taborge)
            self.dattereceptiontxt.setGeometry(QtCore.QRect(880, 100, 150, 23))
            self.dattereceptiont = QtWidgets.QDateTimeEdit(self.taborge)
            self.dattereceptiont.setDisplayFormat("dd-MM-yyyy hh:mm")
            self.dattereceptiont.setGeometry(QtCore.QRect(1000, 100, 150, 23))
            self.dattereceptiont.setDate(self.datedaytime)

            self.agréeeurtxt = QtWidgets.QLabel("Nom de l’Agréeur:", self.taborge)
            self.agréeeurtxt.setGeometry(QtCore.QRect(880, 135, 150, 23))
            self.agréeeurcomboorge = QtWidgets.QComboBox(self.taborge, editable=True)
            self.agréeeurcomboorge.setStyleSheet("background-color:#ffffff;color:#000000")
            self.agréeeurcomboorge.addItem("")
            self.agréeeurcomboorge.addItem("FELOUAH OMAR")
            self.agréeeurcomboorge.addItem("BEKHEDDA AEK")
            self.agréeeurcomboorge.addItem("BENAISSA YOUCEF")
            self.agréeeurcomboorge.addItem("REZZAG SOFIANE ")
            self.agréeeurcomboorge.addItem("BELBACHA M.NADIR")
            self.agréeeurcomboorge.move(1000, 135)
            self.agréeeurcomboorge.resize(150, 23)

            self.quantitetxt = QtWidgets.QLabel("Quantité", self.taborge)
            self.quantitetxt.setGeometry(QtCore.QRect(880, 180, 150, 23))

            self.quantiteorge = QtWidgets.QDoubleSpinBox(self.taborge)
            self.quantiteorge.setRange(1, 10000)
            self.quantiteorge.setSuffix('  QX')
            self.quantiteorge.setSpecialValueText(" ")
            self.quantiteorge.setGeometry(QtCore.QRect(1000, 178, 150, 23))

            self.paramétreor = QtWidgets.QLabel("Paramètre", self.taborge)
            self.paramétreor.move(20, 250)
            self.paramétreor.resize(80, 20)

            self.txtpsfont = QtGui.QFont()
            self.txtpsfont.setBold(True)
            self.txtpsfont.setPointSize(9)
            ################Limites(sans bon ni réf)###############
            self.valeuror = QtWidgets.QLabel("""Limite-ssans-bon-ni-réf)""", self.taborge)
            self.valeuror.move(170, 250)
            self.valeuror.resize(145, 20)

            ######################Limites(sans bon ni réf)################
            self.psor = QtWidgets.QLineEdit("Poids spécifique (kg/hl):\t(58-62)", self.taborge, readOnly=True)
            self.psor.resize(319, 40)
            self.psor.move(20, 280)
            self.psor.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.psor.setFont(self.txtpsfont)
            self.psor.setStyleSheet(" border: 2px solid bleu ;border-radius: 4px;padding: 0px")
            ###############################humidite#############
            self.ergotor = QtWidgets.QLineEdit("Ergot(%):        \t\t<= 1 ", self.taborge, readOnly=True)
            self.ergotor.resize(319, 40)
            self.ergotor.move(20, 322)
            self.ergotor.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.ergotor.setFont(self.txtpsfont)

            #######################ergot#########################
            self.Grainsanvaleuror = QtWidgets.QLineEdit("Grains sans valeurs (%) ", self.taborge, readOnly=True)
            self.Grainsanvaleuror.resize(319, 40)
            self.Grainsanvaleuror.move(20, 364)
            self.Grainsanvaleuror.setStyleSheet("background-color: #232629")
            self.Grainsanvaleuror.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.Grainsanvaleuror.setFont(self.txtpsfont)

            #########################Graines nuisibles (%)##########
            self.matierinertor = QtWidgets.QLineEdit("Matiéres inertes (%):", self.taborge, readOnly=True)
            self.matierinertor.resize(319, 40)
            self.matierinertor.move(20, 406)
            self.matierinertor.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.matierinertor.setFont(self.txtpsfont)
            #############################Débris végétaux (%)########
            self.totalor = QtWidgets.QLineEdit("Total (%):        \t\t<= 2 ", self.taborge, readOnly=True)
            self.totalor.resize(319, 40)
            self.totalor.move(20, 448)
            self.totalor.setFont(self.txtpsfont)
            self.totalor.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")

            self.totalor = QtWidgets.QLineEdit("\tTotal des Bonifications et Réfactions:", self.taborge, readOnly=True)
            self.totalor.resize(450, 40)
            self.totalor.move(20, 490)
            self.totalor.setFont(self.txtpsfont)
            self.totalor.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")

            #########################Matière inerte (%)################

            self.valeuror = QtWidgets.QLabel("valeur", self.taborge)
            self.valeuror.move(350, 250)
            self.valeuror.resize(100, 20)

            ######################Limites(sans bon ni réf)################
            self.vpsor = QtWidgets.QDoubleSpinBox(self.taborge)
            self.vpsor.setRange(0, 72.00)
            self.vpsor.setSpecialValueText(' ')
            self.vpsor.resize(120, 40)
            self.vpsor.move(350, 280)
            self.vpsor.setFont(self.txtpsfont)
            self.vpsor.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ###############################humidite#############
            self.vergotor = QtWidgets.QDoubleSpinBox(self.taborge)
            self.vergotor.setRange(0, 1)
            self.vergotor.resize(120, 40)
            self.vergotor.setSpecialValueText(' ')
            self.vergotor.move(350, 322)
            self.vergotor.setFont(self.txtpsfont)
            self.vergotor.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################ergot#########################
            self.vGrainsanvaleuror = QtWidgets.QDoubleSpinBox(self.taborge, readOnly=False)
            self.vGrainsanvaleuror.setRange(0, 10)
            self.vGrainsanvaleuror.setSpecialValueText(' ')
            self.vGrainsanvaleuror.resize(120, 40)
            self.vGrainsanvaleuror.move(350, 364)
            self.vGrainsanvaleuror.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Graines nuisibles (%)##########
            self.vmatierinertor = QtWidgets.QDoubleSpinBox(self.taborge, readOnly=False)
            self.vmatierinertor.setRange(0, 10)
            self.vmatierinertor.setSpecialValueText(' ')
            self.vmatierinertor.resize(120, 40)
            self.vmatierinertor.move(350, 406)
            self.vmatierinertor.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #############################Débris végétaux (%)########
            self.vtotalor = QtWidgets.QDoubleSpinBox(self.taborge, readOnly=True)
            self.vtotalor.setRange(0, 20)
            self.vtotalor.setSpecialValueText(' ')
            self.vtotalor.resize(120, 40)
            self.vtotalor.move(350, 448)
            self.vtotalor.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")

            self.bonior = QtWidgets.QLabel("Bonification", self.taborge)
            self.bonior.move(480, 250)
            self.bonior.resize(80, 20)
            ######################Limites(sans bon ni réf)################
            self.bpsor = QtWidgets.QDoubleSpinBox(self.taborge, readOnly=True)
            self.bpsor.resize(120, 40)
            self.bpsor.move(480, 280)
            self.bpsor.setSpecialValueText(" ")
            self.bpsor.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ###############################humidite#############
            self.bergotor = QtWidgets.QDoubleSpinBox(self.taborge, readOnly=True)
            self.bergotor.resize(120, 40)
            self.bergotor.move(480, 322)
            self.bergotor.setSpecialValueText(" ")
            self.bergotor.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################ergot#########################
            self.bGrainsanvaleuror = QtWidgets.QDoubleSpinBox(self.taborge, readOnly=True)
            self.bGrainsanvaleuror.resize(120, 40)
            self.bGrainsanvaleuror.move(480, 364)
            self.bGrainsanvaleuror.setSpecialValueText(" ")
            self.bGrainsanvaleuror.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #########################Graines nuisibles (%)##########
            self.bmatierinertor = QtWidgets.QDoubleSpinBox(self.taborge, readOnly=True)
            self.bmatierinertor.resize(120, 40)
            self.bmatierinertor.move(480, 406)
            self.bmatierinertor.setSpecialValueText(" ")
            self.bmatierinertor.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #############################Débris végétaux (%)########
            self.btotalor = QtWidgets.QDoubleSpinBox(self.taborge, readOnly=True)
            self.btotalor.resize(120, 40)
            self.btotalor.move(480, 448)
            self.btotalor.setSpecialValueText(" ")
            self.btotalor.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #########################Matière inerte (%)################
            self.bglobaltotalor = QtWidgets.QDoubleSpinBox(self.taborge, readOnly=True)
            self.bglobaltotalor.resize(120, 40)
            self.bglobaltotalor.move(480, 490)
            self.bglobaltotalor.setSpecialValueText(" ")
            self.bglobaltotalor.setStyleSheet(
                "background-color:#88ffaa;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")

            self.refactionor = QtWidgets.QLabel("Réfaction", self.taborge)
            self.refactionor.move(610, 250)
            self.refactionor.resize(80, 20)
            ######################Limites(sans bon ni réf)################
            self.rpsor = QtWidgets.QDoubleSpinBox(self.taborge, readOnly=True)
            self.rpsor.resize(120, 40)
            self.rpsor.move(610, 280)
            self.rpsor.setSpecialValueText(" ")
            self.rpsor.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ###############################humidite#############
            self.rergotor = QtWidgets.QDoubleSpinBox(self.taborge, readOnly=True)
            self.rergotor.resize(120, 40)
            self.rergotor.move(610, 322)
            self.rergotor.setSpecialValueText(" ")
            self.rergotor.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################ergot#########################
            self.rGrainsanvaleuror = QtWidgets.QDoubleSpinBox(self.taborge, readOnly=True)
            self.rGrainsanvaleuror.resize(120, 40)
            self.rGrainsanvaleuror.move(610, 364)
            self.rGrainsanvaleuror.setSpecialValueText(" ")
            self.rGrainsanvaleuror.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #########################Graines nuisibles (%)##########
            self.rmatierinertor = QtWidgets.QDoubleSpinBox(self.taborge, readOnly=True)
            self.rmatierinertor.resize(120, 40)
            self.rmatierinertor.move(610, 406)
            self.rmatierinertor.setSpecialValueText(" ")
            self.rmatierinertor.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #############################Débris végétaux (%)########
            self.rtotalor = QtWidgets.QDoubleSpinBox(self.taborge, readOnly=True)
            self.rtotalor.resize(120, 40)
            self.rtotalor.move(610, 448)
            self.rtotalor.setSpecialValueText(" ")
            self.rtotalor.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #########################Matière inerte (%)################
            self.rglobaltotalor = QtWidgets.QDoubleSpinBox(self.taborge, readOnly=True)
            self.rglobaltotalor.setStyleSheet(
                "background-color:#e22630;color:000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.rglobaltotalor.resize(120, 40)
            self.rglobaltotalor.setSpecialValueText(" ")
            self.rglobaltotalor.move(610, 490)

            self.observationortxt = QtWidgets.QLabel("Observation", self.taborge)
            self.observationortxt.setGeometry(QtCore.QRect(743, 250, 100, 20))

            self.observationor = QtWidgets.QTextEdit(self.taborge)
            self.observationor.setGeometry(QtCore.QRect(743, 280, 120, 250))

            self.timer = QTimer()
            # Connect the timeout signal of the timer to the refresh function
            self.timer.timeout.connect(self.number_bulletin_orge)
            # Set the interval in milliseconds (e.g., 5000 ms = 5 seconds)
            self.timer.setInterval(1000)  # Adjust the interval as per your requirement
            # Start the timer
            self.timer.start()

            self.timercalculorge = QTimer()
            self.timercalculorge.timeout.connect(self.calcul_orge)
            self.timercalculorge.setInterval(1000)
            self.timercalculorge.start()

            self.btnsavebd = QtWidgets.QPushButton("ENREGISTRER", self.taborge, clicked=lambda: self.add_datta_orge())
            self.btnsavebd.move(880, 280)
            self.btnsavebd.resize(125, 50)

            self.btnimprimejour = QtWidgets.QPushButton("IMPRIMER \nLE JOURNALIER", self.taborge,
                                                        clicked=lambda: self.print_day())
            self.btnimprimejour.move(880, 410)
            self.btnimprimejour.resize(125, 50)

            self.btnimprimeticket = QtWidgets.QPushButton("IMPRIMER \nLES TICKET", self.taborge,
                                                          clicked=lambda: self.eticket_orge())
            self.btnimprimeticket.move(1030, 340)
            self.btnimprimeticket.resize(125, 50)

            self.btnselectionblt = QtWidgets.QPushButton("SELECTIONNE \nBULLETIN", self.taborge,
                                                         clicked=lambda: self.printBulltinProducteurOrge())
            self.btnselectionblt.move(1030, 280)
            self.btnselectionblt.resize(125, 50)

            self.btnprintbd = QtWidgets.QPushButton("IMPRIMER", self.taborge,
                                                    clicked=lambda: self.bulletin_orge_print())
            self.btnprintbd.move(880, 340)
            self.btnprintbd.resize(125, 50)

            self.btnefaceor = QtWidgets.QPushButton("EFACER", self.taborge, clicked=lambda: self.clear_orge())
            self.btnefaceor.move(880, 480)
            self.btnefaceor.resize(125, 50)
            #########################################################################################################
            ##################################AVOINE###################################################
            #########################################################################################################
            ###self.tabavoine = QtWidgets.QWidget()
            # self.tabavoine.setObjectName("tabavoine")
            # self.tabagreage.addTab(self.tabavoine, "")
            # self.cclstxt = QtWidgets.QLabel("<h2>COOPERATIVE DES CEREALES ET LEGUMES SECS DE RELIZANE<h2/>", self.tabavoine)
            # self.cclstxt.resize(600, 40)
            # self.cclstxt.move(400, 2)

            # self.cclstxt = QtWidgets.QLabel("<h2>SERA DISPONIBLE PLUS TARD ................<h2/>", self.tabavoine)
            # self.cclstxt.resize(600, 100)
            # self.cclstxt.move(500, 100)

            # self.font = QtGui.QFont()
            # self.font.setBold(True)
            # self.font.setPointSize(10)

            # self.txtpsfont = QtGui.QFont()
            # self.txtpsfont.setBold(True)
            # self.txtpsfont.setPointSize(9)

            # self.rtotaldemfont = QtGui.QFont("color:black")
            # self.rtotaldemfont.setBold(True)
            # self.rtotaldemfont.setPointSize(12)

            # self.bulletin_agréagetxt = QtWidgets.QLabel("<h2>Bulletin D'Agréage<h2/>", self.tabavoine)
            # self.bulletin_agréagetxt.move(600, 30)
            # self.bulletin_agréagetxt.resize(200, 40)

            # self.éspécetxt = QtWidgets.QLabel("<h2>Espéce:Avoine <h2/>", self.tabavoine)
            # self.éspécetxt.move(630, 60)

            self.verticalLayout.addWidget(self.tabagreage)
            MainWindow.setCentralWidget(self.centralwidget)
            self.statusbar = QtWidgets.QStatusBar(MainWindow)
            self.statusbar.setObjectName("statusbar")
            MainWindow.setStatusBar(self.statusbar)

            self.retranslateUi(MainWindow)
            self.tabagreage.setCurrentIndex(3)
            QtCore.QMetaObject.connectSlotsByName(MainWindow)

        def retranslateUi(self, MainWindow):
            _translate = QtCore.QCoreApplication.translate
            MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
            self.tabagreage.setTabText(self.tabagreage.indexOf(self.tabbldur), _translate("MainWindow", "Blé Dur"))
            self.tabagreage.setTabText(self.tabagreage.indexOf(self.tabbltendre),
                                       _translate("MainWindow", "Blé Tendre"))
            self.tabagreage.setTabText(self.tabagreage.indexOf(self.taborge), _translate("MainWindow", "Orge"))
            # self.tabagreage.setTabText(self.tabagreage.indexOf(self.tabavoine), _translate("MainWindow", "Avoine"))
except Exception as e:
    print(e)
##############################ConfirmiteClass
###############################################################################
##############################################################################
###########################################################################
######################################################################
###############################################################
try:
    class Conformité_Window(object):
        ##############################################buttuons&def####################
        def clear_all(self):
            self.vpsin.clear()
            self.vhumiditein.clear()
            self.vtotalpremin.clear()
            self.vgraincasséin.clear()
            self.vtotaldemin.clear()
            self.vgrainetrangéin.clear()
            self.vgrainmouchtéin.clear()
            self.vgrainmaigrein.clear()
            self.vgrainechaudein.clear()
            self.vdébrisvéin.clear()
            self.vmatiéreinrtin.clear()
            self.vdébrisvéin.clear()
            self.vmatiéreinrtin.clear()
            self.vgrainsanvaleurin.clear()
            self.vgrainchauféin.clear()
            self.vgraigerméin.clear()
            self.vgrainpunaiséin.clear()
            self.vgrainpiquéin.clear()
            self.vgrainboutefin.clear()
            self.vgraincarréin.clear()
            self.vautrecéréalin.clear()
            self.vautrecéréalin.setValue(0)
            self.vgraigerméin.setValue(0)
            self.vgrainpunaiséin.setValue(0)
            self.vgrainpiquéin.setValue(0)
            self.vgrainboutefin.setValue(0)
            self.vgraincarréin.setValue(0)
            self.vpsin.setValue(0)
            self.vhumiditein.setValue(0)
            self.vtotalpremin.setValue(0)
            self.vgraincasséin.setValue(0)
            self.vtotaldemin.setValue(0)
            self.vgrainetrangéin.setValue(0)
            self.vgrainmouchtéin.setValue(0)
            self.vgrainmaigrein.setValue(0)
            self.vgrainechaudein.setValue(0)
            self.vdébrisvéin.setValue(0)
            self.vmatiéreinrtin.setValue(0)
            self.vdébrisvéin.setValue(0)
            self.vmatiéreinrtin.setValue(0)
            self.vgrainsanvaleurin.setValue(0)
            self.vgrainchauféin.setValue(0)
            self.vtotalpremin.setValue(0)

        def plus_value(self):
            e = self.vgraincasséin.value()
            f = self.vgrainmaigrein.value()
            g = self.vgrainechaudein.value()
            h = self.vgraigerméin.value()
            i = self.vgrainpunaiséin.value()
            j = self.vgrainpiquéin.value()
            k = self.vgrainboutefin.value()
            m = self.vgrainmouchtéin.value()
            n = self.vgrainetrangéin.value()
            # total 2eme cat blé dur
            vtotaldemm = e + f + g + h + i + j + k + m + n
            self.vtotaldemin.setValue(vtotaldemm)
            # total 1er
            p = self.vdébrisvéin.value()
            q = self.vmatiéreinrtin.value()
            r = self.vgrainnuisiblein.value()
            s = self.vgrainsanvaleurin.value()
            v = self.vgrainchauféin.value()
            w = self.vgraincarréin.value()
            self.vtotalpremin.setValue(p + q + r + s + v + w)

        def save_doc(self):
            self.doc = DocxTemplate("_bulletin entré/template_BULLETIN_ENTRE.docx")
            # matri=[self.matricullist.item(x).text() for x in range(self.matricullist.count())]
            # matriadd=("\n".join(matri))
            matriadd = self.matricullist.toPlainText()
            ebps = self.vpsin.text()
            provance = self.provancetecombo.currentText()
            lieu = self.lieucombo.currentText()
            esps = self.éspécecombo.currentText()
            qntt = self.quantite.text()
            matierinirt = self.vmatiéreinrtin.text()
            debrisv = self.vdébrisvéin.text()
            grainnuisible = self.vgrainnuisiblein.text()
            grainsansvaleur = self.vgrainsanvaleurin.text()
            agrcm = self.agréeeurcombo.currentText()
            print(agrcm)
            tnvv = self.vhumiditein.text()
            totap = self.vtotalpremin.text()
            datte = self.dateedite.text()
            graincasse = self.vgraincasséin.text()
            grainmaigre = self.vgrainmaigrein.text()
            grainmoushte = self.vgrainmouchtéin.text()
            grainpunaise = self.vgrainpunaiséin.text()
            grainpique = self.vgrainpiquéin.text()
            grainboute = self.vgrainpiquéin.text()
            totad = self.vtotaldemin.text()
            autrecereal = self.vautrecéréalin.text()
            bledur = self.vgrainetrangéin.text()
            # self.doc.render({"mat":self.items,"ps": ebps,"uca": provance,"pntc":lieu,"prd": esps,"qtt": qntt,"mtin": matierinirt,"grsn": grainsansvaleur, "grns": grainnuisible, "dbrv": debrisv,"tne": tnvv, "gr": agrcm,"vttp": tota1er, "ps": ebps,"mmmmmmmmmmmmmmmmm": provance,"dt": datte, "gcse": graincasse,"gmgr": grainmaigre, "gmch": grainmoushte, "grpn": grainpunaise,"grpq": grainpique,"grbt": grainboute,"vttd": tota2eme,"autr": autrecereal,"pbtv": bledur})
            self.doc.render({
                "ps": ebps,
                "uca": provance,
                "pntc": lieu,
                "prd": esps,
                "qtt": qntt,
                "mtin": matierinirt,
                "grsn": grainsansvaleur,
                "grns": grainnuisible,
                "dbrv": debrisv,
                "tne": tnvv,
                "gr": agrcm,
                "vttp": totap,
                "dt": datte,
                "gcse": graincasse,
                "gmgr": grainmaigre,
                "gmch": grainmoushte,
                "grpn": grainpunaise,
                "grpq": grainpique,
                "grbt": grainboute,
                "vttd": totad,
                "autr": autrecereal,
                "pbtv": bledur,
                "mat": matriadd
            })
            self.doc_name = provance + datetime.datetime.now().strftime("%d-%m-%y") + ".docx"
            path, _ = QFileDialog.getSaveFileName(None, "Enregistrer Fichiers ", self.doc_name,
                                                  "Fichiers DOCX (*.docx)")
            if path:
                self.doc.save(path)
                msg_box = QMessageBox()
                msg_box.setWindowTitle("Confirmation")
                msg_box.setText("Le fichier a été enregistré avec succès. ")
                msg_box.exec()

        def matriculbtnadd(self):
            a = self.matriculedite.text()
            self.matricullist.append(a)
            self.matriculedite.clear()

        def printerin(self):
            self.doc = DocxTemplate("_bulletin entré/template_BULLETIN_ENTRE.docx")
            matriadd = self.matricullist.toPlainText()
            # matriadd = ("\n".join(matri))
            # [self.matricullist.item(x).text() for x in range(self.matricullist.count())]
            ebps = self.vpsin.text()
            provance = self.provancetecombo.currentText()
            lieu = self.lieucombo.currentText()
            esps = self.éspécecombo.currentText()
            qntt = self.quantite.text()
            matierinirt = self.vmatiéreinrtin.text()
            debrisv = self.vdébrisvéin.text()
            grainnuisible = self.vgrainnuisiblein.text()
            grainsansvaleur = self.vgrainsanvaleurin.text()
            agrcm = self.agréeeurcombo.currentText()
            print(agrcm)
            print("fgfgdfgdfg")
            tnvv = self.vhumiditein.text()
            tota1er = self.vtotalpremin.text()
            datte = self.dateedite.text()
            graincasse = self.vgraincasséin.text()
            grainmaigre = self.vgrainmaigrein.text()
            grainmoushte = self.vgrainmouchtéin.text()
            grainpunaise = self.vgrainpunaiséin.text()
            grainpique = self.vgrainpiquéin.text()
            grainboute = self.vgrainpiquéin.text()
            tota2eme = self.vtotaldemin.text()
            autrecereal = self.vautrecéréalin.text()
            bledur = self.vgrainetrangéin.text()
            # self.doc.render({"mat":self.items,"ps": ebps,"uca": provance,"pntc":lieu,"prd": esps,"qtt": qntt,"mtin": matierinirt,"grsn": grainsansvaleur, "grns": grainnuisible, "dbrv": debrisv,"tne": tnvv, "gr": agrcm,"vttp": tota1er, "ps": ebps,"mmmmmmmmmmmmmmmmm": provance,"dt": datte, "gcse": graincasse,"gmgr": grainmaigre, "gmch": grainmoushte, "grpn": grainpunaise,"grpq": grainpique,"grbt": grainboute,"vttd": tota2eme,"autr": autrecereal,"pbtv": bledur})
            self.doc.render({
                "ps": ebps,
                "uca": provance,
                "pntc": lieu,
                "prd": esps,
                "qtt": qntt,
                "mtin": matierinirt,
                "grsn": grainsansvaleur,
                "grns": grainnuisible,
                "dbrv": debrisv,
                "tne": tnvv,
                "gr": agrcm,
                "vttp": tota1er,
                "dt": datte,
                "gcse": graincasse,
                "gmgr": grainmaigre,
                "gmch": grainmoushte,
                "grpn": grainpunaise,
                "grpq": grainpique,
                "grbt": grainboute,
                "vttd": tota2eme,
                "autr": autrecereal,
                "pbtv": bledur,
                "mat": matriadd
            })
            doc_names = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
            doc_pdf = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False).name
            self.doc.save(doc_names)
            try:
                if doc_names:
                    a = self.progress_bar()
                    sys.stderr = open("consoleoutput.log", "w")
                    convert(doc_names, doc_pdf)
                    # Open the resulting .pdf file using the default associated application
                    # os.startfile(doc_pdf, 'open')
                    app_path = 'C:\\Program Files\\Okular\\bin\\okular.exe'
                    subprocess.Popen([app_path, doc_pdf])
            except Exception as e:
                print(e)

        ####################################def sortie
        def save_doc_sortie(self):
            self.docs = DocxTemplate("_bulletin sortie/template_BULLETIN_SORTIE.docx")
            matriadd = self.matriculcomboso.text()
            observation = self.txtobservationso.toPlainText()
            ebps = self.vpsso.text()
            distination = self.distinationcomboso.currentText()
            expéditeur = self.pointcollectecomboso.currentText()
            esps = self.éspécecombo.currentText()
            qntt = self.quantiteso.text()
            pinsect = self.vpinsect.text()
            espinsct = self.veinsect.text()
            mitadinetbt = self.vmetadinetblt.text()
            mitadini = self.vmitadin.text()
            bletendredandbd = self.vbltdanbld.text()
            mauvaiseherb = self.vgrainmauvaise.text()
            carie = self.vgraincarréso.text()
            matierinirt = self.vmatiéreinrtso.text()
            debrisv = self.vdébrisvéso.text()
            grainnuisible = self.vgrainnuisibleso.text()
            grainsansvaleur = self.vgrainsanvaleurso.text()
            agrcm = self.agréeeurcomboso.currentText()
            totap = self.vtotalpremso.text()
            datte = self.dateediteso.text()
            graincasse = self.vgraincasséso.text()
            grainmaigre = self.vgrainechaudeso.text()
            grainmoushte = self.vgrainmouchtéso.text()
            grainpunaise = self.vgrainpunaiséso.text()
            grainpique = self.vgrainpiquéso.text()
            grainboute = self.vgrainpiquéso.text()
            totad = self.vtotaldemso.text()
            autrecereal = self.vautrecéréalso.text()
            grainavarie = self.vgravar.text()
            self.docs.render({
                "ps": ebps,
                "pro": expéditeur,
                "dst": distination,
                "pl": esps,
                "qtt": qntt,
                "mtint": matierinirt,
                "grsn": grainsansvaleur,
                "nuis": grainnuisible,
                "dbrv": debrisv,
                "gr": agrcm,
                "ttp": totap,
                "dat": datte,
                "grcs": graincasse,
                "grech": grainmaigre,
                "grnmch": grainmoushte,
                "grpn": grainpunaise,
                "grpq": grainpique,
                "grbt": grainboute,
                "vttd": totad,
                "aut": autrecereal,
                "grav": grainavarie,
                "mat": matriadd,
                "pinsct": pinsect,
                "insct": espinsct,
                "mttt": mitadinetbt,
                "mtdn": mitadini,
                "grmh": mauvaiseherb,
                "grcr": carie,
                "gbtbd": bletendredandbd,
                "observ": observation
            })
            self.doc_names = distination + "-" + matriadd + datetime.datetime.now().strftime("%d-%m-%y") + ".docx"
            pdfnames = distination + "-" + matriadd + datetime.datetime.now().strftime("%d-%m-%y") + ".pdf"
            path, _ = QFileDialog.getSaveFileName(None, "Enregistrer Fichiers", self.doc_names, "DOCX Files (*.docx)")
            if path:
                self.docs.save(path)
                msg_box = QMessageBox()
                msg_box.setWindowTitle("Confirmation")
                msg_box.setText("Le fichier a été enregistré avec succès. ")
                msg_box.exec()

        def printer_sortie(self):
            try:
                self.docs = DocxTemplate("_bulletin sortie/template_BULLETIN_SORTIE.docx")
                matriadd = self.matriculcomboso.text()
                observation = self.txtobservationso.toPlainText()
                ebps = self.vpsso.text()
                distination = self.distinationcomboso.currentText()
                expéditeur = self.pointcollectecomboso.currentText()
                esps = self.éspécecombo.currentText()
                qntt = self.quantiteso.text()
                pinsect = self.vpinsect.text()
                espinsct = self.veinsect.text()
                mitadinetbt = self.vmetadinetblt.text()
                mitadini = self.vmitadin.text()
                bletendredandbd = self.vbltdanbld.text()
                mauvaiseherb = self.vgrainmauvaise.text()
                carie = self.vgraincarréso.text()
                matierinirt = self.vmatiéreinrtso.text()
                debrisv = self.vdébrisvéso.text()
                grainnuisible = self.vgrainnuisibleso.text()
                grainsansvaleur = self.vgrainsanvaleurso.text()
                agrcm = self.agréeeurcomboso.currentText()
                totap = self.vtotalpremso.text()
                datte = self.dateediteso.text()
                graincasse = self.vgraincasséso.text()
                grainmaigre = self.vgrainechaudeso.text()
                grainmoushte = self.vgrainmouchtéso.text()
                grainpunaise = self.vgrainpunaiséso.text()
                grainpique = self.vgrainpiquéso.text()
                grainboute = self.vgrainpiquéso.text()
                totad = self.vtotaldemso.text()
                autrecereal = self.vautrecéréalso.text()
                grainavarie = self.vgravar.text()
                self.docs.render({
                    "ps": ebps,
                    "pro": expéditeur,
                    "dst": distination,
                    "pl": esps,
                    "qtt": qntt,
                    "mtint": matierinirt,
                    "grsn": grainsansvaleur,
                    "nuis": grainnuisible,
                    "dbrv": debrisv,
                    "gr": agrcm,
                    "ttp": totap,
                    "dat": datte,
                    "grcs": graincasse,
                    "grech": grainmaigre,
                    "grnmch": grainmoushte,
                    "grpn": grainpunaise,
                    "grpq": grainpique,
                    "grbt": grainboute,
                    "vttd": totad,
                    "aut": autrecereal,
                    "grav": grainavarie,
                    "mat": matriadd,
                    "pinsct": pinsect,
                    "insct": espinsct,
                    "mttt": mitadinetbt,
                    "mtdn": mitadini,
                    "grmh": mauvaiseherb,
                    "grcr": carie,
                    "gbtbd": bletendredandbd,
                    "observ": observation
                })
                doc_names = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                doc_pdf = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False).name
                self.docs.save(doc_names)
                try:
                    if doc_names:
                        a = self.progress_bar()
                        sys.stderr = open("consoleoutput.log", "w")
                        convert(doc_names, doc_pdf)
                        # Open the resulting .pdf file using the default associated application
                        # os.startfile(doc_pdf, 'open')
                        app_path = 'C:\\Program Files\\Okular\\bin\\okular.exe'
                        subprocess.Popen([app_path, doc_pdf])
                except Exception as e:
                    print(e)
            except Exception as e:
                print(e)

        def plus_sortie(self):
            n = self.vmetadinetblt.value()
            aa = self.vbltdanbld.value()
            ab = self.vmitadin.value()
            ac = self.vgrainmauvaise.value()
            p = self.vdébrisvéso.value()
            q = self.vmatiéreinrtso.value()
            r = self.vgrainnuisibleso.value()
            s = self.vgrainsanvaleurso.value()
            w = self.vgraincarréso.value()
            self.vtotaldemso.setValue(q + p + s + w + r)
            self.vtotalpremso.setValue(+aa + ab + ac + n)

        def clear_sortie(self):
            self.vmitadin.clear()
            self.vgrainnuisibleso.clear()
            self.vpsso.clear()
            self.vtotalpremso.clear()
            self.vgraincasséso.clear()
            self.vtotaldemso.clear()
            self.vgrainmouchtéso.clear()
            self.vgrainechaudeso.clear()
            self.vdébrisvéso.clear()
            self.vmatiéreinrtso.clear()
            self.vdébrisvéso.clear()
            self.vmatiéreinrtso.clear()
            self.vgrainsanvaleurso.clear()
            self.vgrainpunaiséso.clear()
            self.vgrainpiquéso.clear()
            self.vgrainboutéso.clear()
            self.vgraincarréso.clear()
            self.vautrecéréalso.clear()
            self.vmetadinetblt.clear()
            self.vbltdanbld.clear()
            self.vgrainmauvaise.clear()
            self.vautrecéréalso.setValue(0)
            self.vgraigerméso.setValue(0)
            self.vgrainpunaiséso.setValue(0)
            self.vgrainpiquéso.setValue(0)
            self.vgrainboutéso.setValue(0)
            self.vgraincarréso.setValue(0)
            self.vpsso.setValue(0)
            self.vtotalpremso.setValue(0)
            self.vgraincasséso.setValue(0)
            self.vtotaldemso.setValue(0)
            self.vgrainmouchtéso.setValue(0)
            self.vgrainechaudeso.setValue(0)
            self.vdébrisvéso.setValue(0)
            self.vmatiéreinrtso.setValue(0)
            self.vdébrisvéso.setValue(0)
            self.vmatiéreinrtso.setValue(0)
            self.vgrainsanvaleurso.setValue(0)
            self.vtotalpremso.setValue(0)

        def progress_bar(self):
            self.widgetprogress = QtWidgets.QDialog()
            self.widgetprogress.setStyleSheet(""" QWidget
                                {
                                    color: #000000;
                                    background-color: #ffffff;
                                    border-width: 1px;
                                    border-color: #1e1e1e;
                                    border-style: solid;
                                    border-radius: 6;
                                    padding: 0px;
                                    font-size: 18px;
                                    padding-left: 1px;
                                    padding-right: 1px
                                }
                                QWidget:item:hover
                                {
                                    background-color: #3daee9;
                                    color: #eff0f1;
                                }
                                QWidget:item:selected
                                {
                                    background-color: #3daee9;
                                }
                                QWidget:disabled
                                {
                                    color: #454545;
                                    background-color: #31363b;
                                }
                                QPushButton
                                {
                                    color: #000000;
                                    background-color:#ade3e7;
                                    border-width: 1px;
                                    border-color: #1e1e1e;
                                    border-style: solid;
                                    border-radius: 6;
                                    padding: 3px;
                                    font-size: 12px;
                                    padding-left: 5px;
                                    padding-right: 5px;
                                    min-width: 40px
                                }
                                QPushButton:disabled
                                {
                                    background-color: #31363b;
                                    border-width: 1px;
                                    border-color: #454545;
                                    border-style: solid;
                                    padding-top: 5px;
                                    padding-bottom: 5px;
                                    padding-left: 10px;
                                    padding-right: 10px;
                                    border-radius: 2px;
                                    color: #454545;
                                }

                                QPushButton:pressed
                                {
                                    background-color: #3daee9;
                                    padding-top: -15px;
                                    padding-bottom: -17px;
                                }
                                QPushButton:hover
                                {
                                    border: 1px solid #ff8c00;
                                    color: #000000;
                                }
                                 QLabel
                                {
                                    font-size: 18px;
                                    border: 0px solid orange;
                                }

                            """)
            self.widgetprogress.setWindowTitle("جاري تحميل الملف يرجى الانتظار ")
            self.widgetprogress.setGeometry(550, 450, 250, 20)
            self.progressBar = QtWidgets.QProgressBar(self.widgetprogress)
            self.progressBar.setGeometry(10, 10, 200, 10)
            self.progressBar.setMinimum(0)
            self.progressBar.setMaximum(100)
            self.progressBar.setStyleSheet("""QProgressBar
        {
        border: solid grey;
        border-radius: 15px;
        color: black;
        }
        QProgressBar::chunk 
        {
        background-color: #05B8CC;
        border-radius :15px;
        }      """)
            self.progressBar.setAlignment(Qt.AlignmentFlag.AlignCenter)
            self.vbox = QVBoxLayout(self.widgetprogress)
            self.vbox.addWidget(self.progressBar)
            self.timer = QtCore.QTimer()
            self.timer.timeout.connect(self.update_progress)
            self.timer.start(5)  # Update progress every
            self.widgetprogress.show()

        def update_progress(self):
            # Simulate file download progress
            current_value = self.progressBar.value()
            if current_value < 100:
                new_value = current_value + 10
                self.progressBar.setValue(new_value)
                if current_value == 99:
                    self.timer.stop()
                    self.progressBar.close()
                    self.widgetprogress.close()

        #############################################################################################
        ########################################################################################
        ############################################moulin sortie
        def allcallculbd(self):
            self.plusbd()

        def clear_allbd(self):
            self.vpsbd.clear()
            self.vhumiditebd.clear()
            self.vtotalprembd.clear()
            self.vgraincassébd.clear()
            self.vtotaldembd.clear()
            self.vgrainetrangébd.clear()
            self.vgrainmouchtébd.clear()
            self.vgrainmaigrebd.clear()
            self.vgrainechaudebd.clear()
            self.vdébrisvébd.clear()
            self.vmatiéreinrtbd.clear()
            self.vdébrisvébd.clear()
            self.vmatiéreinrtbd.clear()
            self.vgrainsanvaleurbd.clear()
            self.vgrainchaufébd.clear()
            self.vgrainboutébd.clear()
            self.vblétendreinbledur.clear()
            self.vtotalcomplet.clear()
            self.vindicenotin.clear()
            self.vgrainpiquébd.clear()
            self.vgrainpunaisébd.clear()
            self.vgraincarrébd.clear()
            self.vergotbd.clear()
            self.vergotbd.setValue(0)
            self.vgraigermébd.clear()
            self.vgraigermébd.setValue(0)
            self.vgrainnuisiblebd.clear()
            self.vgrainnuisiblebd.setValue(0)
            self.vgraincarrébd.setValue(0)
            self.vgrainpunaisébd.setValue(0)
            self.vgrainpiquébd.setValue(0)
            self.vindicenotin.setValue(0)
            self.vtotalcomplet.setValue(0)
            self.vpsbd.setValue(0)
            self.vhumiditebd.setValue(0)
            self.vtotalprembd.setValue(0)
            self.vgraincassébd.setValue(0)
            self.vtotaldembd.setValue(0)
            self.vgrainetrangébd.setValue(0)
            self.vgrainmouchtébd.setValue(0)
            self.vgrainmaigrebd.setValue(0)
            self.vgrainechaudebd.setValue(0)
            self.vdébrisvébd.setValue(0)
            self.vmatiéreinrtbd.setValue(0)
            self.vdébrisvébd.setValue(0)
            self.vmatiéreinrtbd.setValue(0)
            self.vgrainsanvaleurbd.setValue(0)
            self.vgrainchaufébd.setValue(0)
            self.vtotalprembd.setValue(0)
            self.vgrainboutébd.setValue(0)
            self.vblétendreinbledur.setValue(0)

        def plusbd(self):
            e = self.vgraincassébd.value()
            f = self.vgrainmaigrebd.value()
            g = self.vgrainechaudebd.value()
            h = self.vgraigermébd.value()
            i = self.vgrainpunaisébd.value()
            j = self.vgrainpiquébd.value()
            k = self.vgrainboutébd.value()
            m = self.vgrainmouchtébd.value()
            n = self.vgrainetrangébd.value()
            q = self.vindicenotin.value()
            r = self.vblétendreinbledur.value()
            # total 2eme cat blé dur
            vtotaldemmbd = f + g + h + i + j + m + n
            # total 1er ble dur
            p = self.vdébrisvébd.value()
            qa = self.vmatiéreinrtbd.value()
            ra = self.vgrainchaufébd.value()
            s = self.vgrainsanvaleurbd.value()
            aa = self.vgrainnuisiblebd.value()
            ab = self.vgraincarrébd.value()
            if self.vgraincassébd.value() >= 4.01 and self.vgrainboutébd.value() >= 4.01:
                self.vtotaldembd.setValue(vtotaldemmbd)
                self.vtotalcomplet.setValue(vtotaldemmbd + q + r)
            elif self.vgraincassébd.value() >= 4.01 and self.vgrainboutébd.value() < 4.01:
                self.vtotaldembd.setValue(vtotaldemmbd + k)
                self.vtotalcomplet.setValue(vtotaldemmbd + q + r + k)
            elif self.vgrainboutébd.value() >= 4.01 and self.vgraincassébd.value() < 4.01:
                self.vtotaldembd.setValue(vtotaldemmbd + e)
                self.vtotalcomplet.setValue(vtotaldemmbd + q + r + e)
            else:
                self.vtotaldembd.setValue(vtotaldemmbd + e + k)
                self.vtotalcomplet.setValue(vtotaldemmbd + q + r + e + k)

            self.vtotalprembd.setValue(p + qa + ra + s + aa + ab)

        def docx_bdsave(self):
            self.docbd = DocxTemplate("_bulletin moulin_sortie/_bulletin moulin_Blé DUR/tempfile_blédur.docx")
            ebpsbd = self.vpsbd.text()
            observation = self.txtobservationbd.toPlainText()
            moulnbd = self.moulincombobd.currentText()
            pntclbd = self.pointcollectecombobd.currentText()
            espsbd = self.éspécecombobd.currentText()
            qnttbd = self.quantitetxtbd.text()
            agrcmbd = self.agréeeurcombobd.currentText()
            tnvvbd = self.vhumiditebd.text()
            ttv1bd = self.vtotalprembd.text()
            grcassévbd = self.vgraincassébd.text()
            grmchbd = self.vgrainmouchtébd.value()
            gretrngbd = self.vgrainetrangébd.value()
            total2vbd = self.vtotaldembd.text()
            grnmgrbd = self.vgrainmaigrebd.value()
            grechdbd = self.vgrainechaudebd.value()
            grgrmbd = self.vgraigermébd.value()
            grpnsbd = self.vgrainpunaisébd.value()
            grpqbd = self.vgrainpiquébd.value()
            grbtbd = self.vgrainboutébd.value()
            dattebd = self.dateeditebd.text()

            debrivébd = self.vdébrisvébd.value()
            matinrtdb = self.vmatiéreinrtbd.value()
            grainmaigrebd = self.vgrainmouchtébd.value()
            grainboute = self.vgrainboutébd.value()
            garinssanvaleur = self.vgrainsanvaleurbd.value()
            grainchaufébd = self.vgrainchaufébd.value()
            indice = self.vindicenotin.value()
            ttcomplet = self.vtotalcomplet.text()
            bletendredbd = self.vblétendreinbledur.value()
            graincarre = self.vgraincarrébd.value()
            ergotbd = self.vergotbd.value()
            grainnuisiblebd = self.vgrainnuisiblebd.value()

            self.docbd.render(
                {"gnsv": grainnuisiblebd, "erg": ergotbd,
                 "grcr": graincarre, "grbtf": grbtbd, "grpq": grpqbd, "grpn": grpnsbd, "grg": grgrmbd, "gehv": grechdbd,
                 "gmv": grnmgrbd, "tt1v": ttv1bd, "tnev": tnvvbd, "psv": ebpsbd, "gr": agrcmbd,
                 "esp": espsbd, "mmmmmmmmmmmmmmmmm": moulnbd, "pntc": pntclbd, "qtt": qnttbd, "dt": dattebd,
                 "gcv": grcassévbd, "tt2v": total2vbd,
                 "getv": gretrngbd, "gmv": grmchbd, "gehv": grechdbd,
                 "gnsv": grainnuisiblebd,
                 "dbv": debrivébd,
                 "mtiv": matinrtdb,
                 "obb": observation,
                 "grch": grainchaufébd,
                 "grsn": garinssanvaleur,
                 "gmx": grainmaigrebd,
                 "grbt": grainboute,
                 "indv": indice,
                 "btdv": bletendredbd,
                 "ttcv": ttcomplet,
                 })
            self.docbd_name = moulnbd + "-" + datetime.datetime.now().strftime("%m-%y") + "-" + ".docx"
            # self.docbd.save("_bulletin moulin/_bulletin moulin_Blé DUR/" + self.docbd_name)
            path, _ = QFileDialog.getSaveFileName(None, "Enregistrer la fiche", self.docbd_name,
                                                  "Fichiers DOCX (*.docx)")
            if path:
                self.docbd.save(path)
                msgbox = QtWidgets.QMessageBox()
                msgbox.setWindowTitle('confirmation')
                msgbox.setText('Le fichier a été enregistré avec succès.')
                msgbox.exec()

        def printerbd(self):
            self.docbd = DocxTemplate("_bulletin moulin_sortie/_bulletin moulin_Blé DUR/tempfile_blédur.docx")
            ebpsbd = self.vpsbd.text()
            observation = self.txtobservationbd.toPlainText()
            moulnbd = self.moulincombobd.currentText()
            pntclbd = self.pointcollectecombobd.currentText()
            espsbd = self.éspécecombobd.currentText()
            qnttbd = self.quantitetxtbd.text()
            agrcmbd = self.agréeeurcombobd.currentText()
            tnvvbd = self.vhumiditebd.text()
            ttv1bd = self.vtotalprembd.text()
            grcassévbd = self.vgraincassébd.text()
            grmchbd = self.vgrainmouchtébd.value()
            gretrngbd = self.vgrainetrangébd.value()
            total2vbd = self.vtotaldembd.text()
            grnmgrbd = self.vgrainmaigrebd.value()
            grechdbd = self.vgrainechaudebd.value()
            grgrmbd = self.vgraigermébd.value()
            grpnsbd = self.vgrainpunaisébd.value()
            grpqbd = self.vgrainpiquébd.value()
            grbtbd = self.vgrainboutébd.value()
            dattebd = self.dateeditebd.text()

            debrivébd = self.vdébrisvébd.value()
            matinrtdb = self.vmatiéreinrtbd.value()
            grainmaigrebd = self.vgrainmouchtébd.value()
            grainboute = self.vgrainboutébd.value()
            garinssanvaleur = self.vgrainsanvaleurbd.value()
            grainchaufébd = self.vgrainchaufébd.value()
            indice = self.vindicenotin.value()
            ttcomplet = self.vtotalcomplet.text()
            bletendredbd = self.vblétendreinbledur.value()
            graincarre = self.vgraincarrébd.value()
            ergotbd = self.vergotbd.value()
            grainnuisiblebd = self.vgrainnuisiblebd.value()

            self.docbd.render(
                {"gnsv": grainnuisiblebd, "erg": ergotbd,
                 "grcr": graincarre, "grbtf": grbtbd, "grpq": grpqbd, "grpn": grpnsbd, "grg": grgrmbd, "gehv": grechdbd,
                 "gmv": grnmgrbd, "tt1v": ttv1bd, "tnev": tnvvbd, "psv": ebpsbd, "gr": agrcmbd,
                 "esp": espsbd, "mmmmmmmmmmmmmmmmm": moulnbd, "pntc": pntclbd, "qtt": qnttbd, "dt": dattebd,
                 "gcv": grcassévbd, "tt2v": total2vbd,
                 "getv": gretrngbd, "gmv": grmchbd, "gehv": grechdbd,
                 "gnsv": grainnuisiblebd,
                 "dbv": debrivébd,
                 "mtiv": matinrtdb,
                 "obb": observation,
                 "grch": grainchaufébd,
                 "grsn": garinssanvaleur,
                 "gmx": grainmaigrebd,
                 "grbt": grainboute,
                 "indv": indice,
                 "btdv": bletendredbd,
                 "ttcv": ttcomplet,
                 })
            doc_names = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
            doc_pdf = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False).name
            self.docbd.save(doc_names)
            try:
                if doc_names:
                    a = self.progress_bar()
                    sys.stderr = open("consoleoutput.log", "w")
                    convert(doc_names, doc_pdf)
                    # Open the resulting .pdf file using the default associated application
                    # os.startfile(doc_pdf, 'open')
                    app_path = 'C:\\Program Files\\Okular\\bin\\okular.exe'
                    subprocess.Popen([app_path, doc_pdf])
            except Exception as e:
                print(e)

            #################blé tendre def

        def plusbt(self):
            e = self.vgraincassé.value()
            f = self.vgrainmaigre.value()
            g = self.vgrainechaude.value()
            h = self.vgraigermé.value()
            i = self.vgrainpunaisé.value()
            j = self.vgrainpiqué.value()
            k = self.vgrainbouté.value()
            l = self.vgrainboutef.value()
            m = self.vgrainmouchté.value()
            n = self.vgrainetrangé.value()
            p = self.vdébrisvé.value()
            q = self.vmatiéreinrt.value()
            r = self.vgrainchaufé.value()
            s = self.vgrainsanvaleur.value()
            v = self.vgraincarré.value()
            ac = self.vgrainnuisible.value()
            vtotaldemm = f + g + h + i + j + k + l + m + n
            self.vtotalprem.setValue(p + q + r + s + v + ac)
            self.vtotaldem.setValue(vtotaldemm)
            if self.vgraincassé.value() >= 2.01 and self.vgraincassé.value() <= 15:
                self.vtotaldem.setValue(vtotaldemm)
            else:
                self.vtotaldem.setValue(e + vtotaldemm)

            # vtotalpremm=p+q+r+s

        def clear_allbt(self):
            self.vgrainnuisible.clear()
            self.vgrainnuisible.setValue(0)
            self.vgrainchaufé.clear()
            self.vgrainchaufé.setValue(0)
            self.vps.clear()
            self.vgrainboutef.clear()
            self.vgrainbouté.clear()
            self.vhumiditein.clear()
            self.vgrainsanvaleur.clear()
            self.vgraincarré.clear()
            self.vtotalprem.clear()
            self.vgraincassé.clear()
            self.vtotaldem.clear()
            self.vgrainpunaisé.clear()
            self.vgrainpunaisé.setValue(0)
            self.vgraigermé.clear()
            self.vgraigermé.setValue(0)
            self.vgrainetrangé.clear()
            self.vgrainmouchté.clear()
            self.vgrainmaigre.clear()
            self.vgrainechaude.clear()
            self.vgrainbouté.clear()
            self.vdébrisvé.clear()
            self.vmatiéreinrt.clear()
            self.vgrainpiqué.clear()
            self.vgrainpiqué.setValue(0)
            self.vps.setValue(0)
            self.vhumiditein.setValue(0)
            self.vgrainsanvaleur.setValue(0)
            self.vgraincarré.setValue(0)
            self.vtotalprem.setValue(0)
            self.vgraincassé.setValue(0)
            self.vgrainboutef.setValue(0)
            self.vtotaldem.setValue(0)
            self.vgrainetrangé.setValue(0)
            self.vgrainmouchté.setValue(0)
            self.vgrainmaigre.setValue(0)
            self.vgrainechaude.setValue(0)
            self.vdébrisvé.setValue(0)
            self.vmatiéreinrt.setValue(0)
            self.vgrainbouté.setValue(0)

        def docx_file(self):
            self.doc = DocxTemplate("_bulletin moulin_sortie/_bulletin moulin_Blé TENDRE/invoice_template.docx")
            ebps = self.vps.text()
            ergot = self.vergot.value()
            observationbt = self.txtobservation.toPlainText()
            nuisible = self.vgrainnuisible.value()
            mouln = self.moulincombo.currentText()
            pntcl = self.pointcollectecombo.currentText()
            esps = self.éspécecombo.currentText()
            qntt = self.quantitetxt.text()
            agrcm = self.agréeeurcombo.currentText()
            tnvv = self.vhumiditein.text()
            debritvegetaux = self.vdébrisvé.value()
            matierinert = self.vmatiéreinrt.value()
            grainchaufe = self.vgrainchaufé.value()
            grainsanvaleur = self.vgrainsanvaleur.value()
            graincarie = self.vgraincarré.value()
            graingerme = self.vgraigermé.value()
            grainpunaisés = self.vgrainpunaisé.value()
            ttv1 = self.vtotalprem.text()
            grcassév = self.vgraincassé.text()
            grmgre = self.vgrainmaigre.text()
            grechd = self.vgrainechaude.text()
            grmch = self.vgrainmouchté.text()
            gretrng = self.vgrainetrangé.text()
            total2v = self.vtotaldem.text()
            grnmgr = self.vgrainmaigre.value()
            grechd = self.vgrainechaude.value()
            grgrm = self.vgraigermé.value()
            grpns = self.vgrainpunaisé.value()
            grpq = self.vgrainpiqué.value()
            grbt = self.vgrainbouté.value()
            grnbtf = self.vgrainboutef.value()
            datte = self.dateedite.text()
            self.doc.render(
                {"verg": ergot, "vnsb": nuisible,
                 "grpn": grainpunaisés, "grch": grainchaufe, "grsn": grainsanvaleur, "vgc": graincarie,
                 "grg": graingerme,
                 "grbt": grnbtf, "grbtf": grbt, "dbv": debritvegetaux, "mtiv": matierinert, "grpq": grpq, "grpn": grpns,
                 "grg": grgrm, "gehv": grechd, "gmx": grnmgr, "tt1v": ttv1, "tnev": tnvv,
                 "psv": ebps, "gr": agrcm, "esp": esps, "mmmmmmmmmmmmmmmmm": mouln, "pntc": pntcl, "qtt": qntt,
                 "dt": datte,
                 "gcv": grcassév, "tt2v": total2v,
                 "getv": gretrng, "gmv": grmch, "gehv": grechd, "obb": observationbt, "gmv": grmgre})
            doc_name = mouln + "-" + datetime.datetime.now().strftime("%m-%y") + "-" + ".docx"
            # self.doc.save("_bulletin moulin/_bulletin moulin_Blé TENDRE/" + self.doc_name)
            path, _ = QFileDialog.getSaveFileName(None, "Enregistrer la fiche", doc_name, "Fichiers DOCX (*.docx)")
            if path:
                self.doc.save(path)
                msgbox = QtWidgets.QMessageBox()
                msgbox.setWindowTitle('confirmation')
                msgbox.setText('Le fichier a été enregistré avec succès.')
                msgbox.exec()

        def printer(self):
            try:
                self.doc = DocxTemplate("_bulletin moulin_sortie/_bulletin moulin_Blé TENDRE/invoice_template.docx")
                ebps = self.vps.text()
                ergot = self.vergot.value()
                observationbt = self.txtobservation.toPlainText()
                nuisible = self.vgrainnuisible.value()
                mouln = self.moulincombo.currentText()
                pntcl = self.pointcollectecombo.currentText()
                esps = self.éspécecombo.currentText()
                qntt = self.quantitetxt.text()
                agrcm = self.agréeeurcombo.currentText()
                tnvv = self.vhumiditein.text()
                debritvegetaux = self.vdébrisvé.value()
                matierinert = self.vmatiéreinrt.value()
                grainchaufe = self.vgrainchaufé.value()
                grainsanvaleur = self.vgrainsanvaleur.value()
                graincarie = self.vgraincarré.value()
                graingerme = self.vgraigermé.value()
                grainpunaisés = self.vgrainpunaisé.value()
                ttv1 = self.vtotalprem.text()
                grcassév = self.vgraincassé.text()
                grmgre = self.vgrainmaigre.text()
                grechd = self.vgrainechaude.text()
                grmch = self.vgrainmouchté.text()
                gretrng = self.vgrainetrangé.text()
                total2v = self.vtotaldem.text()
                grnmgr = self.vgrainmaigre.value()
                grechd = self.vgrainechaude.value()
                grgrm = self.vgraigermé.value()
                grpns = self.vgrainpunaisé.value()
                grpq = self.vgrainpiqué.value()
                grbt = self.vgrainbouté.value()
                grnbtf = self.vgrainboutef.value()
                datte = self.dateedite.text()
                self.doc.render(
                    {"verg": ergot, "vnsb": nuisible,
                     "grpn": grainpunaisés, "grch": grainchaufe, "grsn": grainsanvaleur, "vgc": graincarie,
                     "grg": graingerme,
                     "grbt": grnbtf, "grbtf": grbt, "dbv": debritvegetaux, "mtiv": matierinert, "grpq": grpq,
                     "grpn": grpns,
                     "grg": grgrm, "gehv": grechd, "gmx": grnmgr, "tt1v": ttv1, "tnev": tnvv,
                     "psv": ebps, "gr": agrcm, "esp": esps, "mmmmmmmmmmmmmmmmm": mouln, "pntc": pntcl, "qtt": qntt,
                     "dt": datte,
                     "gcv": grcassév, "tt2v": total2v,
                     "getv": gretrng, "gmv": grmch, "gehv": grechd, "obb": observationbt, "gmv": grmgre})

                doc_names = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                doc_pdf = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False).name
                self.doc.save(doc_names)
                try:
                    if doc_names:
                        a = self.progress_bar()
                        sys.stderr = open("consoleoutput.log", "w")
                        convert(doc_names, doc_pdf)
                        # Open the resulting .pdf file using the default associated application
                        # os.startfile(doc_pdf, 'open')
                        app_path = 'C:\\Program Files\\Okular\\bin\\okular.exe'
                        subprocess.Popen([app_path, doc_pdf])
                except Exception as e:
                    print(e)
            except Exception as e:
                print(e)

        ##########################################################################################################################################
        #########################################################################################
        ###########################################################################################
        def confi_window(self, MainWindow):
            MainWindow.setObjectName("MainWindow")
            MainWindow.resize(1338, 700)
            MainWindow.setWindowIcon(QIcon("images/Picsart_23-03-14_20-11-34-387 (1).ico"))
            MainWindow.setStyleSheet("""QWidget
    {
        color: #eff0f1;
        background-color: #ffffff;
        selection-background-color:#3daee9;
        selection-color: #eff0f1;
        background-clip: border;
        border-image: none;
        border: 0px transparent black;
        outline: 0;
    }""")
            self.centralwidget = QtWidgets.QWidget(MainWindow)
            self.centralwidget.setObjectName("centralwidget")
            self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
            self.horizontalLayout.setObjectName("horizontalLayout")
            self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
            self.confirmitewidget = QtWidgets.QTabWidget(self.centralwidget)
            self.confirmitewidget.setStyleSheet("""QToolTip
            {
                border: 1px solid #76797C;
                background-color: rgb(90, 102, 117);;
                color: white;
                padding: 5px;
                opacity: 200;
            }

            QWidget
            {
                color: #000000;
                background-color: #ffffff;
                selection-background-color:#3daee9;
                selection-color: #3daee9;
                background-clip: border;
                border-image: none;
                border: 0px transparent black;
                outline: 0;
            }

            QWidget:item:hover
            {
                background-color: #3daee9;
                color: #eff0f1;
            }

            QWidget:item:selected
            {
                background-color: #3daee9;
            }



            QWidget:disabled
            {
                color: #454545;
                background-color: #31363b;
            }

            QAbstractItemView
            {
                alternate-background-color: #31363b;
                color: #eff0f1;
                border: 1px solid 3A3939;
                border-radius: 2px;
            }

            QWidget:focus, QMenuBar:focus
            {
                border: 1px solid #3daee9;
            }

            QTabWidget:focus, QCheckBox:focus, QRadioButton:focus, QSlider:focus
            {
                border: none;
            }

            QLineEdit
            {
                background-color: #FDFEFE;
                padding: 1px;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 0px;
                color: #000000;
            }
            QDoubleSpinBox
            {
                background-color: #FDFEFE;
                padding: 1px;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 0px;
                color:#000000;
                font-size: 11px;
                font-weight: bold;

            }
            QDoubleSpinBox:focus{
                background-color: #FDFEFE;
                border-style: solid;
                border: 2px solid #76797C;
                border-radius: 4px;
                border-color: #ff8c00;
            }
            QDoubleSpinBox::drop-down
            {
                subcontrol-origin: padding;
                subcontrol-position: top right;
                width: 1px;

                border-left-width: 0px;
                border-left-color: #232629;
                border-left-style: solid;
                border-top-right-radius: 1px;
                border-bottom-right-radius: 1px;
            }



            QGroupBox {
                border:1px solid #76797C;
                border-radius: 2px;
                margin-top: 5px;
            }

            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top center;
                padding-left: 4px;
                padding-right: 4px;
                padding-top: 4px;
            }

            QAbstractScrollArea
            {
                border-radius: 2px;
                border: 1px solid #76797C;
                background-color: transparent;
            }

            QScrollBar:horizontal
            {
                height: 15px;
                margin: 3px 15px 3px 15px;
                border: 1px transparent #2A2929;
                border-radius: 4px;
                background-color: #2A2929;
            }

            QScrollBar::handle:horizontal
            {
                background-color: #605F5F;
                min-width: 5px;
                border-radius: 4px;
            }

            QScrollBar::add-line:horizontal
            {
                margin: 0px 3px 0px 3px;
                border-image: url(:/qss_icons/Dark_rc/right_arrow_disabled.png);
                width: 10px;
                height: 10px;
                subcontrol-position: right;
                subcontrol-origin: margin;
            }

            QScrollBar::sub-line:horizontal
            {
                margin: 0px 3px 0px 3px;
                border-image: url(:/qss_icons/Dark_rc/left_arrow_disabled.png);
                height: 10px;
                width: 10px;
                subcontrol-position: left;
                subcontrol-origin: margin;
            }

            QScrollBar::add-line:horizontal:hover,QScrollBar::add-line:horizontal:on
            {
                border-image: url(:/qss_icons/Dark_rc/right_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: right;
                subcontrol-origin: margin;
            }


            QScrollBar::sub-line:horizontal:hover, QScrollBar::sub-line:horizontal:on
            {
                border-image: url(:/qss_icons/Dark_rc/left_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: left;
                subcontrol-origin: margin;
            }

            QScrollBar::up-arrow:horizontal, QScrollBar::down-arrow:horizontal
            {
                background: none;
            }


            QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal
            {
                background: none;
            }

            QScrollBar:vertical
            {
                background-color: #2A2929;
                width: 15px;
                margin: 15px 3px 15px 3px;
                border: 1px transparent #2A2929;
                border-radius: 4px;
            }

            QScrollBar::handle:vertical
            {
                background-color: #605F5F;
                min-height: 5px;
                border-radius: 4px;
            }

            QScrollBar::sub-line:vertical
            {
                margin: 3px 0px 3px 0px;
                border-image: url(:/qss_icons/Dark_rc/up_arrow_disabled.png);
                height: 10px;
                width: 10px;
                subcontrol-position: top;
                subcontrol-origin: margin;
            }

            QScrollBar::add-line:vertical
            {
                margin: 3px 0px 3px 0px;
                border-image: url(:/qss_icons/Dark_rc/down_arrow_disabled.png);
                height: 10px;
                width: 10px;
                subcontrol-position: bottom;
                subcontrol-origin: margin;
            }

            QScrollBar::sub-line:vertical:hover,QScrollBar::sub-line:vertical:on
            {

                border-image: url(:/qss_icons/Dark_rc/up_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: top;
                subcontrol-origin: margin;
            }


            QScrollBar::add-line:vertical:hover, QScrollBar::add-line:vertical:on
            {
                border-image: url(:/qss_icons/Dark_rc/down_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: bottom;
                subcontrol-origin: margin;
            }

            QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical
            {
                background: none;
            }


            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical
            {
                background: none;
            }

            QTextEdit
            {
                background-color: #FDFEFE;
                color: #000000;
                border: 1px solid #76797C;
            }

            QPlainTextEdit
            {
                background-color: #232629;;
                color: #000000;
                border-radius: 2px;
                border: 1px solid #76797C;
            }

            QHeaderView::section
            {
                background-color: #76797C;
                color: #eff0f1;
                padding: 1px;
                border: 1px solid #76797C;
            }

            QSizeGrip {
                width: 12px;
                height: 12px;
            }


            QMainWindow::separator
            {
                background-color: #31363b;
                color: white;
                padding-left: 4px;
                spacing: 2px;
                border: 1px dashed #76797C;
            }

            QMainWindow::separator:hover
            {

                background-color: #787876;
                color: white;
                padding-left: 4px;
                border: 1px solid #76797C;
                spacing: 2px;
            }


            QMenu::separator
            {
                height: 1px;
                background-color: #76797C;
                color: white;
                padding-left: 4px;
                margin-left: 10px;
                margin-right: 5px;
            }


            QFrame
            {
                border-radius: 2px;
                border: 1px solid #76797C;
            }

            QFrame[frameShape="0"]
            {
                border-radius: 2px;
                border: 1px transparent #76797C;
            }

            QStackedWidget
            {
                border: 1px transparent black;
            }


            QPushButton
            {
                color: #00000;
                background-color:#ade3e7;
                border-width: 1px;
                border-color: #1e1e1e;
                border-style: solid;
                border-radius: 6;
                padding: 3px;
                font-size: 12px;
                padding-left: 5px;
                padding-right: 5px;
                min-width: 40px;

            }

            QPushButton:disabled
            {
                background-color:#03ecff;
                border-width: 1px;
                border-color: #454545;
                border-style: solid;
                padding-top: 5px;
                padding-bottom: 5px;
                padding-left: 10px;
                padding-right: 10px;
                border-radius: 2px;
                color: #454545;
            }
            QPushButton:pressed
            {
                background-color: #3daee9;
                padding-top: -15px;
                padding-bottom: -17px;
            }

            QComboBox
            {
               background-color: #FDFEFE;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 2px;
                min-width: 40px;
            }

            QPushButton:checked{
                background-color: #76797C;
                border-color: #6A6969;
            }

            QComboBox:hover,QDoubleSpinBox:Hover,QPushButton:hover,QAbstractSpinBox:hover,QLineEdit:hover,QTextEdit:hover,QPlainTextEdit:hover,QAbstractView:hover,QTreeView:hover
            {
                border: 1px solid #ff8c00;
                color: #000000;
            }

            QComboBox:on
            {
                padding-top: 1px;
                padding-left: 1px;
                selection-background-color: #FDFEFE;
            }

            QComboBox QAbstractItemView
            {
                background-color: #FDFEFE;
                border-radius: 2px;
                border: 1px solid #76797C;
                color:#000000;
                selection-background-color: #000000;
            }

            QComboBox::drop-down
            {
                subcontrol-origin: padding;
                subcontrol-position: top right;
                width: 15px;

                border-left-width: 0px;
                border-left-color: ff8c00;
                border-left-style: solid;
                border-top-right-radius: 1px;
                border-bottom-right-radius: 1px;
            }


            QLabel
            {
                border: 2px solid black;
            }

            QTabWidget{
                border: 0px transparent black;
            }

            QTabWidget::pane {
                border: 1px solid #76797C;
                padding: 5px;
                margin: 0px;
            }

            QTabBar
            {
                qproperty-drawBase: 0;
                left: 5px; /* move to the right by 5px */
                border-radius: 3px;
            }

            QTabBar:focus
            {
                border: 0px transparent black;
            }

            QTabBar::close-button  {
                image: url(:/qss_icons/Dark_rc/close.png);
                background: transparent;
            }

            QTabBar::close-button:hover
            {
                image: url(:/qss_icons/Dark_rc/close-hover.png);
                background: transparent;
            }

            QTabBar::close-button:pressed {
                image: url(:/qss_icons/Dark_rc/close-pressed.png);
                background: transparent;
            }

            /* TOP TABS */
            QTabBar::tab:top {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-bottom: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                min-width: 10px;
                border-top-left-radius: 2px;
                border-top-right-radius: 2px;
            }

            QTabBar::tab:top:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-bottom: 1px transparent black;
                border-top-left-radius: 2px;
                border-top-right-radius: 2px;    
            }

            QTabBar::tab:top:!selected:hover {
                background-color: #3daee9;
            }

            /* BOTTOM TABS */
            QTabBar::tab:bottom {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-top: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                border-bottom-left-radius: 2px;
                border-bottom-right-radius: 2px;
                min-width: 10px;
            }

            QTabBar::tab:bottom:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-top: 1px transparent black;
                border-bottom-left-radius: 2px;
                border-bottom-right-radius: 2px;
            }

            QTabBar::tab:bottom:!selected:hover {
                background-color: #3daee9;
            }

            /* LEFT TABS */
            QTabBar::tab:left {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-left: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                border-top-right-radius: 2px;
                border-bottom-right-radius: 2px;
                min-height: 50px;
            }

            QTabBar::tab:left:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-left: 1px transparent black;
                border-top-right-radius: 2px;
                border-bottom-right-radius: 2px;
            }

            QTabBar::tab:left:!selected:hover {
                background-color: #3daee9;
            }


            /* RIGHT TABS */
            QTabBar::tab:right {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-right: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                border-top-left-radius: 2px;
                border-bottom-left-radius: 2px;
                min-height: 50px;
            }

            QTabBar::tab:right:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-right: 1px transparent black;
                border-top-left-radius: 2px;
                border-bottom-left-radius: 2px;
            }





            QSlider::groove:horizontal {
                border: 1px solid #565a5e;
                height: 4px;
                background: #565a5e;
                margin: 0px;
                border-radius: 2px;
            }

            QSlider::handle:horizontal {
                background: #232629;
                border: 1px solid #565a5e;
                width: 16px;
                height: 16px;
                margin: -8px 0;
                border-radius: 9px;
            }

            QSlider::groove:vertical {
                border: 1px solid #565a5e;
                width: 4px;
                background: #565a5e;
                margin: 0px;
                border-radius: 3px;
            }

            QSlider::handle:vertical {
                background: #232629;
                border: 1px solid #565a5e;
                width: 16px;
                height: 16px;
                margin: 0 -8px;
                border-radius: 9px;
            }

            QToolButton {
                background-color: transparent;
                border: 1px transparent #76797C;
                border-radius: 2px;
                margin: 3px;
                padding: 5px;
            }

            QToolButton[popupMode="1"] { /* only for MenuButtonPopup */
             padding-right: 20px; /* make way for the popup button */
             border: 1px #76797C;
             border-radius: 5px;
            }

            QToolButton[popupMode="2"] { /* only for InstantPopup */
             padding-right: 10px; /* make way for the popup button */
             border: 1px #76797C;
            }


            QToolButton:hover, QToolButton::menu-button:hover {
                background-color: transparent;
                border: 1px solid #3daee9;
                padding: 5px;
            }

            QToolButton:checked, QToolButton:pressed,
                    QToolButton::menu-button:pressed {
                background-color: #3daee9;
                border: 1px solid #3daee9;
                padding: 5px;
            }

            /* the subcontrol below is used only in the InstantPopup or DelayedPopup mode */
            QToolButton::menu-indicator {
                background-color:ff8c00;
                top: -7px; left: -2px; /* shift it a bit */
            }

            /* the subcontrols below are used only in the MenuButtonPopup mode */
            QToolButton::menu-button {
                border: 1px transparent #76797C;
                border-top-right-radius: 6px;
                border-bottom-right-radius: 6px;
                /* 16px width + 4px for border = 20px allocated above */
                width: 16px;
                outline: none;
            }

            QToolButton::menu-arrow {
               background-color:ff8c00;
            }

            QToolButton::menu-arrow:open {
                border: 1px solid #76797C;
            }

            QPushButton::menu-indicator  {
                subcontrol-origin: padding;
                subcontrol-position: bottom right;
                left: 8px;
            }

            QTableView
            {
                border: 1px solid #76797C;
                gridline-color: #31363b;
                background-color: #FDFEFE;
                color:#000000;
            }


            QTableView, QHeaderView
            {
                background-color: #FDFEFE;
                color:#000000;
                border-radius: 0px;
            }

            QTableView::item:pressed, QListView::item:pressed, QTreeView::item:pressed  {
                background: #FDFEFE;
                color: #000000;
            }

            QTableView::item:selected:active, QTreeView::item:selected:active, QListView::item:selected:active  {
                background: #3daee9;
                color: #000000;
            }


            QHeaderView
            {
                background-color: #FDFEFE;
                border: 1px transparent;
                border-radius: 0px;
                margin: 0px;
                padding: 0px;

            }

            QHeaderView::section  {
                background-color:#80f1f9;
                color: #000000;
                padding: 5px;
                border: 1px solid #76797C;
                border-radius: 0px;
                text-align: center;
            }

            QHeaderView::section::vertical::first, QHeaderView::section::vertical::only-one
            {
                border-top: 1px solid #76797C;
            }

            QHeaderView::section::vertical
            {
                border-top: transparent;
            }

            QHeaderView::section::horizontal::first, QHeaderView::section::horizontal::only-one
            {
                border-left: 1px solid #76797C;
            }

            QHeaderView::section::horizontal
            {
                border-left: transparent;
            }


            QHeaderView::section:checked
             {
                color: #000000;
                background-color: #3daee9;
             }

             /* style the sort indicator */
            QHeaderView::down-arrow {

            }

            QHeaderView::up-arrow {

            }


            QTableCornerButton::section {
                background-color: #31363b;
                border: 1px transparent #76797C;
                border-radius: 0px;
            }

            QToolBox  {
                padding: 5px;
                border: 1px transparent black;
            }

            QToolBox::tab {
                color: #eff0f1;
                background-color: #31363b;
                border: 1px solid #76797C;
                border-bottom: 1px transparent #31363b;
                border-top-left-radius: 5px;
                border-top-right-radius: 5px;
            }

            QToolBox::tab:selected { /* italicize selected tabs */
                font: italic;
                background-color: #31363b;
                border-color: #3daee9;
             }

            QStatusBar::item {
                border: 0px transparent dark;
             }


            QFrame[height="3"], QFrame[width="3"] {
                background-color: #76797C;
            }




            QDateEdit
            {
                background-color: #232629;;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 2px;
                padding: 1px;
                min-width: 75px;
            }

            QDateEdit:on
            {
                padding-top: 2px;
                padding-left: 2px;
                selection-background-color: #4a4a4a;
            }

            QDateEdit QAbstractItemView
            {
                background-color: #ff8c00;
                border-radius: 2px;
                border: 1px solid #3375A3;
                selection-background-color:ff8c00;
            }

            QDateEdit::drop-down
            {
                subcontrol-origin: padding;
                subcontrol-position: top right;
                width: 15px;
                border-left-width: 0px;
                border-left-color: darkgray;
                border-left-style: solid;
                border-top-right-radius: 3px;
                border-bottom-right-radius: 3px;
            }   
            QDateTimeEdit
            {
                background-color: #232629;;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 2px;
                padding: 1px;
                min-width: 75px;

            }    
            """)
            self.confirmitewidget.setObjectName("confirmitewidget")
            self.entrétab = QtWidgets.QWidget()
            self.entrétab.setObjectName("entrétab")
            self.confirmitewidget.addTab(self.entrétab, "Ble tendre")

            self.font = QtGui.QFont()
            self.font.setBold(True)
            self.font.setPointSize(10)
            ##########text bul# ettin######
            self.paramétre = QtWidgets.QLabel("Paramètre recherchés", self.entrétab)
            self.paramétre.move(30, 155)
            self.paramétre.resize(150, 20)
            self.paramétre.setFont(self.font)

            self.txtpsfont = QtGui.QFont()
            self.txtpsfont.setBold(True)
            self.txtpsfont.setPointSize(9)

            ######################Limites(sans bon ni réf)################
            self.ps = QtWidgets.QLineEdit("Poids spécifique (kg/hl): ", self.entrétab, readOnly=True)
            self.ps.resize(319, 20)
            self.ps.move(30, 187)
            self.ps.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.ps.setFont(self.txtpsfont)
            ###############################humidite#############
            self.humidite = QtWidgets.QLineEdit("Teneur en eau(%):", self.entrétab, readOnly=True)
            self.humidite.resize(319, 20)
            self.humidite.move(30, 208)
            self.humidite.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.humidite.setFont(self.txtpsfont)

            #########################Graines nuisibles (%)##########
            self.grainnuisible = QtWidgets.QLineEdit("Graines nuisibles(%):", self.entrétab, readOnly=True)
            self.grainnuisible.resize(319, 20)
            self.grainnuisible.move(30, 229)
            self.grainnuisible.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.grainnuisible.setFont(self.txtpsfont)
            #############################Débris végétaux (%)########
            self.débrisvé = QtWidgets.QLineEdit("Débris végétaux(%):", self.entrétab, readOnly=True)
            self.débrisvé.resize(319, 20)
            self.débrisvé.move(30, 250)
            self.débrisvé.setFont(self.txtpsfont)
            self.débrisvé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Matière inerte (%)################
            self.matiéreinrt = QtWidgets.QLineEdit("Matière inerte(%):", self.entrétab, readOnly=True)
            self.matiéreinrt.resize(319, 20)
            self.matiéreinrt.move(30, 271)
            self.matiéreinrt.setFont(self.txtpsfont)
            self.matiéreinrt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ################################Grains chauffés (%)############################
            self.grainchaufé = QtWidgets.QLineEdit("Grains chauffés(%):", self.entrétab, readOnly=True)
            self.grainchaufé.resize(319, 20)
            self.grainchaufé.move(30, 292)
            self.grainchaufé.setFont(self.txtpsfont)
            self.grainchaufé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################Grains sans valeur (%)#######################################
            self.grainsanvaleur = QtWidgets.QLineEdit("Grains sans valeur(%):", self.entrétab, readOnly=True)
            self.grainsanvaleur.resize(319, 20)
            self.grainsanvaleur.move(30, 313)
            self.grainsanvaleur.setFont(self.txtpsfont)
            self.grainsanvaleur.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Grains cariés##########################################
            self.graincarré = QtWidgets.QLineEdit("Grains cariés:", self.entrétab, readOnly=True)
            self.graincarré.resize(319, 20)
            self.graincarré.move(30, 334)
            self.graincarré.setFont(self.txtpsfont)
            self.graincarré.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")

            #######################################Total(%) 1er#####################################################
            self.totalprem = QtWidgets.QLineEdit("TOTAL 1ére CAT:", self.entrétab, readOnly=True)
            self.totalprem.resize(319, 20)
            self.totalprem.move(30, 355)
            self.totalprem.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.totalprem.setFont(self.txtpsfont)
            ##############################################Grains cassés (%) #########################################################
            self.graincassé = QtWidgets.QLineEdit("Grains cassés(%):", self.entrétab, readOnly=True)
            self.graincassé.move(30, 376)
            self.graincassé.resize(319, 20)
            self.graincassé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.graincassé.setFont(self.txtpsfont)
            #########################################################Gains échaudés (%)#####################################################
            self.grainechaude = QtWidgets.QLineEdit("Gains échaudés(%):", self.entrétab, readOnly=True)
            self.grainechaude.move(30, 397)
            self.grainechaude.resize(319, 20)
            self.grainechaude.setFont(self.txtpsfont)
            self.grainechaude.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #####################################################Grains maigres (%)########################################################
            self.grainmaigre = QtWidgets.QLineEdit("Grains maigres(%):", self.entrétab, readOnly=True)
            self.grainmaigre.move(30, 523)
            self.grainmaigre.resize(319, 20)
            self.grainmaigre.setFont(self.txtpsfont)
            self.grainmaigre.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##########################################################Grains germés (%)###################################################
            self.graigermé = QtWidgets.QLineEdit("Grains germés(%):", self.entrétab, readOnly=True)
            self.graigermé.move(30, 439)
            self.graigermé.resize(319, 20)
            self.graigermé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.graigermé.setFont(self.txtpsfont)
            ##########################################################Grain punaisés (%)#########################################################
            self.grainpunaisé = QtWidgets.QLineEdit("Grain punaisés(%):", self.entrétab, readOnly=True)
            self.grainpunaisé.move(30, 460)
            self.grainpunaisé.resize(319, 20)
            self.grainpunaisé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.grainpunaisé.setFont(self.txtpsfont)

            #######################################################################Grains piqués (%)##########################################
            self.grainpiqué = QtWidgets.QLineEdit("Grains piqués(%):  ", self.entrétab, readOnly=True)
            self.grainpiqué.move(30, 481)
            self.grainpiqué.resize(319, 20)
            self.grainpiqué.setFont(self.txtpsfont)
            self.grainpiqué.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################################################Grains boutés « faible » (%)#######################################
            self.grainboutef = QtWidgets.QLineEdit("Grains boutés (%):", self.entrétab, readOnly=True)
            self.grainboutef.move(30, 502)
            self.grainboutef.resize(319, 20)
            self.grainboutef.setFont(self.txtpsfont)
            self.grainboutef.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")

            self.autrecéréal = QtWidgets.QLineEdit("Autres céréales (%):", self.entrétab, readOnly=True)
            self.autrecéréal.move(30, 565)
            self.autrecéréal.resize(319, 20)
            self.autrecéréal.setFont(self.txtpsfont)
            self.autrecéréal.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##################################################Grains mouchetés (%)########################################################
            self.grainmouchté = QtWidgets.QLineEdit("Grains mouchetés (%):", self.entrétab, readOnly=True)
            self.grainmouchté.move(30, 418)
            self.grainmouchté.resize(319, 20)
            self.grainmouchté.setFont(self.txtpsfont)
            self.grainmouchté.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################################Grain étrangers Utilisables pour le bétail (%)##################################################
            self.grainetrangé = QtWidgets.QLineEdit("Présence de blé dur dans le blé tendre(%):  ", self.entrétab,
                                                    readOnly=True)
            self.grainetrangé.move(30, 586)
            self.grainetrangé.resize(319, 20)
            self.grainetrangé.setFont(self.txtpsfont)
            self.grainetrangé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ######################################################################Total(%)######################################
            self.totaldem = QtWidgets.QLineEdit("Impuretés 2eme catégorie   ", self.entrétab, readOnly=True)
            self.totaldem.move(30, 544)
            self.totaldem.resize(319, 20)
            self.totaldem.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.totaldem.setFont(self.txtpsfont)
            ###########################################################################################################
            #################label valeure##############
            self.valeur = QtWidgets.QLabel("Résultat", self.entrétab)
            self.valeur.move(350, 155)
            self.valeur.resize(100, 20)
            self.valeur.setFont(self.font)
            ######################Limites(sans bon ni réf)################
            self.vpsin = QtWidgets.QDoubleSpinBox(self.entrétab)
            self.vpsin.setRange(69, 81.00)
            self.vpsin.setSpecialValueText(' ')
            self.vpsin.resize(100, 20)
            self.vpsin.move(350, 187)
            self.vpsin.setFont(self.txtpsfont)
            self.vpsin.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ###############################humidite#############
            self.vhumiditein = QtWidgets.QDoubleSpinBox(self.entrétab)
            self.vhumiditein.setRange(8, 14)
            self.vhumiditein.resize(100, 20)
            self.vhumiditein.setSpecialValueText(' ')
            self.vhumiditein.move(350, 208)
            self.vhumiditein.setFont(self.txtpsfont)
            self.vhumiditein.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Graines nuisibles (%)##########
            self.vgrainnuisiblein = QtWidgets.QDoubleSpinBox(self.entrétab, readOnly=False)
            self.vgrainnuisiblein.setRange(0, 1)
            self.vgrainnuisiblein.setSpecialValueText(' ')
            self.vgrainnuisiblein.resize(100, 20)
            self.vgrainnuisiblein.move(350, 229)
            self.vgrainnuisiblein.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #############################Débris végétaux (%)########
            self.vdébrisvéin = QtWidgets.QDoubleSpinBox(self.entrétab, readOnly=False)
            self.vdébrisvéin.setRange(0, 5)
            self.vdébrisvéin.setSpecialValueText(' ')
            self.vdébrisvéin.resize(100, 20)
            self.vdébrisvéin.move(350, 250)
            self.vdébrisvéin.setFont(self.txtpsfont)
            self.vdébrisvéin.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Matière inerte (%)################
            self.vmatiéreinrtin = QtWidgets.QDoubleSpinBox(self.entrétab, readOnly=False)
            self.vmatiéreinrtin.setRange(0, 5)
            self.vmatiéreinrtin.setSpecialValueText(' ')
            self.vmatiéreinrtin.resize(100, 20)
            self.vmatiéreinrtin.move(350, 271)
            self.vmatiéreinrtin.setFont(self.txtpsfont)
            self.vmatiéreinrtin.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ################################Grains chauffés (%)############################
            self.vgrainchauféin = QtWidgets.QDoubleSpinBox(self.entrétab, readOnly=False)
            self.vgrainchauféin.setRange(0, 5)
            self.vgrainchauféin.setSpecialValueText(' ')
            self.vgrainchauféin.resize(100, 20)
            self.vgrainchauféin.move(350, 292)
            self.vgrainchauféin.setFont(self.txtpsfont)
            self.vgrainchauféin.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################Grains sans valeur (%)#######################################
            self.vgrainsanvaleurin = QtWidgets.QDoubleSpinBox(self.entrétab, readOnly=False)
            self.vgrainsanvaleurin.setSpecialValueText(' ')
            self.vgrainsanvaleurin.setRange(0, 5)
            self.vgrainsanvaleurin.resize(100, 20)
            self.vgrainsanvaleurin.move(350, 313)
            self.vgrainsanvaleurin.setFont(self.txtpsfont)
            self.vgrainsanvaleurin.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Grains cariés##########################################
            self.vgraincarréin = QtWidgets.QDoubleSpinBox(self.entrétab, readOnly=False)
            self.vgraincarréin.setSpecialValueText(' ')
            self.vgraincarréin.setRange(0, 5)
            self.vgraincarréin.resize(100, 20)
            self.vgraincarréin.move(350, 334)
            self.vgraincarréin.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Total(%) 1er#####################################################
            self.vtotalpremin = QtWidgets.QDoubleSpinBox(self.entrétab, readOnly=True)
            self.vtotalpremin.setSpecialValueText(' ')
            self.vtotalpremin.resize(100, 20)
            self.vtotalpremin.move(350, 355)
            self.vtotalpremin.setFont(self.txtpsfont)
            self.vtotalpremin.setStyleSheet(
                "background-color:#ffffff;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##############################################Grains cassés (%) #########################################################
            self.vgraincasséin = QtWidgets.QDoubleSpinBox(self.entrétab)
            self.vgraincasséin.move(350, 376)
            self.vgraincasséin.resize(100, 20)
            self.vgraincasséin.setRange(0, 5)
            self.vgraincasséin.setSpecialValueText(" ")
            self.vgraincasséin.setFont(self.txtpsfont)
            self.vgraincasséin.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################################################Gains échaudés (%)#####################################################
            self.vgrainechaudein = QtWidgets.QDoubleSpinBox(self.entrétab)
            self.vgrainechaudein.setSpecialValueText(" ")
            self.vgrainechaudein.setRange(0, 5)
            self.vgrainechaudein.move(350, 397)
            self.vgrainechaudein.resize(100, 20)
            self.vgrainechaudein.setFont(self.txtpsfont)
            self.vgrainechaudein.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #####################################################Grains maigres (%)########################################################
            self.vgrainmaigrein = QtWidgets.QDoubleSpinBox(self.entrétab)
            self.vgrainmaigrein.setRange(0, 5)
            self.vgrainmaigrein.setSpecialValueText(" ")
            self.vgrainmaigrein.move(350, 523)
            self.vgrainmaigrein.setFont(self.txtpsfont)
            self.vgrainmaigrein.resize(100, 20)
            self.vgrainmaigrein.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grains germés (%)###################################################
            self.vgraigerméin = QtWidgets.QDoubleSpinBox(self.entrétab, readOnly=False)
            self.vgraigerméin.move(350, 439)
            self.vgraigerméin.resize(100, 20)
            self.vgraigerméin.setSpecialValueText('  ')
            self.vgraigerméin.setFont(self.txtpsfont)
            self.vgraigerméin.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grain punaisés (%)#########################################################
            self.vgrainpunaiséin = QtWidgets.QDoubleSpinBox(self.entrétab, readOnly=False)
            self.vgrainpunaiséin.move(350, 460)
            self.vgrainpunaiséin.resize(100, 20)
            self.vgrainpunaiséin.setSpecialValueText('   ')
            self.vgrainpunaiséin.setFont(self.txtpsfont)
            self.vgrainpunaiséin.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains piqués (%)##########################################
            self.vgrainpiquéin = QtWidgets.QDoubleSpinBox(self.entrétab, readOnly=False)
            self.vgrainpiquéin.move(350, 481)
            self.vgrainpiquéin.resize(100, 20)
            self.vgrainpiquéin.setSpecialValueText('  ')
            self.vgrainpiquéin.setFont(self.txtpsfont)
            self.vgrainpiquéin.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains boutés « faible » (%)#######################################
            self.vgrainboutefin = QtWidgets.QDoubleSpinBox(self.entrétab, readOnly=False)
            self.vgrainboutefin.move(350, 502)
            self.vgrainboutefin.resize(100, 20)
            self.vgrainboutefin.setSpecialValueText('  ')
            self.vgrainboutefin.setFont(self.txtpsfont)
            self.vgrainboutefin.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")

            self.vautrecéréalin = QtWidgets.QDoubleSpinBox(self.entrétab, readOnly=False)
            self.vautrecéréalin.move(350, 565)
            self.vautrecéréalin.resize(100, 20)
            self.vautrecéréalin.setSpecialValueText(' ')
            self.vautrecéréalin.setFont(self.txtpsfont)
            self.vautrecéréalin.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##################################################Grains mouchetés (%)########################################################
            self.vgrainmouchtéin = QtWidgets.QDoubleSpinBox(self.entrétab)
            self.vgrainmouchtéin.move(350, 418)
            self.vgrainmouchtéin.resize(100, 20)
            self.vgrainmouchtéin.setRange(0, 5)
            self.vgrainmouchtéin.setSpecialValueText(' ')
            self.vgrainmouchtéin.setFont(self.txtpsfont)
            self.vgrainmouchtéin.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ########################################################Grain étrangers Utilisables pour le bétail (%)##################################################
            self.vgrainetrangéin = QtWidgets.QDoubleSpinBox(self.entrétab)
            self.vgrainetrangéin.move(350, 586)
            self.vgrainetrangéin.resize(100, 20)
            self.vgrainetrangéin.setRange(0, 3)
            self.vgrainetrangéin.setSpecialValueText(' ')
            self.vgrainetrangéin.setFont(self.txtpsfont)
            self.vgrainetrangéin.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ######################################################################Total(%)######################################
            self.vtotaldemin = QtWidgets.QDoubleSpinBox(self.entrétab, readOnly=True)
            self.vtotaldemin.move(350, 544)
            self.vtotaldemin.resize(100, 20)
            self.vtotaldemin.setSpecialValueText(' ')
            self.vtotaldemin.setFont(self.txtpsfont)
            self.vtotaldemin.setStyleSheet(
                "background-color:#ffffff;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################################################observation###############
            self.matricullisttxt = QtWidgets.QLabel("Matricule de camion", self.entrétab)
            self.matricullisttxt.move(640, 155)
            self.matricullisttxt.resize(140, 20)
            self.matricullisttxt.setFont(self.txtpsfont)
            self.matricullisttxt.setFont(self.font)

            self.observation = QtWidgets.QLabel("Observation", self.entrétab)
            self.observation.move(470, 155)
            self.observation.resize(100, 20)
            self.observation.setFont(self.txtpsfont)
            self.observation.setFont(self.font)
            ##################################################txtobservation&matricul#################################
            self.matricullist = QtWidgets.QTextEdit(self.entrétab)
            self.matricullist.move(640, 187)
            self.matricullist.resize(150, 417)

            self.matricullist.setStyleSheet(
                "background-color:#FDFEFE;color:#000000;border: 2px solid bleu ;border-radius: 4px;padding: 2px")
            self.matricullist.setFont(self.font)

            self.txtobservation = QtWidgets.QTextEdit(self.entrétab)
            self.txtobservation.move(470, 187)
            self.txtobservation.resize(150, 417)
            self.txtobservation.setStyleSheet("border: 2px solid bleu ;border-radius: 4px;padding: 2px")
            ###################################################label ccls relizane#################
            self.labelccls = QtWidgets.QLabel("<h1>CCLS RELIZANE SERVICE QUALITE<h1/>", self.entrétab)
            self.labelccls.move(500, 0)
            self.labelccls.resize(438, 80)
            self.labelccls.setFont(self.font)
            self.labelccls.setStyleSheet(
                "background-color: #ffffff; border: 2px solid bleu ;border-radius: 4px;padding: 0px")
            self.LABELBULLETIN = QtWidgets.QLabel("<H2>BULLETIN D’AGREAGE</H2>", self.entrétab)
            self.LABELBULLETIN.move(650, 35)
            self.LABELBULLETIN.resize(180, 20)
            self.LABELBULLETIN.setStyleSheet("background-color: #ffffff")

            self.bletendretxt = QtWidgets.QLabel("<H2>ENTRE<H2/>", self.entrétab)
            self.bletendretxt.move(690, 55)
            self.bletendretxt.resize(140, 20)
            self.bletendretxt.setStyleSheet("background-color: #ffffff")

            #############################################date edit#############################################
            self.daydate = QDate.currentDate()
            self.dateeditetxt = QtWidgets.QLabel("Date:", self.entrétab)
            self.dateeditetxt.move(30, 10)
            self.dateeditetxt.resize(115, 30)
            self.dateeditetxt.setFont((self.font))
            self.dateedite = QtWidgets.QDateEdit(self.entrétab)
            self.dateedite.move(100, 20)
            self.dateedite.resize(130, 20)
            self.dateedite.setDate(self.daydate)
            self.dateedite.setStyleSheet(
                " background-color: #FDFEFE;font-size: 12px;padding: 1px;border-style: solid;border: 1px solid #76797C;border-radius: 0px;color: #000000;")
            self.dateedite.setFont(self.font)

            ###############################################search#################################################

            #####################################décade######################
            self.matricul = QtWidgets.QLabel("Matricule de camion: ", self.entrétab)
            self.matricul.move(30, 110)
            self.matricul.resize(140, 20)
            self.matricul.setFont(self.font)
            self.matriculedite = QtWidgets.QLineEdit(self.entrétab)
            self.matriculedite.move(160, 110)
            self.matriculedite.resize(130, 20)
            self.matriculedite.setInputMask("99999-999-99")

            self.matriculedite.setFont(self.font)
            ##################################################quantite###############################################
            self.quantitetxt = QtWidgets.QLabel("Quantité(QX):", self.entrétab)
            self.quantitetxt.move(860, 100)
            self.quantitetxt.resize(85, 40)
            self.quantitetxt.setFont(self.font)
            self.quantite = QtWidgets.QLineEdit("", self.entrétab)
            self.quantite.move(950, 110)
            self.quantite.resize(130, 20)
            self.quantite.setValidator(QDoubleValidator(0.99, 99.99, 2))
            self.quantite.setFont(self.font)

            ####################################################éspece###########################
            self.éspéce = QtWidgets.QLabel("Espèce :", self.entrétab)
            self.éspéce.move(30, 50)
            self.éspéce.resize(120, 40)
            self.éspéce.setFont(self.font)
            self.éspécecombo = QtWidgets.QComboBox(self.entrétab)
            self.éspécecombo.addItem("")
            self.éspécecombo.addItem("Blé Dur IMP")
            self.éspécecombo.addItem("Blé Tendre IMP")
            self.éspécecombo.move(100, 60)
            self.éspécecombo.resize(130, 20)
            self.éspécecombo.setFont(self.font)

            ##########################################Nom de l’acheteur : confirmite###########################################
            self.provance = QtWidgets.QLabel("Provenance:", self.entrétab)
            self.provance.move(357, 100)
            self.provance.resize(118, 40)
            self.provance.setFont(self.font)
            self.provancetecombo = QtWidgets.QComboBox(self.entrétab, editable=True)
            self.provancetecombo.addItem("")
            self.provancetecombo.addItem("UCA ORAN")
            self.provancetecombo.addItem("UCA ALGER")
            self.provancetecombo.addItem("UCA MOSTAGANEM")
            self.provancetecombo.addItem("UCA SKIKDA")
            self.provancetecombo.addItem("UCA BEJAIA")
            self.provancetecombo.addItem("CCLS TELEMCEN")
            self.provancetecombo.addItem("CCLS TENES")
            self.provancetecombo.addItem("CCLS BEROUAGHIA")
            self.provancetecombo.addItem("CCLS LAMTAR")
            self.provancetecombo.addItem("")
            self.provancetecombo.addItem("")
            self.provancetecombo.move(440, 110)
            self.provancetecombo.resize(150, 20)
            self.provancetecombo.setFont(self.font)

            #####################################################Point de collecte : #######################################################
            self.lieutxt = QtWidgets.QLabel("Lieu de la livraison:", self.entrétab)
            self.lieutxt.move(597, 100)
            self.lieutxt.resize(140, 40)
            self.lieutxt.setFont(self.font)
            self.lieucombo = QtWidgets.QComboBox(self.entrétab, editable=True)
            self.lieucombo.addItem("")
            self.lieucombo.addItem("CCLS RELIZANE")
            self.lieucombo.move(725, 110)
            self.lieucombo.resize(130, 20)
            self.lieucombo.setFont(self.font)

            ######################################################Nom de l’Agréeur#######################################################

            self.agréeeur = QtWidgets.QLabel("Nom de l’Agréeur:", self.entrétab)
            self.agréeeur.move(1085, 100)
            self.agréeeur.resize(112, 40)
            self.agréeeur.setFont(self.font)
            self.agréeeurcombo = QtWidgets.QComboBox(self.entrétab, editable=True)
            self.agréeeurcombo.addItem("")
            self.agréeeurcombo.addItem("FELOUAH OMAR")
            self.agréeeurcombo.addItem("BEKHEDDA AEK")
            self.agréeeurcombo.addItem("BENAISSA YOUCEF")
            self.agréeeurcombo.addItem("REZZAG SOFIANE ")
            self.agréeeurcombo.addItem("BELBACHA M.NADIR")
            self.agréeeurcombo.move(1200, 110)
            self.agréeeurcombo.resize(130, 20)
            self.agréeeurcombo.setFont(self.font)

            ############################################docx2pdf######################
            ###########################buttons################

            self.btnsavebt = QtWidgets.QPushButton("ENREGISTRER", self.entrétab, clicked=lambda: self.save_doc())
            self.btnsavebt.move(832, 187)
            self.btnsavebt.resize(500, 80)
            self.btnsavebt.setFont(self.font)
            self.btnsavebt.setIcon(QIcon("images/savepis.png"))
            self.btnsavebt.setIconSize(QSize(70, 80))

            self.btnprintbt = QtWidgets.QPushButton("IMPRIMER", self.entrétab, clicked=lambda: self.printerin())
            self.btnprintbt.move(832, 292)
            self.btnprintbt.resize(500, 80)
            self.btnprintbt.setFont(self.font)
            self.btnprintbt.setIcon(QIcon("images/print125.png"))
            self.btnprintbt.setIconSize(QSize(70, 80))

            self.btnefacebt = QtWidgets.QPushButton("EFACER", self.entrétab, clicked=lambda: self.clear_all())
            self.btnefacebt.move(832, 397)
            self.btnefacebt.resize(500, 80)
            self.btnefacebt.setIcon(QIcon("images/eraser45877.png"))
            self.btnefacebt.setIconSize(QSize(70, 80))
            self.btnefacebt.setFont(self.font)

            self.btnmat = QtWidgets.QPushButton("Ajouté", self.entrétab, clicked=lambda: self.matriculbtnadd())
            self.btnmat.move(292, 110)
            self.btnmat.resize(30, 20)
            #############################################BLE DUR
            ########################################################
            #####################################################################
            ###############################################################################
            ##############################################################################################
            self.sortietab = QtWidgets.QWidget()
            self.sortietab.setObjectName("sortietab")
            self.confirmitewidget.addTab(self.sortietab, "")
            self.font = QtGui.QFont()
            self.font.setBold(True)
            self.font.setPointSize(10)
            ##########text bul# ettin######
            self.paramétreso = QtWidgets.QLabel("Paramètre recherchés", self.sortietab)
            self.paramétreso.move(30, 122)
            self.paramétreso.resize(80, 20)
            self.paramétreso.setFont(self.font)
            self.txtpsfontso = QtGui.QFont()
            self.txtpsfontso.setBold(True)
            self.txtpsfontso.setPointSize(9)
            ######################Limites(sans bon ni réf)################
            self.pinsect = QtWidgets.QLineEdit("Présence d’insectes(morts/vivants) : ", self.sortietab, readOnly=True)
            self.pinsect.resize(319, 20)
            self.pinsect.move(30, 145)
            self.pinsect.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.pinsect.setFont(self.txtpsfont)
            self.pinsect.setStyleSheet(" border: 2px solid bleu ;border-radius: 4px;padding: 0px")

            self.einsect = QtWidgets.QLineEdit("Espèce d’insecte : ", self.sortietab, readOnly=True)
            self.einsect.resize(319, 20)
            self.einsect.move(30, 166)
            self.einsect.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.einsect.setFont(self.txtpsfont)
            self.einsect.setStyleSheet(" border: 2px solid bleu ;border-radius: 4px;padding: 0px")

            self.psso = QtWidgets.QLineEdit("Poids spécifique (kg/hl): ", self.sortietab, readOnly=True)
            self.psso.resize(319, 20)
            self.psso.move(30, 187)
            self.psso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.psso.setFont(self.txtpsfont)
            self.psso.setStyleSheet(" border: 2px solid bleu ;border-radius: 4px;padding: 0px")
            ###############################humidite#############
            self.metadinetblt = QtWidgets.QLineEdit("Mitadin et blé tendre(%):", self.sortietab, readOnly=True)
            self.metadinetblt.resize(319, 20)
            self.metadinetblt.move(30, 208)
            self.metadinetblt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.metadinetblt.setFont(self.txtpsfont)
            #########################Graines nuisibles (%)##########
            self.bltdanbld = QtWidgets.QLineEdit("Blé tendre dans le blé dur(%):", self.sortietab, readOnly=True)
            self.bltdanbld.resize(319, 20)
            self.bltdanbld.move(30, 229)
            self.bltdanbld.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.bltdanbld.setFont(self.txtpsfont)

            self.mitadin = QtWidgets.QLineEdit("Mitadin(%):", self.sortietab, readOnly=True)
            self.mitadin.resize(319, 20)
            self.mitadin.move(30, 250)
            self.mitadin.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.mitadin.setFont(self.txtpsfont)

            self.gravar = QtWidgets.QLineEdit("Grains avariés (%):", self.sortietab, readOnly=True)
            self.gravar.resize(319, 20)
            self.gravar.move(30, 586)
            self.gravar.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.gravar.setFont(self.txtpsfont)

            self.autrecéréalso = QtWidgets.QLineEdit("Autres céréales(%):", self.sortietab, readOnly=True)
            self.autrecéréalso.resize(319, 20)
            self.autrecéréalso.move(30, 481)
            self.autrecéréalso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.autrecéréalso.setFont(self.txtpsfont)

            self.grainmauvaise = QtWidgets.QLineEdit("Graines de mauvaises herbes:", self.sortietab, readOnly=True)
            self.grainmauvaise.resize(319, 20)
            self.grainmauvaise.move(30, 271)
            self.grainmauvaise.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.grainmauvaise.setFont(self.txtpsfont)

            self.grainnuisibleso = QtWidgets.QLineEdit("Graines nuisibles(%):", self.sortietab, readOnly=True)
            self.grainnuisibleso.resize(319, 20)
            self.grainnuisibleso.move(30, 397)
            self.grainnuisibleso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.grainnuisibleso.setFont(self.txtpsfont)
            #############################Débris végétaux (%)########
            self.débrisvéso = QtWidgets.QLineEdit("Débris végétaux(%):  ", self.sortietab, readOnly=True)
            self.débrisvéso.resize(319, 20)
            self.débrisvéso.move(30, 334)
            self.débrisvéso.setFont(self.txtpsfont)
            self.débrisvéso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Matière inerte (%)################
            self.matiéreinrtso = QtWidgets.QLineEdit("Matière inerte(%):", self.sortietab, readOnly=True)
            self.matiéreinrtso.resize(319, 20)
            self.matiéreinrtso.move(30, 313)
            self.matiéreinrtso.setFont(self.txtpsfont)
            self.matiéreinrtso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ################################Grains chauffés (%)############################

            ########################################Grains sans valeur (%)#######################################
            self.grainsanvaleurso = QtWidgets.QLineEdit("Grains sans valeur(%):", self.sortietab, readOnly=True)
            self.grainsanvaleurso.resize(319, 20)
            self.grainsanvaleurso.move(30, 355)
            self.grainsanvaleurso.setFont(self.txtpsfont)
            self.grainsanvaleurso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Grains cariés##########################################
            self.graincarré = QtWidgets.QLineEdit("Grains cariés:   ", self.sortietab, readOnly=True)
            self.graincarré.resize(319, 20)
            self.graincarré.move(30, 376)
            self.graincarré.setFont(self.txtpsfont)
            self.graincarré.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")

            #######################################Total(%) 1er#####################################################
            self.totalpremso = QtWidgets.QLineEdit("Impuretés 1ere catégorie: ", self.sortietab, readOnly=True)
            self.totalpremso.resize(319, 20)
            self.totalpremso.move(30, 292)
            self.totalpremso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.totalpremso.setFont(self.txtpsfont)
            ##############################################Grains cassés (%) #########################################################
            self.graincasséso = QtWidgets.QLineEdit("Grains cassés(%):   ≤2", self.sortietab, readOnly=True)
            self.graincasséso.move(30, 439)
            self.graincasséso.resize(319, 20)
            self.graincasséso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.graincasséso.setFont(self.txtpsfont)
            #########################################################Gains échaudés (%)#####################################################
            self.grainechaudeso = QtWidgets.QLineEdit("Gains échaudés/maigres(%):   ", self.sortietab, readOnly=True)
            self.grainechaudeso.move(30, 460)
            self.grainechaudeso.resize(319, 20)
            self.grainechaudeso.setFont(self.txtpsfont)
            self.grainechaudeso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #####################################################Grains maigres (%)########################################################

            ##########################################################Grains germés (%)###################################################
            self.graigerméso = QtWidgets.QLineEdit("Grains germés(%):", self.sortietab, readOnly=True)
            self.graigerméso.move(30, 418)
            self.graigerméso.resize(319, 20)
            self.graigerméso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.graigerméso.setFont(self.txtpsfont)
            ##########################################################Grain punaisés (%)#########################################################
            self.grainpunaiséso = QtWidgets.QLineEdit("Grain punaisés(%): ", self.sortietab, readOnly=True)
            self.grainpunaiséso.move(30, 544)
            self.grainpunaiséso.resize(319, 20)
            self.grainpunaiséso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.grainpunaiséso.setFont(self.txtpsfont)

            #######################################################################Grains piqués (%)##########################################
            self.grainpiquéso = QtWidgets.QLineEdit("Grains piqués(%):  ", self.sortietab, readOnly=True)
            self.grainpiquéso.move(30, 565)
            self.grainpiquéso.resize(319, 20)
            self.grainpiquéso.setFont(self.txtpsfont)
            self.grainpiquéso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################################################Grains boutés « faible » (%)#######################################

            ####################################################################Grains boutés  « forte » (%)######################################
            self.grainboutéso = QtWidgets.QLineEdit("Grains boutés (%):", self.sortietab, readOnly=True)
            self.grainboutéso.move(30, 523)
            self.grainboutéso.resize(319, 20)
            self.grainboutéso.setFont(self.txtpsfont)
            self.grainboutéso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##################################################Grains mouchetés (%)########################################################
            self.grainmouchtéso = QtWidgets.QLineEdit("Grains fortement mouchetés (%):", self.sortietab, readOnly=True)
            self.grainmouchtéso.move(30, 502)
            self.grainmouchtéso.resize(319, 20)
            self.grainmouchtéso.setFont(self.txtpsfont)
            self.grainmouchtéso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ######################################################################Total(%)######################################
            self.totaldemso = QtWidgets.QLineEdit("Impuretés 2eme catégorie", self.sortietab, readOnly=True)
            self.totaldemso.move(30, 418)
            self.totaldemso.resize(319, 20)
            self.totaldemso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.totaldemso.setFont(self.txtpsfont)
            #########################################################indice notin##################################################

            #######################blétendre dans blé dur########

            #################label valeure##############
            self.valeurso = QtWidgets.QLabel("Résultat", self.sortietab)
            self.valeurso.move(350, 122)
            self.valeurso.resize(100, 20)
            self.valeurso.setFont(self.font)
            ######################Limites(sans bon ni réf)################

            self.vpinsect = QtWidgets.QLineEdit(self.sortietab)
            self.vpinsect.resize(100, 20)
            self.vpinsect.move(350, 145)
            self.vpinsect.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.vpinsect.setFont(self.txtpsfont)
            self.vpinsect.setStyleSheet(" border: 2px solid bleu ;border-radius: 4px;padding: 0px")

            self.veinsect = QtWidgets.QLineEdit(self.sortietab)
            self.veinsect.resize(100, 20)
            self.veinsect.move(350, 166)
            self.veinsect.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.veinsect.setFont(self.txtpsfont)
            self.veinsect.setStyleSheet(" border: 2px solid bleu ;border-radius: 4px;padding: 0px")

            self.vpsso = QtWidgets.QDoubleSpinBox(self.sortietab)
            self.vpsso.setSpecialValueText(" ")
            self.vpsso.resize(100, 20)
            self.vpsso.move(350, 187)
            self.vpsso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.vpsso.setFont(self.txtpsfont)
            self.vpsso.setStyleSheet(" border: 2px solid bleu ;border-radius: 4px;padding: 0px")
            ###############################humidite#############
            self.vmetadinetblt = QtWidgets.QDoubleSpinBox(self.sortietab)
            self.vmetadinetblt.setSpecialValueText(" ")
            self.vmetadinetblt.resize(100, 20)
            self.vmetadinetblt.move(350, 208)
            self.vmetadinetblt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.vmetadinetblt.setFont(self.txtpsfont)
            #########################Graines nuisibles (%)##########
            self.vbltdanbld = QtWidgets.QDoubleSpinBox(self.sortietab)
            self.vbltdanbld.setSpecialValueText(" ")
            self.vbltdanbld.resize(100, 20)
            self.vbltdanbld.move(350, 229)
            self.vbltdanbld.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.vbltdanbld.setFont(self.txtpsfont)

            self.vmitadin = QtWidgets.QDoubleSpinBox(self.sortietab)
            self.vmitadin.setSpecialValueText(" ")
            self.vmitadin.resize(100, 20)
            self.vmitadin.move(350, 250)
            self.vmitadin.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.vmitadin.setFont(self.txtpsfont)

            self.vgravar = QtWidgets.QDoubleSpinBox(self.sortietab)
            self.vgravar.setSpecialValueText(" ")
            self.vgravar.resize(100, 20)
            self.vgravar.move(350, 586)
            self.vgravar.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.vgravar.setFont(self.txtpsfont)

            self.vautrecéréalso = QtWidgets.QDoubleSpinBox(self.sortietab)
            self.vautrecéréalso.setSpecialValueText(" ")
            self.vautrecéréalso.resize(100, 20)
            self.vautrecéréalso.move(350, 481)
            self.vautrecéréalso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.vautrecéréalso.setFont(self.txtpsfont)

            self.vgrainmauvaise = QtWidgets.QDoubleSpinBox(self.sortietab)
            self.vgrainmauvaise.setSpecialValueText(" ")
            self.vgrainmauvaise.resize(100, 20)
            self.vgrainmauvaise.move(350, 271)
            self.vgrainmauvaise.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.vgrainmauvaise.setFont(self.txtpsfont)

            self.vgrainnuisibleso = QtWidgets.QDoubleSpinBox(self.sortietab)
            self.vgrainnuisibleso.setSpecialValueText(" ")
            self.vgrainnuisibleso.resize(100, 20)
            self.vgrainnuisibleso.move(350, 397)
            self.vgrainnuisibleso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.vgrainnuisibleso.setFont(self.txtpsfont)
            #############################Débris végétaux (%)########
            self.vdébrisvéso = QtWidgets.QDoubleSpinBox(self.sortietab)
            self.vdébrisvéso.setSpecialValueText(" ")
            self.vdébrisvéso.resize(100, 20)
            self.vdébrisvéso.move(350, 334)
            self.vdébrisvéso.setFont(self.txtpsfont)
            self.vdébrisvéso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Matière inerte (%)################
            self.vmatiéreinrtso = QtWidgets.QDoubleSpinBox(self.sortietab)
            self.vmatiéreinrtso.setSpecialValueText(" ")
            self.vmatiéreinrtso.resize(100, 20)
            self.vmatiéreinrtso.move(350, 313)
            self.vmatiéreinrtso.setFont(self.txtpsfont)
            self.vmatiéreinrtso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ################################Grains chauffés (%)############################

            ########################################Grains sans valeur (%)#######################################
            self.vgrainsanvaleurso = QtWidgets.QDoubleSpinBox(self.sortietab)
            self.vgrainsanvaleurso.setSpecialValueText(" ")
            self.vgrainsanvaleurso.resize(100, 20)
            self.vgrainsanvaleurso.move(350, 355)
            self.vgrainsanvaleurso.setFont(self.txtpsfont)
            self.vgrainsanvaleurso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Grains cariés##########################################
            self.vgraincarréso = QtWidgets.QDoubleSpinBox(self.sortietab)
            self.vgraincarréso.setSpecialValueText(" ")
            self.vgraincarréso.resize(100, 20)
            self.vgraincarréso.move(350, 376)
            self.vgraincarréso.setFont(self.txtpsfont)
            self.vgraincarréso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")

            #######################################Total(%) 1er#####################################################
            self.vtotalpremso = QtWidgets.QDoubleSpinBox(self.sortietab, readOnly=True)
            self.vtotalpremso.setSpecialValueText(" ")
            self.vtotalpremso.resize(100, 20)
            self.vtotalpremso.move(350, 292)
            self.vtotalpremso.setStyleSheet(
                "background-color:#ffffff;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.vtotalpremso.setFont(self.txtpsfont)
            ##############################################Grains cassés (%) #########################################################
            self.vgraincasséso = QtWidgets.QDoubleSpinBox(self.sortietab)
            self.vgraincasséso.setSpecialValueText(" ")
            self.vgraincasséso.move(350, 439)
            self.vgraincasséso.resize(100, 20)
            self.vgraincasséso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.vgraincasséso.setFont(self.txtpsfont)
            #########################################################Gains échaudés (%)#####################################################
            self.vgrainechaudeso = QtWidgets.QDoubleSpinBox(self.sortietab)
            self.vgrainechaudeso.setSpecialValueText(" ")
            self.vgrainechaudeso.move(350, 460)
            self.vgrainechaudeso.resize(100, 20)
            self.vgrainechaudeso.setFont(self.txtpsfont)
            self.vgrainechaudeso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #####################################################Grains maigres (%)########################################################

            ##########################################################Grains germés (%)###################################################
            self.vgraigerméso = QtWidgets.QDoubleSpinBox(self.sortietab)
            self.vgraigerméso.setSpecialValueText(" ")
            self.vgraigerméso.move(350, 418)
            self.vgraigerméso.resize(100, 20)
            self.vgraigerméso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.vgraigerméso.setFont(self.txtpsfont)
            ##########################################################Grain punaisés (%)#########################################################
            self.vgrainpunaiséso = QtWidgets.QDoubleSpinBox(self.sortietab)
            self.vgrainpunaiséso.setSpecialValueText(" ")
            self.vgrainpunaiséso.move(350, 544)
            self.vgrainpunaiséso.resize(100, 20)
            self.vgrainpunaiséso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.vgrainpunaiséso.setFont(self.txtpsfont)

            #######################################################################Grains piqués (%)##########################################
            self.vgrainpiquéso = QtWidgets.QDoubleSpinBox(self.sortietab)
            self.vgrainpiquéso.setSpecialValueText(" ")
            self.vgrainpiquéso.move(350, 565)
            self.vgrainpiquéso.resize(100, 20)
            self.vgrainpiquéso.setFont(self.txtpsfont)
            self.vgrainpiquéso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################################################Grains boutés « faible » (%)#######################################

            ####################################################################Grains boutés  « forte » (%)######################################
            self.vgrainboutéso = QtWidgets.QDoubleSpinBox(self.sortietab)
            self.vgrainboutéso.setSpecialValueText(" ")
            self.vgrainboutéso.move(350, 523)
            self.vgrainboutéso.resize(100, 20)
            self.vgrainboutéso.setFont(self.txtpsfont)
            self.vgrainboutéso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##################################################Grains mouchetés (%)########################################################
            self.vgrainmouchtéso = QtWidgets.QDoubleSpinBox(self.sortietab)
            self.vgrainmouchtéso.setSpecialValueText(" ")
            self.vgrainmouchtéso.move(350, 502)
            self.vgrainmouchtéso.resize(100, 20)
            self.vgrainmouchtéso.setFont(self.txtpsfont)
            self.vgrainmouchtéso.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ######################################################################Total(%)######################################
            self.vtotaldemso = QtWidgets.QDoubleSpinBox(self.sortietab, readOnly=True)
            self.vtotaldemso.setSpecialValueText("  ")
            self.vtotaldemso.move(350, 418)
            self.vtotaldemso.resize(100, 20)
            self.vtotaldemso.setStyleSheet(
                "background-color:#ffffff;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.vtotaldemso.setFont(self.txtpsfont)
            #########################################################observation###############
            self.observationso = QtWidgets.QLabel("Observation", self.sortietab)
            self.observationso.move(470, 122)
            self.observationso.resize(100, 20)
            self.observationso.setFont(self.txtpsfont)
            self.observationso.setFont(self.font)
            ##################################################txtobservation##################################
            self.txtobservationso = QtWidgets.QTextEdit("<h2><h2/>  <h2><h2/>  <h2><h2/> <h2><h2/>   <h3><h3/>",
                                                        self.sortietab)
            self.txtobservationso.move(470, 145)
            self.txtobservationso.resize(300, 460)
            self.txtobservationso.setStyleSheet("border: 2px solid bleu ;border-radius: 4px;padding: 2px")
            ###################################################label ccls relizane#################
            self.labelcclsso = QtWidgets.QLabel("<h1>CCLS RELIZANE SERVICE QUALITE<h1/>", self.sortietab)
            self.labelcclsso.move(500, 0)
            self.labelcclsso.resize(438, 80)
            self.labelcclsso.setFont(self.font)
            self.labelcclsso.setStyleSheet(
                "background-color: #ffffff; border: 2px solid bleu ;border-radius: 4px;padding: 0px")
            self.LABELBULLETINso = QtWidgets.QLabel("<H2>BULLETIN CONFORMITE</H2>", self.sortietab)
            self.LABELBULLETINso.move(650, 35)
            self.LABELBULLETINso.resize(180, 20)
            self.LABELBULLETINso.setStyleSheet("background-color: #ffffff")
            self.bledurtxt = QtWidgets.QLabel("<H2>SORTIE<H2/>", self.sortietab)
            self.bledurtxt.move(698, 55)
            self.bledurtxt.resize(120, 20)
            self.bledurtxt.setStyleSheet("background-color: #ffffff")

            #############################################date edit#############################################
            self.dateediteso = QtWidgets.QDateEdit(self.sortietab)
            self.dateediteso.setDate(self.daydate)
            self.dateediteso.move(100, 10)
            self.dateediteso.setStyleSheet(
                " background-color: #FDFEFE;padding: 1px;font-size: 12px;border-style: solid;border: 1px solid #76797C;border-radius: 0px;color: #000000;")
            self.dateediteso.resize(130, 20)
            self.dateediteso.setFont(self.font)

            self.dateeditesotxt = QtWidgets.QLabel("Date:", self.sortietab)
            self.dateeditesotxt.move(30, 10)
            self.dateeditesotxt.resize(60, 20)
            self.dateeditesotxt.setFont(self.font)

            ###############################################search#################################################

            #####################################décade######################
            self.matriculso = QtWidgets.QLabel("Matricul camion:", self.sortietab)
            self.matriculso.move(30, 90)
            self.matriculso.resize(130, 20)
            self.matriculso.setFont(self.font)
            self.matriculcomboso = QtWidgets.QLineEdit(self.sortietab)
            self.matriculcomboso.setInputMask("99999-999-99")
            self.matriculcomboso.move(140, 90)
            self.matriculcomboso.resize(130, 20)

            ##################################################quantite###############################################
            self.quantiteso = QtWidgets.QLabel("Quantité(QX):", self.sortietab)
            self.quantiteso.move(720, 80)
            self.quantiteso.resize(85, 40)
            self.quantiteso.setFont(self.font)
            self.quantitetxtso = QtWidgets.QLineEdit("", self.sortietab)
            self.quantitetxtso.move(820, 90)
            self.quantitetxtso.resize(130, 20)
            self.quantitetxtso.setValidator(QDoubleValidator(0.99, 99.99, 2))

            ####################################################éspece###########################
            self.éspéceso = QtWidgets.QLabel("Espèce :", self.sortietab)
            self.éspéceso.move(30, 35)
            self.éspéceso.resize(60, 40)
            self.éspéceso.setFont(self.font)
            self.éspécecomboso = QtWidgets.QComboBox(self.sortietab)
            self.éspécecomboso.addItem("Blé Dur")
            self.éspécecomboso.move(100, 45)
            self.éspécecomboso.resize(130, 20)

            ##########################################Nom de l’acheteur : confirmite###########################################
            self.distination = QtWidgets.QLabel("Distination:", self.sortietab)
            self.distination.move(280, 80)
            self.distination.resize(118, 40)
            self.distination.setFont(self.font)
            self.distinationcomboso = QtWidgets.QComboBox(self.sortietab, editable=True)
            self.distinationcomboso.addItem("")
            self.distinationcomboso.addItem("CCLS BLIDA ")
            self.distinationcomboso.addItem("UCA MOSTAGANEM")
            self.distinationcomboso.addItem("CCLS B.BOU ARRERIDJ")
            self.distinationcomboso.addItem("")
            self.distinationcomboso.addItem("")
            self.distinationcomboso.addItem("")
            self.distinationcomboso.addItem("")
            self.distinationcomboso.addItem("")
            self.distinationcomboso.move(360, 90)
            self.distinationcomboso.resize(138, 20)

            #####################################################Point de collecte : #######################################################
            self.pointcollecteso = QtWidgets.QLabel("Expéditeur:", self.sortietab)
            self.pointcollecteso.move(500, 80)
            self.pointcollecteso.resize(106, 40)
            self.pointcollecteso.setFont(self.font)
            self.pointcollectecomboso = QtWidgets.QComboBox(self.sortietab)
            self.pointcollectecomboso.addItem("")
            self.pointcollectecomboso.addItem("CCLS RELIZANE")
            self.pointcollectecomboso.move(580, 90)
            self.pointcollectecomboso.resize(130, 20)

            ######################################################Nom de l’Agréeur#######################################################

            self.agréeeurso = QtWidgets.QLabel("Nom de l’Agréeur:", self.sortietab)
            self.agréeeurso.move(960, 80)
            self.agréeeurso.resize(112, 40)
            self.agréeeurso.setFont(self.font)
            self.agréeeurcomboso = QtWidgets.QComboBox(self.sortietab, editable=False)
            self.agréeeurcomboso.addItem("")
            self.agréeeurcomboso.addItem("FELOUAH OMAR")
            self.agréeeurcomboso.addItem("BEKHEDDA AEK")
            self.agréeeurcomboso.addItem("BENAISSA YOUCEF")
            self.agréeeurcomboso.addItem("REZZAG SOFIANE ")
            self.agréeeurcomboso.addItem("BELBACHA M.NADIR")
            self.agréeeurcomboso.move(1090, 90)
            self.agréeeurcomboso.resize(130, 20)

            ############################################docx2pdf######################
            self.aab = QTimer()
            self.aab.timeout.connect(self.plus_value)
            self.aab.setInterval(1000)
            self.aab.start()

            self.aa = QTimer()
            self.aa.timeout.connect(self.plus_sortie)
            self.aa.setInterval(1000)
            self.aa.start()
            print("run")
            ###########################buttons################

            self.btnsaveso = QtWidgets.QPushButton("ENREGISTRER", self.sortietab,
                                                   clicked=lambda: self.save_doc_sortie())
            self.btnsaveso.move(790, 145)
            self.btnsaveso.resize(430, 80)
            self.btnsaveso.setFont(self.font)
            self.btnsaveso.setIcon(QIcon("images/savepis.png"))
            self.btnsaveso.setIconSize(QSize(70, 80))

            self.btnprintso = QtWidgets.QPushButton("IMPRIMER", self.sortietab, clicked=lambda: self.printer_sortie())
            self.btnprintso.move(790, 265)
            self.btnprintso.resize(430, 80)
            self.btnprintso.setFont(self.font)
            self.btnprintso.setIcon(QIcon("images/print125.png"))
            self.btnprintso.setIconSize(QSize(70, 80))

            self.btnefaceso = QtWidgets.QPushButton("EFACER", self.sortietab, clicked=lambda: self.clear_sortie())
            self.btnefaceso.move(790, 385)
            self.btnefaceso.resize(430, 80)
            self.btnefaceso.setIcon(QIcon("images/eraser45877.png"))
            self.btnefaceso.setIconSize(QSize(70, 80))
            self.btnefaceso.setFont(self.font)

            ###############################################################################################################
            ###########################################################################################################################
            ########################################################sortie poure moulin
            self.bltendretab = QtWidgets.QWidget()
            self.bltendretab.setStyleSheet("""QToolTip
            {
                border: 1px solid #76797C;
                background-color: rgb(90, 102, 117);;
                color: white;
                padding: 5px;
                opacity: 200;
            }

            QWidget
            {
                color: #000000;
                background-color: #ffffff;
                selection-background-color:#3daee9;
                selection-color: #3daee9;
                background-clip: border;
                border-image: none;
                border: 0px transparent black;
                outline: 0;
            }

            QWidget:item:hover
            {
                background-color: #3daee9;
                color: #eff0f1;
            }

            QWidget:item:selected
            {
                background-color: #3daee9;
            }



            QWidget:disabled
            {
                color: #454545;
                background-color: #31363b;
            }

            QAbstractItemView
            {
                alternate-background-color: #31363b;
                color: #eff0f1;
                border: 1px solid 3A3939;
                border-radius: 2px;
            }

            QWidget:focus, QMenuBar:focus
            {
                border: 1px solid #3daee9;
            }

            QTabWidget:focus, QCheckBox:focus, QRadioButton:focus, QSlider:focus
            {
                border: none;
            }

            QLineEdit
            {
                background-color: #FDFEFE;
                padding: 1px;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 0px;
                color: #000000;
            }
            QDoubleSpinBox
            {
                background-color: #FDFEFE;
                padding: 1px;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 0px;
                color:#000000;
                font-size: 11px;
                font-weight: bold;

            }
            QDoubleSpinBox:focus{
                background-color: #FDFEFE;
                border-style: solid;
                border: 2px solid #76797C;
                border-radius: 4px;
                border-color: #ff8c00;
            }
            QDoubleSpinBox::drop-down
            {
                subcontrol-origin: padding;
                subcontrol-position: top right;
                width: 1px;

                border-left-width: 0px;
                border-left-color: #232629;
                border-left-style: solid;
                border-top-right-radius: 1px;
                border-bottom-right-radius: 1px;
            }



            QGroupBox {
                border:1px solid #76797C;
                border-radius: 2px;
                margin-top: 5px;
            }

            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top center;
                padding-left: 4px;
                padding-right: 4px;
                padding-top: 4px;
            }

            QAbstractScrollArea
            {
                border-radius: 2px;
                border: 1px solid #76797C;
                background-color: transparent;
            }

            QScrollBar:horizontal
            {
                height: 15px;
                margin: 3px 15px 3px 15px;
                border: 1px transparent #2A2929;
                border-radius: 4px;
                background-color: #2A2929;
            }

            QScrollBar::handle:horizontal
            {
                background-color: #605F5F;
                min-width: 5px;
                border-radius: 4px;
            }

            QScrollBar::add-line:horizontal
            {
                margin: 0px 3px 0px 3px;
                border-image: url(:/qss_icons/Dark_rc/right_arrow_disabled.png);
                width: 10px;
                height: 10px;
                subcontrol-position: right;
                subcontrol-origin: margin;
            }

            QScrollBar::sub-line:horizontal
            {
                margin: 0px 3px 0px 3px;
                border-image: url(:/qss_icons/Dark_rc/left_arrow_disabled.png);
                height: 10px;
                width: 10px;
                subcontrol-position: left;
                subcontrol-origin: margin;
            }

            QScrollBar::add-line:horizontal:hover,QScrollBar::add-line:horizontal:on
            {
                border-image: url(:/qss_icons/Dark_rc/right_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: right;
                subcontrol-origin: margin;
            }


            QScrollBar::sub-line:horizontal:hover, QScrollBar::sub-line:horizontal:on
            {
                border-image: url(:/qss_icons/Dark_rc/left_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: left;
                subcontrol-origin: margin;
            }

            QScrollBar::up-arrow:horizontal, QScrollBar::down-arrow:horizontal
            {
                background: none;
            }


            QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal
            {
                background: none;
            }

            QScrollBar:vertical
            {
                background-color: #2A2929;
                width: 15px;
                margin: 15px 3px 15px 3px;
                border: 1px transparent #2A2929;
                border-radius: 4px;
            }

            QScrollBar::handle:vertical
            {
                background-color: #605F5F;
                min-height: 5px;
                border-radius: 4px;
            }

            QScrollBar::sub-line:vertical
            {
                margin: 3px 0px 3px 0px;
                border-image: url(:/qss_icons/Dark_rc/up_arrow_disabled.png);
                height: 10px;
                width: 10px;
                subcontrol-position: top;
                subcontrol-origin: margin;
            }

            QScrollBar::add-line:vertical
            {
                margin: 3px 0px 3px 0px;
                border-image: url(:/qss_icons/Dark_rc/down_arrow_disabled.png);
                height: 10px;
                width: 10px;
                subcontrol-position: bottom;
                subcontrol-origin: margin;
            }

            QScrollBar::sub-line:vertical:hover,QScrollBar::sub-line:vertical:on
            {

                border-image: url(:/qss_icons/Dark_rc/up_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: top;
                subcontrol-origin: margin;
            }


            QScrollBar::add-line:vertical:hover, QScrollBar::add-line:vertical:on
            {
                border-image: url(:/qss_icons/Dark_rc/down_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: bottom;
                subcontrol-origin: margin;
            }

            QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical
            {
                background: none;
            }


            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical
            {
                background: none;
            }

            QTextEdit
            {
                background-color: #FDFEFE;
                color: #000000;
                border: 1px solid #76797C;
            }

            QPlainTextEdit
            {
                background-color: #232629;;
                color: #000000;
                border-radius: 2px;
                border: 1px solid #76797C;
            }

            QHeaderView::section
            {
                background-color: #76797C;
                color: #eff0f1;
                padding: 1px;
                border: 1px solid #76797C;
            }

            QSizeGrip {
                width: 12px;
                height: 12px;
            }


            QMainWindow::separator
            {
                background-color: #31363b;
                color: white;
                padding-left: 4px;
                spacing: 2px;
                border: 1px dashed #76797C;
            }

            QMainWindow::separator:hover
            {

                background-color: #787876;
                color: white;
                padding-left: 4px;
                border: 1px solid #76797C;
                spacing: 2px;
            }


            QMenu::separator
            {
                height: 1px;
                background-color: #76797C;
                color: white;
                padding-left: 4px;
                margin-left: 10px;
                margin-right: 5px;
            }


            QFrame
            {
                border-radius: 2px;
                border: 1px solid #76797C;
            }

            QFrame[frameShape="0"]
            {
                border-radius: 2px;
                border: 1px transparent #76797C;
            }

            QStackedWidget
            {
                border: 1px transparent black;
            }


            QPushButton
            {
                color: #00000;
                background-color:#ade3e7;
                border-width: 1px;
                border-color: #1e1e1e;
                border-style: solid;
                border-radius: 6;
                padding: 3px;
                font-size: 12px;
                padding-left: 5px;
                padding-right: 5px;
                min-width: 40px;

            }

            QPushButton:disabled
            {
                background-color:#03ecff;
                border-width: 1px;
                border-color: #454545;
                border-style: solid;
                padding-top: 5px;
                padding-bottom: 5px;
                padding-left: 10px;
                padding-right: 10px;
                border-radius: 2px;
                color: #454545;
            }
            QPushButton:pressed
            {
                background-color: #3daee9;
                padding-top: -15px;
                padding-bottom: -17px;
            }

            QComboBox
            {
               background-color: #FDFEFE;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 2px;
                min-width: 40px;
            }

            QPushButton:checked{
                background-color: #76797C;
                border-color: #6A6969;
            }

            QComboBox:hover,QDoubleSpinBox:Hover,QPushButton:hover,QAbstractSpinBox:hover,QLineEdit:hover,QTextEdit:hover,QPlainTextEdit:hover,QAbstractView:hover,QTreeView:hover
            {
                border: 1px solid #ff8c00;
                color: #000000;
            }

            QComboBox:on
            {
                padding-top: 1px;
                padding-left: 1px;
                selection-background-color: #FDFEFE;
            }

            QComboBox QAbstractItemView
            {
                background-color: #FDFEFE;
                border-radius: 2px;
                border: 1px solid #76797C;
                color:#000000;
                selection-background-color: #000000;
            }

            QComboBox::drop-down
            {
                subcontrol-origin: padding;
                subcontrol-position: top right;
                width: 15px;

                border-left-width: 0px;
                border-left-color: ff8c00;
                border-left-style: solid;
                border-top-right-radius: 1px;
                border-bottom-right-radius: 1px;
            }


            QLabel
            {
                border: 2px solid black;
            }

            QTabWidget{
                border: 0px transparent black;
            }

            QTabWidget::pane {
                border: 1px solid #76797C;
                padding: 5px;
                margin: 0px;
            }

            QTabBar
            {
                qproperty-drawBase: 0;
                left: 5px; /* move to the right by 5px */
                border-radius: 3px;
            }

            QTabBar:focus
            {
                border: 0px transparent black;
            }

            QTabBar::close-button  {
                image: url(:/qss_icons/Dark_rc/close.png);
                background: transparent;
            }

            QTabBar::close-button:hover
            {
                image: url(:/qss_icons/Dark_rc/close-hover.png);
                background: transparent;
            }

            QTabBar::close-button:pressed {
                image: url(:/qss_icons/Dark_rc/close-pressed.png);
                background: transparent;
            }

            /* TOP TABS */
            QTabBar::tab:top {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-bottom: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                min-width: 10px;
                border-top-left-radius: 2px;
                border-top-right-radius: 2px;
            }

            QTabBar::tab:top:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-bottom: 1px transparent black;
                border-top-left-radius: 2px;
                border-top-right-radius: 2px;    
            }

            QTabBar::tab:top:!selected:hover {
                background-color: #3daee9;
            }

            /* BOTTOM TABS */
            QTabBar::tab:bottom {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-top: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                border-bottom-left-radius: 2px;
                border-bottom-right-radius: 2px;
                min-width: 10px;
            }

            QTabBar::tab:bottom:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-top: 1px transparent black;
                border-bottom-left-radius: 2px;
                border-bottom-right-radius: 2px;
            }

            QTabBar::tab:bottom:!selected:hover {
                background-color: #3daee9;
            }

            /* LEFT TABS */
            QTabBar::tab:left {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-left: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                border-top-right-radius: 2px;
                border-bottom-right-radius: 2px;
                min-height: 50px;
            }

            QTabBar::tab:left:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-left: 1px transparent black;
                border-top-right-radius: 2px;
                border-bottom-right-radius: 2px;
            }

            QTabBar::tab:left:!selected:hover {
                background-color: #3daee9;
            }


            /* RIGHT TABS */
            QTabBar::tab:right {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-right: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                border-top-left-radius: 2px;
                border-bottom-left-radius: 2px;
                min-height: 50px;
            }

            QTabBar::tab:right:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-right: 1px transparent black;
                border-top-left-radius: 2px;
                border-bottom-left-radius: 2px;
            }





            QSlider::groove:horizontal {
                border: 1px solid #565a5e;
                height: 4px;
                background: #565a5e;
                margin: 0px;
                border-radius: 2px;
            }

            QSlider::handle:horizontal {
                background: #232629;
                border: 1px solid #565a5e;
                width: 16px;
                height: 16px;
                margin: -8px 0;
                border-radius: 9px;
            }

            QSlider::groove:vertical {
                border: 1px solid #565a5e;
                width: 4px;
                background: #565a5e;
                margin: 0px;
                border-radius: 3px;
            }

            QSlider::handle:vertical {
                background: #232629;
                border: 1px solid #565a5e;
                width: 16px;
                height: 16px;
                margin: 0 -8px;
                border-radius: 9px;
            }

            QToolButton {
                background-color: transparent;
                border: 1px transparent #76797C;
                border-radius: 2px;
                margin: 3px;
                padding: 5px;
            }

            QToolButton[popupMode="1"] { /* only for MenuButtonPopup */
             padding-right: 20px; /* make way for the popup button */
             border: 1px #76797C;
             border-radius: 5px;
            }

            QToolButton[popupMode="2"] { /* only for InstantPopup */
             padding-right: 10px; /* make way for the popup button */
             border: 1px #76797C;
            }


            QToolButton:hover, QToolButton::menu-button:hover {
                background-color: transparent;
                border: 1px solid #3daee9;
                padding: 5px;
            }

            QToolButton:checked, QToolButton:pressed,
                    QToolButton::menu-button:pressed {
                background-color: #3daee9;
                border: 1px solid #3daee9;
                padding: 5px;
            }

            /* the subcontrol below is used only in the InstantPopup or DelayedPopup mode */
            QToolButton::menu-indicator {
                background-color:ff8c00;
                top: -7px; left: -2px; /* shift it a bit */
            }

            /* the subcontrols below are used only in the MenuButtonPopup mode */
            QToolButton::menu-button {
                border: 1px transparent #76797C;
                border-top-right-radius: 6px;
                border-bottom-right-radius: 6px;
                /* 16px width + 4px for border = 20px allocated above */
                width: 16px;
                outline: none;
            }

            QToolButton::menu-arrow {
               background-color:ff8c00;
            }

            QToolButton::menu-arrow:open {
                border: 1px solid #76797C;
            }

            QPushButton::menu-indicator  {
                subcontrol-origin: padding;
                subcontrol-position: bottom right;
                left: 8px;
            }

            QTableView
            {
                border: 1px solid #76797C;
                gridline-color: #31363b;
                background-color: #FDFEFE;
                color:#000000;
            }


            QTableView, QHeaderView
            {
                background-color: #FDFEFE;
                color:#000000;
                border-radius: 0px;
            }

            QTableView::item:pressed, QListView::item:pressed, QTreeView::item:pressed  {
                background: #FDFEFE;
                color: #000000;
            }

            QTableView::item:selected:active, QTreeView::item:selected:active, QListView::item:selected:active  {
                background: #3daee9;
                color: #000000;
            }


            QHeaderView
            {
                background-color: #FDFEFE;
                border: 1px transparent;
                border-radius: 0px;
                margin: 0px;
                padding: 0px;

            }

            QHeaderView::section  {
                background-color:#80f1f9;
                color: #000000;
                padding: 5px;
                border: 1px solid #76797C;
                border-radius: 0px;
                text-align: center;
            }

            QHeaderView::section::vertical::first, QHeaderView::section::vertical::only-one
            {
                border-top: 1px solid #76797C;
            }

            QHeaderView::section::vertical
            {
                border-top: transparent;
            }

            QHeaderView::section::horizontal::first, QHeaderView::section::horizontal::only-one
            {
                border-left: 1px solid #76797C;
            }

            QHeaderView::section::horizontal
            {
                border-left: transparent;
            }


            QHeaderView::section:checked
             {
                color: #000000;
                background-color: #3daee9;
             }

             /* style the sort indicator */
            QHeaderView::down-arrow {

            }

            QHeaderView::up-arrow {

            }


            QTableCornerButton::section {
                background-color: #31363b;
                border: 1px transparent #76797C;
                border-radius: 0px;
            }

            QToolBox  {
                padding: 5px;
                border: 1px transparent black;
            }

            QToolBox::tab {
                color: #eff0f1;
                background-color: #31363b;
                border: 1px solid #76797C;
                border-bottom: 1px transparent #31363b;
                border-top-left-radius: 5px;
                border-top-right-radius: 5px;
            }

            QToolBox::tab:selected { /* italicize selected tabs */
                font: italic;
                background-color: #31363b;
                border-color: #3daee9;
             }

            QStatusBar::item {
                border: 0px transparent dark;
             }


            QFrame[height="3"], QFrame[width="3"] {
                background-color: #76797C;
            }




            QDateEdit
            {
                background-color: #232629;;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 2px;
                padding: 1px;
                min-width: 75px;
            }

            QDateEdit:on
            {
                padding-top: 2px;
                padding-left: 2px;
                selection-background-color: #4a4a4a;
            }

            QDateEdit QAbstractItemView
            {
                background-color: #ff8c00;
                border-radius: 2px;
                border: 1px solid #3375A3;
                selection-background-color:ff8c00;
            }

            QDateEdit::drop-down
            {
                subcontrol-origin: padding;
                subcontrol-position: top right;
                width: 15px;
                border-left-width: 0px;
                border-left-color: darkgray;
                border-left-style: solid;
                border-top-right-radius: 3px;
                border-bottom-right-radius: 3px;
            }   
            QDateTimeEdit
            {
                background-color: #232629;;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 2px;
                padding: 1px;
                min-width: 75px;

            }    
            """)
            self.bltendretab.setObjectName("bltendretab")
            self.confirmitewidget.addTab(self.bltendretab, "sortie moulin BT")

            self.font = QtGui.QFont()
            self.font.setBold(True)
            self.font.setPointSize(10)
            ##########text bul# ettin######
            self.paramétre = QtWidgets.QLabel("Paramètre", self.bltendretab)
            self.paramétre.move(30, 145)
            self.paramétre.resize(80, 20)
            self.paramétre.setFont(self.font)

            self.txtpsfont = QtGui.QFont()
            self.txtpsfont.setBold(True)
            self.txtpsfont.setPointSize(9)
            ################Limites(sans bon ni réf)###############
            self.valeur = QtWidgets.QLabel("""Limite ssans bon ni réf)""", self.bltendretab)
            self.valeur.move(165, 127)
            self.valeur.resize(200, 55)
            self.valeur.setFont(self.font)
            ######################Limites(sans bon ni réf)################
            self.ps = QtWidgets.QLineEdit("Poids spécifique (kg/hl):   (75.500-75.899)", self.bltendretab,
                                          readOnly=True)
            self.ps.resize(319, 20)
            self.ps.move(30, 167)
            self.ps.setFont(self.txtpsfont)
            self.ps.setStyleSheet(" border: 2px solid bleu ;border-radius: 4px;padding: 0px")
            ###############################humidite#############
            self.humidite = QtWidgets.QLineEdit("Teneur en eau(%): (13.5-15)", self.bltendretab, readOnly=True)
            self.humidite.resize(319, 20)
            self.humidite.move(30, 188)
            self.humidite.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.humidite.setFont(self.txtpsfont)

            #######################ergot#########################
            self.ergot = QtWidgets.QLineEdit("Ergo(% :\t<0.001 ", self.bltendretab, readOnly=True)
            self.ergot.resize(319, 20)
            self.ergot.move(30, 209)
            self.ergot.setStyleSheet("background-color: #232629")
            self.ergot.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.ergot.setFont(self.txtpsfont)

            #########################Graines nuisibles (%)##########
            self.grainnuisible = QtWidgets.QLineEdit("Graines nuisibles(%):\t<0.001", self.bltendretab, readOnly=True)
            self.grainnuisible.resize(319, 20)
            self.grainnuisible.move(30, 230)
            self.grainnuisible.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.grainnuisible.setFont(self.txtpsfont)
            #############################Débris végétaux (%)########
            self.débrisvé = QtWidgets.QLineEdit("Débris végétaux(%):     ", self.bltendretab, readOnly=True)
            self.débrisvé.resize(319, 20)
            self.débrisvé.move(30, 251)
            self.débrisvé.setFont(self.txtpsfont)
            self.débrisvé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Matière inerte (%)################
            self.matiéreinrt = QtWidgets.QLineEdit("Matière inerte(%):", self.bltendretab, readOnly=True)
            self.matiéreinrt.resize(319, 20)
            self.matiéreinrt.move(30, 272)
            self.matiéreinrt.setFont(self.txtpsfont)
            self.matiéreinrt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ################################Grains chauffés (%)############################
            self.grainchaufé = QtWidgets.QLineEdit("Grains chauffés(%):    ", self.bltendretab, readOnly=True)
            self.grainchaufé.resize(319, 20)
            self.grainchaufé.move(30, 293)
            self.grainchaufé.setFont(self.txtpsfont)
            self.grainchaufé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################Grains sans valeur (%)#######################################
            self.grainsanvaleur = QtWidgets.QLineEdit("Grains sans valeur(%):", self.bltendretab, readOnly=True)
            self.grainsanvaleur.resize(319, 20)
            self.grainsanvaleur.move(30, 314)
            self.grainsanvaleur.setFont(self.txtpsfont)
            self.grainsanvaleur.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Grains cariés##########################################
            self.graincarré = QtWidgets.QLineEdit("Grains cariés:   ", self.bltendretab, readOnly=True)
            self.graincarré.resize(319, 20)
            self.graincarré.move(30, 335)
            self.graincarré.setFont(self.txtpsfont)
            self.graincarré.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")

            #######################################Total(%) 1er#####################################################
            self.totalprem = QtWidgets.QLineEdit("TOTAL 1ére CAT:     ≤1", self.bltendretab, readOnly=True)
            self.totalprem.resize(319, 20)
            self.totalprem.move(30, 356)
            self.totalprem.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.totalprem.setFont(self.txtpsfont)
            ##############################################Grains cassés (%) #########################################################
            self.graincassé = QtWidgets.QLineEdit("Grains cassés(%):   ≤2", self.bltendretab, readOnly=True)
            self.graincassé.move(30, 377)
            self.graincassé.resize(319, 20)
            self.graincassé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.graincassé.setFont(self.txtpsfont)
            #########################################################Gains échaudés (%)#####################################################
            self.grainechaude = QtWidgets.QLineEdit("Gains échaudés(%):   ", self.bltendretab, readOnly=True)
            self.grainechaude.move(30, 419)
            self.grainechaude.resize(319, 20)
            self.grainechaude.setFont(self.txtpsfont)
            self.grainechaude.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #####################################################Grains maigres (%)########################################################
            self.grainmaigre = QtWidgets.QLineEdit("Grains maigres(%):", self.bltendretab, readOnly=True)
            self.grainmaigre.move(30, 398)
            self.grainmaigre.resize(319, 20)
            self.grainmaigre.setFont(self.txtpsfont)
            self.grainmaigre.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##########################################################Grains germés (%)###################################################
            self.graigermé = QtWidgets.QLineEdit("Grains germés(%): ≤2", self.bltendretab, readOnly=True)
            self.graigermé.move(30, 440)
            self.graigermé.resize(319, 20)
            self.graigermé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.graigermé.setFont(self.txtpsfont)
            ##########################################################Grain punaisés (%)#########################################################
            self.grainpunaisé = QtWidgets.QLineEdit("Grain punaisés(%): ≤1", self.bltendretab, readOnly=True)
            self.grainpunaisé.move(30, 461)
            self.grainpunaisé.resize(319, 20)
            self.grainpunaisé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.grainpunaisé.setFont(self.txtpsfont)

            #######################################################################Grains piqués (%)##########################################
            self.grainpiqué = QtWidgets.QLineEdit("Grains piqués(%):  ", self.bltendretab, readOnly=True)
            self.grainpiqué.move(30, 482)
            self.grainpiqué.resize(319, 20)
            self.grainpiqué.setFont(self.txtpsfont)
            self.grainpiqué.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################################################Grains boutés « faible » (%)#######################################
            self.grainboutef = QtWidgets.QLineEdit("Grains boutés « faible » (%):", self.bltendretab, readOnly=True)
            self.grainboutef.move(30, 503)
            self.grainboutef.resize(319, 20)
            self.grainboutef.setFont(self.txtpsfont)
            self.grainboutef.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ####################################################################Grains boutés  « forte » (%)######################################
            self.grainbouté = QtWidgets.QLineEdit("Grains boutés  « forte » (%):", self.bltendretab, readOnly=True)
            self.grainbouté.move(30, 524)
            self.grainbouté.resize(319, 20)
            self.grainbouté.setFont(self.txtpsfont)
            self.grainbouté.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##################################################Grains mouchetés (%)########################################################
            self.grainmouchté = QtWidgets.QLineEdit("Grains mouchetés (%):", self.bltendretab, readOnly=True)
            self.grainmouchté.move(30, 545)
            self.grainmouchté.resize(319, 20)
            self.grainmouchté.setFont(self.txtpsfont)
            self.grainmouchté.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################################Grain étrangers Utilisables pour le bétail (%)##################################################
            self.grainetrangé = QtWidgets.QLineEdit("Grain étrangers Utilisables pour le bétail (%):  ",
                                                    self.bltendretab, readOnly=True)
            self.grainetrangé.move(30, 566)
            self.grainetrangé.resize(319, 20)
            self.grainetrangé.setFont(self.txtpsfont)
            self.grainetrangé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ######################################################################Total(%)######################################
            self.totaldem = QtWidgets.QLineEdit("Total(%)  Imp2eme cat   ≤5", self.bltendretab, readOnly=True)
            self.totaldem.move(30, 587)
            self.totaldem.resize(319, 20)
            self.totaldem.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.totaldem.setFont(self.txtpsfont)
            ###########################################################################################################

            #################label valeure##############
            self.valeur = QtWidgets.QLabel("valeur", self.bltendretab)
            self.valeur.move(350, 144)
            self.valeur.resize(100, 20)
            self.valeur.setFont(self.font)
            ######################Limites(sans bon ni réf)################
            self.vps = QtWidgets.QDoubleSpinBox(self.bltendretab)
            self.vps.setRange(60, 81.00)
            self.vps.setSpecialValueText(' ')
            self.vps.resize(100, 20)
            self.vps.move(350, 167)
            self.vps.setFont(self.txtpsfont)
            self.vps.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ###############################humidite#############
            self.vhumidite = QtWidgets.QDoubleSpinBox(self.bltendretab)
            self.vhumidite.setRange(4, 18)
            self.vhumidite.resize(100, 20)
            self.vhumidite.setSpecialValueText(' ')
            self.vhumidite.move(350, 188)
            self.vhumidite.setFont(self.txtpsfont)
            self.vhumidite.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################ergot#########################
            self.vergot = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vergot.setRange(0, 1)
            self.vergot.setSpecialValueText(' ')
            self.vergot.resize(100, 20)
            self.vergot.move(350, 209)
            self.vergot.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Graines nuisibles (%)##########
            self.vgrainnuisible = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vgrainnuisible.setRange(0, 1)
            self.vgrainnuisible.setSpecialValueText(' ')
            self.vgrainnuisible.resize(100, 20)
            self.vgrainnuisible.move(350, 230)
            self.vgrainnuisible.setFont(self.txtpsfont)
            self.vgrainnuisible.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #############################Débris végétaux (%)########
            self.vdébrisvé = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vdébrisvé.setRange(0, 10)
            self.vdébrisvé.setSpecialValueText(' ')
            self.vdébrisvé.resize(100, 20)
            self.vdébrisvé.move(350, 251)
            self.vdébrisvé.setFont(self.txtpsfont)
            self.vdébrisvé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Matière inerte (%)################
            self.vmatiéreinrt = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vmatiéreinrt.setRange(0, 10)
            self.vmatiéreinrt.setSpecialValueText(' ')
            self.vmatiéreinrt.resize(100, 20)
            self.vmatiéreinrt.move(350, 272)
            self.vmatiéreinrt.setFont(self.txtpsfont)
            self.vmatiéreinrt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ################################Grains chauffés (%)############################
            self.vgrainchaufé = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vgrainchaufé.setRange(0, 7)
            self.vgrainchaufé.setSpecialValueText(' ')
            self.vgrainchaufé.resize(100, 20)
            self.vgrainchaufé.move(350, 293)
            self.vgrainchaufé.setFont(self.txtpsfont)
            self.vgrainchaufé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################Grains sans valeur (%)#######################################
            self.vgrainsanvaleur = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vgrainsanvaleur.setSpecialValueText(' ')
            self.vgrainsanvaleur.setRange(0, 10)
            self.vgrainsanvaleur.resize(100, 20)
            self.vgrainsanvaleur.move(350, 314)
            self.vgrainsanvaleur.setFont(self.txtpsfont)
            self.vgrainsanvaleur.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Grains cariés##########################################
            self.vgraincarré = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vgraincarré.setSpecialValueText(' ')
            self.vgraincarré.setFont(self.txtpsfont)
            self.vgraincarré.setRange(0, 10)
            self.vgraincarré.resize(100, 20)
            self.vgraincarré.move(350, 335)
            self.vgraincarré.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Total(%) 1er#####################################################
            self.vtotalprem = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=True)
            self.vtotalprem.setSpecialValueText(' ')
            self.vtotalprem.setRange(0, 20)
            self.vtotalprem.resize(100, 20)
            self.vtotalprem.move(350, 356)
            self.vtotalprem.setFont(self.txtpsfont)
            self.vtotalprem.setStyleSheet(
                "background-color:#ffffff;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##############################################Grains cassés (%) #########################################################
            self.vgraincassé = QtWidgets.QDoubleSpinBox(self.bltendretab)
            self.vgraincassé.move(350, 377)
            self.vgraincassé.resize(100, 20)
            self.vgraincassé.setRange(0, 20)
            self.vgraincassé.setSpecialValueText(" ")
            self.vgraincassé.setFont(self.txtpsfont)
            self.vgraincassé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################################################Gains échaudés (%)#####################################################
            self.vgrainechaude = QtWidgets.QDoubleSpinBox(self.bltendretab)
            self.vgrainechaude.setSpecialValueText(" ")
            self.vgrainechaude.setRange(0, 10)
            self.vgrainechaude.move(350, 419)
            self.vgrainechaude.resize(100, 20)
            self.vgrainechaude.setFont(self.txtpsfont)
            self.vgrainechaude.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #####################################################Grains maigres (%)########################################################
            self.vgrainmaigre = QtWidgets.QDoubleSpinBox(self.bltendretab)
            self.vgrainmaigre.setRange(0, 10)
            self.vgrainmaigre.setSpecialValueText(" ")
            self.vgrainmaigre.move(350, 398)
            self.vgrainmaigre.setFont(self.txtpsfont)
            self.vgrainmaigre.resize(100, 20)
            self.vgrainmaigre.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grains germés (%)###################################################
            self.vgraigermé = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vgraigermé.move(350, 440)
            self.vgraigermé.resize(100, 20)
            self.vgraigermé.setSpecialValueText('  ')
            self.vgraigermé.setFont(self.txtpsfont)
            self.vgraigermé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grain punaisés (%)#########################################################
            self.vgrainpunaisé = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vgrainpunaisé.move(350, 461)
            self.vgrainpunaisé.resize(100, 20)
            self.vgrainpunaisé.setSpecialValueText('   ')
            self.vgrainpunaisé.setFont(self.txtpsfont)
            self.vgrainpunaisé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains piqués (%)##########################################
            self.vgrainpiqué = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vgrainpiqué.move(350, 482)
            self.vgrainpiqué.resize(100, 20)
            self.vgrainpiqué.setSpecialValueText('  ')
            self.vgrainpiqué.setFont(self.txtpsfont)
            self.vgrainpiqué.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains boutés « faible » (%)#######################################
            self.vgrainboutef = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vgrainboutef.move(350, 503)
            self.vgrainboutef.resize(100, 20)
            self.vgrainboutef.setRange(0, 10)
            self.vgrainboutef.setSpecialValueText('  ')
            self.vgrainboutef.setFont(self.txtpsfont)
            self.vgrainboutef.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ####################################################################Grains boutés  « forte » (%)######################################
            self.vgrainbouté = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vgrainbouté.move(350, 524)
            self.vgrainbouté.resize(100, 20)
            self.vgrainbouté.setRange(0, 10)
            self.vgrainbouté.setSpecialValueText('  ')
            self.vgrainboutef.setFont(self.txtpsfont)
            self.vgrainbouté.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##################################################Grains mouchetés (%)########################################################
            self.vgrainmouchté = QtWidgets.QDoubleSpinBox(self.bltendretab)
            self.vgrainmouchté.move(350, 545)
            self.vgrainmouchté.resize(100, 20)
            self.vgrainmouchté.setRange(0, 5)
            self.vgrainmouchté.setSpecialValueText(' ')
            self.vgrainmouchté.setFont(self.txtpsfont)
            self.vgrainmouchté.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ########################################################Grain étrangers Utilisables pour le bétail (%)##################################################
            self.vgrainetrangé = QtWidgets.QDoubleSpinBox(self.bltendretab)
            self.vgrainetrangé.move(350, 566)
            self.vgrainetrangé.resize(100, 20)
            self.vgrainetrangé.setRange(0, 10)
            self.vgrainetrangé.setSpecialValueText(' ')
            self.vgrainetrangé.setFont(self.txtpsfont)
            self.vgrainetrangé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ######################################################################Total(%)######################################
            self.vtotaldem = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=True)
            self.vtotaldem.setRange(1, 30)
            self.vtotaldem.move(350, 587)
            self.vtotaldem.resize(100, 20)
            self.vtotaldem.setSpecialValueText(' ')
            self.vtotaldem.setFont(self.txtpsfont)
            self.vtotaldem.setStyleSheet(
                "background-color:#ffffff;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")

            #########################################################observation###############
            self.observation = QtWidgets.QLabel("Observation", self.bltendretab)
            self.observation.move(490, 145)
            self.observation.resize(100, 20)
            self.observation.setFont(self.txtpsfont)
            self.observation.setFont(self.font)
            ##################################################txtobservation##################################
            self.txtobservation = QtWidgets.QTextEdit("<h2><h2/>  <h2><h2/>  <h2><h2/> <h2><h2/>   <h3><h3/>",
                                                      self.bltendretab)
            self.txtobservation.move(490, 167)
            self.txtobservation.resize(250, 438)
            self.txtobservation.setStyleSheet("border: 2px solid bleu ;border-radius: 4px;padding: 2px")
            ###################################################label ccls relizane#################
            self.labelccls = QtWidgets.QLabel("<h1>CCLS RELIZANE SERVICE QUALITE<h1/>", self.bltendretab)
            self.labelccls.move(500, 0)
            self.labelccls.resize(438, 90)
            self.labelccls.setFont(self.font)
            self.labelccls.setStyleSheet(
                "background-color: #ffffff; border: 2px solid bleu ;border-radius: 4px;padding: 0px")
            self.LABELBULLETIN = QtWidgets.QLabel("<H2>BULLETIN SORTIE MOULIN</H2>", self.bltendretab)
            self.LABELBULLETIN.move(600, 35)
            self.LABELBULLETIN.resize(240, 30)
            self.LABELBULLETIN.setStyleSheet("background-color: #ffffff")

            self.bletendretxt = QtWidgets.QLabel("<H2>Blé Tendre<H2/>", self.bltendretab)
            self.bletendretxt.move(690, 60)
            self.bletendretxt.resize(140, 23)
            self.bletendretxt.setStyleSheet("background-color: #fffff")

            #############################################date edit#############################################
            self.dateeditetxt = QtWidgets.QLabel("Date:", self.bltendretab)
            self.dateeditetxt.setGeometry(QtCore.QRect(20, 20, 100, 23))
            self.dateeditetxt.setFont(self.font)
            self.dateedite = QtWidgets.QDateEdit(self.bltendretab)
            self.dateedite.setDate(self.daydate)
            self.dateedite.setStyleSheet(
                " background-color: #FDFEFE;padding: 1px;font-size: 12px;border-style: solid;border: 1px solid #76797C;border-radius: 0px;color: #000000;")
            self.dateedite.move(84, 20)
            self.dateedite.resize(130, 20)
            self.dateedite.setFont(self.font)

            ###############################################search#################################################

            #####################################décade######################

            ##################################################quantite###############################################
            self.quantite = QtWidgets.QLabel("Quantité(QX):", self.bltendretab)
            self.quantite.move(840, 100)
            self.quantite.resize(85, 40)
            self.quantite.setFont(self.font)
            self.quantitetxt = QtWidgets.QLineEdit("", self.bltendretab)

            self.quantitetxt.move(928, 110)
            self.quantitetxt.resize(80, 20)
            self.quantitetxt.setValidator(QDoubleValidator(0.99, 99.99, 2))
            # self.quantitetxt.setStyleSheet("background-color: #31363b")

            ####################################################éspece###########################
            self.éspéce = QtWidgets.QLabel("Espèce :", self.bltendretab)
            self.éspéce.move(20, 100)
            self.éspéce.resize(120, 40)
            self.éspéce.setFont(self.font)
            self.éspécecombo = QtWidgets.QComboBox(self.bltendretab)
            self.éspécecombo.addItem("Blé Tendre")
            self.éspécecombo.move(84, 110)
            self.éspécecombo.resize(130, 20)
            ##########################################Nom de l’acheteur : moulin###########################################
            self.moulin = QtWidgets.QLabel("Nom de l’acheteur:", self.bltendretab)
            self.moulin.move(220, 100)
            self.moulin.resize(118, 40)
            self.moulin.setFont(self.font)
            self.moulincombo = QtWidgets.QComboBox(self.bltendretab)
            self.moulincombo.addItem("")
            self.moulincombo.addItem("EURL DJERBIR INDUSTRIELE")
            self.moulincombo.addItem("SARL MOULIN O_ABBES")
            self.moulincombo.addItem("EURL MOULIN BELACEL")
            self.moulincombo.addItem("MOULIN TAHAR MESSAOUD")
            self.moulincombo.addItem("SARL MOULIN BENABDELLAH")
            self.moulincombo.addItem("SARL MATAHIN EL HARAMAIN")
            self.moulincombo.addItem("MINOTERIE NOUR EL HAYAT")
            self.moulincombo.addItem("MOULIN MERINE SASSI")
            self.moulincombo.addItem("SARL DJENDLI")
            self.moulincombo.addItem("SARL TRX HYDRO BENHADJAR")
            self.moulincombo.addItem("EURL MOULIN AIN RAHMA")
            self.moulincombo.addItem("MOULIN FARINE BLANCHE")
            self.moulincombo.addItem("MOULIN MAAMAR BENHADJAR")
            self.moulincombo.addItem("MOULIN OULD BENAICHOUCHE")
            self.moulincombo.addItem("SARL FARINIERE DE L’OUEST")
            self.moulincombo.addItem("SARL MATAHINE ADJINE")
            self.moulincombo.addItem("MOULIN CHOUIKH YOUCEF")
            self.moulincombo.addItem("EURL MOULIN DAMAKO")
            self.moulincombo.addItem("SARL MATAHINE SIDI ABDELHADI")
            self.moulincombo.addItem("SARL MATAHINE MINA")
            self.moulincombo.addItem("EURL ELFORSANE PRODUCTION")
            self.moulincombo.addItem("SARL MATAHINE TOUFIK")
            self.moulincombo.move(340, 110)
            self.moulincombo.resize(220, 20)

            #####################################################Point de collecte : #######################################################
            self.pointcollecte = QtWidgets.QLabel("Point de collecte:", self.bltendretab)
            self.pointcollecte.move(570, 100)
            self.pointcollecte.resize(106, 40)
            self.pointcollecte.setFont(self.font)
            self.pointcollectecombo = QtWidgets.QComboBox(self.bltendretab)
            self.pointcollectecombo.addItem("")
            self.pointcollectecombo.addItem("DOCK SILO CENTRAL")
            self.pointcollectecombo.move(680, 110)
            self.pointcollectecombo.resize(150, 20)

            ######################################################Nom de l’Agréeur#######################################################

            self.agréeeur = QtWidgets.QLabel("Nom de l’Agréeur:", self.bltendretab)
            self.agréeeur.move(1015, 100)
            self.agréeeur.resize(112, 40)
            self.agréeeur.setFont(self.font)
            self.agréeeurcombobt = QtWidgets.QComboBox(self.bltendretab, editable=False)
            self.agréeeurcombobt.addItem("")
            self.agréeeurcombobt.addItem("FELOUAH OMAR")
            self.agréeeurcombobt.addItem("BEKHEDDA AEK")
            self.agréeeurcombobt.addItem("BENAISSA YOUCEF")
            self.agréeeurcombobt.addItem("REZZAG SOFIANE ")
            self.agréeeurcombobt.addItem("BELBACHA M.NADIR")
            self.agréeeurcombobt.move(1133, 110)
            self.agréeeurcombobt.resize(147, 20)

            ############################################docx2pdf######################

            self.tamerbt = QTimer()
            self.tamerbt.timeout.connect(self.plusbt)
            self.tamerbt.setInterval(1000)
            self.tamerbt.start()

            ###########################buttons################

            self.btnsavebt = QtWidgets.QPushButton("ENREGISTRER", self.bltendretab, clicked=lambda: self.docx_file())
            self.btnsavebt.move(800, 167)
            self.btnsavebt.resize(480, 80)
            self.btnsavebt.setFont(self.font)
            self.btnsavebt.setIcon(QIcon("images/savepis.png"))
            self.btnsavebt.setIconSize(QSize(70, 80))
            # self.btnsavebt.clicked.connect(self.docx_file)

            self.btnprintbt = QtWidgets.QPushButton("IMPRIMER", self.bltendretab, clicked=lambda: self.printer())
            self.btnprintbt.move(800, 272)
            self.btnprintbt.resize(480, 80)
            self.btnprintbt.setFont(self.font)
            self.btnprintbt.setIcon(QIcon("images/print125.png"))
            self.btnprintbt.setIconSize(QSize(70, 80))
            # btnprint.clicked.connect(printer)

            self.btnefacebt = QtWidgets.QPushButton("EFACER", self.bltendretab, clicked=lambda: self.clear_allbt())
            self.btnefacebt.move(800, 377)
            self.btnefacebt.resize(480, 80)
            self.btnefacebt.setIcon(QIcon("images/eraser45877.png"))
            self.btnefacebt.setIconSize(QSize(70, 80))
            self.btnefacebt.setFont(self.font)
            # self.btnefacebt.clicked.connect(self.clear_all)

            #############################################BLE DUR
            ########################################################
            #####################################################################
            ###############################################################################
            ##############################################################################################
            self.bldurtab = QtWidgets.QWidget()
            self.bldurtab.setObjectName("bldurtab")
            self.confirmitewidget.addTab(self.bldurtab, "sortie moulin BD")
            self.bldurtab.setStyleSheet("""QToolTip
            {
                border: 1px solid #76797C;
                background-color: rgb(90, 102, 117);;
                color: white;
                padding: 5px;
                opacity: 200;
            }

            QWidget
            {
                color: #000000;
                background-color: #ffffff;
                selection-background-color:#3daee9;
                selection-color: #3daee9;
                background-clip: border;
                border-image: none;
                border: 0px transparent black;
                outline: 0;
            }

            QWidget:item:hover
            {
                background-color: #3daee9;
                color: #eff0f1;
            }

            QWidget:item:selected
            {
                background-color: #3daee9;
            }



            QWidget:disabled
            {
                color: #454545;
                background-color: #31363b;
            }

            QAbstractItemView
            {
                alternate-background-color: #31363b;
                color: #eff0f1;
                border: 1px solid 3A3939;
                border-radius: 2px;
            }

            QWidget:focus, QMenuBar:focus
            {
                border: 1px solid #3daee9;
            }

            QTabWidget:focus, QCheckBox:focus, QRadioButton:focus, QSlider:focus
            {
                border: none;
            }

            QLineEdit
            {
                background-color: #FDFEFE;
                padding: 1px;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 0px;
                color: #000000;
            }
            QDoubleSpinBox
            {
                background-color: #FDFEFE;
                padding: 1px;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 0px;
                color:#000000;
                font-size: 11px;
                font-weight: bold;

            }
            QDoubleSpinBox:focus{
                background-color: #FDFEFE;
                border-style: solid;
                border: 2px solid #76797C;
                border-radius: 4px;
                border-color: #ff8c00;
            }
            QDoubleSpinBox::drop-down
            {
                subcontrol-origin: padding;
                subcontrol-position: top right;
                width: 1px;

                border-left-width: 0px;
                border-left-color: #232629;
                border-left-style: solid;
                border-top-right-radius: 1px;
                border-bottom-right-radius: 1px;
            }



            QGroupBox {
                border:1px solid #76797C;
                border-radius: 2px;
                margin-top: 5px;
            }

            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top center;
                padding-left: 4px;
                padding-right: 4px;
                padding-top: 4px;
            }

            QAbstractScrollArea
            {
                border-radius: 2px;
                border: 1px solid #76797C;
                background-color: transparent;
            }

            QScrollBar:horizontal
            {
                height: 15px;
                margin: 3px 15px 3px 15px;
                border: 1px transparent #2A2929;
                border-radius: 4px;
                background-color: #2A2929;
            }

            QScrollBar::handle:horizontal
            {
                background-color: #605F5F;
                min-width: 5px;
                border-radius: 4px;
            }

            QScrollBar::add-line:horizontal
            {
                margin: 0px 3px 0px 3px;
                border-image: url(:/qss_icons/Dark_rc/right_arrow_disabled.png);
                width: 10px;
                height: 10px;
                subcontrol-position: right;
                subcontrol-origin: margin;
            }

            QScrollBar::sub-line:horizontal
            {
                margin: 0px 3px 0px 3px;
                border-image: url(:/qss_icons/Dark_rc/left_arrow_disabled.png);
                height: 10px;
                width: 10px;
                subcontrol-position: left;
                subcontrol-origin: margin;
            }

            QScrollBar::add-line:horizontal:hover,QScrollBar::add-line:horizontal:on
            {
                border-image: url(:/qss_icons/Dark_rc/right_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: right;
                subcontrol-origin: margin;
            }


            QScrollBar::sub-line:horizontal:hover, QScrollBar::sub-line:horizontal:on
            {
                border-image: url(:/qss_icons/Dark_rc/left_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: left;
                subcontrol-origin: margin;
            }

            QScrollBar::up-arrow:horizontal, QScrollBar::down-arrow:horizontal
            {
                background: none;
            }


            QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal
            {
                background: none;
            }

            QScrollBar:vertical
            {
                background-color: #2A2929;
                width: 15px;
                margin: 15px 3px 15px 3px;
                border: 1px transparent #2A2929;
                border-radius: 4px;
            }

            QScrollBar::handle:vertical
            {
                background-color: #605F5F;
                min-height: 5px;
                border-radius: 4px;
            }

            QScrollBar::sub-line:vertical
            {
                margin: 3px 0px 3px 0px;
                border-image: url(:/qss_icons/Dark_rc/up_arrow_disabled.png);
                height: 10px;
                width: 10px;
                subcontrol-position: top;
                subcontrol-origin: margin;
            }

            QScrollBar::add-line:vertical
            {
                margin: 3px 0px 3px 0px;
                border-image: url(:/qss_icons/Dark_rc/down_arrow_disabled.png);
                height: 10px;
                width: 10px;
                subcontrol-position: bottom;
                subcontrol-origin: margin;
            }

            QScrollBar::sub-line:vertical:hover,QScrollBar::sub-line:vertical:on
            {

                border-image: url(:/qss_icons/Dark_rc/up_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: top;
                subcontrol-origin: margin;
            }


            QScrollBar::add-line:vertical:hover, QScrollBar::add-line:vertical:on
            {
                border-image: url(:/qss_icons/Dark_rc/down_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: bottom;
                subcontrol-origin: margin;
            }

            QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical
            {
                background: none;
            }


            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical
            {
                background: none;
            }

            QTextEdit
            {
                background-color: #FDFEFE;
                color: #000000;
                border: 1px solid #76797C;
            }

            QPlainTextEdit
            {
                background-color: #232629;;
                color: #000000;
                border-radius: 2px;
                border: 1px solid #76797C;
            }

            QHeaderView::section
            {
                background-color: #76797C;
                color: #eff0f1;
                padding: 1px;
                border: 1px solid #76797C;
            }

            QSizeGrip {
                width: 12px;
                height: 12px;
            }


            QMainWindow::separator
            {
                background-color: #31363b;
                color: white;
                padding-left: 4px;
                spacing: 2px;
                border: 1px dashed #76797C;
            }

            QMainWindow::separator:hover
            {

                background-color: #787876;
                color: white;
                padding-left: 4px;
                border: 1px solid #76797C;
                spacing: 2px;
            }


            QMenu::separator
            {
                height: 1px;
                background-color: #76797C;
                color: white;
                padding-left: 4px;
                margin-left: 10px;
                margin-right: 5px;
            }


            QFrame
            {
                border-radius: 2px;
                border: 1px solid #76797C;
            }

            QFrame[frameShape="0"]
            {
                border-radius: 2px;
                border: 1px transparent #76797C;
            }

            QStackedWidget
            {
                border: 1px transparent black;
            }


            QPushButton
            {
                color: #00000;
                background-color:#ade3e7;
                border-width: 1px;
                border-color: #1e1e1e;
                border-style: solid;
                border-radius: 6;
                padding: 3px;
                font-size: 12px;
                padding-left: 5px;
                padding-right: 5px;
                min-width: 40px;

            }

            QPushButton:disabled
            {
                background-color:#03ecff;
                border-width: 1px;
                border-color: #454545;
                border-style: solid;
                padding-top: 5px;
                padding-bottom: 5px;
                padding-left: 10px;
                padding-right: 10px;
                border-radius: 2px;
                color: #454545;
            }
            QPushButton:pressed
            {
                background-color: #3daee9;
                padding-top: -15px;
                padding-bottom: -17px;
            }

            QComboBox
            {
               background-color: #FDFEFE;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 2px;
                min-width: 40px;
            }

            QPushButton:checked{
                background-color: #76797C;
                border-color: #6A6969;
            }

            QComboBox:hover,QDoubleSpinBox:Hover,QPushButton:hover,QAbstractSpinBox:hover,QLineEdit:hover,QTextEdit:hover,QPlainTextEdit:hover,QAbstractView:hover,QTreeView:hover
            {
                border: 1px solid #ff8c00;
                color: #000000;
            }

            QComboBox:on
            {
                padding-top: 1px;
                padding-left: 1px;
                selection-background-color: #FDFEFE;
            }

            QComboBox QAbstractItemView
            {
                background-color: #FDFEFE;
                border-radius: 2px;
                border: 1px solid #76797C;
                color:#000000;
                selection-background-color: #000000;
            }

            QComboBox::drop-down
            {
                subcontrol-origin: padding;
                subcontrol-position: top right;
                width: 15px;

                border-left-width: 0px;
                border-left-color: ff8c00;
                border-left-style: solid;
                border-top-right-radius: 1px;
                border-bottom-right-radius: 1px;
            }


            QLabel
            {
                border: 2px solid black;
            }

            QTabWidget{
                border: 0px transparent black;
            }

            QTabWidget::pane {
                border: 1px solid #76797C;
                padding: 5px;
                margin: 0px;
            }

            QTabBar
            {
                qproperty-drawBase: 0;
                left: 5px; /* move to the right by 5px */
                border-radius: 3px;
            }

            QTabBar:focus
            {
                border: 0px transparent black;
            }

            QTabBar::close-button  {
                image: url(:/qss_icons/Dark_rc/close.png);
                background: transparent;
            }

            QTabBar::close-button:hover
            {
                image: url(:/qss_icons/Dark_rc/close-hover.png);
                background: transparent;
            }

            QTabBar::close-button:pressed {
                image: url(:/qss_icons/Dark_rc/close-pressed.png);
                background: transparent;
            }

            /* TOP TABS */
            QTabBar::tab:top {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-bottom: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                min-width: 10px;
                border-top-left-radius: 2px;
                border-top-right-radius: 2px;
            }

            QTabBar::tab:top:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-bottom: 1px transparent black;
                border-top-left-radius: 2px;
                border-top-right-radius: 2px;    
            }

            QTabBar::tab:top:!selected:hover {
                background-color: #3daee9;
            }

            /* BOTTOM TABS */
            QTabBar::tab:bottom {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-top: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                border-bottom-left-radius: 2px;
                border-bottom-right-radius: 2px;
                min-width: 10px;
            }

            QTabBar::tab:bottom:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-top: 1px transparent black;
                border-bottom-left-radius: 2px;
                border-bottom-right-radius: 2px;
            }

            QTabBar::tab:bottom:!selected:hover {
                background-color: #3daee9;
            }

            /* LEFT TABS */
            QTabBar::tab:left {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-left: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                border-top-right-radius: 2px;
                border-bottom-right-radius: 2px;
                min-height: 50px;
            }

            QTabBar::tab:left:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-left: 1px transparent black;
                border-top-right-radius: 2px;
                border-bottom-right-radius: 2px;
            }

            QTabBar::tab:left:!selected:hover {
                background-color: #3daee9;
            }


            /* RIGHT TABS */
            QTabBar::tab:right {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-right: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                border-top-left-radius: 2px;
                border-bottom-left-radius: 2px;
                min-height: 50px;
            }

            QTabBar::tab:right:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-right: 1px transparent black;
                border-top-left-radius: 2px;
                border-bottom-left-radius: 2px;
            }





            QSlider::groove:horizontal {
                border: 1px solid #565a5e;
                height: 4px;
                background: #565a5e;
                margin: 0px;
                border-radius: 2px;
            }

            QSlider::handle:horizontal {
                background: #232629;
                border: 1px solid #565a5e;
                width: 16px;
                height: 16px;
                margin: -8px 0;
                border-radius: 9px;
            }

            QSlider::groove:vertical {
                border: 1px solid #565a5e;
                width: 4px;
                background: #565a5e;
                margin: 0px;
                border-radius: 3px;
            }

            QSlider::handle:vertical {
                background: #232629;
                border: 1px solid #565a5e;
                width: 16px;
                height: 16px;
                margin: 0 -8px;
                border-radius: 9px;
            }

            QToolButton {
                background-color: transparent;
                border: 1px transparent #76797C;
                border-radius: 2px;
                margin: 3px;
                padding: 5px;
            }

            QToolButton[popupMode="1"] { /* only for MenuButtonPopup */
             padding-right: 20px; /* make way for the popup button */
             border: 1px #76797C;
             border-radius: 5px;
            }

            QToolButton[popupMode="2"] { /* only for InstantPopup */
             padding-right: 10px; /* make way for the popup button */
             border: 1px #76797C;
            }


            QToolButton:hover, QToolButton::menu-button:hover {
                background-color: transparent;
                border: 1px solid #3daee9;
                padding: 5px;
            }

            QToolButton:checked, QToolButton:pressed,
                    QToolButton::menu-button:pressed {
                background-color: #3daee9;
                border: 1px solid #3daee9;
                padding: 5px;
            }

            /* the subcontrol below is used only in the InstantPopup or DelayedPopup mode */
            QToolButton::menu-indicator {
                background-color:ff8c00;
                top: -7px; left: -2px; /* shift it a bit */
            }

            /* the subcontrols below are used only in the MenuButtonPopup mode */
            QToolButton::menu-button {
                border: 1px transparent #76797C;
                border-top-right-radius: 6px;
                border-bottom-right-radius: 6px;
                /* 16px width + 4px for border = 20px allocated above */
                width: 16px;
                outline: none;
            }

            QToolButton::menu-arrow {
               background-color:ff8c00;
            }

            QToolButton::menu-arrow:open {
                border: 1px solid #76797C;
            }

            QPushButton::menu-indicator  {
                subcontrol-origin: padding;
                subcontrol-position: bottom right;
                left: 8px;
            }

            QTableView
            {
                border: 1px solid #76797C;
                gridline-color: #31363b;
                background-color: #FDFEFE;
                color:#000000;
            }


            QTableView, QHeaderView
            {
                background-color: #FDFEFE;
                color:#000000;
                border-radius: 0px;
            }

            QTableView::item:pressed, QListView::item:pressed, QTreeView::item:pressed  {
                background: #FDFEFE;
                color: #000000;
            }

            QTableView::item:selected:active, QTreeView::item:selected:active, QListView::item:selected:active  {
                background: #3daee9;
                color: #000000;
            }


            QHeaderView
            {
                background-color: #FDFEFE;
                border: 1px transparent;
                border-radius: 0px;
                margin: 0px;
                padding: 0px;

            }

            QHeaderView::section  {
                background-color:#80f1f9;
                color: #000000;
                padding: 5px;
                border: 1px solid #76797C;
                border-radius: 0px;
                text-align: center;
            }

            QHeaderView::section::vertical::first, QHeaderView::section::vertical::only-one
            {
                border-top: 1px solid #76797C;
            }

            QHeaderView::section::vertical
            {
                border-top: transparent;
            }

            QHeaderView::section::horizontal::first, QHeaderView::section::horizontal::only-one
            {
                border-left: 1px solid #76797C;
            }

            QHeaderView::section::horizontal
            {
                border-left: transparent;
            }


            QHeaderView::section:checked
             {
                color: #000000;
                background-color: #3daee9;
             }

             /* style the sort indicator */
            QHeaderView::down-arrow {

            }

            QHeaderView::up-arrow {

            }


            QTableCornerButton::section {
                background-color: #31363b;
                border: 1px transparent #76797C;
                border-radius: 0px;
            }

            QToolBox  {
                padding: 5px;
                border: 1px transparent black;
            }

            QToolBox::tab {
                color: #eff0f1;
                background-color: #31363b;
                border: 1px solid #76797C;
                border-bottom: 1px transparent #31363b;
                border-top-left-radius: 5px;
                border-top-right-radius: 5px;
            }

            QToolBox::tab:selected { /* italicize selected tabs */
                font: italic;
                background-color: #31363b;
                border-color: #3daee9;
             }

            QStatusBar::item {
                border: 0px transparent dark;
             }


            QFrame[height="3"], QFrame[width="3"] {
                background-color: #76797C;
            }




            QDateEdit
            {
                background-color: #232629;;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 2px;
                padding: 1px;
                min-width: 75px;
            }

            QDateEdit:on
            {
                padding-top: 2px;
                padding-left: 2px;
                selection-background-color: #4a4a4a;
            }

            QDateEdit QAbstractItemView
            {
                background-color: #ff8c00;
                border-radius: 2px;
                border: 1px solid #3375A3;
                selection-background-color:ff8c00;
            }

            QDateEdit::drop-down
            {
                subcontrol-origin: padding;
                subcontrol-position: top right;
                width: 15px;
                border-left-width: 0px;
                border-left-color: darkgray;
                border-left-style: solid;
                border-top-right-radius: 3px;
                border-bottom-right-radius: 3px;
            }   
            QDateTimeEdit
            {
                background-color: #232629;;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 2px;
                padding: 1px;
                min-width: 75px;

            }    
            """)
            self.font = QtGui.QFont()
            self.font.setBold(True)
            self.font.setPointSize(10)
            ##########text bul# ettin######
            self.paramétrebd = QtWidgets.QLabel("Paramètre", self.bldurtab)
            self.paramétrebd.move(30, 111)
            self.paramétrebd.resize(80, 20)
            self.paramétrebd.setFont(self.font)
            self.txtpsfontbd = QtGui.QFont()
            self.txtpsfontbd.setBold(True)
            self.txtpsfontbd.setPointSize(9)
            ################Limites(sans bon ni réf)###############
            self.valeurbd = QtWidgets.QLabel("""Limite-ssans-bon-ni-réf)""", self.bldurtab)
            self.valeurbd.move(170, 95)
            self.valeurbd.resize(145, 55)
            self.valeurbd.setFont(self.font)
            ######################Limites(sans bon ni réf)################
            self.psbd = QtWidgets.QLineEdit("Poids spécifique (kg/hl):   (75.500-75.899)", self.bldurtab, readOnly=True)
            self.psbd.resize(319, 20)
            self.psbd.move(30, 131)
            self.psbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.psbd.setFont(self.txtpsfont)
            self.psbd.setStyleSheet(" border: 2px solid bleu ;border-radius: 4px;padding: 0px")
            ###############################humidite#############
            self.humiditebd = QtWidgets.QLineEdit("Teneur en eau(%):  (13.5-15)", self.bldurtab, readOnly=True)
            self.humiditebd.resize(319, 20)
            self.humiditebd.move(30, 152)
            self.humiditebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.humiditebd.setFont(self.txtpsfont)

            #######################ergot#########################
            self.ergotbd = QtWidgets.QLineEdit("Ergo(% :<0.001 ", self.bldurtab, readOnly=True)
            self.ergotbd.resize(319, 20)
            self.ergotbd.move(30, 173)
            self.ergotbd.setStyleSheet("background-color: #232629")
            self.ergotbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.ergotbd.setFont(self.txtpsfont)

            #########################Graines nuisibles (%)##########
            self.grainnuisiblebd = QtWidgets.QLineEdit("Graines nuisibles(%): <0.001", self.bldurtab, readOnly=True)
            self.grainnuisiblebd.resize(319, 20)
            self.grainnuisiblebd.move(30, 194)
            self.grainnuisiblebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.grainnuisiblebd.setFont(self.txtpsfont)
            #############################Débris végétaux (%)########
            self.débrisvébd = QtWidgets.QLineEdit("Débris végétaux(%):  ", self.bldurtab, readOnly=True)
            self.débrisvébd.resize(319, 20)
            self.débrisvébd.move(30, 215)
            self.débrisvébd.setFont(self.txtpsfont)
            self.débrisvébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Matière inerte (%)################
            self.matiéreinrtbd = QtWidgets.QLineEdit("Matière inerte(%):", self.bldurtab, readOnly=True)
            self.matiéreinrtbd.resize(319, 20)
            self.matiéreinrtbd.move(30, 236)
            self.matiéreinrtbd.setFont(self.txtpsfont)
            self.matiéreinrtbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ################################Grains chauffés (%)############################
            self.grainchaufébd = QtWidgets.QLineEdit("Grains chauffés(%): ", self.bldurtab, readOnly=True)
            self.grainchaufébd.resize(319, 20)
            self.grainchaufébd.move(30, 257)
            self.grainchaufébd.setFont(self.txtpsfont)
            self.grainchaufébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################Grains sans valeur (%)#######################################
            self.grainsanvaleurbd = QtWidgets.QLineEdit("Grains sans valeur(%):", self.bldurtab, readOnly=True)
            self.grainsanvaleurbd.resize(319, 20)
            self.grainsanvaleurbd.move(30, 278)
            self.grainsanvaleurbd.setFont(self.txtpsfont)
            self.grainsanvaleurbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Grains cariés##########################################
            self.graincarré = QtWidgets.QLineEdit("Grains cariés:   ", self.bldurtab, readOnly=True)
            self.graincarré.resize(319, 20)
            self.graincarré.move(30, 299)
            self.graincarré.setFont(self.txtpsfont)
            self.graincarré.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")

            #######################################Total(%) 1er#####################################################
            self.totalprembd = QtWidgets.QLineEdit("TOTAL 1ére CAT:   ≤1", self.bldurtab, readOnly=True)
            self.totalprembd.resize(319, 20)
            self.totalprembd.move(30, 320)
            self.totalprembd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.totalprembd.setFont(self.txtpsfont)
            ##############################################Grains cassés (%) #########################################################
            self.graincassébd = QtWidgets.QLineEdit("Grains cassés(%):   ≤2", self.bldurtab, readOnly=True)
            self.graincassébd.move(30, 341)
            self.graincassébd.resize(319, 20)
            self.graincassébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.graincassébd.setFont(self.txtpsfont)
            #########################################################Gains échaudés (%)#####################################################
            self.grainechaudebd = QtWidgets.QLineEdit("Gains échaudés(%):   ", self.bldurtab, readOnly=True)
            self.grainechaudebd.move(30, 362)
            self.grainechaudebd.resize(319, 20)
            self.grainechaudebd.setFont(self.txtpsfont)
            self.grainechaudebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #####################################################Grains maigres (%)########################################################
            self.grainmaigrebd = QtWidgets.QLineEdit("Grains maigres(%):", self.bldurtab, readOnly=True)
            self.grainmaigrebd.move(30, 383)
            self.grainmaigrebd.resize(319, 20)
            self.grainmaigrebd.setFont(self.txtpsfont)
            self.grainmaigrebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##########################################################Grains germés (%)###################################################
            self.graigermébd = QtWidgets.QLineEdit("Grains germés(%): ≤2", self.bldurtab, readOnly=True)
            self.graigermébd.move(30, 404)
            self.graigermébd.resize(319, 20)
            self.graigermébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.graigermébd.setFont(self.txtpsfont)
            ##########################################################Grain punaisés (%)#########################################################
            self.grainpunaisébd = QtWidgets.QLineEdit("Grain punaisés(%): ≤1", self.bldurtab, readOnly=True)
            self.grainpunaisébd.move(30, 425)
            self.grainpunaisébd.resize(319, 20)
            self.grainpunaisébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.grainpunaisébd.setFont(self.txtpsfont)

            #######################################################################Grains piqués (%)##########################################
            self.grainpiquébd = QtWidgets.QLineEdit("Grains piqués(%):  ", self.bldurtab, readOnly=True)
            self.grainpiquébd.move(30, 446)
            self.grainpiquébd.resize(319, 20)
            self.grainpiquébd.setFont(self.txtpsfont)
            self.grainpiquébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################################################Grains boutés « faible » (%)#######################################

            ####################################################################Grains boutés  « forte » (%)######################################
            self.grainboutébd = QtWidgets.QLineEdit("Grains boutés  « forte » (%):", self.bldurtab, readOnly=True)
            self.grainboutébd.move(30, 467)
            self.grainboutébd.resize(319, 20)
            self.grainboutébd.setFont(self.txtpsfont)
            self.grainboutébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##################################################Grains mouchetés (%)########################################################
            self.grainmouchtébd = QtWidgets.QLineEdit("Grains mouchetés (%):", self.bldurtab, readOnly=True)
            self.grainmouchtébd.move(30, 488)
            self.grainmouchtébd.resize(319, 20)
            self.grainmouchtébd.setFont(self.txtpsfont)
            self.grainmouchtébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################################Grain étrangers Utilisables pour le bétail (%)##################################################
            self.grainetrangébd = QtWidgets.QLineEdit("Grain étrangers Utilisables pour le bétail (%):  ",
                                                      self.bldurtab,
                                                      readOnly=True)
            self.grainetrangébd.move(30, 509)
            self.grainetrangébd.resize(319, 20)
            self.grainetrangébd.setFont(self.txtpsfont)
            self.grainetrangébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ######################################################################Total(%)######################################
            self.totaldembd = QtWidgets.QLineEdit("Total(%)  Imp2eme cat   ≤5", self.bldurtab, readOnly=True)
            self.totaldembd.move(30, 530)
            self.totaldembd.resize(319, 20)
            self.totaldembd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.totaldembd.setFont(self.txtpsfont)
            #########################################################indice notin##################################################
            self.indicebd = QtWidgets.QLineEdit('Indice Notin ', self.bldurtab, readOnly=True)
            self.indicebd.move(30, 551)
            self.indicebd.resize(319, 20)
            self.indicebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################blétendre dans blé dur########
            self.bletendreinbledur = QtWidgets.QLineEdit("Ble tendre dans ble dur(%)", self.bldurtab, readOnly=True)
            self.bletendreinbledur.move(30, 572)
            self.bletendreinbledur.resize(319, 20)
            self.bletendreinbledur.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ###############################total complet######
            self.totalcomplet = QtWidgets.QLineEdit("TOTAL", self.bldurtab, readOnly=True)
            self.totalcomplet.move(30, 593)
            self.totalcomplet.resize(319, 20)
            self.totalcomplet.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #################label valeure##############
            self.valeurbd = QtWidgets.QLabel("valeur", self.bldurtab)
            self.valeurbd.move(350, 112)
            self.valeurbd.resize(100, 20)
            self.valeurbd.setFont(self.font)
            ######################Limites(sans bon ni réf)################
            self.vpsbd = QtWidgets.QDoubleSpinBox(self.bldurtab)
            self.vpsbd.setRange(71, 84.00)
            self.vpsbd.setSpecialValueText(' ')
            self.vpsbd.resize(100, 20)
            self.vpsbd.move(350, 131)
            self.vpsbd.setFont(self.txtpsfont)
            self.vpsbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ###############################humidite#############
            self.vhumiditebd = QtWidgets.QDoubleSpinBox(self.bldurtab)
            self.vhumiditebd.setRange(8, 14)
            self.vhumiditebd.resize(100, 20)
            self.vhumiditebd.setSpecialValueText(' ')
            self.vhumiditebd.move(350, 152)
            self.vhumiditebd.setFont(self.txtpsfont)
            self.vhumiditebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################ergot#########################
            self.vergotbd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vergotbd.setRange(0, 10)
            self.vergotbd.setSpecialValueText(' ')
            self.vergotbd.resize(100, 20)
            self.vergotbd.move(350, 173)
            self.vergotbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Graines nuisibles (%)##########
            self.vgrainnuisiblebd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vgrainnuisiblebd.setRange(0, 10)
            self.vgrainnuisiblebd.setSpecialValueText(' ')
            self.vgrainnuisiblebd.resize(100, 20)
            self.vgrainnuisiblebd.move(350, 194)
            self.vgrainnuisiblebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #############################Débris végétaux (%)########
            self.vdébrisvébd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vdébrisvébd.setRange(0, 10)
            self.vdébrisvébd.setSpecialValueText(' ')
            self.vdébrisvébd.resize(100, 20)
            self.vdébrisvébd.move(350, 215)
            self.vdébrisvébd.setFont(self.txtpsfont)
            self.vdébrisvébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Matière inerte (%)################
            self.vmatiéreinrtbd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vmatiéreinrtbd.setRange(0, 10)
            self.vmatiéreinrtbd.setSpecialValueText(' ')
            self.vmatiéreinrtbd.resize(100, 20)
            self.vmatiéreinrtbd.move(350, 236)
            self.vmatiéreinrtbd.setFont(self.txtpsfont)
            self.vmatiéreinrtbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ################################Grains chauffés (%)############################
            self.vgrainchaufébd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vgrainchaufébd.setRange(0, 10)
            self.vgrainchaufébd.setSpecialValueText(' ')
            self.vgrainchaufébd.resize(100, 20)
            self.vgrainchaufébd.move(350, 257)
            self.vgrainchaufébd.setFont(self.txtpsfont)
            self.vgrainchaufébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################Grains sans valeur (%)#######################################
            self.vgrainsanvaleurbd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vgrainsanvaleurbd.setSpecialValueText(' ')
            self.vgrainsanvaleurbd.setRange(0, 10)
            self.vgrainsanvaleurbd.resize(100, 20)
            self.vgrainsanvaleurbd.move(350, 278)
            self.vgrainsanvaleurbd.setFont(self.txtpsfont)
            self.vgrainsanvaleurbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Grains cariés##########################################
            self.vgraincarrébd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vgraincarrébd.setSpecialValueText(' ')
            self.vgraincarrébd.setRange(0, 10)
            self.vgraincarrébd.resize(100, 20)
            self.vgraincarrébd.move(350, 299)
            self.vgraincarrébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Total(%) 1er#####################################################
            self.vtotalprembd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.vtotalprembd.setSpecialValueText(' ')
            self.vtotalprembd.setRange(0, 10)
            self.vtotalprembd.resize(100, 20)
            self.vtotalprembd.move(350, 320)
            self.vtotalprembd.setFont(self.txtpsfont)
            self.vtotalprembd.setStyleSheet(
                "background-color:#ffffff;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##############################################Grains cassés (%) #########################################################
            self.vgraincassébd = QtWidgets.QDoubleSpinBox(self.bldurtab)
            self.vgraincassébd.move(350, 341)
            self.vgraincassébd.resize(100, 20)
            self.vgraincassébd.setRange(0, 10)
            self.vgraincassébd.setSpecialValueText(" ")
            self.vgraincassébd.setFont(self.txtpsfont)
            self.vgraincassébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################################################Gains échaudés (%)#####################################################
            self.vgrainechaudebd = QtWidgets.QDoubleSpinBox(self.bldurtab)
            self.vgrainechaudebd.setSpecialValueText(" ")
            self.vgrainechaudebd.setRange(0, 10)
            self.vgrainechaudebd.move(350, 362)
            self.vgrainechaudebd.resize(100, 20)
            self.vgrainechaudebd.setFont(self.txtpsfont)
            self.vgrainechaudebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #####################################################Grains maigres (%)########################################################
            self.vgrainmaigrebd = QtWidgets.QDoubleSpinBox(self.bldurtab)
            self.vgrainmaigrebd.setRange(0, 10)
            self.vgrainmaigrebd.setSpecialValueText(" ")
            self.vgrainmaigrebd.move(350, 383)
            self.vgrainmaigrebd.setFont(self.txtpsfont)
            self.vgrainmaigrebd.resize(100, 20)
            self.vgrainmaigrebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grains germés (%)###################################################
            self.vgraigermébd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vgraigermébd.move(350, 404)
            self.vgraigermébd.resize(100, 20)
            self.vgraigermébd.setSpecialValueText('  ')
            self.vgraigermébd.setFont(self.txtpsfont)
            self.vgraigermébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grain punaisés (%)#########################################################
            self.vgrainpunaisébd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vgrainpunaisébd.move(350, 425)
            self.vgrainpunaisébd.resize(100, 20)
            self.vgrainpunaisébd.setSpecialValueText('   ')
            self.vgrainpunaisébd.setFont(self.txtpsfont)
            self.vgrainpunaisébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains piqués (%)##########################################
            self.vgrainpiquébd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vgrainpiquébd.move(350, 446)
            self.vgrainpiquébd.resize(100, 20)
            self.vgrainpiquébd.setSpecialValueText('  ')
            self.vgrainpiquébd.setFont(self.txtpsfont)
            self.vgrainpiquébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains boutés « faible » (%)#######################################

            ####################################################################Grains boutés  « forte » (%)######################################
            self.vgrainboutébd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vgrainboutébd.move(350, 467)
            self.vgrainboutébd.resize(100, 20)
            self.vgrainboutébd.setSpecialValueText('  ')
            self.vgrainboutébd.setFont(self.txtpsfont)
            self.vgrainboutébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##################################################Grains mouchetés (%)########################################################
            self.vgrainmouchtébd = QtWidgets.QDoubleSpinBox(self.bldurtab)
            self.vgrainmouchtébd.move(350, 488)
            self.vgrainmouchtébd.resize(100, 20)
            self.vgrainmouchtébd.setRange(0, 10)
            self.vgrainmouchtébd.setSpecialValueText(' ')
            self.vgrainmouchtébd.setFont(self.txtpsfont)
            self.vgrainmouchtébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ########################################################Grain étrangers Utilisables pour le bétail (%)##################################################
            self.vgrainetrangébd = QtWidgets.QDoubleSpinBox(self.bldurtab)
            self.vgrainetrangébd.move(350, 509)
            self.vgrainetrangébd.resize(100, 20)
            self.vgrainetrangébd.setRange(0, 10)
            self.vgrainetrangébd.setSpecialValueText(' ')
            self.vgrainetrangébd.setFont(self.txtpsfont)
            self.vgrainetrangébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ######################################################################Total(%)######################################
            self.vtotaldembd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.vtotaldembd.setRange(1, 20)
            self.vtotaldembd.move(350, 530)
            self.vtotaldembd.resize(100, 20)
            self.vtotaldembd.setSpecialValueText(' ')
            self.vtotaldembd.setFont(self.txtpsfont)
            self.vtotaldembd.setStyleSheet(
                "background-color:#ffffff;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ######################################indicenotin #################
            self.vindicenotin = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vindicenotin.setSpecialValueText(' ')
            self.vindicenotin.setFont(self.txtpsfont)
            self.vindicenotin.move(350, 551)
            self.vindicenotin.resize(100, 20)
            self.vindicenotin.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ########################ble tendre dand blé dur############
            self.vblétendreinbledur = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vblétendreinbledur.setSpecialValueText(" ")
            self.vblétendreinbledur.move(350, 572)
            self.vblétendreinbledur.resize(100, 20)
            self.vblétendreinbledur.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################bonification total complet##############
            self.vtotalcomplet = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.vtotalcomplet.setSpecialValueText(' ')
            self.vtotalcomplet.move(350, 593)
            self.vtotalcomplet.resize(100, 20)
            self.vtotalcomplet.setStyleSheet(
                "background-color:#ffffff;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################################réfaction##############################################

            #########################################################observation###############
            self.observationbd = QtWidgets.QLabel("Observation", self.bldurtab)
            self.observationbd.move(490, 111)
            self.observationbd.resize(100, 20)
            self.observationbd.setFont(self.txtpsfont)
            self.observationbd.setFont(self.font)
            ##################################################txtobservation##################################
            self.txtobservationbd = QtWidgets.QTextEdit("<h2><h2/>  <h2><h2/>  <h2><h2/> <h2><h2/>   <h3><h3/>",
                                                        self.bldurtab)
            self.txtobservationbd.move(490, 131)
            self.txtobservationbd.resize(250, 482)
            self.txtobservationbd.setStyleSheet("border: 2px solid bleu ;border-radius: 4px;padding: 2px")
            ###################################################label ccls relizane#################
            self.labelcclsbd = QtWidgets.QLabel("<h1>CCLS RELIZANE SERVICE QUALITE<h1/>", self.bldurtab)
            self.labelcclsbd.move(500, 0)
            self.labelcclsbd.resize(438, 80)
            self.labelcclsbd.setFont(self.font)
            self.labelcclsbd.setStyleSheet(
                "background-color: #ffffff; border: 2px solid bleu ;border-radius: 4px;padding: 0px")
            self.LABELBULLETINbd = QtWidgets.QLabel("<H2>BULLETIN SORTIE MOULIN</H2>", self.bldurtab)
            self.LABELBULLETINbd.move(600, 30)
            self.LABELBULLETINbd.resize(240, 23)
            self.LABELBULLETINbd.setStyleSheet("background-color: #ffffff")
            self.bledurtxt = QtWidgets.QLabel("<H2>Blé DUR<H2/>", self.bldurtab)
            self.bledurtxt.move(698, 53)
            self.bledurtxt.resize(120, 23)
            self.bledurtxt.setStyleSheet("background-color: #ffffff")

            #############################################date edit#############################################
            self.dateeditetxtbd = QtWidgets.QLabel("Date:", self.bldurtab)
            self.dateeditetxtbd.setGeometry(QtCore.QRect(30, 5, 100, 20))
            self.dateeditetxtbd.setFont(self.font)
            self.dateeditebd = QtWidgets.QDateEdit(self.bldurtab)
            self.dateeditebd.setDate(self.daydate)
            self.dateeditebd.setStyleSheet(
                " background-color: #FDFEFE;padding: 1px;border-style: solid;border: 1px solid #76797C;font-size: 12px;border-radius: 0px;color: #000000;")
            self.dateeditebd.move(100, 5)
            self.dateeditebd.resize(112, 30)
            self.dateeditebd.setFont(self.font)

            ###############################################search#################################################

            #####################################décade######################

            ##################################################quantite###############################################
            self.quantitebd = QtWidgets.QLabel("Quantité(QX):", self.bldurtab)
            self.quantitebd.move(840, 88)
            self.quantitebd.resize(85, 25)
            self.quantitebd.setFont(self.font)
            self.quantitetxtbd = QtWidgets.QLineEdit("", self.bldurtab)
            self.quantitetxtbd.move(928, 85)
            self.quantitetxtbd.resize(80, 30)
            self.quantitetxtbd.setValidator(QDoubleValidator(0.99, 99.99, 2))

            ####################################################éspece###########################
            self.éspécebd = QtWidgets.QLabel("Espèce :", self.bldurtab)
            self.éspécebd.move(30, 88)
            self.éspécebd.resize(60, 20)
            self.éspécebd.setFont(self.font)
            self.éspécecombobd = QtWidgets.QComboBox(self.bldurtab)
            self.éspécecombobd.addItem("Blé Dur")
            self.éspécecombobd.move(100, 85)
            self.éspécecombobd.resize(112, 30)

            ##########################################Nom de l’acheteur : moulin###########################################
            self.moulinbd = QtWidgets.QLabel("Nom de l’acheteur:", self.bldurtab)
            self.moulinbd.move(220, 88)
            self.moulinbd.resize(118, 20)
            self.moulinbd.setFont(self.font)
            self.moulincombobd = QtWidgets.QComboBox(self.bldurtab)
            self.moulincombobd.addItem("")
            self.moulincombobd.addItem("SARL MOULIN BENABDELLAH")
            self.moulincombobd.move(340, 85)
            self.moulincombobd.resize(220, 30)

            #####################################################Point de collecte : #######################################################
            self.pointcollectebd = QtWidgets.QLabel("Point de collecte:", self.bldurtab)
            self.pointcollectebd.move(570, 80)
            self.pointcollectebd.resize(106, 40)
            self.pointcollectebd.setFont(self.font)
            self.pointcollectecombobd = QtWidgets.QComboBox(self.bldurtab)
            self.pointcollectecombobd.addItem("")
            self.pointcollectecombobd.addItem("DOCK SILO CENTRAL")
            self.pointcollectecombobd.move(680, 85)
            self.pointcollectecombobd.resize(150, 30)

            ######################################################Nom de l’Agréeur#######################################################

            self.agréeeurbd = QtWidgets.QLabel("Nom de l’Agréeur:", self.bldurtab)
            self.agréeeurbd.move(1015, 80)
            self.agréeeurbd.resize(112, 40)
            self.agréeeurbd.setFont(self.font)
            self.agréeeurcombobd = QtWidgets.QComboBox(self.bldurtab, editable=False)
            self.agréeeurcombobd.addItem("")
            self.agréeeurcombobd.addItem("FELOUAH OMAR")
            self.agréeeurcombobd.addItem("BEKHEDDA AEK")
            self.agréeeurcombobd.addItem("BENAISSA YOUCEF")
            self.agréeeurcombobd.addItem("REZZAG SOFIANE ")
            self.agréeeurcombobd.addItem("BELBACHA M.NADIR")
            self.agréeeurcombobd.move(1133, 85)
            self.agréeeurcombobd.resize(147, 30)

            ############################################docx2pdf######################
            self.timerbd = QTimer()
            self.timerbd.timeout.connect(self.allcallculbd)
            self.timerbd.setInterval(1000)
            self.timerbd.start()

            ###########################buttons################

            self.btnsavebd = QtWidgets.QPushButton("ENREGISTRER", self.bldurtab, clicked=lambda: self.docx_bdsave())
            self.btnsavebd.move(800, 131)
            self.btnsavebd.resize(480, 80)
            self.btnsavebd.setFont(self.font)
            self.btnsavebd.setIcon(QIcon("images/savepis.png"))
            self.btnsavebd.setIconSize(QSize(70, 80))

            self.btnprintbd = QtWidgets.QPushButton("IMPRIMER", self.bldurtab, clicked=lambda: self.printerbd())
            self.btnprintbd.move(800, 236)
            self.btnprintbd.resize(480, 80)
            self.btnprintbd.setFont(self.font)
            self.btnprintbd.setIcon(QIcon("images/print125.png"))
            self.btnprintbd.setIconSize(QSize(70, 80))

            self.btnefacebd = QtWidgets.QPushButton("EFACER", self.bldurtab, clicked=lambda: self.clear_allbd())
            self.btnefacebd.move(800, 341)
            self.btnefacebd.resize(480, 80)
            self.btnefacebd.setIcon(QIcon("images/eraser45877.png"))
            self.btnefacebd.setIconSize(QSize(70, 80))
            self.btnefacebd.setFont(self.font)

            # self.btncalculbd = QtWidgets.QPushButton("CALCULER", self.bldurtab,clicked=lambda :self.allcallculbd())
            # self.btncalculbd.move(1120, 525)
            # self.btncalculbd.resize(200, 80)
            # self.btncalculbd.setFont(self.font)
            # self.btncalculbd.setIcon((QIcon("images/calcul12544.png")))
            # self.btncalculbd.setIconSize(QSize(70, 80))

            self.horizontalLayout.addWidget(self.confirmitewidget)
            MainWindow.setCentralWidget(self.centralwidget)
            self.statusbar = QtWidgets.QStatusBar(MainWindow)
            self.statusbar.setObjectName("statusbar")
            MainWindow.setStatusBar(self.statusbar)

            self.retranslateUi(MainWindow)
            self.confirmitewidget.setCurrentIndex(1)
            QtCore.QMetaObject.connectSlotsByName(MainWindow)



        def retranslateUi(self, MainWindow):
            _translate = QtCore.QCoreApplication.translate
            MainWindow.setWindowTitle(_translate("MainWindow", "ccls relizane service qualité"))
            self.confirmitewidget.setTabText(self.confirmitewidget.indexOf(self.entrétab),
                                             _translate("MainWindow", "ENTRE"))
            self.confirmitewidget.setTabText(self.confirmitewidget.indexOf(self.sortietab),
                                             _translate("MainWindow", "SORTIE"))
except Exception as e:
    print(e)
################################################MoulinClass
###############################################################################
##############################################################################
###########################################################################
######################################################################
###############################################################
try:
    class Moulin_Window(object):
        ##############################################buttuons&def####################
        def psbd_calcull(self):
            self.rpsbd.clear()
            self.bpsbd.clear()
            while self.vpsbd.text() >= '72':
                self.rpsbd.setValue(10.40)
                if self.vpsbd.text() <= '72.24':
                    self.rpsbd.setValue(10.40)
                elif self.vpsbd.text() >= '72.26':
                    self.rpsbd.setValue(9.90)
                    if self.vpsbd.text() <= '72.49':
                        self.rpsbd.setValue(9.90)
                    elif self.vpsbd.text() >= '72.50':
                        self.rpsbd.setValue(9.40)
                        if self.vpsbd.text() <= '72.74':
                            self.rpsbd.setValue(9.40)
                        elif self.vpsbd.text() >= '72.75':
                            self.rpsbd.setValue(8.90)
                            if self.vpsbd.text() <= '72.99':
                                self.rpsbd.setValue(8.90)
                            elif self.vpsbd.text() >= '73':
                                self.rpsbd.setValue(8.40)
                                if self.vpsbd.text() <= '73.24':
                                    self.rpsbd.setValue(8.40)
                                elif self.vpsbd.text() >= '73.25':
                                    self.rpsbd.setValue(7.90)
                                    if self.vpsbd.text() <= '73.49':
                                        self.rpsbd.setValue(7.90)
                                    elif self.vpsbd.text() >= '73.50':
                                        self.rpsbd.setValue(7.40)
                                        if self.vpsbd.text() <= '73.74':
                                            self.rpsbd.setValue(7.40)
                                        elif self.vpsbd.text() >= '73.75':
                                            self.rpsbd.setValue(6.90)
                                            if self.vpsbd.text() <= '73.99':
                                                self.rpsbd.setValue(6.90)
                                            elif self.vpsbd.text() >= '74':
                                                self.rpsbd.setValue(6.40)
                                                if self.vpsbd.text() <= '74.24':
                                                    self.rpsbd.setValue(6.40)
                                                elif self.vpsbd.text() >= '74.25':
                                                    self.rpsbd.setValue(5.90)
                                                    if self.vpsbd.text() <= '74.49':
                                                        self.rpsbd.setValue(5.90)
                                                    elif self.vpsbd.text() >= '74.50':
                                                        self.rpsbd.setValue(5.40)
                                                        if self.vpsbd.text() <= '74.74':
                                                            self.rpsbd.setValue(5.40)
                                                        elif self.vpsbd.text() >= '74.75':
                                                            self.rpsbd.setValue(4.90)
                                                            if self.vpsbd.text() <= '74.99':
                                                                self.rpsbd.setValue(4.90)
                                                            elif self.vpsbd.text() >= '75':
                                                                self.rpsbd.setValue(4.40)
                                                                if self.vpsbd.text() <= '75.24':
                                                                    self.rpsbd.setValue(4.40)
                                                                elif self.vpsbd.text() >= '75.25':
                                                                    self.rpsbd.setValue(3.90)
                                                                    if self.vpsbd.text() <= '75.49':
                                                                        self.rpsbd.setValue(3.90)
                                                                    elif self.vpsbd.text() >= '75.50':
                                                                        self.rpsbd.setValue(3.40)
                                                                        if self.vpsbd.text() <= '75.74':
                                                                            self.rpsbd.setValue(3.40)
                                                                        elif self.vpsbd.text() >= '75.75':
                                                                            self.rpsbd.setValue(2.90)
                                                                            if self.vpsbd.text() <= '75.99':
                                                                                self.rpsbd.setValue(2.90)
                                                                            elif self.vpsbd.text() >= '76':
                                                                                self.rpsbd.setValue(2.40)
                                                                                if self.vpsbd.text() <= '76.24':
                                                                                    self.rpsbd.setValue(2.40)
                                                                                elif self.vpsbd.text() >= '76.25':
                                                                                    self.rpsbd.setValue(2.05)
                                                                                    if self.vpsbd.text() <= '76.49':
                                                                                        self.rpsbd.setValue(2.05)
                                                                                    elif self.vpsbd.text() >= '76.50':
                                                                                        self.rpsbd.setValue(1.70)
                                                                                        if self.vpsbd.text() <= '76.74':
                                                                                            self.rpsbd.setValue(1.70)
                                                                                        elif self.vpsbd.text() >= '76.75':
                                                                                            self.rpsbd.setValue(1.35)
                                                                                            if self.vpsbd.text() <= '76.99':
                                                                                                self.rpsbd.setValue(
                                                                                                    1.35)
                                                                                            elif self.vpsbd.text() >= '77':
                                                                                                self.rpsbd.setValue(
                                                                                                    1.00)
                                                                                                if self.vpsbd.text() <= '77.24':
                                                                                                    self.rpsbd.setValue(
                                                                                                        1.00)
                                                                                                elif self.vpsbd.text() >= '77.25':
                                                                                                    self.rpsbd.setValue(
                                                                                                        0.75)
                                                                                                    if self.vpsbd.text() <= '77.49':
                                                                                                        self.rpsbd.setValue(
                                                                                                            0.75)
                                                                                                    elif self.vpsbd.text() >= '77.50':
                                                                                                        self.rpsbd.setValue(
                                                                                                            0.50)
                                                                                                        if self.vpsbd.text() <= '77.74':
                                                                                                            self.rpsbd.setValue(
                                                                                                                0.50)
                                                                                                        elif self.vpsbd.text() >= '77.75':
                                                                                                            self.rpsbd.setValue(
                                                                                                                0.25)
                                                                                                            if self.vpsbd.text() <= '77.99':
                                                                                                                self.rpsbd.setValue(
                                                                                                                    0.25)
                                                                                                            else:
                                                                                                                self.rpsbd.clear()
                                                                                                                self.rpsbd.setValue(
                                                                                                                    0)
                break

            while self.vpsbd.text() >= '78':
                self.bpsbd.setValue(0.15)
                if self.vpsbd.text() >= '78':
                    self.bpsbd.setValue(0.15)
                    if self.vpsbd.text() <= '78.25':
                        self.bpsbd.setValue(0.15)
                    elif self.vpsbd.text() >= '78.26':
                        self.bpsbd.setValue(0.30)
                        if self.vpsbd.text() <= '778.50':
                            self.bpsbd.setValue(0.30)
                        elif self.vpsbd.text() >= '78.51':
                            self.bpsbd.setValue(0.45)
                            if self.vpsbd.text() <= '78.75':
                                self.bpsbd.setValue(0.45)
                            elif self.vpsbd.text() >= '78.76':
                                self.bpsbd.setValue(0.60)
                                if self.vpsbd.text() <= '79':
                                    self.bpsbd.setValue(0.60)
                                elif self.vpsbd.text() >= '79.01':
                                    self.bpsbd.setValue(0.75)
                                    if self.vpsbd.text() <= '79.25':
                                        self.bpsbd.setValue(0.75)
                                    elif self.vpsbd.text() >= '79.26':
                                        self.bpsbd.setValue(0.90)
                                        if self.vpsbd.text() <= '79.50':
                                            self.bpsbd.setValue(0.90)
                                        elif self.vpsbd.text() >= '79.51':
                                            self.bpsbd.setValue(1.05)
                                            if self.vpsbd.text() <= '79.75':
                                                self.bpsbd.setValue(1.05)
                                            elif self.vpsbd.text() >= '79.76':
                                                self.bpsbd.setValue(1.20)
                                                if self.vpsbd.text() <= '80':
                                                    self.bpsbd.setValue(1.20)
                                                elif self.vpsbd.text() >= '80.01':
                                                    self.bpsbd.setValue(1.35)
                                                    if self.vpsbd.text() <= '80.25':
                                                        self.bpsbd.setValue(1.35)
                                                    elif self.vpsbd.text() >= '80.25':
                                                        self.bpsbd.setValue(1.50)
                                                        if self.vpsbd.text() <= '80.50':
                                                            self.bpsbd.setValue(1.50)
                                                        elif self.vpsbd.text() >= '80.51':
                                                            self.bpsbd.setValue(1.65)
                                                            if self.vpsbd.text() <= '80.75':
                                                                self.bpsbd.setValue(1.65)
                                                            elif self.vpsbd.text() >= '80.76':
                                                                self.bpsbd.setValue(1.80)
                                                                if self.vpsbd.text() <= '81':
                                                                    self.bpsbd.setValue(1.80)
                                                                elif self.vpsbd.text() >= '81.01':
                                                                    self.bpsbd.setValue(1.95)
                                                                    if self.vpsbd.text() <= '81.25':
                                                                        self.bpsbd.setValue(1.95)
                                                                    elif self.vpsbd.text() >= '81.26':
                                                                        self.bpsbd.setValue(2.10)
                                                                        if self.vpsbd.text() <= '81.50':
                                                                            self.bpsbd.setValue(2.10)
                                                                        elif self.vpsbd.text() >= '81.51':
                                                                            self.bpsbd.setValue(2.25)
                                                                            if self.vpsbd.text() <= '81.75':
                                                                                self.bpsbd.setValue(2.25)
                                                                            elif self.vpsbd.text() >= '81.76':
                                                                                self.bpsbd.setValue(2.40)
                                                                                if self.vpsbd.text() <= '82':
                                                                                    self.bpsbd.setValue(2.40)
                                                                                elif self.vpsbd.text() >= '82.01':
                                                                                    self.bpsbd.setValue(2.50)
                                                                                    if self.vpsbd.text() <= '82.25':
                                                                                        self.bpsbd.setValue(2.50)
                                                                                    elif self.vpsbd.text() >= '82.26':
                                                                                        self.bpsbd.setValue(2.60)
                                                                                        if self.vpsbd.text() <= '82.50':
                                                                                            self.bpsbd.setValue(2.60)
                                                                                        elif self.vpsbd.text() >= '82.51':
                                                                                            self.bpsbd.setValue(2.70)
                                                                                            if self.vpsbd.text() <= '82.75':
                                                                                                self.bpsbd.setValue(
                                                                                                    2.70)
                                                                                            elif self.vpsbd.text() >= '82.76':
                                                                                                self.bpsbd.setValue(
                                                                                                    2.80)
                                                                                                if self.vpsbd.text() <= '83':
                                                                                                    self.bpsbd.setValue(
                                                                                                        2.80)
                                                                                                elif self.vpsbd.text() >= '83.01':
                                                                                                    self.bpsbd.setValue(
                                                                                                        2.85)
                                                                                                    if self.vpsbd.text() <= '83.25':
                                                                                                        self.bpsbd.setValue(
                                                                                                            2.85)
                                                                                                    elif self.vpsbd.text() >= '83.26':
                                                                                                        self.bpsbd.setValue(
                                                                                                            2.90)
                                                                                                        if self.vpsbd.text() <= '83.50':
                                                                                                            self.bpsbd.setValue(
                                                                                                                2.90)
                                                                                                        elif self.vpsbd.text() >= '83.51':
                                                                                                            self.bpsbd.setValue(
                                                                                                                2.95)
                                                                                                            if self.vpsbd.text() <= '83.75':
                                                                                                                self.bpsbd.setValue(
                                                                                                                    2.95)
                                                                                                            elif self.vpsbd.text() >= '83.76':
                                                                                                                self.bpsbd.setValue(
                                                                                                                    3)
                                                                                                                if self.vpsbd.text() <= '84':
                                                                                                                    self.bpsbd.setValue(
                                                                                                                        3)

                                                                                                                else:
                                                                                                                    self.bpsbd.clear()
                                                                                                                    self.bpsbd.setValue(
                                                                                                                        0)
                break

        def imp1erbd(self):
            while self.vtotalprembd.value() >= 0.10:
                self.btotalprembd.setValue(0.60)
                if self.vtotalprembd.value() <= 0.25:
                    self.btotalprembd.setValue(0.60)
                elif self.vtotalprembd.value() >= 0.26 and self.vtotalprembd.value() <= 0.50:
                    self.btotalprembd.setValue(0.45)
                elif self.vtotalprembd.value() >= 0.51 and self.vtotalprembd.value() <= 0.75:
                    self.btotalprembd.setValue(0.30)
                elif self.vtotalprembd.value() >= 0.76 and self.vtotalprembd.value() <= 1.00:
                    self.btotalprembd.setValue(0.15)
                else:
                    self.btotalprembd.clear()
                    self.btotalprembd.setValue(0)
                break
            while self.vtotalprembd.value() >= 1.01:
                self.rtotalprembd.setValue(0.15)
                if self.vtotalprembd.value() <= 1.25:
                    self.rtotalprembd.setValue(0.15)
                elif self.vtotalprembd.value() >= 1.26 and self.vtotalprembd.value() <= 1.50:
                    self.rtotalprembd.setValue(0.30)
                elif self.vtotalprembd.value() >= 1.51 and self.vtotalprembd.value() <= 1.75:
                    self.rtotalprembd.setValue(0.45)
                elif self.vtotalprembd.value() >= 1.76 and self.vtotalprembd.value() <= 2.00:
                    self.rtotalprembd.setValue(0.60)
                elif self.vtotalprembd.value() >= 2.01 and self.vtotalprembd.value() <= 2.25:
                    self.rtotalprembd.setValue(0.75)
                elif self.vtotalprembd.value() >= 2.26 and self.vtotalprembd.value() <= 2.50:
                    self.rtotalprembd.setValue(0.90)
                elif self.vtotalprembd.value() >= 2.51 and self.vtotalprembd.value() <= 2.75:
                    self.rtotalprembd.setValue(1.05)
                elif self.vtotalprembd.value() >= 2.76 and self.vtotalprembd.value() <= 3.00:
                    self.rtotalprembd.setValue(1.20)
                elif self.vtotalprembd.value() >= 3.01 and self.vtotalprembd.value() <= 3.25:
                    self.rtotalprembd.setValue(1.35)
                elif self.vtotalprembd.value() >= 3.26 and self.vtotalprembd.value() <= 3.50:
                    self.rtotalprembd.setValue(1.50)
                elif self.vtotalprembd.value() >= 3.51 and self.vtotalprembd.value() <= 3.75:
                    self.rtotalprembd.setValue(1.65)
                elif self.vtotalprembd.value() >= 3.76 and self.vtotalprembd.value() <= 4.00:
                    self.rtotalprembd.setValue(1.80)
                elif self.vtotalprembd.value() >= 4.01 and self.vtotalprembd.value() <= 4.25:
                    self.rtotalprembd.setValue(1.95)
                elif self.vtotalprembd.value() >= 4.26 and self.vtotalprembd.value() <= 4.50:
                    self.rtotalprembd.setValue(2.10)
                elif self.vtotalprembd.value() >= 4.51 and self.vtotalprembd.value() <= 4.75:
                    self.rtotalprembd.setValue(2.25)
                elif self.vtotalprembd.value() >= 4.76 and self.vtotalprembd.value() <= 5.00:
                    self.rtotalprembd.setValue(2.40)
                elif self.vtotalprembd.value() >= 5.01 and self.vtotalprembd.value() <= 5.25:
                    self.rtotalprembd.setValue(2.55)
                elif self.vtotalprembd.value() >= 5.26 and self.vtotalprembd.value() <= 5.50:
                    self.rtotalprembd.setValue(2.70)
                elif self.vtotalprembd.value() >= 5.51 and self.vtotalprembd.value() <= 5.75:
                    self.rtotalprembd.setValue(2.85)
                elif self.vtotalprembd.value() >= 5.76 and self.vtotalprembd.value() <= 6.00:
                    self.rtotalprembd.setValue(3.00)
                elif self.vtotalprembd.value() >= 6.01 and self.vtotalprembd.value() <= 6.25:
                    self.rtotalprembd.setValue(3.15)
                elif self.vtotalprembd.value() >= 6.26 and self.vtotalprembd.value() <= 6.50:
                    self.rtotalprembd.setValue(3.30)
                elif self.vtotalprembd.value() >= 6.51 and self.vtotalprembd.value() <= 6.75:
                    self.rtotalprembd.setValue(3.45)
                elif self.vtotalprembd.value() >= 6.76 and self.vtotalprembd.value() <= 7.00:
                    self.rtotalprembd.setValue(3.60)
                elif self.vtotalprembd.value() >= 7.01 and self.vtotalprembd.value() <= 7.25:
                    self.rtotalprembd.setValue(3.75)
                elif self.vtotalprembd.value() >= 7.26 and self.vtotalprembd.value() <= 7.50:
                    self.rtotalprembd.setValue(3.90)
                elif self.vtotalprembd.value() >= 7.51 and self.vtotalprembd.value() <= 7.75:
                    self.rtotalprembd.setValue(4.05)
                elif self.vtotalprembd.value() >= 7.76 and self.vtotalprembd.value() <= 8.00:
                    self.rtotalprembd.setValue(4.20)
                elif self.vtotalprembd.value() >= 8.01 and self.vtotalprembd.value() <= 8.25:
                    self.rtotalprembd.setValue(4.35)
                elif self.vtotalprembd.value() >= 8.26 and self.vtotalprembd.value() <= 8.50:
                    self.rtotalprembd.setValue(4.50)
                elif self.vtotalprembd.value() >= 8.51 and self.vtotalprembd.value() <= 8.75:
                    self.rtotalprembd.setValue(4.65)
                elif self.vtotalprembd.value() >= 8.76 and self.vtotalprembd.value() <= 9.00:
                    self.rtotalprembd.setValue(4.80)
                else:
                    self.rtotalprembd.clear()
                    self.rtotalprembd.setValue(0)
                break

        def imp2embd(self):
            while self.vtotaldembd.value() >= 10.01:
                self.rtotaldembd.setValue(0.075)
                if self.vtotaldembd.value() <= 10.25:
                    self.rtotaldembd.setValue(0.075)
                elif self.vtotaldembd.value() >= 10.26 and self.vtotaldembd.value() <= 10.50:
                    self.rtotaldembd.setValue(0.15)
                elif self.vtotaldembd.value() >= 10.51 and self.vtotaldembd.value() <= 10.75:
                    self.rtotaldembd.setValue(0.225)
                elif self.vtotaldembd.value() >= 10.76 and self.vtotaldembd.value() <= 11.00:
                    self.rtotaldembd.setValue(0.30)
                elif self.vtotaldembd.value() >= 11.01 and self.vtotaldembd.value() <= 11.25:
                    self.rtotaldembd.setValue(0.375)
                elif self.vtotaldembd.value() >= 11.26 and self.vtotaldembd.value() <= 11.50:
                    self.rtotaldembd.setValue(0.45)
                elif self.vtotaldembd.value() >= 11.51 and self.vtotaldembd.value() <= 11.75:
                    self.rtotaldembd.setValue(0.525)
                elif self.vtotaldembd.value() >= 11.76 and self.vtotaldembd.value() <= 12.00:
                    self.rtotaldembd.setValue(0.60)
                elif self.vtotaldembd.value() >= 12.01 and self.vtotaldembd.value() <= 12.25:
                    self.rtotaldembd.setValue(0.675)
                elif self.vtotaldembd.value() >= 12.26 and self.vtotaldembd.value() <= 12.50:
                    self.rtotaldembd.setValue(0.75)
                elif self.vtotaldembd.value() >= 12.51 and self.vtotaldembd.value() <= 12.75:
                    self.rtotaldembd.setValue(0.825)
                elif self.vtotaldembd.value() >= 12.76 and self.vtotaldembd.value() <= 13.00:
                    self.rtotaldembd.setValue(0.90)
                elif self.vtotaldembd.value() >= 13.01 and self.vtotaldembd.value() <= 13.25:
                    self.rtotaldembd.setValue(0.975)
                elif self.vtotaldembd.value() >= 13.26 and self.vtotaldembd.value() <= 13.50:
                    self.rtotaldembd.setValue(1.05)
                elif self.vtotaldembd.value() >= 13.51 and self.vtotaldembd.value() <= 13.75:
                    self.rtotaldembd.setValue(1.125)
                elif self.vtotaldembd.value() >= 13.76 and self.vtotaldembd.value() <= 14.00:
                    self.rtotaldembd.setValue(1.20)
                elif self.vtotaldembd.value() >= 14.01 and self.vtotaldembd.value() <= 14.25:
                    self.rtotaldembd.setValue(1.275)
                elif self.vtotaldembd.value() >= 14.26 and self.vtotaldembd.value() <= 14.50:
                    self.rtotaldembd.setValue(1.35)
                elif self.vtotaldembd.value() >= 14.51 and self.vtotaldembd.value() <= 14.75:
                    self.rtotaldembd.setValue(1.425)
                elif self.vtotaldembd.value() >= 14.76 and self.vtotaldembd.value() <= 15.00:
                    self.rtotaldembd.setValue(1.50)
                elif self.vtotaldembd.value() <= 15.01 and self.vtotaldembd.value() <= 15.25:
                    self.rtotaldembd.setValue(1.60)
                elif self.vtotaldembd.value() >= 15.26 and self.vtotaldembd.value() <= 15.50:
                    self.rtotaldembd.setValue(1.70)
                elif self.vtotaldembd.value() >= 15.51 and self.vtotaldembd.value() <= 15.75:
                    self.rtotaldembd.setValue(1.80)
                elif self.vtotaldembd.value() >= 15.76 and self.vtotaldembd.value() <= 16.00:
                    self.rtotaldembd.setValue(1.90)
                elif self.vtotaldembd.value() >= 16.01 and self.vtotaldembd.value() <= 16.25:
                    self.rtotaldembd.setValue(2.00)
                elif self.vtotaldembd.value() >= 16.26 and self.vtotaldembd.value() <= 16.50:
                    self.rtotaldembd.setValue(2.10)
                elif self.vtotaldembd.value() >= 16.51 and self.vtotaldembd.value() <= 16.75:
                    self.rtotaldembd.setValue(2.20)
                elif self.vtotaldembd.value() >= 11.76 and self.vtotaldembd.value() <= 17.00:
                    self.rtotaldembd.setValue(2.30)
                elif self.vtotaldembd.value() >= 17.01 and self.vtotaldembd.value() <= 17.25:
                    self.rtotaldembd.setValue(2.40)
                elif self.vtotaldembd.value() >= 17.26 and self.vtotaldembd.value() <= 17.50:
                    self.rtotaldembd.setValue(2.50)
                elif self.vtotaldembd.value() >= 17.51 and self.vtotaldembd.value() <= 17.75:
                    self.rtotaldembd.setValue(2.60)
                elif self.vtotaldembd.value() >= 17.76 and self.vtotaldembd.value() <= 18.00:
                    self.rtotaldembd.setValue(2.70)
                elif self.vtotaldembd.value() >= 18.01 and self.vtotaldembd.value() <= 18.25:
                    self.rtotaldembd.setValue(2.80)
                elif self.vtotaldembd.value() >= 18.26 and self.vtotaldembd.value() <= 18.50:
                    self.rtotaldembd.setValue(2.90)
                elif self.vtotaldembd.value() >= 18.51 and self.vtotaldembd.value() <= 18.75:
                    self.rtotaldembd.setValue(3.00)
                elif self.vtotaldembd.value() >= 18.76 and self.vtotaldembd.value() <= 19.00:
                    self.rtotaldembd.setValue(3.10)
                elif self.vtotaldembd.value() >= 19.01 and self.vtotaldembd.value() <= 19.25:
                    self.rtotaldembd.setValue(3.20)
                elif self.vtotaldembd.value() >= 19.26 and self.vtotaldembd.value() <= 19.50:
                    self.rtotaldembd.setValue(3.30)
                elif self.vtotaldembd.value() >= 19.51 and self.vtotaldembd.value() <= 19.75:
                    self.rtotaldembd.setValue(3.40)
                elif self.vtotaldembd.value() >= 19.76 and self.vtotaldembd.value() <= 20.00:
                    self.rtotaldembd.setValue(3.50)
                else:
                    self.rtotaldembd.setValue(0.0)
                break

        def ref_graincassébd(self):
            while self.vgraincassébd.value() >= 3.01:
                self.rgraincassébd.setValue(0.05)
                if self.vgraincassébd.value() <= 3.25:
                    self.rgraincassébd.setValue(0.05)
                elif self.vgraincassébd.value() >= 3.26 and self.vgraincassébd.value() <= 3.50:
                    self.rgraincassébd.setValue(0.10)
                elif self.vgraincassébd.value() >= 3.51 and self.vgraincassébd.value() <= 3.75:
                    self.rgraincassébd.setValue(0.15)
                elif self.vgraincassébd.value() >= 3.76 and self.vgraincassébd.value() <= 4.00:
                    self.rgraincassébd.setValue(0.20)
                elif self.vgraincassébd.value() >= 4.01 and self.vgraincassébd.value() <= 4.25:
                    self.rgraincassébd.setValue(0.25)
                elif self.vgraincassébd.value() >= 4.26 and self.vgraincassébd.value() <= 4.50:
                    self.rgraincassébd.setValue(0.30)
                elif self.vgraincassébd.value() >= 4.51 and self.vgraincassébd.value() <= 4.75:
                    self.rgraincassébd.setValue(0.35)
                elif self.vgraincassébd.value() >= 4.76 and self.vgraincassébd.value() <= 5.00:
                    self.rgraincassébd.setValue(0.40)
                elif self.vgraincassébd.value() >= 5.01 and self.vgraincassébd.value() <= 5.25:
                    self.rgraincassébd.setValue(0.47)
                elif self.vgraincassébd.value() >= 5.26 and self.vgraincassébd.value() <= 5.50:
                    self.rgraincassébd.setValue(0.55)
                elif self.vgraincassébd.value() >= 5.51 and self.vgraincassébd.value() <= 5.75:
                    self.rgraincassébd.setValue(0.62)
                elif self.vgraincassébd.value() >= 5.76 and self.vgraincassébd.value() <= 6.00:
                    self.rgraincassébd.setValue(0.70)
                elif self.vgraincassébd.value() >= 6.01 and self.vgraincassébd.value() <= 6.25:
                    self.rgraincassébd.setValue(0.77)
                elif self.vgraincassébd.value() >= 6.26 and self.vgraincassébd.value() <= 6.50:
                    self.rgraincassébd.setValue(0.85)
                elif self.vgraincassébd.value() >= 6.51 and self.vgraincassébd.value() <= 6.75:
                    self.rgraincassébd.setValue(0.92)
                elif self.vgraincassébd.value() >= 6.76 and self.vgraincassébd.value() <= 7.00:
                    self.rgraincassébd.setValue(1)
                else:
                    self.rgraincassébd.setValue(0)
                break

        def ref_grainbouté_bd(self):
            while self.vgrainboutébd.value() >= 4.01:
                self.rgrainboutébd.setValue(0.05)
                if self.vgrainboutébd.value() <= 5:
                    self.rgrainboutébd.setValue(0.05)
                elif self.vgrainboutébd.value() >= 5.01 and self.vgrainboutébd.value() <= 6:
                    self.rgrainboutébd.setValue(0.15)
                elif self.vgrainboutébd.value() >= 6.01 and self.vgrainboutébd.value() <= 7:
                    self.rgrainboutébd.setValue(0.25)
                elif self.vgrainboutébd.value() >= 7.01 and self.vgrainboutébd.value() <= 8:
                    self.rgrainboutébd.setValue(0.35)
                elif self.vgrainboutébd.value() >= 8.01 and self.vgrainboutébd.value() <= 9:
                    self.rgrainboutébd.setValue(0.45)
                elif self.vgrainboutébd.value() >= 9.01 and self.vgrainboutébd.value() <= 10:
                    self.rgrainboutébd.setValue(0.55)
                elif self.vgrainboutébd.value() >= 10.01 and self.vgrainboutébd.value() <= 11:
                    self.rgrainboutébd.setValue(0.65)
                elif self.vgrainboutébd.value() >= 11.01 and self.vgrainboutébd.value() <= 12:
                    self.rgrainboutébd.setValue(0.75)
                elif self.vgrainboutébd.value() >= 12.01 and self.vgrainboutébd.value() <= 13:
                    self.rgrainboutébd.setValue(0.85)
                elif self.vgrainboutébd.value() >= 13.01 and self.vgrainboutébd.value() <= 14:
                    self.rgrainboutébd.setValue(0.95)
                else:
                    self.rgrainboutébd.setVlue(0)
                break

        def boni_bltdbd(self):
            while self.vblétendreinbledur.value() >= 1:
                self.bblétendreinbledur.setValue(0.26)
                if self.vblétendreinbledur.value() <= 9:
                    self.bblétendreinbledur.setValue(0.26)
                elif self.vblétendreinbledur.value() >= 9.01 and self.vblétendreinbledur.value() <= 10:
                    self.bblétendreinbledur.setValue(0.195)
                elif self.vblétendreinbledur.value() >= 10.01 and self.vblétendreinbledur.value() <= 11:
                    self.bblétendreinbledur.setValue(0.130)
                elif self.vblétendreinbledur.value() >= 11.01 and self.vblétendreinbledur.value() <= 12:
                    self.bblétendreinbledur.setValue(0.065)
                else:
                    self.bblétendreinbledur.setValue(0)

                if self.vblétendreinbledur.value() >= 12.01 and self.vblétendreinbledur.value() <= 13:
                    self.rblétendreinbledur.setValue(0.065)
                elif self.vblétendreinbledur.value() >= 13.01 and self.vblétendreinbledur.value() <= 14:
                    self.rblétendreinbledur.setValue(0.140)
                elif self.vblétendreinbledur.value() >= 14.01 and self.vblétendreinbledur.value() <= 15:
                    self.rblétendreinbledur.setValue(0.225)
                elif self.vblétendreinbledur.value() >= 15.01 and self.vblétendreinbledur.value() <= 16:
                    self.rblétendreinbledur.setValue(0.320)
                elif self.vblétendreinbledur.value() >= 16.01 and self.vblétendreinbledur.value() <= 17:
                    self.rblétendreinbledur.setValue(0.425)
                elif self.vblétendreinbledur.value() >= 17.01 and self.vblétendreinbledur.value() <= 18:
                    self.rblétendreinbledur.setValue(0.550)
                elif self.vblétendreinbledur.value() >= 18.01 and self.vblétendreinbledur.value() <= 19:
                    self.rblétendreinbledur.setValue(0.675)
                elif self.vblétendreinbledur.value() >= 19.01 and self.vblétendreinbledur.value() <= 20:
                    self.rblétendreinbledur.setValue(0.825)
                elif self.vblétendreinbledur.value() >= 20.01 and self.vblétendreinbledur.value() <= 21:
                    self.rblétendreinbledur.setValue(0.975)
                elif self.vblétendreinbledur.value() >= 21.01 and self.vblétendreinbledur.value() <= 22:
                    self.rblétendreinbledur.setValue(1.150)
                elif self.vblétendreinbledur.value() >= 22.01 and self.vblétendreinbledur.value() <= 23:
                    self.rblétendreinbledur.setValue(1.325)
                elif self.vblétendreinbledur.value() >= 23.01 and self.vblétendreinbledur.value() <= 24:
                    self.rblétendreinbledur.setValue(1.525)
                elif self.vblétendreinbledur.value() >= 24.01 and self.vblétendreinbledur.value() <= 25:
                    self.rblétendreinbledur.setValue(1.70)
                elif self.vblétendreinbledur.value() >= 25.01 and self.vblétendreinbledur.value() <= 26:
                    self.rblétendreinbledur.setValue(1.90)
                elif self.vblétendreinbledur.value() >= 26.01 and self.vblétendreinbledur.value() <= 27:
                    self.rblétendreinbledur.setValue(2.10)
                elif self.vblétendreinbledur.value() >= 27.01 and self.vblétendreinbledur.value() <= 28:
                    self.rblétendreinbledur.setValue(2.30)
                elif self.vblétendreinbledur.value() >= 28.01 and self.vblétendreinbledur.value() <= 29:
                    self.rblétendreinbledur.setValue(2.50)
                elif self.vblétendreinbledur.value() >= 29.01 and self.vblétendreinbledur.value() <= 30:
                    self.rblétendreinbledur.setValue(2.75)
                elif self.vblétendreinbledur.value() >= 30.01 and self.vblétendreinbledur.value() <= 31:
                    self.rblétendreinbledur.setValue(3.00)
                elif self.vblétendreinbledur.value() >= 31.01 and self.vblétendreinbledur.value() <= 32:
                    self.rblétendreinbledur.setValue(3.25)
                elif self.vblétendreinbledur.value() >= 32.01 and self.vblétendreinbledur.value() <= 33:
                    self.rblétendreinbledur.setValue(3.50)
                elif self.vblétendreinbledur.value() >= 33.01 and self.vblétendreinbledur.value() <= 34:
                    self.rblétendreinbledur.setValue(3.75)
                elif self.vblétendreinbledur.value() >= 34.01 and self.vblétendreinbledur.value() <= 35:
                    self.rblétendreinbledur.setValue(4.00)
                else:
                    self.rblétendreinbledur.setValue(0)
                break

        def allcallculbd(self):
            self.psbd_calcull()
            self.ref_graincassébd()
            self.imp1erbd()
            self.imp2embd()
            self.plusbd()
            self.ref_grainbouté_bd()
            self.boni_bltdbd()

        def clear_allbd(self):
            self.vpsbd.clear()
            self.bpsbd.clear()
            self.vhumiditebd.clear()
            self.bhumiditebd.clear()
            self.vtotalprembd.clear()
            self.btotalprembd.clear()
            self.vgraincassébd.clear()
            self.rgraincassébd.clear()
            self.vtotaldembd.clear()
            self.btotalprembd.clear()
            self.rtotaldembd.clear()
            self.btotaldembd.clear()
            self.vgrainetrangébd.clear()
            self.vgrainmouchtébd.clear()
            self.vgrainmaigrebd.clear()
            self.vgrainechaudebd.clear()
            self.vdébrisvébd.clear()
            self.vmatiéreinrtbd.clear()
            self.btotalcomplet.clear()
            self.rtotalcomplet.clear()
            self.bindicenotin.clear()
            self.rindicenotin.clear()
            self.rblétendreinbledur.clear()
            self.rtotalprembd.clear()
            self.vdébrisvébd.clear()
            self.vmatiéreinrtbd.clear()
            self.vgrainsanvaleurbd.clear()
            self.vgrainchaufébd.clear()
            self.vgrainboutébd.clear()
            self.rgrainboutébd.clear()
            self.bblétendreinbledur.clear()
            self.vblétendreinbledur.clear()
            self.vtotalcomplet.clear()
            self.vindicenotin.clear()
            self.vgrainpiquébd.clear()
            self.vgrainpunaisébd.clear()
            self.vgraincarrébd.clear()
            self.vergotbd.clear()
            self.vergotbd.setValue(0)
            self.vgraigermébd.clear()
            self.vgraigermébd.setValue(0)
            self.vgrainnuisiblebd.clear()
            self.vgrainnuisiblebd.setValue(0)
            self.vgraincarrébd.setValue(0)
            self.vgrainpunaisébd.setValue(0)
            self.vgrainpiquébd.setValue(0)
            self.vindicenotin.setValue(0)
            self.vtotalcomplet.setValue(0)
            self.vpsbd.setValue(0)
            self.bpsbd.setValue(0)
            self.rpsbd.setValue(0)
            self.vhumiditebd.setValue(0)
            self.bhumiditebd.setValue(0)
            self.vtotalprembd.setValue(0)
            self.btotalprembd.setValue(0)
            self.vgraincassébd.setValue(0)
            self.rgraincassébd.setValue(0)
            self.vtotaldembd.setValue(0)
            self.btotalprembd.setValue(0)
            self.rtotaldembd.setValue(0)
            self.btotaldembd.setValue(0)
            self.vgrainetrangébd.setValue(0)
            self.vgrainmouchtébd.setValue(0)
            self.vgrainmaigrebd.setValue(0)
            self.vgrainechaudebd.setValue(0)
            self.vdébrisvébd.setValue(0)
            self.vmatiéreinrtbd.setValue(0)
            self.btotalcomplet.setValue(0)
            self.rtotalcomplet.setValue(0)
            self.bindicenotin.setValue(0)
            self.rindicenotin.setValue(0)
            self.rblétendreinbledur.setValue(0)
            self.rtotalprembd.setValue(0)
            self.vdébrisvébd.setValue(0)
            self.vmatiéreinrtbd.setValue(0)
            self.vgrainsanvaleurbd.setValue(0)
            self.vgrainchaufébd.setValue(0)
            self.vtotalprembd.setValue(0)
            self.btotalprembd.setValue(0)
            self.rtotalprembd.setValue(0)
            self.vgrainboutébd.setValue(0)
            self.rgrainboutébd.setValue(0)
            self.bblétendreinbledur.setValue(0)
            self.vblétendreinbledur.setValue(0)

        def plusbd(self):
            a = self.bpsbd.value()
            b = self.bhumiditebd.value()
            c = self.btotalprembd.value()
            a1 = self.bblétendreinbledur.value()
            d = self.rgraincassébd.value()
            e = self.vgraincassébd.value()
            f = self.vgrainmaigrebd.value()
            g = self.vgrainechaudebd.value()
            h = self.vgraigermébd.value()
            i = self.vgrainpunaisébd.value()
            j = self.vgrainpiquébd.value()
            k = self.vgrainboutébd.value()
            v = self.rgrainboutébd.value()
            m = self.vgrainmouchtébd.value()
            n = self.vgrainetrangébd.value()
            o = self.rtotalprembd.value()
            oa = self.rtotaldembd.value()
            t = self.rpsbd.value()
            q = self.vindicenotin.value()
            r = self.vblétendreinbledur.value()
            sa = self.btotaldembd.value()
            # total 2eme cat blé dur
            vtotaldemmbd = f + g + h + i + j + m + n
            # total 1er ble dur
            p = self.vdébrisvébd.value()
            qa = self.vmatiéreinrtbd.value()
            ra = self.vgrainchaufébd.value()
            s = self.vgrainsanvaleurbd.value()
            aa = self.vgrainnuisiblebd.value()
            ab = self.vgraincarrébd.value()
            if self.vgraincassébd.value() >= 4.01 and self.vgrainboutébd.value() >= 4.01:
                self.vtotaldembd.setValue(vtotaldemmbd)
                self.vtotalcomplet.setValue(vtotaldemmbd + q + r)
            elif self.vgraincassébd.value() >= 4.01 and self.vgrainboutébd.value() < 4.01:
                self.vtotaldembd.setValue(vtotaldemmbd + k)
                self.vtotalcomplet.setValue(vtotaldemmbd + q + r + k)
            elif self.vgrainboutébd.value() >= 4.01 and self.vgraincassébd.value() < 4.01:
                self.vtotaldembd.setValue(vtotaldemmbd + e)
                self.vtotalcomplet.setValue(vtotaldemmbd + q + r + e)
            else:
                self.vtotaldembd.setValue(vtotaldemmbd + e + k)
                self.vtotalcomplet.setValue(vtotaldemmbd + q + r + e + k)

            self.vtotalprembd.setValue(p + qa + ra + s + aa + ab)
            self.rtotalbonibd.setValue(t + o + d + v + oa)
            self.btotalbonibd.setValue(a + b + c + a1 + sa)

        def docx_bdsave(self):
            self.docbd = DocxTemplate("_bulletin moulin/_bulletin moulin_Blé DUR/tempfile_blédur.docx")
            decadbd = self.decadecombobd.currentText()
            bbpsbd = self.bpsbd.text()
            ebpsbd = self.vpsbd.text()
            moulnbd = self.moulincombobd.currentText()
            pntclbd = self.pointcollectecombobd.currentText()
            espsbd = self.éspécecombobd.currentText()
            qnttbd = self.quantitetxtbd.text()
            agrcmbd = self.agréeeurcombobd.currentText()
            tnvvbd = self.vhumiditebd.text()
            ttv1bd = self.vtotalprembd.text()
            ttlb1bd = self.btotalprembd.text()
            ttlb1bdr = self.rtotalprembd.text()
            grcassévbd = self.vgraincassébd.text()
            grcassébbd = self.bgraincassébd.text()
            grcassébbdr = self.rgraincassébd.text()
            tnbbd = self.bhumiditebd.text()
            grmchbd = self.vgrainmouchtébd.value()
            gretrngbd = self.vgrainetrangébd.value()
            total2vbd = self.vtotaldembd.text()
            total2rbd = self.rtotaldembd.text()
            total2bbd = self.btotaldembd.text()
            grnmgrbd = self.vgrainmaigrebd.value()
            grechdbd = self.vgrainechaudebd.value()
            grgrmbd = self.vgraigermébd.value()
            grpnsbd = self.vgrainpunaisébd.value()
            grpqbd = self.vgrainpiquébd.value()
            grbtbd = self.vgrainboutébd.value()
            dattebd = self.dateeditebd.text()
            refactionps = self.rpsbd.text()
            debrivébd = self.vdébrisvébd.value()
            matinrtdb = self.vmatiéreinrtbd.value()
            grainmaigrebd = self.vgrainmouchtébd.value()
            grainboute = self.vgrainboutébd.value()
            garinssanvaleur = self.vgrainsanvaleurbd.value()
            grainchaufébd = self.vgrainchaufébd.value()
            indice = self.vindicenotin.value()
            indicer = self.rindicenotin.text()
            indiceb = self.bindicenotin.text()
            grainboutébdr = self.rgrainboutébd.text()
            grainboutébdb = self.bgrainboutébd.text()
            ttcomplet = self.vtotalcomplet.text()
            ttcompletr = self.rtotalcomplet.text()
            ttcompletb = self.btotalcomplet.text()
            bletendredbd = self.vblétendreinbledur.value()
            bletendredbdr = self.rblétendreinbledur.text()
            bletendredbdb = self.bblétendreinbledur.text()
            graincarre = self.vgraincarrébd.value()
            ergotbd = self.vergotbd.value()
            grainnuisiblebd = self.vgrainnuisiblebd.value()
            totalbonification = self.btotalbonibd.text()
            totalrefaction = self.rtotalbonibd.text()

            self.docbd.render(
                {"ttcr": totalrefaction, "ttcb": totalbonification, "gnsv": grainnuisiblebd, "erg": ergotbd,
                 "grcr": graincarre, "grbtf": grbtbd, "grpq": grpqbd, "grpn": grpnsbd, "grg": grgrmbd, "gehv": grechdbd,
                 "gmv": grnmgrbd,
                 "psb": bbpsbd, "tt1v": ttv1bd, "tneb": tnbbd, "tnev": tnvvbd, "psv": ebpsbd, "gr": agrcmbd,
                 "esp": espsbd, "mmmmmmmmmmmmmmmmm": moulnbd, "pntc": pntclbd, "qtt": qnttbd, "dt": dattebd,
                 "num": decadbd, "tt1b": ttlb1bd, "gcv": grcassévbd, "gcb": grcassébbd, "tt2v": total2vbd,
                 "tt2r": total2rbd, "tt2b": total2bbd, "getv": gretrngbd, "gmv": grmchbd, "gehv": grechdbd,
                 "gnsv": grainnuisiblebd,
                 "psr": refactionps,
                 "dbv": debrivébd,
                 "mtiv": matinrtdb,
                 "grch": grainchaufébd,
                 "grsn": garinssanvaleur,
                 "gmx": grainmaigrebd,
                 "grbt": grainboute,
                 "indv": indice,
                 "btdv": bletendredbd,
                 "ttcv": ttcomplet,
                 "ttcc": ttcompletr,
                 "ttcn": ttcompletb,
                 "btdr": bletendredbdr,
                 "btdb": bletendredbdb,
                 "indr": indicer,
                 "indb": indiceb,
                 "grbtr": grainboutébdr,
                 "grbtb": grainboutébdb,
                 "gcr": grcassébbdr,
                 "tt1r": ttlb1bdr})
            self.docbd_name = moulnbd + "-" + datetime.datetime.now().strftime("%m-%y") + "-" + decadbd + ".docx"
            # self.docbd.save("_bulletin moulin/_bulletin moulin_Blé DUR/" + self.docbd_name)
            path, _ = QFileDialog.getSaveFileName(None, "Enregistrer la fiche", self.docbd_name,
                                                  "Fichiers DOCX (*.docx)")
            if path:
                self.docbd.save(path)
                msgbox = QtWidgets.QMessageBox()
                msgbox.setWindowTitle('confirmation')
                msgbox.setText('Le fichier a été enregistré avec succès.')
                msgbox.exec()

        def printerbd(self):
            self.docbd = DocxTemplate("_bulletin moulin/_bulletin moulin_Blé DUR/tempfile_blédur.docx")
            decadbd = self.decadecombobd.currentText()
            bbpsbd = self.bpsbd.text()
            ebpsbd = self.vpsbd.text()
            moulnbd = self.moulincombobd.currentText()
            pntclbd = self.pointcollectecombobd.currentText()
            espsbd = self.éspécecombobd.currentText()
            qnttbd = self.quantitetxtbd.text()
            agrcmbd = self.agréeeurcombobd.currentText()
            tnvvbd = self.vhumiditebd.text()
            ttv1bd = self.vtotalprembd.text()
            ttlb1bd = self.btotalprembd.text()
            ttlb1bdr = self.rtotalprembd.text()
            grcassévbd = self.vgraincassébd.text()
            grcassébbd = self.bgraincassébd.text()
            grcassébbdr = self.rgraincassébd.text()
            tnbbd = self.bhumiditebd.text()
            grmchbd = self.vgrainmouchtébd.value()
            gretrngbd = self.vgrainetrangébd.value()
            total2vbd = self.vtotaldembd.text()
            total2rbd = self.rtotaldembd.text()
            total2bbd = self.btotaldembd.text()
            grnmgrbd = self.vgrainmaigrebd.value()
            grechdbd = self.vgrainechaudebd.value()
            grgrmbd = self.vgraigermébd.value()
            grpnsbd = self.vgrainpunaisébd.value()
            grpqbd = self.vgrainpiquébd.value()
            grbtbd = self.vgrainboutébd.value()
            dattebd = self.dateeditebd.text()
            refactionps = self.rpsbd.text()
            debrivébd = self.vdébrisvébd.value()
            matinrtdb = self.vmatiéreinrtbd.value()
            grainmaigrebd = self.vgrainmouchtébd.value()
            grainboute = self.vgrainboutébd.value()
            garinssanvaleur = self.vgrainsanvaleurbd.value()
            grainchaufébd = self.vgrainchaufébd.value()
            indice = self.vindicenotin.value()
            indicer = self.rindicenotin.text()
            indiceb = self.bindicenotin.text()
            grainboutébdr = self.rgrainboutébd.text()
            grainboutébdb = self.bgrainboutébd.text()
            ttcomplet = self.vtotalcomplet.text()
            ttcompletr = self.rtotalcomplet.text()
            ttcompletb = self.btotalcomplet.text()
            bletendredbd = self.vblétendreinbledur.value()
            bletendredbdr = self.rblétendreinbledur.text()
            bletendredbdb = self.bblétendreinbledur.text()
            graincarre = self.vgraincarrébd.value()
            ergotbd = self.vergotbd.value()
            grainnuisiblebd = self.vgrainnuisiblebd.value()
            totalbonification = self.btotalbonibd.text()
            totalrefaction = self.rtotalbonibd.text()

            self.docbd.render(
                {"ttcr": totalrefaction, "ttcb": totalbonification, "gnsv": grainnuisiblebd, "erg": ergotbd,
                 "grcr": graincarre, "grbtf": grbtbd, "grpq": grpqbd, "grpn": grpnsbd, "grg": grgrmbd, "gehv": grechdbd,
                 "gmv": grnmgrbd,
                 "psb": bbpsbd, "tt1v": ttv1bd, "tneb": tnbbd, "tnev": tnvvbd, "psv": ebpsbd, "gr": agrcmbd,
                 "esp": espsbd, "mmmmmmmmmmmmmmmmm": moulnbd, "pntc": pntclbd, "qtt": qnttbd, "dt": dattebd,
                 "num": decadbd, "tt1b": ttlb1bd, "gcv": grcassévbd, "gcb": grcassébbd, "tt2v": total2vbd,
                 "tt2r": total2rbd, "tt2b": total2bbd, "getv": gretrngbd, "gmv": grmchbd, "gehv": grechdbd,
                 "gnsv": grainnuisiblebd,
                 "psr": refactionps,
                 "dbv": debrivébd,
                 "mtiv": matinrtdb,
                 "grch": grainchaufébd,
                 "grsn": garinssanvaleur,
                 "gmx": grainmaigrebd,
                 "grbt": grainboute,
                 "indv": indice,
                 "btdv": bletendredbd,
                 "ttcv": ttcomplet,
                 "ttcc": ttcompletr,
                 "ttcn": ttcompletb,
                 "btdr": bletendredbdr,
                 "btdb": bletendredbdb,
                 "indr": indicer,
                 "indb": indiceb,
                 "grbtr": grainboutébdr,
                 "grbtb": grainboutébdb,
                 "gcr": grcassébbdr,
                 "tt1r": ttlb1bdr})
            doc_names = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
            doc_pdf = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False).name
            self.docbd.save(doc_names)
            try:
                if doc_names:
                    a = self.progress_bar()
                    sys.stderr = open("consoleoutput.log", "w")
                    convert(doc_names, doc_pdf)
                    # Open the resulting .pdf file using the default associated application
                    app_path = 'C:\\Program Files\\Okular\\bin\\okular.exe'
                    subprocess.Popen([app_path, doc_pdf])
            except Exception as e:
                print(e)

        def progress_bar(self):
            self.widgetprogress = QtWidgets.QDialog()
            self.widgetprogress.setStyleSheet(""" QWidget
                                {
                                    color: #000000;
                                    background-color: #ffffff;
                                    border-width: 1px;
                                    border-color: #1e1e1e;
                                    border-style: solid;
                                    border-radius: 6;
                                    padding: 0px;
                                    font-size: 18px;
                                    padding-left: 1px;
                                    padding-right: 1px
                                }
                                QWidget:item:hover
                                {
                                    background-color: #3daee9;
                                    color: #eff0f1;
                                }
                                QWidget:item:selected
                                {
                                    background-color: #3daee9;
                                }
                                QWidget:disabled
                                {
                                    color: #454545;
                                    background-color: #31363b;
                                }
                                QPushButton
                                {
                                    color: #000000;
                                    background-color:#ade3e7;
                                    border-width: 1px;
                                    border-color: #1e1e1e;
                                    border-style: solid;
                                    border-radius: 6;
                                    padding: 3px;
                                    font-size: 12px;
                                    padding-left: 5px;
                                    padding-right: 5px;
                                    min-width: 40px
                                }
                                QPushButton:disabled
                                {
                                    background-color: #31363b;
                                    border-width: 1px;
                                    border-color: #454545;
                                    border-style: solid;
                                    padding-top: 5px;
                                    padding-bottom: 5px;
                                    padding-left: 10px;
                                    padding-right: 10px;
                                    border-radius: 2px;
                                    color: #454545;
                                }

                                QPushButton:pressed
                                {
                                    background-color: #3daee9;
                                    padding-top: -15px;
                                    padding-bottom: -17px;
                                }
                                QPushButton:hover
                                {
                                    border: 1px solid #ff8c00;
                                    color: #000000;
                                }
                                 QLabel
                                {
                                    font-size: 18px;
                                    border: 0px solid orange;
                                }

                            """)
            self.widgetprogress.setWindowTitle("جاري تحميل الملف يرجى الانتظار ")
            self.widgetprogress.setGeometry(550, 450, 250, 20)
            self.progressBar = QtWidgets.QProgressBar(self.widgetprogress)
            self.progressBar.setGeometry(10, 10, 200, 10)
            self.progressBar.setMinimum(0)
            self.progressBar.setMaximum(100)
            self.progressBar.setStyleSheet("""QProgressBar
        {
        border: solid grey;
        border-radius: 15px;
        color: black;
        }
        QProgressBar::chunk 
        {
        background-color: #05B8CC;
        border-radius :15px;
        }      """)
            self.progressBar.setAlignment(Qt.AlignmentFlag.AlignCenter)
            self.vbox = QVBoxLayout(self.widgetprogress)
            self.vbox.addWidget(self.progressBar)
            self.timer = QtCore.QTimer()
            self.timer.timeout.connect(self.update_progress)
            self.timer.start(5)  # Update progress every
            self.widgetprogress.show()

        def update_progress(self):
            # Simulate file download progress
            current_value = self.progressBar.value()
            if current_value < 100:
                new_value = current_value + 10
                self.progressBar.setValue(new_value)
                if current_value == 99:
                    self.timer.stop()
                    self.progressBar.close()
                    self.widgetprogress.close()

        #################blé tendre def
        def calcul_ps(self):
            while self.vps.value() >= 69:
                self.rps.setValue(2.60)
                if self.vps.value() <= 69.24:
                    self.rps.setValue(2.60)
                elif self.vps.value() >= 69.25 and self.vps.value() <= 69.49:
                    self.rps.setValue(2.50)
                elif self.vps.value() >= 69.50 and self.vps.value() <= 69.74:
                    self.rps.setValue(2.40)
                elif self.vps.value() >= 69.75 and self.vps.value() <= 69.99:
                    self.rps.setValue(2.30)
                elif self.vps.value() >= 70 and self.vps.value() <= 70.24:
                    self.rps.setValue(2.20)
                elif self.vps.value() >= 70.25 and self.vps.value() <= 70.49:
                    self.rps.setValue(2.10)
                elif self.vps.value() >= 70.50 and self.vps.value() <= 70.74:
                    self.rps.setValue(2.00)
                elif self.vps.value() >= 70.75 and self.vps.value() <= 70.99:
                    self.rps.setValue(1.90)
                elif self.vps.value() >= 71 and self.vps.value() <= 71.24:
                    self.rps.setValue(1.80)
                elif self.vps.value() >= 71.25 and self.vps.value() <= 71.49:
                    self.rps.setValue(1.70)
                elif self.vps.value() >= 71.50 and self.vps.value() <= 71.74:
                    self.rps.setValue(1.60)
                elif self.vps.value() >= 71.75 and self.vps.value() <= 71.99:
                    self.rps.setValue(1.50)
                elif self.vps.value() >= 72 and self.vps.value() <= 72.24:
                    self.rps.setValue(1.40)
                elif self.vps.value() >= 72.25 and self.vps.value() <= 72.49:
                    self.rps.setValue(1.30)
                elif self.vps.value() >= 72.50 and self.vps.value() <= 72.74:
                    self.rps.setValue(1.20)
                elif self.vps.value() >= 72.75 and self.vps.value() <= 72.99:
                    self.rps.setValue(1.10)
                elif self.vps.value() >= 73 and self.vps.value() <= 73.24:
                    self.rps.setValue(1.00)
                elif self.vps.value() >= 73.25 and self.vps.value() <= 73.49:
                    self.rps.setValue(0.90)
                elif self.vps.value() >= 73.50 and self.vps.value() <= 73.74:
                    self.rps.setValue(0.80)
                elif self.vps.value() >= 73.75 and self.vps.value() <= 73.99:
                    self.rps.setValue(0.70)
                elif self.vps.value() >= 74 and self.vps.value() <= 74.24:
                    self.rps.setValue(0.60)
                elif self.vps.value() >= 74.25 and self.vps.value() <= 74.49:
                    self.rps.setValue(0.50)
                elif self.vps.value() >= 74.50 and self.vps.value() <= 74.74:
                    self.rps.setValue(0.40)
                elif self.vps.value() >= 74.75 and self.vps.value() <= 74.99:
                    self.rps.setValue(0.30)
                elif self.vps.value() >= 75 and self.vps.value() <= 75.24:
                    self.rps.setValue(0.20)
                elif self.vps.value() >= 75.25 and self.vps.value() <= 75.49:
                    self.rps.setValue(0.10)
                else:
                    self.rps.setValue(0)
                if self.vps.value() >= 75.51 and self.vps.value() <= 75.75:
                    self.bps.setValue(0.10)
                elif self.vps.value() >= 75.76 and self.vps.value() <= 76:
                    self.bps.setValue(0.20)
                elif self.vps.value() >= 76.01 and self.vps.value() <= 76.25:
                    self.bps.setValue(0.30)
                elif self.vps.value() >= 76.26 and self.vps.value() <= 76.50:
                    self.bps.setValue(0.40)
                elif self.vps.value() >= 76.51 and self.vps.value() <= 76.75:
                    self.bps.setValue(0.50)
                elif self.vps.value() >= 77.76 and self.vps.value() <= 77:
                    self.bps.setValue(0.60)
                elif self.vps.value() >= 77.01 and self.vps.value() <= 77.25:
                    self.bps.setValue(0.70)
                elif self.vps.value() >= 77.26 and self.vps.value() <= 77.50:
                    self.bps.setValue(0.80)
                elif self.vps.value() >= 77.51 and self.vps.value() <= 77.75:
                    self.bps.setValue(0.90)
                elif self.vps.value() >= 77.76 and self.vps.value() <= 78:
                    self.bps.setValue(1.00)
                elif self.vps.value() >= 78.01 and self.vps.value() <= 78.25:
                    self.bps.setValue(1.05)
                elif self.vps.value() >= 78.26 and self.vps.value() <= 78.50:
                    self.bps.setValue(1.10)
                elif self.vps.value() >= 78.51 and self.vps.value() <= 78.75:
                    self.bps.setValue(1.15)
                elif self.vps.value() >= 78.76 and self.vps.value() <= 79:
                    self.bps.setValue(1.20)
                elif self.vps.value() >= 79.01 and self.vps.value() <= 79.25:
                    self.bps.setValue(1.25)
                elif self.vps.value() >= 79.26 and self.vps.value() <= 79.50:
                    self.bps.setValue(1.30)
                elif self.vps.value() >= 79.51 and self.vps.value() <= 79.75:
                    self.bps.setValue(1.35)
                elif self.vps.value() >= 79.76 and self.vps.value() <= 80:
                    self.bps.setValue(1.40)
                elif self.vps.value() >= 80.01 and self.vps.value() <= 80.25:
                    self.bps.setValue(1.42)
                elif self.vps.value() >= 80.26 and self.vps.value() <= 80.50:
                    self.bps.setValue(1.44)
                elif self.vps.value() >= 80.51 and self.vps.value() <= 80.75:
                    self.bps.setValue(1.46)
                elif self.vps.value() >= 80.76 and self.vps.value() <= 81:
                    self.bps.setValue(1.48)
                else:
                    self.bps.setValue(0)
                break

        def humidite_calcul(self):
            while self.vhumidite.value() >= 6.50:
                self.bhumidite.setValue(2.80)
                if self.vhumidite.value() <= 6.99:
                    self.bhumidite.setValue(2.80)
                elif self.vhumidite.value() >= 7 and self.vhumidite.value() <= 7.49:
                    self.bhumidite.setValue(2.60)
                elif self.vhumidite.value() >= 7.50 and self.vhumidite.value() <= 7.99:
                    self.bhumidite.setValue(2.40)
                elif self.vhumidite.value() >= 8.00 and self.vhumidite.value() <= 8.49:
                    self.bhumidite.setValue(2.20)
                elif self.vhumidite.value() >= 8.50 and self.vhumidite.value() <= 8.99:
                    self.bhumidite.setValue(2.00)
                elif self.vhumidite.value() >= 9 and self.vhumidite.value() <= 9.49:
                    self.bhumidite.setValue(1.80)
                elif self.vhumidite.value() >= 9.50 and self.vhumidite.value() <= 9.99:
                    self.bhumidite.setValue(1.60)
                elif self.vhumidite.value() >= 10 and self.vhumidite.value() <= 10.49:
                    self.bhumidite.setValue(1.40)
                elif self.vhumidite.value() >= 10.50 and self.vhumidite.value() <= 10.99:
                    self.bhumidite.setValue(1.20)
                elif self.vhumidite.value() >= 11 and self.vhumidite.value() <= 11.49:
                    self.bhumidite.setValue(1.00)
                elif self.vhumidite.value() >= 11.50 and self.vhumidite.value() <= 11.99:
                    self.bhumidite.setValue(0.80)
                elif self.vhumidite.value() >= 12 and self.vhumidite.value() <= 12.49:
                    self.bhumidite.setValue(0.60)
                elif self.vhumidite.value() >= 12.50 and self.vhumidite.value() <= 12.99:
                    self.bhumidite.setValue(0.40)
                elif self.vhumidite.value() >= 13 and self.vhumidite.value() <= 13.49:
                    self.bhumidite.setValue(0.20)
                else:
                    self.bhumidite.setValue(0.00)
                if self.vhumidite.value() >= 15.01 and self.vhumidite.value() <= 15.50:
                    self.rhumidite.setValue(0.20)
                elif self.vhumidite.value() >= 15.51 and self.vhumidite.value() <= 16:
                    self.rhumidite.setValue(0.40)
                elif self.vhumidite.value() >= 16.01 and self.vhumidite.value() <= 16.50:
                    self.rhumidite.setValue(0.60)
                elif self.vhumidite.value() >= 16.51 and self.vhumidite.value() <= 17:
                    self.rhumidite.setValue(0.80)
                elif self.vhumidite.value() >= 17.01 and self.vhumidite.value() <= 17.50:
                    self.rhumidite.setValue(1.00)
                elif self.vhumidite.value() >= 17.51 and self.vhumidite.value() <= 18:
                    self.rhumidite.setValue(1.20)
                else:
                    self.rhumidite.setValue(0)

                break

        def tota_er(self):
            while self.vtotalprem.value() >= 0.25:
                self.btotalprem.setValue(0.48)
                if self.vtotalprem.value() < 0.26:
                    self.btotalprem.setValue(0.48)
                elif self.vtotalprem.value() >= 0.26 and self.vtotalprem.value() <= 0.50:
                    self.btotalprem.setValue(0.36)
                elif self.vtotalprem.value() >= 0.51 and self.vtotalprem.value() <= 0.75:
                    self.btotalprem.setValue(0.24)
                elif self.vtotalprem.value() >= 0.76 and self.vtotalprem.value() <= 1.00:
                    self.btotalprem.setValue(0.12)
                else:
                    self.btotalprem.setValue(0)
                if self.vtotalprem.value() >= 1.01 and self.vtotalprem.value() <= 1.25:
                    self.rtotalprem.setValue(0.12)
                elif self.vtotalprem.value() >= 1.26 and self.vtotalprem.value() <= 1.50:
                    self.rtotalprem.setValue(0.24)
                elif self.vtotalprem.value() >= 1.51 and self.vtotalprem.value() <= 1.75:
                    self.rtotalprem.setValue(0.36)
                elif self.vtotalprem.value() >= 1.76 and self.vtotalprem.value() <= 2:
                    self.rtotalprem.setValue(0.48)
                elif self.vtotalprem.value() >= 2.01 and self.vtotalprem.value() <= 2.25:
                    self.rtotalprem.setValue(0.60)
                elif self.vtotalprem.value() >= 2.26 and self.vtotalprem.value() <= 2.50:
                    self.rtotalprem.setValue(0.72)
                elif self.vtotalprem.value() >= 2.51 and self.vtotalprem.value() <= 2.75:
                    self.rtotalprem.setValue(0.84)
                elif self.vtotalprem.value() >= 2.76 and self.vtotalprem.value() <= 3:
                    self.rtotalprem.setValue(0.96)
                elif self.vtotalprem.value() >= 3.01 and self.vtotalprem.value() <= 3.25:
                    self.rtotalprem.setValue(1.08)
                elif self.vtotalprem.value() >= 3.26 and self.vtotalprem.value() <= 3.50:
                    self.rtotalprem.setValue(1.20)
                elif self.vtotalprem.value() >= 3.51 and self.vtotalprem.value() <= 3.75:
                    self.rtotalprem.setValue(1.32)
                elif self.vtotalprem.value() >= 3.76 and self.vtotalprem.value() <= 4:
                    self.rtotalprem.setValue(1.44)
                elif self.vtotalprem.value() >= 4.01 and self.vtotalprem.value() <= 4.25:
                    self.rtotalprem.setValue(1.56)
                elif self.vtotalprem.value() >= 4.26 and self.vtotalprem.value() <= 4.50:
                    self.rtotalprem.setValue(1.68)
                elif self.vtotalprem.value() >= 4.51 and self.vtotalprem.value() <= 4.75:
                    self.rtotalprem.setValue(1.80)
                elif self.vtotalprem.value() >= 4.76 and self.vtotalprem.value() <= 5:
                    self.rtotalprem.setValue(1.92)
                else:
                    self.rtotalprem.setValue(0)
                break

        def grain_cassé(self):
            while self.vgraincassé.value() >= 2.01:
                self.rgraincassé.setValue(0.04)
                if self.vgraincassé.value() <= 2.25:
                    self.rgraincassé.setValue(0.04)
                elif self.vgraincassé.value() >= 2.26 and self.vgraincassé.value() <= 2.50:
                    self.rgraincassé.setValue(0.08)
                elif self.vgraincassé.value() >= 2.51 and self.vgraincassé.value() <= 2.75:
                    self.rgraincassé.setValue(0.12)
                elif self.vgraincassé.value() >= 2.76 and self.vgraincassé.value() <= 3.00:
                    self.rgraincassé.setValue(0.16)
                elif self.vgraincassé.value() >= 3.01 and self.vgraincassé.value() <= 3.25:
                    self.rgraincassé.setValue(0.20)
                elif self.vgraincassé.value() >= 3.26 and self.vgraincassé.value() <= 3.50:
                    self.rgraincassé.setValue(0.24)
                elif self.vgraincassé.value() >= 3.51 and self.vgraincassé.value() <= 3.75:
                    self.rgraincassé.setValue(0.28)
                elif self.vgraincassé.value() >= 3.76 and self.vgraincassé.value() <= 4.00:
                    self.rgraincassé.setValue(0.32)
                elif self.vgraincassé.value() >= 4.01 and self.vgraincassé.value() <= 4.25:
                    self.rgraincassé.setValue(0.36)
                elif self.vgraincassé.value() >= 4.26 and self.vgraincassé.value() <= 4.50:
                    self.rgraincassé.setValue(0.40)
                elif self.vgraincassé.value() >= 4.51 and self.vgraincassé.value() <= 4.75:
                    self.rgraincassé.setValue(0.44)
                elif self.vgraincassé.value() >= 4.76 and self.vgraincassé.value() <= 5.00:
                    self.rgraincassé.setValue(0.48)
                elif self.vgraincassé.value() >= 5.01 and self.vgraincassé.value() <= 5.25:
                    self.rgraincassé.setValue(0.54)
                elif self.vgraincassé.value() >= 5.26 and self.vgraincassé.value() <= 5.50:
                    self.rgraincassé.setValue(0.60)
                elif self.vgraincassé.value() >= 5.51 and self.vgraincassé.value() <= 5.75:
                    self.rgraincassé.setValue(0.66)
                elif self.vgraincassé.value() >= 5.76 and self.vgraincassé.value() <= 6.00:
                    self.rgraincassé.setValue(0.72)
                elif self.vgraincassé.value() >= 6.01 and self.vgraincassé.value() <= 6.25:
                    self.rgraincassé.setValue(0.78)
                elif self.vgraincassé.value() >= 6.26 and self.vgraincassé.value() <= 6.50:
                    self.rgraincassé.setValue(0.84)
                elif self.vgraincassé.value() >= 6.51 and self.vgraincassé.value() <= 6.75:
                    self.rgraincassé.setValue(0.90)
                elif self.vgraincassé.value() >= 6.76 and self.vgraincassé.value() <= 7.00:
                    self.rgraincassé.setValue(0.96)
                elif self.vgraincassé.value() >= 7.01 and self.vgraincassé.value() <= 7.25:
                    self.rgraincassé.setValue(1.02)
                elif self.vgraincassé.value() >= 7.26 and self.vgraincassé.value() <= 7.50:
                    self.rgraincassé.setValue(1.08)
                elif self.vgraincassé.value() >= 7.51 and self.vgraincassé.value() <= 7.75:
                    self.rgraincassé.setValue(1.14)
                elif self.vgraincassé.value() >= 7.76 and self.vgraincassé.value() <= 8.00:
                    self.rgraincassé.setValue(1.20)
                else:
                    self.rgraincassé.setValue(0)
                break

        def total_eme(self):
            while self.vtotaldem.value() >= 5.01:
                self.rtotaldem.setValue(0.05)
                if self.vtotaldem.value() <= 5.25:
                    self.rtotaldem.setValue(0.05)
                elif self.vtotaldem.value() >= 5.26 and self.vtotaldem.value() <= 5.50:
                    self.rtotaldem.setValue(0.10)
                elif self.vtotaldem.value() >= 5.51 and self.vtotaldem.value() <= 5.75:
                    self.rtotaldem.setValue(0.15)
                elif self.vtotaldem.value() >= 5.76 and self.vtotaldem.value() <= 6:
                    self.rtotaldem.setValue(0.20)
                elif self.vtotaldem.value() >= 6.01 and self.vtotaldem.value() <= 6.25:
                    self.rtotaldem.setValue(0.25)
                elif self.vtotaldem.value() >= 6.26 and self.vtotaldem.value() <= 6.50:
                    self.rtotaldem.setValue(0.30)
                elif self.vtotaldem.value() >= 6.51 and self.vtotaldem.value() <= 6.75:
                    self.rtotaldem.setValue(0.35)
                elif self.vtotaldem.value() >= 6.76 and self.vtotaldem.value() <= 7:
                    self.rtotaldem.setValue(0.40)
                elif self.vtotaldem.value() >= 7.01 and self.vtotaldem.value() <= 7.25:
                    self.rtotaldem.setValue(0.45)
                elif self.vtotaldem.value() >= 7.26 and self.vtotaldem.value() <= 7.50:
                    self.rtotaldem.setValue(0.50)
                elif self.vtotaldem.value() >= 7.51 and self.vtotaldem.value() <= 7.75:
                    self.rtotaldem.setValue(0.55)
                elif self.vtotaldem.value() >= 7.76 and self.vtotaldem.value() <= 8:
                    self.rtotaldem.setValue(0.60)
                elif self.vtotaldem.value() >= 8.01 and self.vtotaldem.value() <= 8.25:
                    self.rtotaldem.setValue(0.65)
                elif self.vtotaldem.value() >= 8.26 and self.vtotaldem.value() <= 8.50:
                    self.rtotaldem.setValue(0.70)
                elif self.vtotaldem.value() >= 8.51 and self.vtotaldem.value() <= 8.75:
                    self.rtotaldem.setValue(0.75)
                elif self.vtotaldem.value() >= 8.76 and self.vtotaldem.value() <= 9:
                    self.rtotaldem.setValue(0.80)
                elif self.vtotaldem.value() >= 9.01 and self.vtotaldem.value() <= 9.25:
                    self.rtotaldem.setValue(0.85)
                elif self.vtotaldem.value() >= 9.26 and self.vtotaldem.value() <= 9.50:
                    self.rtotaldem.setValue(0.90)
                elif self.vtotaldem.value() >= 9.51 and self.vtotaldem.value() <= 9.75:
                    self.rtotaldem.setValue(0.95)
                elif self.vtotaldem.value() >= 9.76 and self.vtotaldem.value() <= 10:
                    self.rtotaldem.setValue(1.00)
                elif self.vtotaldem.value() >= 10.01 and self.vtotaldem.value() <= 10.25:
                    self.rtotaldem.setValue(1.08)
                elif self.vtotaldem.value() >= 10.26 and self.vtotaldem.value() <= 10.50:
                    self.rtotaldem.setValue(1.16)
                elif self.vtotaldem.value() >= 10.51 and self.vtotaldem.value() <= 10.75:
                    self.rtotaldem.setValue(1.24)
                elif self.vtotaldem.value() >= 10.76 and self.vtotaldem.value() <= 11:
                    self.rtotaldem.setValue(1.32)
                elif self.vtotaldem.value() >= 11.01 and self.vtotaldem.value() <= 11.25:
                    self.rtotaldem.setValue(1.40)
                elif self.vtotaldem.value() >= 11.26 and self.vtotaldem.value() <= 11.50:
                    self.rtotaldem.setValue(1.48)
                elif self.vtotaldem.value() >= 11.51 and self.vtotaldem.value() <= 11.75:
                    self.rtotaldem.setValue(1.56)
                elif self.vtotaldem.value() >= 11.76 and self.vtotaldem.value() <= 12:
                    self.rtotaldem.setValue(1.64)
                elif self.vtotaldem.value() >= 12.01 and self.vtotaldem.value() <= 12.25:
                    self.rtotalprem.setValue(1.72)
                elif self.vtotaldem.value() >= 12.26 and self.vtotaldem.value() <= 12.50:
                    self.rtotaldem.setValue(1.80)
                elif self.vtotaldem.value() >= 12.51 and self.vtotaldem.value() <= 12.75:
                    self.rtotaldem.setValue(1.88)
                elif self.vtotaldem.value() >= 12.76 and self.vtotaldem.value() <= 13:
                    self.rtotaldem.setValue(1.96)
                elif self.vtotaldem.value() >= 13.01 and self.vtotaldem.value() <= 13.25:
                    self.rtotalprem.setValue(2.04)
                elif self.vtotaldem.value() >= 13.26 and self.vtotaldem.value() <= 13.50:
                    self.rtotaldem.setValue(2.12)
                elif self.vtotaldem.value() >= 13.51 and self.vtotaldem.value() <= 13.75:
                    self.rtotaldem.setValue(2.20)
                elif self.vtotaldem.value() >= 13.76 and self.vtotaldem.value() <= 14:
                    self.rtotaldem.setValue(2.28)
                elif self.vtotaldem.value() >= 14.01 and self.vtotaldem.value() <= 14.25:
                    self.rtotalprem.setValue(2.36)
                elif self.vtotaldem.value() >= 14.26 and self.vtotaldem.value() <= 14.50:
                    self.rtotaldem.setValue(2.44)
                elif self.vtotaldem.value() >= 14.51 and self.vtotaldem.value() <= 14.75:
                    self.rtotaldem.setValue(2.52)
                elif self.vtotaldem.value() >= 14.76 and self.vtotaldem.value() <= 15:
                    self.rtotaldem.setValue(2.60)
                else:
                    self.rtotaldem.value(0)
                break

        def plus(self):
            a = self.bps.value()
            b = self.bhumidite.value()
            c = self.btotalprem.value()
            c1 = self.btotaldem.value()
            d = self.rgraincassé.value()
            e = self.vgraincassé.value()
            f = self.vgrainmaigre.value()
            g = self.vgrainechaude.value()
            h = self.vgraigermé.value()
            i = self.vgrainpunaisé.value()
            j = self.vgrainpiqué.value()
            k = self.vgrainbouté.value()
            l = self.vgrainboutef.value()
            m = self.vgrainmouchté.value()
            n = self.vgrainetrangé.value()
            o = self.rtotaldem.value()
            t = self.rtotalprem.value()
            p = self.vdébrisvé.value()
            q = self.vmatiéreinrt.value()
            r = self.vgrainchaufé.value()
            s = self.vgrainsanvaleur.value()
            v = self.vgraincarré.value()
            aa = self.rps.value()
            ab = self.rhumidite.value()
            ac = self.vgrainnuisible.value()
            vtotaldemm = f + g + h + i + j + k + l + m + n
            totalbonifica = a + b + c + c1
            totalrefaction = o + t + d
            self.rtotalboni.setValue(totalrefaction)
            self.btotalboni.setValue(totalbonifica)
            self.vtotalprem.setValue(p + q + r + s + v + ac)
            self.vtotaldem.setValue(vtotaldemm)
            if self.vgraincassé.value() >= 2.01 and self.vgraincassé.value() <= 15:
                self.vtotaldem.setValue(vtotaldemm)
            else:
                self.vtotaldem.setValue(e + vtotaldemm)

            # vtotalpremm=p+q+r+s

        def all_calcul(self):
            self.tota_er()
            self.total_eme()
            self.calcul_ps()
            self.humidite_calcul()
            self.grain_cassé()
            self.plus()

        def clear_all(self):
            self.vgrainnuisible.clear()
            self.vgrainnuisible.setValue(0)
            self.vgrainchaufé.clear()
            self.vgrainchaufé.setValue(0)
            self.vps.clear()
            self.bps.clear()
            self.rps.clear()
            self.vgrainboutef.clear()
            self.vgrainbouté.clear()
            self.vhumidite.clear()
            self.bhumidite.clear()
            self.vgrainsanvaleur.clear()
            self.vgraincarré.clear()
            self.vtotalprem.clear()
            self.btotalprem.clear()
            self.vgraincassé.clear()
            self.rgraincassé.clear()
            self.vtotaldem.clear()
            self.btotalprem.clear()
            self.rtotaldem.clear()
            self.btotaldem.clear()
            self.vgrainpunaisé.clear()
            self.vgrainpunaisé.setValue(0)
            self.vgraigermé.clear()
            self.vgraigermé.setValue(0)
            self.vgrainetrangé.clear()
            self.vgrainmouchté.clear()
            self.vgrainmaigre.clear()
            self.vgrainechaude.clear()
            self.vgrainbouté.clear()
            self.vdébrisvé.clear()
            self.vmatiéreinrt.clear()
            self.vgrainpiqué.clear()
            self.vgrainpiqué.setValue(0)
            self.vps.setValue(0)
            self.bps.setValue(0)
            self.vhumidite.setValue(0)
            self.bhumidite.setValue(0)
            self.vgrainsanvaleur.setValue(0)
            self.vgraincarré.setValue(0)
            self.vtotalprem.setValue(0)
            self.btotalprem.setValue(0)
            self.vgraincassé.setValue(0)
            self.vgrainboutef.setValue(0)
            self.rgraincassé.setValue(0)
            self.vtotaldem.setValue(0)
            self.btotalprem.setValue(0)
            self.rtotaldem.setValue(0)
            self.btotaldem.setValue(0)
            self.vgrainetrangé.setValue(0)
            self.vgrainmouchté.setValue(0)
            self.vgrainmaigre.setValue(0)
            self.vgrainechaude.setValue(0)
            self.vdébrisvé.setValue(0)
            self.vmatiéreinrt.setValue(0)
            self.vgrainbouté.setValue(0)

        def docx_file(self):
            self.doc = DocxTemplate("_bulletin moulin/_bulletin moulin_Blé TENDRE/invoice_template.docx")
            decad = self.decadecombo.currentText()
            bbps = self.bps.text()
            ebps = self.vps.text()
            ergot = self.vergot.value()
            nuisible = self.vgrainnuisible.value()
            mouln = self.moulincombo.currentText()
            pntcl = self.pointcollectecombo.currentText()
            esps = self.éspécecombo.currentText()
            qntt = self.quantitetxt.text()
            agrcm = self.agréeeurcombo.currentText()
            tnvv = self.vhumidite.text()
            debritvegetaux = self.vdébrisvé.value()
            matierinert = self.vmatiéreinrt.value()
            grainchaufe = self.vgrainchaufé.value()
            grainsanvaleur = self.vgrainsanvaleur.value()
            graincarie = self.vgraincarré.value()
            graingerme = self.vgraigermé.value()
            grainpunaisés = self.vgrainpunaisé.value()
            ttv1 = self.vtotalprem.text()
            ttlb1 = self.btotalprem.text()
            ttlr1 = self.rtotalprem.text()
            grcassév = self.vgraincassé.text()
            grcasséb = self.bgraincassé.text()
            rfgss = self.rgraincassé.text()
            tnb = self.bhumidite.text()
            grmgre = self.vgrainmaigre.text()
            grechd = self.vgrainechaude.text()
            grmch = self.vgrainmouchté.text()
            gretrng = self.vgrainetrangé.text()
            total2v = self.vtotaldem.text()
            total2r = self.rtotaldem.text()
            total2b = self.btotaldem.text()
            grnmgr = self.vgrainmaigre.value()
            grechd = self.vgrainechaude.value()
            grgrm = self.vgraigermé.value()
            grpns = self.vgrainpunaisé.value()
            grpq = self.vgrainpiqué.value()
            grbt = self.vgrainbouté.value()
            grnbtf = self.vgrainboutef.value()
            totalbonification = self.btotalboni.value()
            totalrefaction = self.rtotalboni.value()
            datte = self.dateedite.text()
            self.doc.render(
                {"tt1r": ttlr1, "tttb": totalbonification, "tttr": totalrefaction, "verg": ergot, "vnsb": nuisible,
                 "grpn": grainpunaisés, "grch": grainchaufe, "grsn": grainsanvaleur, "vgc": graincarie,
                 "grg": graingerme, "grbt": grnbtf, "grbtf": grbt, "dbv": debritvegetaux, "mtiv": matierinert,
                 "grpq": grpq, "grpn": grpns, "grg": grgrm, "gehv": grechd, "gmx": grnmgr, "psb": bbps, "tt1v": ttv1,
                 "tneb": tnb, "tnev": tnvv, "psv": ebps, "gr": agrcm, "esp": esps, "mmmmmmmmmmmmmmmmm": mouln,
                 "pntc": pntcl, "qtt": qntt, "dt": datte, "num": decad, "tt1b": ttlb1, "gcv": grcassév, "gcb": grcasséb,
                 "gcr": rfgss, "tt2v": total2v, "tt2r": total2r, "tt2b": total2b, "getv": gretrng, "gmv": grmch,
                 "gehv": grechd, "gmx": grmgre})
            doc_name = mouln + "-" + datetime.datetime.now().strftime("%m-%y") + "-" + decad + ".docx"
            # self.doc.save("_bulletin moulin/_bulletin moulin_Blé TENDRE/" + self.doc_name)
            path, _ = QFileDialog.getSaveFileName(None, "Enregistrer la fiche", doc_name, "Fichiers DOCX (*.docx)")
            if path:
                self.doc.save(path)
                msgbox = QtWidgets.QMessageBox()
                msgbox.setWindowTitle('confirmation')
                msgbox.setText('Le fichier a été enregistré avec succès.')
                msgbox.exec()

        def printer(self):
            self.doc = DocxTemplate("_bulletin moulin/_bulletin moulin_Blé TENDRE/invoice_template.docx")
            decad = self.decadecombo.currentText()
            bbps = self.bps.text()
            ebps = self.vps.text()
            ergot = self.vergot.value()
            nuisible = self.vgrainnuisible.value()
            mouln = self.moulincombo.currentText()
            pntcl = self.pointcollectecombo.currentText()
            esps = self.éspécecombo.currentText()
            qntt = self.quantitetxt.text()
            agrcm = self.agréeeurcombo.currentText()
            tnvv = self.vhumidite.text()
            debritvegetaux = self.vdébrisvé.value()
            matierinert = self.vmatiéreinrt.value()
            grainchaufe = self.vgrainchaufé.value()
            grainsanvaleur = self.vgrainsanvaleur.value()
            graincarie = self.vgraincarré.value()
            graingerme = self.vgraigermé.value()
            grainpunaisés = self.vgrainpunaisé.value()
            ttv1 = self.vtotalprem.text()
            ttlb1 = self.btotalprem.text()
            ttlr1 = self.rtotalprem.text()
            grcassév = self.vgraincassé.text()
            grcasséb = self.bgraincassé.text()
            rfgss = self.rgraincassé.text()
            tnb = self.bhumidite.text()
            grmgre = self.vgrainmaigre.value()
            grechd = self.vgrainechaude.value()
            grmch = self.vgrainmouchté.value()
            gretrng = self.vgrainetrangé.text()
            total2v = self.vtotaldem.text()
            total2r = self.rtotaldem.text()
            total2b = self.btotaldem.text()
            grnmgr = self.vgrainmaigre.value()
            grechd = self.vgrainechaude.value()
            grgrm = self.vgraigermé.value()
            grpns = self.vgrainpunaisé.value()
            grpq = self.vgrainpiqué.value()
            grbt = self.vgrainbouté.value()
            grnbtf = self.vgrainboutef.value()
            totalbonification = self.btotalboni.value()
            totalrefaction = self.rtotalboni.value()
            datte = self.dateedite.text()
            self.doc.render(
                {"tt1r": ttlr1, "tttb": totalbonification, "tttr": totalrefaction, "verg": ergot, "vnsb": nuisible,
                 "grpn": grainpunaisés, "grch": grainchaufe, "grsn": grainsanvaleur, "vgc": graincarie,
                 "grg": graingerme,
                 "grbt": grnbtf, "grbtf": grbt, "dbv": debritvegetaux, "mtiv": matierinert, "grpq": grpq, "grpn": grpns,
                 "grg": grgrm, "gehv": grechd, "gmx": grnmgr, "psb": bbps, "tt1v": ttv1, "tneb": tnb, "tnev": tnvv,
                 "psv": ebps, "gr": agrcm, "esp": esps, "mmmmmmmmmmmmmmmmm": mouln, "pntc": pntcl, "qtt": qntt,
                 "dt": datte,
                 "num": decad, "tt1b": ttlb1, "gcv": grcassév, "gcb": grcasséb, "gcr": rfgss, "tt2v": total2v,
                 "tt2r": total2r, "tt2b": total2b, "getv": gretrng, "gmv": grmch, "gehv": grechd, "gmv": grmgre})
            self.doc_name = mouln + "-" + datetime.datetime.now().strftime("%m") + "-" + decad + ".docx"
            doc_names = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
            doc_pdf = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False).name
            self.doc.save(doc_names)
            try:
                if doc_names:
                    a = self.progress_bar()
                    sys.stderr = open("consoleoutput.log", "w")
                    convert(doc_names, doc_pdf)
                    # Open the resulting .pdf file using the default associated application
                    # os.startfile(doc_pdf, 'open')
                    app_path = 'C:\\Program Files\\Okular\\bin\\okular.exe'
                    subprocess.Popen([app_path, doc_pdf])
            except Exception as e:
                print(e)

        def mouli_window(self, MainWindow):
            MainWindow.setObjectName("MainWindow")
            MainWindow.resize(1350, 700)
            MainWindow.setWindowIcon(QIcon("images/Picsart_23-03-13_18-53-05-983.ico"))
            MainWindow.setStyleSheet("""QToolTip
            {
                border: 1px solid #76797C;
                background-color: #fff8b0;
                color: white;
                padding: 5px;
                opacity: 200;
            }
            QWidget
            {
                color: #eff0f1;
                background-color: #ffffff;
                selection-background-color:#3daee9;
                selection-color: #eff0f1;
                background-clip: border;
                border-image: none;
                border: 0px transparent black;
                outline: 0;
            }

            QWidget:item:hover
            {
                background-color: #3daee9;
                color: #eff0f1;
            }

            QWidget:item:selected
            {
                background-color: #3daee9;
            }



            QWidget:disabled
            {
                color: #454545;
                background-color: #31363b;
            }

            QAbstractItemView
            {
                alternate-background-color: #31363b;
                color: #eff0f1;
                border: 1px solid 3A3939;
                border-radius: 2px;
            }

            QWidget:focus, QMenuBar:focus
            {
                border: 1px solid #3daee9;
            }
            QTabWidget::pane 
            {
             border: 2px solid red; 
             }

            QTabWidget:focus, QCheckBox:focus, QRadioButton:focus, QSlider:focus
            {
                border: none;
            }

            QLineEdit
            {
                background-color: #232629;
                padding: 1px;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 2px;
                color: #eff0f1;
            }
            QDoubleSpinBox
            {
                background-color: #232629;
                padding: 1px;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 2px;
                color:#eff0f1;

            }
            QDoubleSpinBox::drop-down
            {
                subcontrol-origin: padding;
                subcontrol-position: top right;
                width: 1px;

                border-left-width: 0px;
                border-left-color: #232629;
                border-left-style: solid;
                border-top-right-radius: 1px;
                border-bottom-right-radius: 1px;
            }



            QGroupBox {
                border:1px solid #76797C;
                border-radius: 2px;
                margin-top: 20px;
            }

            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top center;
                padding-left: 10px;
                padding-right: 10px;
                padding-top: 10px;
            }

            QAbstractScrollArea
            {
                border-radius: 2px;
                border: 1px solid #76797C;
                background-color: transparent;
            }

            QScrollBar:horizontal
            {
                height: 15px;
                margin: 3px 15px 3px 15px;
                border: 1px transparent #2A2929;
                border-radius: 4px;
                background-color: #2A2929;
            }

            QScrollBar::handle:horizontal
            {
                background-color: #605F5F;
                min-width: 5px;
                border-radius: 4px;
            }

            QScrollBar::add-line:horizontal
            {
                margin: 0px 3px 0px 3px;
                border-image: url(:/qss_icons/Dark_rc/right_arrow_disabled.png);
                width: 10px;
                height: 10px;
                subcontrol-position: right;
                subcontrol-origin: margin;
            }

            QScrollBar::sub-line:horizontal
            {
                margin: 0px 3px 0px 3px;
                border-image: url(:/qss_icons/Dark_rc/left_arrow_disabled.png);
                height: 10px;
                width: 10px;
                subcontrol-position: left;
                subcontrol-origin: margin;
            }

            QScrollBar::add-line:horizontal:hover,QScrollBar::add-line:horizontal:on
            {
                border-image: url(:/qss_icons/Dark_rc/right_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: right;
                subcontrol-origin: margin;
            }


            QScrollBar::sub-line:horizontal:hover, QScrollBar::sub-line:horizontal:on
            {
                border-image: url(:/qss_icons/Dark_rc/left_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: left;
                subcontrol-origin: margin;
            }

            QScrollBar::up-arrow:horizontal, QScrollBar::down-arrow:horizontal
            {
                background: none;
            }


            QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal
            {
                background: none;
            }

            QScrollBar:vertical
            {
                background-color: #2A2929;
                width: 15px;
                margin: 15px 3px 15px 3px;
                border: 1px transparent #2A2929;
                border-radius: 4px;
            }

            QScrollBar::handle:vertical
            {
                background-color: #605F5F;
                min-height: 5px;
                border-radius: 4px;
            }

            QScrollBar::sub-line:vertical
            {
                margin: 3px 0px 3px 0px;
                border-image: url(:/qss_icons/Dark_rc/up_arrow_disabled.png);
                height: 10px;
                width: 10px;
                subcontrol-position: top;
                subcontrol-origin: margin;
            }

            QScrollBar::add-line:vertical
            {
                margin: 3px 0px 3px 0px;
                border-image: url(:/qss_icons/Dark_rc/down_arrow_disabled.png);
                height: 10px;
                width: 10px;
                subcontrol-position: bottom;
                subcontrol-origin: margin;
            }

            QScrollBar::sub-line:vertical:hover,QScrollBar::sub-line:vertical:on
            {

                border-image: url(:/qss_icons/Dark_rc/up_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: top;
                subcontrol-origin: margin;
            }


            QScrollBar::add-line:vertical:hover, QScrollBar::add-line:vertical:on
            {
                border-image: url(:/qss_icons/Dark_rc/down_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: bottom;
                subcontrol-origin: margin;
            }

            QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical
            {
                background: none;
            }


            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical
            {
                background: none;
            }

            QTextEdit
            {
                background-color: #232629;
                color: #eff0f1;
                border: 1px solid #76797C;
            }

            QPlainTextEdit
            {
                background-color: #232629;;
                color: #eff0f1;
                border-radius: 2px;
                border: 1px solid #76797C;
            }

            QHeaderView::section
            {
                background-color: #76797C;
                color: #eff0f1;
                padding: 5px;
                border: 1px solid #76797C;
            }

            QSizeGrip {
                image: url(:/qss_icons/Dark_rc/sizegrip.png);
                width: 12px;
                height: 12px;
            }


            QMainWindow::separator
            {
                background-color: #31363b;
                color: white;
                padding-left: 4px;
                spacing: 2px;
                border: 1px dashed #76797C;
            }

            QMainWindow::separator:hover
            {

                background-color: #787876;
                color: white;
                padding-left: 4px;
                border: 1px solid #76797C;
                spacing: 2px;
            }


            QMenu::separator
            {
                height: 1px;
                background-color: #76797C;
                color: white;
                padding-left: 4px;
                margin-left: 10px;
                margin-right: 5px;
            }


            QFrame
            {
                border-radius: 2px;
                border: 1px solid #76797C;
            }

            QFrame[frameShape="0"]
            {
                border-radius: 2px;
                border: 1px transparent #76797C;
            }

            QStackedWidget
            {
                border: 1px transparent black;
            }


            QPushButton
            {
                color: #b1b1b1;
                background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646);
                border-width: 1px;
                border-color: #1e1e1e;
                border-style: solid;
                border-radius: 6;
                padding: 3px;
                font-size: 12px;
                padding-left: 5px;
                padding-right: 5px;
                min-width: 40px;

            }

            QPushButton:disabled
            {
                background-color: #31363b;
                border-width: 1px;
                border-color: #454545;
                border-style: solid;
                padding-top: 5px;
                padding-bottom: 5px;
                padding-left: 10px;
                padding-right: 10px;
                border-radius: 2px;
                color: #454545;
            }

            QPushButton:focus {
                background-color: #3daee9;
                color: white;
            }

            QPushButton:pressed
            {
                background-color: #3daee9;
                padding-top: -15px;
                padding-bottom: -17px;
            }



            QPushButton:checked{
                background-color: #76797C;
                border-color: #6A6969;
            }

            QComboBox {
    background-color: #ffffff;
    border: 1px solid #76797C;
    color:#000000;
    border-radius: 0.25em;
    padding: 0.10em 0.10em;
    font-size:12px;
    font-weight:bold;
    cursor: pointer;
}

QComboBox::drop-down {
    subcontrol-origin: padding;
    subcontrol-position: top right;
    width: 1.3em;
    border-left: 0px solid #777;
    border-radius: 0.25em;
}

QComboBox::drop-down::icon {
    image: url('E:/pythonProject_moullin-application.3.5/images/down-arroww.png');
}

        QComboBox:on
        {
            padding-top: 0px;
            padding-left: 0px;        
            selection-background-color: #e4f0f1;
        }
        QComboBox QAbstractItemView
        {
            background-color: #ffffff;
            border-radius: 2px;
            border: 1px solid #76797C;
            color:#000000;
            selection-background-color: #000000;
        }

            QComboBox:hover,QDoubleSpinBox:Hover,QPushButton:hover,QAbstractSpinBox:hover,QLineEdit:hover,QTextEdit:hover,QPlainTextEdit:hover,QAbstractView:hover,QTreeView:hover
            {
                border: 1px solid #ff8c00;
                color: #eff0f1;
            }




            QLabel
            {
                border: 2px solid black;
            }

            QTabWidget{
                border: 0px transparent black;
            }

            QTabWidget::pane {
                border: 1px solid #76797C;
                padding: 5px;
                margin: 0px;
            }

            QTabBar
            {
                qproperty-drawBase: 0;
                left: 5px; /* move to the right by 5px */
                border-radius: 3px;
            }

            QTabBar:focus
            {
                border: 0px transparent black;
            }

            QTabBar::close-button  {
                image: url(:/qss_icons/Dark_rc/close.png);
                background: transparent;
            }

            QTabBar::close-button:hover
            {
                image: url(:/qss_icons/Dark_rc/close-hover.png);
                background: transparent;
            }

            QTabBar::close-button:pressed {
                image: url(:/qss_icons/Dark_rc/close-pressed.png);
                background: transparent;
            }

            /* TOP TABS */
            QTabBar::tab:top {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-bottom: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                min-width: 50px;
                border-top-left-radius: 2px;
                border-top-right-radius: 2px;
            }

            QTabBar::tab:top:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-bottom: 1px transparent black;
                border-top-left-radius: 2px;
                border-top-right-radius: 2px;    
            }

            QTabBar::tab:top:!selected:hover {
                background-color: #3daee9;
            }

            /* BOTTOM TABS */
            QTabBar::tab:bottom {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-top: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                border-bottom-left-radius: 2px;
                border-bottom-right-radius: 2px;
                min-width: 50px;
            }

            QTabBar::tab:bottom:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-top: 1px transparent black;
                border-bottom-left-radius: 2px;
                border-bottom-right-radius: 2px;
            }

            QTabBar::tab:bottom:!selected:hover {
                background-color: #3daee9;
            }

            /* LEFT TABS */
            QTabBar::tab:left {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-left: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                border-top-right-radius: 2px;
                border-bottom-right-radius: 2px;
                min-height: 50px;
            }

            QTabBar::tab:left:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-left: 1px transparent black;
                border-top-right-radius: 2px;
                border-bottom-right-radius: 2px;
            }

            QTabBar::tab:left:!selected:hover {
                background-color: #3daee9;
            }


            /* RIGHT TABS */
            QTabBar::tab:right {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-right: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                border-top-left-radius: 2px;
                border-bottom-left-radius: 2px;
                min-height: 50px;
            }

            QTabBar::tab:right:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-right: 1px transparent black;
                border-top-left-radius: 2px;
                border-bottom-left-radius: 2px;
            }

            QTabBar::tab:right:!selected:hover {
                background-color: #3daee9;
            }

            QTabBar QToolButton::right-arrow:enabled {
                 image: url(:/qss_icons/Dark_rc/right_arrow.png);
             }

             QTabBar QToolButton::left-arrow:enabled {
                 image: url(:/qss_icons/Dark_rc/left_arrow.png);
             }

            QTabBar QToolButton::right-arrow:disabled {
                 image: url(:/qss_icons/Dark_rc/right_arrow_disabled.png);
             }

             QTabBar QToolButton::left-arrow:disabled {
                 image: url(:/qss_icons/Dark_rc/left_arrow_disabled.png);
             }


            QDockWidget {
                background: #31363b;
                border: 1px solid #403F3F;
                titlebar-close-icon: url(:/qss_icons/Dark_rc/close.png);
                titlebar-normal-icon: url(:/qss_icons/Dark_rc/undock.png);
            }

            QDockWidget::close-button, QDockWidget::float-button {
                border: 1px solid transparent;
                border-radius: 2px;
                background: transparent;
            }

            QDockWidget::close-button:hover, QDockWidget::float-button:hover {
                background: rgba(255, 255, 255, 10);
            }

            QDockWidget::close-button:pressed, QDockWidget::float-button:pressed {
                padding: 1px -1px -1px 1px;
                background: rgba(255, 255, 255, 10);
            }


            QSlider::groove:horizontal {
                border: 1px solid #565a5e;
                height: 4px;
                background: #565a5e;
                margin: 0px;
                border-radius: 2px;
            }

            QSlider::handle:horizontal {
                background: #232629;
                border: 1px solid #565a5e;
                width: 16px;
                height: 16px;
                margin: -8px 0;
                border-radius: 9px;
            }

            QSlider::groove:vertical {
                border: 1px solid #565a5e;
                width: 4px;
                background: #565a5e;
                margin: 0px;
                border-radius: 3px;
            }

            QSlider::handle:vertical {
                background: #232629;
                border: 1px solid #565a5e;
                width: 16px;
                height: 16px;
                margin: 0 -8px;
                border-radius: 9px;
            }

            QToolButton {
                background-color: transparent;
                border: 1px transparent #76797C;
                border-radius: 2px;
                margin: 3px;
                padding: 5px;
            }

            QToolButton[popupMode="1"] { /* only for MenuButtonPopup */
             padding-right: 20px; /* make way for the popup button */
             border: 1px #76797C;
             border-radius: 5px;
            }

            QToolButton[popupMode="2"] { /* only for InstantPopup */
             padding-right: 10px; /* make way for the popup button */
             border: 1px #76797C;
            }


            QToolButton:hover, QToolButton::menu-button:hover {
                background-color: transparent;
                border: 1px solid #3daee9;
                padding: 5px;
            }

            QToolButton:checked, QToolButton:pressed,
                    QToolButton::menu-button:pressed {
                background-color: #3daee9;
                border: 1px solid #3daee9;
                padding: 5px;
            }

            /* the subcontrol below is used only in the InstantPopup or DelayedPopup mode */
            QToolButton::menu-indicator {
                background-color:ff8c00;
                top: -7px; left: -2px; /* shift it a bit */
            }

            /* the subcontrols below are used only in the MenuButtonPopup mode */
            QToolButton::menu-button {
                border: 1px transparent #76797C;
                border-top-right-radius: 6px;
                border-bottom-right-radius: 6px;
                /* 16px width + 4px for border = 20px allocated above */
                width: 16px;
                outline: none;
            }

            QToolButton::menu-arrow {
               background-color:ff8c00;
            }

            QToolButton::menu-arrow:open {
                border: 1px solid #76797C;
            }

            QPushButton::menu-indicator  {
                subcontrol-origin: padding;
                subcontrol-position: bottom right;
                left: 8px;
            }

            QTableView
            {
                border: 1px solid #76797C;
                gridline-color: #31363b;
                background-color: #232629;
            }


            QTableView, QHeaderView
            {
                border-radius: 0px;
            }

            QTableView::item:pressed, QListView::item:pressed, QTreeView::item:pressed  {
                background: #3daee9;
                color: #eff0f1;
            }

            QTableView::item:selected:active, QTreeView::item:selected:active, QListView::item:selected:active  {
                background: #3daee9;
                color: #eff0f1;
            }


            QHeaderView
            {
                background-color: #31363b;
                border: 1px transparent;
                border-radius: 0px;
                margin: 0px;
                padding: 0px;

            }

            QHeaderView::section  {
                background-color: #31363b;
                color: #eff0f1;
                padding: 5px;
                border: 1px solid #76797C;
                border-radius: 0px;
                text-align: center;
            }

            QHeaderView::section::vertical::first, QHeaderView::section::vertical::only-one
            {
                border-top: 1px solid #76797C;
            }

            QHeaderView::section::vertical
            {
                border-top: transparent;
            }

            QHeaderView::section::horizontal::first, QHeaderView::section::horizontal::only-one
            {
                border-left: 1px solid #76797C;
            }

            QHeaderView::section::horizontal
            {
                border-left: transparent;
            }


            QHeaderView::section:checked
             {
                color: white;
                background-color: #334e5e;
             }

             /* style the sort indicator */
            QHeaderView::down-arrow {
                image: url(:/qss_icons/Dark_rc/down_arrow.png);
            }

            QHeaderView::up-arrow {
                image: url(:/qss_icons/Dark_rc/up_arrow.png);
            }


            QTableCornerButton::section {
                background-color: #31363b;
                border: 1px transparent #76797C;
                border-radius: 0px;
            }

            QToolBox  {
                padding: 5px;
                border: 1px transparent black;
            }

            QToolBox::tab {
                color: #eff0f1;
                background-color: #31363b;
                border: 1px solid #76797C;
                border-bottom: 1px transparent #31363b;
                border-top-left-radius: 5px;
                border-top-right-radius: 5px;
            }

            QToolBox::tab:selected { /* italicize selected tabs */
                font: italic;
                background-color: #31363b;
                border-color: #3daee9;
             }

            QStatusBar::item {
                border: 0px transparent dark;
             }


            QFrame[height="3"], QFrame[width="3"] {
                background-color: #76797C;
            }




            QDateEdit
            {
                selection-background-color:#31363b;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 2px;
                padding: 1px;
                min-width: 75px;
            }

            QDateEdit:on
            {
                padding-top: 2px;
                padding-left: 2px;
                selection-background-color: #4a4a4a;
            }

            QDateEdit QAbstractItemView
            {
                background-color: #ff8c00;
                border-radius: 2px;
                border: 1px solid #3375A3;
                selection-background-color:ff8c00;
            }

            QDateEdit::drop-down
            {
                subcontrol-origin: padding;
                subcontrol-position: top right;
                width: 15px;
                border-left-width: 0px;
                border-left-color: darkgray;
                border-left-style: solid;
                border-top-right-radius: 3px;
                border-bottom-right-radius: 3px;
            }""")
            self.centralwidget = QtWidgets.QWidget(MainWindow)
            self.centralwidget.setObjectName("centralwidget")
            self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
            self.horizontalLayout.setObjectName("horizontalLayout")
            self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
            self.moulinwidget = QtWidgets.QTabWidget(self.centralwidget)
            self.moulinwidget.setObjectName("moulinwidget")

            self.bltendretab = QtWidgets.QWidget()
            self.bltendretab.setStyleSheet("""QToolTip
    {
        border: 1px solid #76797C;
        background-color:  #fff8b0;
        color: white;
        padding: 5px;
        opacity: 200;
    }

    QWidget
    {
        color: #000000;
        background-color:  #D8F9DB;
        selection-background-color:#3daee9;
        selection-color: #eff0f1;
        background-clip: border;
        border-image: none;
        border: 0px transparent black;
        outline: 0;
    }

    QWidget:item:hover
    {
        background-color: #3daee9;
        color: #eff0f1;
    }

    QWidget:item:selected
    {
        background-color: #3daee9;
    }



    QWidget:disabled
    {
        color: #454545;
        background-color: #31363b;
    }

    QAbstractItemView
    {
        alternate-background-color: #31363b;
        color: #eff0f1;
        border: 1px solid 3A3939;
        border-radius: 2px;
    }

    QWidget:focus, QMenuBar:focus
    {
        border: 1px solid #3daee9;
    }

    QTabWidget:focus, QCheckBox:focus, QRadioButton:focus, QSlider:focus
    {
        border: none;
    }

    QLineEdit
    {
        background-color: #ffffff;
        padding: 1px;
        border-style: solid;
        border: 1px solid #000000;
        border-radius: 2px;
        color: #000000;
        font-size:12px;
        font-weight:bold;
    }
    QDoubleSpinBox
    {
        background-color: #ffffff;
        padding: 1px;
        border-style: solid;
        border: 2px solid #76797C;
        border-radius: 4px;
        border-color: #000000;
        color:#000000;
        font-size:12px;
        font-weight:bold;

    }

    QDoubleSpinBox:focus{
        background-color: #f2f2f2;
        border-style: solid;
        border: 2px solid #76797C;
        border-radius: 4px;
        border-color: #ff8c00;
    }

    QDoubleSpinBox::drop-down
    {
        subcontrol-origin: padding;
        subcontrol-position: top right;
        width: 1px;

        border-left-width: 0px;
        border-left-color: #232629;
        border-left-style: solid;
        border-top-right-radius: 1px;
        border-bottom-right-radius: 1px;
    }



    QGroupBox {
        border:1px solid #76797C;
        border-radius: 2px;
        margin-top: 20px;
    }

    QGroupBox::title {
        subcontrol-origin: margin;
        subcontrol-position: top center;
        padding-left: 10px;
        padding-right: 10px;
        padding-top: 10px;
    }

    QAbstractScrollArea
    {
        border-radius: 2px;
        border: 1px solid #76797C;
        background-color: transparent;
    }

    QScrollBar:horizontal
    {
        height: 15px;
        margin: 3px 15px 3px 15px;
        border: 1px transparent #2A2929;
        border-radius: 4px;
        background-color: #2A2929;
    }

    QScrollBar::handle:horizontal
    {
        background-color: #605F5F;
        min-width: 5px;
        border-radius: 4px;
    }

    QScrollBar::add-line:horizontal
    {
        margin: 0px 3px 0px 3px;
        border-image: url(:/qss_icons/Dark_rc/right_arrow_disabled.png);
        width: 10px;
        height: 10px;
        subcontrol-position: right;
        subcontrol-origin: margin;
    }

    QScrollBar::sub-line:horizontal
    {
        margin: 0px 3px 0px 3px;
        border-image: url(:/qss_icons/Dark_rc/left_arrow_disabled.png);
        height: 10px;
        width: 10px;
        subcontrol-position: left;
        subcontrol-origin: margin;
    }

    QScrollBar::add-line:horizontal:hover,QScrollBar::add-line:horizontal:on
    {
        border-image: url(:/qss_icons/Dark_rc/right_arrow.png);
        height: 10px;
        width: 10px;
        subcontrol-position: right;
        subcontrol-origin: margin;
    }


    QScrollBar::sub-line:horizontal:hover, QScrollBar::sub-line:horizontal:on
    {
        border-image: url(:/qss_icons/Dark_rc/left_arrow.png);
        height: 10px;
        width: 10px;
        subcontrol-position: left;
        subcontrol-origin: margin;
    }

    QScrollBar::up-arrow:horizontal, QScrollBar::down-arrow:horizontal
    {
        background: none;
    }


    QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal
    {
        background: none;
    }

    QScrollBar:vertical
    {
        background-color: #2A2929;
        width: 15px;
        margin: 15px 3px 15px 3px;
        border: 1px transparent #2A2929;
        border-radius: 4px;
    }

    QScrollBar::handle:vertical
    {
        background-color: #605F5F;
        min-height: 5px;
        border-radius: 4px;
    }

    QScrollBar::sub-line:vertical
    {
        margin: 3px 0px 3px 0px;
        border-image: url(:/qss_icons/Dark_rc/up_arrow_disabled.png);
        height: 10px;
        width: 10px;
        subcontrol-position: top;
        subcontrol-origin: margin;
    }

    QScrollBar::add-line:vertical
    {
        margin: 3px 0px 3px 0px;
        border-image: url(:/qss_icons/Dark_rc/down_arrow_disabled.png);
        height: 10px;
        width: 10px;
        subcontrol-position: bottom;
        subcontrol-origin: margin;
    }

    QScrollBar::sub-line:vertical:hover,QScrollBar::sub-line:vertical:on
    {

        border-image: url(:/qss_icons/Dark_rc/up_arrow.png);
        height: 10px;
        width: 10px;
        subcontrol-position: top;
        subcontrol-origin: margin;
    }


    QScrollBar::add-line:vertical:hover, QScrollBar::add-line:vertical:on
    {
        border-image: url(:/qss_icons/Dark_rc/down_arrow.png);
        height: 10px;
        width: 10px;
        subcontrol-position: bottom;
        subcontrol-origin: margin;
    }

    QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical
    {
        background: none;
    }


    QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical
    {
        background: none;
    }

    QTextEdit
    {
        background-color: #ffffff;
        color: #000000;
        border: 1px solid #76797C;
        font-size:12px;
        font-weight:bold;
    }

    QPlainTextEdit
    {
        background-color: #232629;;
        color: #eff0f1;
        border-radius: 2px;
        border: 1px solid #76797C;
    }

    QHeaderView::section
    {
        background-color: #76797C;
        color: #eff0f1;
        padding: 5px;
        border: 1px solid #76797C;
    }

    QSizeGrip {
        image: url(:/qss_icons/Dark_rc/sizegrip.png);
        width: 12px;
        height: 12px;
    }


    QMainWindow::separator
    {
        background-color: #31363b;
        color: white;
        padding-left: 4px;
        spacing: 2px;
        border: 1px dashed #76797C;
    }

    QMainWindow::separator:hover
    {

        background-color: #787876;
        color: white;
        padding-left: 4px;
        border: 1px solid #76797C;
        spacing: 2px;
    }


    QMenu::separator
    {
        height: 1px;
        background-color: #76797C;
        color: white;
        padding-left: 4px;
        margin-left: 10px;
        margin-right: 5px;
    }


    QFrame
    {
        border-radius: 2px;
        border: 1px solid #76797C;
    }

    QFrame[frameShape="0"]
    {
        border-radius: 2px;
        border: 1px transparent #76797C;
    }

    QStackedWidget
    {
        border: 1px transparent black;
    }


    QPushButton
    {
        color: #000000;
        background-color:#84dbc8;
        border-width: 1px;
        border-color: #1e1e1e;
        border-style: solid;
        border-radius: 6;
        padding: 3px;
        font-size: 12px;
        padding-left: 5px;
        padding-right: 5px;
        min-width: 40px;

    }

    QPushButton:disabled
    {
        background-color: #31363b;
        border-width: 1px;
        border-color: #454545;
        border-style: solid;
        padding-top: 5px;
        padding-bottom: 5px;
        padding-left: 10px;
        padding-right: 10px;
        border-radius: 2px;
        color: #454545;
    }

    QPushButton:focus {
        background-color: #3daee9;
        color: white;
    }

    QPushButton:pressed
    {
        background-color: #3daee9;
        padding-top: -15px;
        padding-bottom: -17px;
    }

    QComboBox {
    background-color: #ffffff;
    border: 1px solid #76797C;
    color:#000000;
    border-radius: 0.25em;
    padding: 0.50em 0.50em;
    font-size:12px;
    font-weight:bold;
    cursor: pointer;
}

QComboBox::drop-down {
    subcontrol-origin: padding;
    subcontrol-position: top right;
    width: 1.3em;
    border-left: 0px solid #777;
    border-radius: 0.25em;
}

QComboBox::drop-down::icon {
    image: url('E:/pythonProject_moullin-application.3.5/images/down-arroww.png');
}

        QComboBox:on
        {
            padding-top: 1px;
            padding-left: 1px;
            selection-background-color: #e4f0f1;
        }
        QComboBox QAbstractItemView
        {
            background-color: #ffffff;
            border-radius: 2px;
            border: 1px solid #76797C;
            color:#000000;
            selection-background-color: #000000;
        }

    QPushButton:checked{
        background-color: #76797C;
        border-color: #6A6969;
    }

    QComboBox:hover,QDoubleSpinBox:Hover,QPushButton:hover,QAbstractSpinBox:hover,QLineEdit:hover,QTextEdit:hover,QPlainTextEdit:hover,QAbstractView:hover,QTreeView:hover
    {
        border: 1px solid #ff8c00;
        color: #000000;
    }



    QLabel
    {
        border: 2px solid black;
        font-size:13px;
        font-weight:bold;
    }

    QTabWidget{
        border: 0px transparent black;
    }

    QTabWidget::pane {
        border: 1px solid #76797C;
        padding: 5px;
        margin: 0px;
    }

    QTabBar
    {
        qproperty-drawBase: 0;
        left: 5px; /* move to the right by 5px */
        border-radius: 3px;
    }

    QTabBar:focus
    {
        border: 0px transparent black;
    }

    QTabBar::close-button  {
        image: url(:/qss_icons/Dark_rc/close.png);
        background: transparent;
    }

    QTabBar::close-button:hover
    {
        image: url(:/qss_icons/Dark_rc/close-hover.png);
        background: transparent;
    }

    QTabBar::close-button:pressed {
        image: url(:/qss_icons/Dark_rc/close-pressed.png);
        background: transparent;
    }

    /* TOP TABS */
    QTabBar::tab:top {
        color: #eff0f1;
        border: 1px solid #76797C;
        border-bottom: 1px transparent black;
        background-color: #31363b;
        padding: 5px;
        min-width: 50px;
        border-top-left-radius: 2px;
        border-top-right-radius: 2px;
    }

    QTabBar::tab:top:!selected
    {
        color: #eff0f1;
        background-color: #54575B;
        border: 1px solid #76797C;
        border-bottom: 1px transparent black;
        border-top-left-radius: 2px;
        border-top-right-radius: 2px;    
    }

    QTabBar::tab:top:!selected:hover {
        background-color: #3daee9;
    }

    /* BOTTOM TABS */
    QTabBar::tab:bottom {
        color: #eff0f1;
        border: 1px solid #76797C;
        border-top: 1px transparent black;
        background-color: #31363b;
        padding: 5px;
        border-bottom-left-radius: 2px;
        border-bottom-right-radius: 2px;
        min-width: 50px;
    }

    QTabBar::tab:bottom:!selected
    {
        color: #eff0f1;
        background-color: #54575B;
        border: 1px solid #76797C;
        border-top: 1px transparent black;
        border-bottom-left-radius: 2px;
        border-bottom-right-radius: 2px;
    }

    QTabBar::tab:bottom:!selected:hover {
        background-color: #3daee9;
    }

    /* LEFT TABS */
    QTabBar::tab:left {
        color: #eff0f1;
        border: 1px solid #76797C;
        border-left: 1px transparent black;
        background-color: #31363b;
        padding: 5px;
        border-top-right-radius: 2px;
        border-bottom-right-radius: 2px;
        min-height: 50px;
    }

    QTabBar::tab:left:!selected
    {
        color: #eff0f1;
        background-color: #54575B;
        border: 1px solid #76797C;
        border-left: 1px transparent black;
        border-top-right-radius: 2px;
        border-bottom-right-radius: 2px;
    }

    QTabBar::tab:left:!selected:hover {
        background-color: #3daee9;
    }


    /* RIGHT TABS */
    QTabBar::tab:right {
        color: #eff0f1;
        border: 1px solid #76797C;
        border-right: 1px transparent black;
        background-color: #31363b;
        padding: 5px;
        border-top-left-radius: 2px;
        border-bottom-left-radius: 2px;
        min-height: 50px;
    }

    QTabBar::tab:right:!selected
    {
        color: #eff0f1;
        background-color: #54575B;
        border: 1px solid #76797C;
        border-right: 1px transparent black;
        border-top-left-radius: 2px;
        border-bottom-left-radius: 2px;
    }

    QTabBar::tab:right:!selected:hover {
        background-color: #3daee9;
    }

    QTabBar QToolButton::right-arrow:enabled {
         image: url(:/qss_icons/Dark_rc/right_arrow.png);
     }

     QTabBar QToolButton::left-arrow:enabled {
         image: url(:/qss_icons/Dark_rc/left_arrow.png);
     }

    QTabBar QToolButton::right-arrow:disabled {
         image: url(:/qss_icons/Dark_rc/right_arrow_disabled.png);
     }

     QTabBar QToolButton::left-arrow:disabled {
         image: url(:/qss_icons/Dark_rc/left_arrow_disabled.png);
     }


    QDockWidget {
        background: #31363b;
        border: 1px solid #403F3F;
        titlebar-close-icon: url(:/qss_icons/Dark_rc/close.png);
        titlebar-normal-icon: url(:/qss_icons/Dark_rc/undock.png);
    }

    QDockWidget::close-button, QDockWidget::float-button {
        border: 1px solid transparent;
        border-radius: 2px;
        background: transparent;
    }

    QDockWidget::close-button:hover, QDockWidget::float-button:hover {
        background: rgba(255, 255, 255, 10);
    }

    QDockWidget::close-button:pressed, QDockWidget::float-button:pressed {
        padding: 1px -1px -1px 1px;
        background: rgba(255, 255, 255, 10);
    }


    QSlider::groove:horizontal {
        border: 1px solid #565a5e;
        height: 4px;
        background: #565a5e;
        margin: 0px;
        border-radius: 2px;
    }

    QSlider::handle:horizontal {
        background: #232629;
        border: 1px solid #565a5e;
        width: 16px;
        height: 16px;
        margin: -8px 0;
        border-radius: 9px;
    }

    QSlider::groove:vertical {
        border: 1px solid #565a5e;
        width: 4px;
        background: #565a5e;
        margin: 0px;
        border-radius: 3px;
    }

    QSlider::handle:vertical {
        background: #232629;
        border: 1px solid #565a5e;
        width: 16px;
        height: 16px;
        margin: 0 -8px;
        border-radius: 9px;
    }

    QToolButton {
        background-color: transparent;
        border: 1px transparent #76797C;
        border-radius: 2px;
        margin: 3px;
        padding: 5px;
    }

    QToolButton[popupMode="1"] { /* only for MenuButtonPopup */
     padding-right: 20px; /* make way for the popup button */
     border: 1px #76797C;
     border-radius: 5px;
    }

    QToolButton[popupMode="2"] { /* only for InstantPopup */
     padding-right: 10px; /* make way for the popup button */
     border: 1px #76797C;
    }


    QToolButton:hover, QToolButton::menu-button:hover {
        background-color: transparent;
        border: 1px solid #3daee9;
        padding: 5px;
    }

    QToolButton:checked, QToolButton:pressed,
            QToolButton::menu-button:pressed {
        background-color: #3daee9;
        border: 1px solid #3daee9;
        padding: 5px;
    }

    /* the subcontrol below is used only in the InstantPopup or DelayedPopup mode */
    QToolButton::menu-indicator {
        background-color:ff8c00;
        top: -7px; left: -2px; /* shift it a bit */
    }

    /* the subcontrols below are used only in the MenuButtonPopup mode */
    QToolButton::menu-button {
        border: 1px transparent #76797C;
        border-top-right-radius: 6px;
        border-bottom-right-radius: 6px;
        /* 16px width + 4px for border = 20px allocated above */
        width: 16px;
        outline: none;
    }

    QToolButton::menu-arrow {
       background-color:ff8c00;
    }

    QToolButton::menu-arrow:open {
        border: 1px solid #76797C;
    }

    QPushButton::menu-indicator  {
        subcontrol-origin: padding;
        subcontrol-position: bottom right;
        left: 8px;
    }

    QTableView
    {
        border: 1px solid #76797C;
        gridline-color: #31363b;
        background-color: #232629;
    }


    QTableView, QHeaderView
    {
        border-radius: 0px;
    }

    QTableView::item:pressed, QListView::item:pressed, QTreeView::item:pressed  {
        background: #3daee9;
        color: #eff0f1;
    }

    QTableView::item:selected:active, QTreeView::item:selected:active, QListView::item:selected:active  {
        background: #3daee9;
        color: #eff0f1;
    }


    QHeaderView
    {
        background-color: #31363b;
        border: 1px transparent;
        border-radius: 0px;
        margin: 0px;
        padding: 0px;

    }

    QHeaderView::section  {
        background-color: #31363b;
        color: #eff0f1;
        padding: 5px;
        border: 1px solid #76797C;
        border-radius: 0px;
        text-align: center;
    }

    QHeaderView::section::vertical::first, QHeaderView::section::vertical::only-one
    {
        border-top: 1px solid #76797C;
    }

    QHeaderView::section::vertical
    {
        border-top: transparent;
    }

    QHeaderView::section::horizontal::first, QHeaderView::section::horizontal::only-one
    {
        border-left: 1px solid #76797C;
    }

    QHeaderView::section::horizontal
    {
        border-left: transparent;
    }


    QHeaderView::section:checked
     {
        color: white;
        background-color: #334e5e;
     }

     /* style the sort indicator */
    QHeaderView::down-arrow {
        image: url(:/qss_icons/Dark_rc/down_arrow.png);
    }

    QHeaderView::up-arrow {
        image: url(:/qss_icons/Dark_rc/up_arrow.png);
    }


    QTableCornerButton::section {
        background-color: #31363b;
        border: 1px transparent #76797C;
        border-radius: 0px;
    }

    QToolBox  {
        padding: 5px;
        border: 1px transparent black;
    }

    QToolBox::tab {
        color: #eff0f1;
        background-color: #31363b;
        border: 1px solid #76797C;
        border-bottom: 1px transparent #31363b;
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
    }

    QToolBox::tab:selected { /* italicize selected tabs */
        font: italic;
        background-color: #31363b;
        border-color: #3daee9;
     }

    QStatusBar::item {
        border: 0px transparent dark;
     }


    QFrame[height="3"], QFrame[width="3"] {
        background-color: #76797C;
    }




    QDateEdit
    {
        selection-background-color:#ffffff;
        border-style: solid;
        border: 1px solid #000000;
        border-radius: 2px;
        padding: 1px;
        min-width: 75px;
    }

    QDateEdit:on
    {
        padding-top: 2px;
        padding-left: 2px;
        selection-background-color: #ffffff;
    }

    QDateEdit QAbstractItemView
    {
        background-color: #ffffff;
        border-radius: 2px;
        border: 1px solid #3375A3;
        selection-background-color:000000;
    }

    QDateEdit::drop-down
    {
        subcontrol-origin: padding;
        subcontrol-position: top right;
        width: 15px;
        border-left-width: 0px;
        border-left-color: #000000;
        border-left-style: solid;
        border-top-right-radius: 3px;
        border-bottom-right-radius: 3px;
    }""")
            self.bltendretab.setObjectName("bltendretab")
            self.moulinwidget.addTab(self.bltendretab, "")

            self.font = QtGui.QFont()
            self.font.setBold(True)
            self.font.setPointSize(10)
            ##########text bul# ettin######
            self.paramétre = QtWidgets.QLabel("Paramètre", self.bltendretab)
            self.paramétre.move(30, 145)
            self.paramétre.resize(80, 20)
            self.paramétre.setFont(self.font)

            self.txtpsfont = QtGui.QFont()
            self.txtpsfont.setBold(True)
            self.txtpsfont.setPointSize(9)
            ################Limites(sans bon ni réf)###############
            self.valeur = QtWidgets.QLabel("""Limite ssans bon ni réf)""", self.bltendretab)
            self.valeur.move(165, 127)
            self.valeur.resize(200, 55)
            self.valeur.setFont(self.font)
            ######################Limites(sans bon ni réf)################
            self.ps = QtWidgets.QLineEdit("Poids spécifique (kg/hl):   (75.500-75.899)", self.bltendretab,
                                          readOnly=True)
            self.ps.resize(319, 20)
            self.ps.move(30, 167)
            self.ps.setFont(self.txtpsfont)
            self.ps.setStyleSheet(" border: 2px solid bleu ;border-radius: 4px;padding: 0px")
            ###############################humidite#############
            self.humidite = QtWidgets.QLineEdit("Teneur en eau(%): (13.5-15)", self.bltendretab, readOnly=True)
            self.humidite.resize(319, 20)
            self.humidite.move(30, 188)
            self.humidite.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.humidite.setFont(self.txtpsfont)

            #######################ergot#########################
            self.ergot = QtWidgets.QLineEdit("Ergo(% :\t<0.001 ", self.bltendretab, readOnly=True)
            self.ergot.resize(319, 20)
            self.ergot.move(30, 209)
            self.ergot.setStyleSheet("background-color: #232629")
            self.ergot.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.ergot.setFont(self.txtpsfont)

            #########################Graines nuisibles (%)##########
            self.grainnuisible = QtWidgets.QLineEdit("Graines nuisibles(%):\t<0.001", self.bltendretab, readOnly=True)
            self.grainnuisible.resize(319, 20)
            self.grainnuisible.move(30, 230)
            self.grainnuisible.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.grainnuisible.setFont(self.txtpsfont)
            #############################Débris végétaux (%)########
            self.débrisvé = QtWidgets.QLineEdit("Débris végétaux(%):     ", self.bltendretab, readOnly=True)
            self.débrisvé.resize(319, 20)
            self.débrisvé.move(30, 251)
            self.débrisvé.setFont(self.txtpsfont)
            self.débrisvé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Matière inerte (%)################
            self.matiéreinrt = QtWidgets.QLineEdit("Matière inerte(%):", self.bltendretab, readOnly=True)
            self.matiéreinrt.resize(319, 20)
            self.matiéreinrt.move(30, 272)
            self.matiéreinrt.setFont(self.txtpsfont)
            self.matiéreinrt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ################################Grains chauffés (%)############################
            self.grainchaufé = QtWidgets.QLineEdit("Grains chauffés(%):    ", self.bltendretab, readOnly=True)
            self.grainchaufé.resize(319, 20)
            self.grainchaufé.move(30, 293)
            self.grainchaufé.setFont(self.txtpsfont)
            self.grainchaufé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################Grains sans valeur (%)#######################################
            self.grainsanvaleur = QtWidgets.QLineEdit("Grains sans valeur(%):", self.bltendretab, readOnly=True)
            self.grainsanvaleur.resize(319, 20)
            self.grainsanvaleur.move(30, 314)
            self.grainsanvaleur.setFont(self.txtpsfont)
            self.grainsanvaleur.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Grains cariés##########################################
            self.graincarré = QtWidgets.QLineEdit("Grains cariés:   ", self.bltendretab, readOnly=True)
            self.graincarré.resize(319, 20)
            self.graincarré.move(30, 335)
            self.graincarré.setFont(self.txtpsfont)
            self.graincarré.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")

            #######################################Total(%) 1er#####################################################
            self.totalprem = QtWidgets.QLineEdit("TOTAL 1ére CAT:     ≤1", self.bltendretab, readOnly=True)
            self.totalprem.resize(319, 20)
            self.totalprem.move(30, 356)
            self.totalprem.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.totalprem.setFont(self.txtpsfont)
            ##############################################Grains cassés (%) #########################################################
            self.graincassé = QtWidgets.QLineEdit("Grains cassés(%):   ≤2", self.bltendretab, readOnly=True)
            self.graincassé.move(30, 377)
            self.graincassé.resize(319, 20)
            self.graincassé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.graincassé.setFont(self.txtpsfont)
            #########################################################Gains échaudés (%)#####################################################
            self.grainechaude = QtWidgets.QLineEdit("Gains échaudés(%):   ", self.bltendretab, readOnly=True)
            self.grainechaude.move(30, 419)
            self.grainechaude.resize(319, 20)
            self.grainechaude.setFont(self.txtpsfont)
            self.grainechaude.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #####################################################Grains maigres (%)########################################################
            self.grainmaigre = QtWidgets.QLineEdit("Grains maigres(%):", self.bltendretab, readOnly=True)
            self.grainmaigre.move(30, 398)
            self.grainmaigre.resize(319, 20)
            self.grainmaigre.setFont(self.txtpsfont)
            self.grainmaigre.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##########################################################Grains germés (%)###################################################
            self.graigermé = QtWidgets.QLineEdit("Grains germés(%): ≤2", self.bltendretab, readOnly=True)
            self.graigermé.move(30, 440)
            self.graigermé.resize(319, 20)
            self.graigermé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.graigermé.setFont(self.txtpsfont)
            ##########################################################Grain punaisés (%)#########################################################
            self.grainpunaisé = QtWidgets.QLineEdit("Grain punaisés(%): ≤1", self.bltendretab, readOnly=True)
            self.grainpunaisé.move(30, 461)
            self.grainpunaisé.resize(319, 20)
            self.grainpunaisé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.grainpunaisé.setFont(self.txtpsfont)

            #######################################################################Grains piqués (%)##########################################
            self.grainpiqué = QtWidgets.QLineEdit("Grains piqués(%):  ", self.bltendretab, readOnly=True)
            self.grainpiqué.move(30, 482)
            self.grainpiqué.resize(319, 20)
            self.grainpiqué.setFont(self.txtpsfont)
            self.grainpiqué.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################################################Grains boutés « faible » (%)#######################################
            self.grainboutef = QtWidgets.QLineEdit("Grains boutés « faible » (%):", self.bltendretab, readOnly=True)
            self.grainboutef.move(30, 503)
            self.grainboutef.resize(319, 20)
            self.grainboutef.setFont(self.txtpsfont)
            self.grainboutef.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ####################################################################Grains boutés  « forte » (%)######################################
            self.grainbouté = QtWidgets.QLineEdit("Grains boutés  « forte » (%):", self.bltendretab, readOnly=True)
            self.grainbouté.move(30, 524)
            self.grainbouté.resize(319, 20)
            self.grainbouté.setFont(self.txtpsfont)
            self.grainbouté.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##################################################Grains mouchetés (%)########################################################
            self.grainmouchté = QtWidgets.QLineEdit("Grains mouchetés (%):", self.bltendretab, readOnly=True)
            self.grainmouchté.move(30, 545)
            self.grainmouchté.resize(319, 20)
            self.grainmouchté.setFont(self.txtpsfont)
            self.grainmouchté.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################################Grain étrangers Utilisables pour le bétail (%)##################################################
            self.grainetrangé = QtWidgets.QLineEdit("Grain étrangers Utilisables pour le bétail (%):  ",
                                                    self.bltendretab, readOnly=True)
            self.grainetrangé.move(30, 566)
            self.grainetrangé.resize(319, 20)
            self.grainetrangé.setFont(self.txtpsfont)
            self.grainetrangé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ######################################################################Total(%)######################################
            self.totaldem = QtWidgets.QLineEdit("Total(%)  Imp2eme cat   ≤5", self.bltendretab, readOnly=True)
            self.totaldem.move(30, 587)
            self.totaldem.resize(319, 20)
            self.totaldem.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.totaldem.setFont(self.txtpsfont)
            ###########################################################################################################
            self.totalbetr = QtWidgets.QLineEdit("\tTotal des Bonifications et Réfactions", self.bltendretab,
                                                 readOnly=True)
            self.totalbetr.move(30, 608)
            self.totalbetr.resize(419, 25)
            self.totalbetr.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.totalbetr.setFont(self.txtpsfont)
            #################label valeure##############
            self.valeur = QtWidgets.QLabel("valeur", self.bltendretab)
            self.valeur.move(350, 144)
            self.valeur.resize(100, 20)
            self.valeur.setFont(self.font)
            ######################Limites(sans bon ni réf)################
            self.vps = QtWidgets.QDoubleSpinBox(self.bltendretab)
            self.vps.setRange(60, 81.00)
            self.vps.setSpecialValueText(' ')
            self.vps.resize(100, 20)
            self.vps.move(350, 167)
            self.vps.setFont(self.txtpsfont)
            # self.vps.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ###############################humidite#############
            self.vhumidite = QtWidgets.QDoubleSpinBox(self.bltendretab)
            self.vhumidite.setRange(4, 18)
            self.vhumidite.resize(100, 20)
            self.vhumidite.setSpecialValueText(' ')
            self.vhumidite.move(350, 188)
            self.vhumidite.setFont(self.txtpsfont)
            # self.vhumidite.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################ergot#########################
            self.vergot = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vergot.setRange(0, 1)
            self.vergot.setSpecialValueText(' ')
            self.vergot.resize(100, 20)
            self.vergot.move(350, 209)
            # self.vergot.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Graines nuisibles (%)##########
            self.vgrainnuisible = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vgrainnuisible.setRange(0, 1)
            self.vgrainnuisible.setSpecialValueText(' ')
            self.vgrainnuisible.resize(100, 20)
            self.vgrainnuisible.move(350, 230)
            self.vgrainnuisible.setFont(self.txtpsfont)
            # self.vgrainnuisible.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #############################Débris végétaux (%)########
            self.vdébrisvé = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vdébrisvé.setRange(0, 10)
            self.vdébrisvé.setSpecialValueText(' ')
            self.vdébrisvé.resize(100, 20)
            self.vdébrisvé.move(350, 251)
            self.vdébrisvé.setFont(self.txtpsfont)
            # self.vdébrisvé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Matière inerte (%)################
            self.vmatiéreinrt = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vmatiéreinrt.setRange(0, 10)
            self.vmatiéreinrt.setSpecialValueText(' ')
            self.vmatiéreinrt.resize(100, 20)
            self.vmatiéreinrt.move(350, 272)
            self.vmatiéreinrt.setFont(self.txtpsfont)
            # self.vmatiéreinrt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ################################Grains chauffés (%)############################
            self.vgrainchaufé = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vgrainchaufé.setRange(0, 7)
            self.vgrainchaufé.setSpecialValueText(' ')
            self.vgrainchaufé.resize(100, 20)
            self.vgrainchaufé.move(350, 293)
            self.vgrainchaufé.setFont(self.txtpsfont)
            # self.vgrainchaufé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################Grains sans valeur (%)#######################################
            self.vgrainsanvaleur = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vgrainsanvaleur.setSpecialValueText(' ')
            self.vgrainsanvaleur.setRange(0, 10)
            self.vgrainsanvaleur.resize(100, 20)
            self.vgrainsanvaleur.move(350, 314)
            self.vgrainsanvaleur.setFont(self.txtpsfont)
            # self.vgrainsanvaleur.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Grains cariés##########################################
            self.vgraincarré = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vgraincarré.setSpecialValueText(' ')
            self.vgraincarré.setFont(self.txtpsfont)
            self.vgraincarré.setRange(0, 10)
            self.vgraincarré.resize(100, 20)
            self.vgraincarré.move(350, 335)
            # self.vgraincarré.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Total(%) 1er#####################################################
            self.vtotalprem = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=True)
            self.vtotalprem.setSpecialValueText(' ')
            self.vtotalprem.setRange(0, 20)
            self.vtotalprem.resize(100, 20)
            self.vtotalprem.move(350, 356)
            self.vtotalprem.setFont(self.txtpsfont)
            # self.vtotalprem.setStyleSheet("background-color:##c7d3cf;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##############################################Grains cassés (%) #########################################################
            self.vgraincassé = QtWidgets.QDoubleSpinBox(self.bltendretab)
            self.vgraincassé.move(350, 377)
            self.vgraincassé.resize(100, 20)
            self.vgraincassé.setRange(0, 20)
            self.vgraincassé.setSpecialValueText(" ")
            self.vgraincassé.setFont(self.txtpsfont)
            # self.vgraincassé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################################################Gains échaudés (%)#####################################################
            self.vgrainechaude = QtWidgets.QDoubleSpinBox(self.bltendretab)
            self.vgrainechaude.setSpecialValueText(" ")
            self.vgrainechaude.setRange(0, 10)
            self.vgrainechaude.move(350, 419)
            self.vgrainechaude.resize(100, 20)
            self.vgrainechaude.setFont(self.txtpsfont)
            # self.vgrainechaude.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #####################################################Grains maigres (%)########################################################
            self.vgrainmaigre = QtWidgets.QDoubleSpinBox(self.bltendretab)
            self.vgrainmaigre.setRange(0, 10)
            self.vgrainmaigre.setSpecialValueText(" ")
            self.vgrainmaigre.move(350, 398)
            self.vgrainmaigre.setFont(self.txtpsfont)
            self.vgrainmaigre.resize(100, 20)
            # self.vgrainmaigre.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grains germés (%)###################################################
            self.vgraigermé = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vgraigermé.move(350, 440)
            self.vgraigermé.resize(100, 20)
            self.vgraigermé.setSpecialValueText('  ')
            self.vgraigermé.setFont(self.txtpsfont)
            # self.vgraigermé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grain punaisés (%)#########################################################
            self.vgrainpunaisé = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vgrainpunaisé.move(350, 461)
            self.vgrainpunaisé.resize(100, 20)
            self.vgrainpunaisé.setSpecialValueText('   ')
            self.vgrainpunaisé.setFont(self.txtpsfont)
            # self.vgrainpunaisé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains piqués (%)##########################################
            self.vgrainpiqué = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vgrainpiqué.move(350, 482)
            self.vgrainpiqué.resize(100, 20)
            self.vgrainpiqué.setSpecialValueText('  ')
            self.vgrainpiqué.setFont(self.txtpsfont)
            # self.vgrainpiqué.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains boutés « faible » (%)#######################################
            self.vgrainboutef = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vgrainboutef.move(350, 503)
            self.vgrainboutef.resize(100, 20)
            self.vgrainboutef.setRange(0, 10)
            self.vgrainboutef.setSpecialValueText('  ')
            self.vgrainboutef.setFont(self.txtpsfont)
            # self.vgrainboutef.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ####################################################################Grains boutés  « forte » (%)######################################
            self.vgrainbouté = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=False)
            self.vgrainbouté.move(350, 524)
            self.vgrainbouté.resize(100, 20)
            self.vgrainbouté.setRange(0, 10)
            self.vgrainbouté.setSpecialValueText('  ')
            self.vgrainboutef.setFont(self.txtpsfont)
            # self.vgrainbouté.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##################################################Grains mouchetés (%)########################################################
            self.vgrainmouchté = QtWidgets.QDoubleSpinBox(self.bltendretab)
            self.vgrainmouchté.move(350, 545)
            self.vgrainmouchté.resize(100, 20)
            self.vgrainmouchté.setRange(0, 5)
            self.vgrainmouchté.setSpecialValueText(' ')
            self.vgrainmouchté.setFont(self.txtpsfont)
            # self.vgrainmouchté.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ########################################################Grain étrangers Utilisables pour le bétail (%)##################################################
            self.vgrainetrangé = QtWidgets.QDoubleSpinBox(self.bltendretab)
            self.vgrainetrangé.move(350, 566)
            self.vgrainetrangé.resize(100, 20)
            self.vgrainetrangé.setRange(0, 10)
            self.vgrainetrangé.setSpecialValueText(' ')
            self.vgrainetrangé.setFont(self.txtpsfont)
            # self.vgrainetrangé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ######################################################################Total(%)######################################
            self.vtotaldem = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=True)
            self.vtotaldem.setRange(1, 30)
            self.vtotaldem.move(350, 587)
            self.vtotaldem.resize(100, 20)
            self.vtotaldem.setSpecialValueText(' ')
            self.vtotaldem.setFont(self.txtpsfont)
            # self.vtotaldem.setStyleSheet("background-color:#ffffff;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################################réfaction##############################################
            #################label valeure##############
            self.rvaleur = QtWidgets.QLabel("Réfaction", self.bltendretab)
            self.rvaleur.move(530, 145)
            self.rvaleur.resize(80, 20)
            self.rvaleur.setFont(self.font)
            ######################Limites(sans bon ni réf)################
            self.rps = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=True)
            self.rps.setSpecialValueText(" ")
            self.rps.setFont(self.txtpsfont)
            self.rps.resize(100, 20)
            self.rps.move(530, 167)
            self.rps.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ###############################humidite#############
            self.rhumidite = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=True)
            self.rhumidite.setSpecialValueText(" ")
            self.rhumidite.setFont(self.txtpsfont)
            self.rhumidite.resize(100, 20)
            self.rhumidite.move(530, 188)
            self.rhumidite.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################ergot#########################
            self.rergot = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.rergot.resize(100, 20)
            self.rergot.move(530, 209)
            self.rergot.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #########################Graines nuisibles (%)##########
            self.rgrainnuisible = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.rgrainnuisible.resize(100, 20)
            self.rgrainnuisible.setFont(self.txtpsfont)
            self.rgrainnuisible.move(530, 230)
            self.rgrainnuisible.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #############################Débris végétaux (%)########
            self.rdébrisvé = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.rdébrisvé.resize(100, 20)
            self.rdébrisvé.move(530, 251)
            self.rdébrisvé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #########################Matière inerte (%)################
            self.rmatiéreinrt = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.rmatiéreinrt.resize(100, 20)
            self.rmatiéreinrt.move(530, 272)
            self.rmatiéreinrt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ################################Grains chauffés (%)############################
            self.rgrainchaufé = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.rgrainchaufé.resize(100, 20)
            self.rgrainchaufé.move(530, 293)
            self.rgrainchaufé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ########################################Grains sans valeur (%)#######################################
            self.rgrainsanvaleur = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.rgrainsanvaleur.resize(100, 20)
            self.rgrainsanvaleur.move(530, 314)
            self.rgrainsanvaleur.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################Grains cariés##########################################
            self.rgraincarré = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.rgraincarré.resize(100, 20)
            self.rgraincarré.move(530, 335)
            self.rgraincarré.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################Total(%) 1er#####################################################
            self.rtotalprem = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=True)
            self.rtotalprem.setSpecialValueText(" ")
            self.rtotalprem.resize(100, 20)
            self.rtotalprem.move(530, 356)
            self.rtotalprem.setFont(self.txtpsfont)
            self.rtotalprem.setStyleSheet(" border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##############################################Grains cassés (%) #########################################################
            self.rgraincassé = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=True)
            self.rgraincassé.move(530, 377)
            self.rgraincassé.resize(100, 20)
            self.rgraincassé.setSpecialValueText(' ')
            self.rgraincassé.setFont(self.txtpsfont)
            self.rgraincassé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #########################################################Gains échaudés (%)#####################################################
            self.rgrainechaude = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.rgrainechaude.move(530, 419)
            self.rgrainechaude.resize(100, 20)
            self.rgrainechaude.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #####################################################Grains maigres (%)########################################################
            self.rgrainmaigre = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.rgrainmaigre.move(530, 398)
            self.rgrainmaigre.resize(100, 20)
            self.rgrainmaigre.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grains germés (%)###################################################
            self.rgraingermé = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.rgraingermé.move(530, 440)
            self.rgraingermé.resize(100, 20)
            self.rgraingermé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grain punaisés (%)#########################################################
            self.rgrainpunaisé = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.rgrainpunaisé.move(530, 461)
            self.rgrainpunaisé.resize(100, 20)
            self.rgrainpunaisé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains piqués (%)##########################################
            self.rgrainpiqué = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.rgrainpiqué.move(530, 482)
            self.rgrainpiqué.resize(100, 20)
            self.rgrainpiqué.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains boutés « faible » (%)#######################################
            self.rgrainboutef = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.rgrainboutef.move(530, 503)
            self.rgrainboutef.resize(100, 20)
            self.rgrainboutef.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ####################################################################Grains boutés  « forte » (%)######################################
            self.rgrainbouté = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.rgrainbouté.move(530, 524)
            self.rgrainbouté.resize(100, 20)
            self.rgrainbouté.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##################################################Grains mouchetés (%)########################################################
            self.rgrainmouchté = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.rgrainmouchté.move(530, 545)
            self.rgrainmouchté.resize(100, 20)
            self.rgrainmouchté.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ########################################################Grain étrangers Utilisables pour le bétail (%)##################################################
            self.rgrainetrangé = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.rgrainetrangé.move(530, 566)
            self.rgrainetrangé.resize(100, 20)
            self.rgrainetrangé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ######################################################################Total(%)######################################
            self.rtotaldem = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=True)
            self.rtotaldem.move(530, 587)
            self.rtotaldem.setSpecialValueText(" ")
            self.rtotaldem.resize(100, 20)
            self.rtotaldemfont = QtGui.QFont("color:black")
            self.rtotaldemfont.setBold(True)
            self.rtotaldemfont.setPointSize(12)
            self.rtotaldem.setFont(self.rtotaldemfont)
            self.rtotaldem.setStyleSheet(
                "background-color:#ffffff;color:000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")

            self.rtotalboni = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=True)
            self.rtotalboni.setSpecialValueText(' ')
            self.rtotalboni.move(530, 608)
            self.rtotalboni.resize(100, 25)
            self.rtotalboni.setFont(self.rtotaldemfont)
            self.rtotalboni.setStyleSheet(
                "background-color:#f67570;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ###################################################bonifécation#####################################################
            #################label valeure##############
            self.bvaleur = QtWidgets.QLabel("Bonification", self.bltendretab, )
            self.bvaleur.move(710, 145)
            self.bvaleur.resize(80, 20)
            self.bvaleur.setFont(self.font)
            ######################Limites(sans bon ni réf)################
            self.bps = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=True)
            self.bps.setFont(self.txtpsfont)
            self.bps.setSpecialValueText(' ')
            self.bps.resize(100, 20)
            self.bps.move(710, 167)
            self.bps.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ###############################humidite#############
            self.bhumidite = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=True)
            self.bhumidite.setSpecialValueText(' ')
            self.bhumidite.resize(100, 20)
            self.bhumidite.move(710, 188)
            self.bhumidite.setFont(self.txtpsfont)
            self.bhumidite.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################ergot#########################
            self.bergot = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.bergot.resize(100, 20)
            self.bergot.move(710, 209)
            self.bergot.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #########################Graines nuisibles (%)##########
            self.bgrainnuisible = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.bgrainnuisible.resize(100, 20)
            self.bgrainnuisible.move(710, 230)
            self.bgrainnuisible.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #############################Débris végétaux (%)########
            self.bdébrisvé = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.bdébrisvé.resize(100, 20)
            self.bdébrisvé.move(710, 251)
            self.bdébrisvé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #########################Matière inerte (%)################
            self.bmatiéreinrt = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.bmatiéreinrt.resize(100, 20)
            self.bmatiéreinrt.move(710, 272)
            self.bmatiéreinrt.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ################################Grains chauffés (%)############################
            self.bgrainchaufé = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.bgrainchaufé.resize(100, 20)
            self.bgrainchaufé.move(710, 293)
            self.bgrainchaufé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ########################################Grains sans valeur (%)#######################################
            self.bgrainsanvaleur = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.bgrainsanvaleur.resize(100, 20)
            self.bgrainsanvaleur.move(710, 314)
            self.bgrainsanvaleur.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################Grains cariés##########################################
            self.bgraincarré = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.bgraincarré.resize(100, 20)
            self.bgraincarré.move(710, 335)
            self.bgraincarré.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################Total(%) 1er#####################################################
            self.btotalprem = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=True)
            self.btotalprem.setSpecialValueText(' ')
            self.btotalprem.resize(100, 20)
            self.btotalprem.move(710, 356)
            self.btotalprem.setFont(self.txtpsfont)
            self.btotalprem.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##############################################Grains cassés (%) #########################################################
            self.bgraincassé = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.bgraincassé.move(710, 377)
            self.bgraincassé.resize(100, 20)
            self.graincassé.setFont(self.txtpsfont)
            self.bgraincassé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #########################################################Gains échaudés (%)#####################################################
            self.bgrainechaude = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.bgrainechaude.move(710, 419)
            self.bgrainechaude.resize(100, 20)
            self.bgrainechaude.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #####################################################Grains maigres (%)########################################################
            self.bgrainmaigre = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.bgrainmaigre.move(710, 398)
            self.bgrainmaigre.resize(100, 20)
            self.bgrainmaigre.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grains germés (%)###################################################
            self.bgraigermé = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.bgraigermé.move(710, 440)
            self.bgraigermé.resize(100, 20)
            self.bgraigermé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grain punaisés (%)#########################################################
            self.bgrainpunaisé = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.bgrainpunaisé.move(710, 461)
            self.bgrainpunaisé.resize(100, 20)
            self.bgrainpunaisé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains piqués (%)##########################################
            self.bgrainpiqué = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.bgrainpiqué.move(710, 482)
            self.bgrainpiqué.resize(100, 20)
            self.bgrainpiqué.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains boutés « faible » (%)#######################################
            self.bgrainboutef = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.bgrainboutef.move(710, 503)
            self.bgrainboutef.resize(100, 20)
            self.bgrainboutef.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ####################################################################Grains boutés  « forte » (%)######################################
            self.bgrainbouté = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.bgrainbouté.move(710, 524)
            self.bgrainbouté.resize(100, 20)
            self.bgrainbouté.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##################################################Grains mouchetés (%)########################################################
            self.bgrainmouchté = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.bgrainmouchté.move(710, 545)
            self.bgrainmouchté.resize(100, 20)
            self.bgrainmouchté.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ########################################################Grain étrangers Utilisables pour le bétail (%)##################################################
            self.bgrainetrangé = QtWidgets.QLineEdit("", self.bltendretab, readOnly=True)
            self.bgrainetrangé.move(710, 566)
            self.bgrainetrangé.resize(100, 20)
            self.bgrainetrangé.setFont(self.txtpsfont)
            self.bgrainetrangé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ######################################################################Total(%)#####################################
            self.btotaldem = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=True)
            self.btotaldem.setSpecialValueText(' ')
            self.btotaldem.move(710, 587)
            self.btotaldem.resize(100, 20)
            self.btotaldem.setFont(self.rtotaldemfont)
            self.btotaldem.setStyleSheet(
                "background-color:#ffffff;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")

            self.btotalboni = QtWidgets.QDoubleSpinBox(self.bltendretab, readOnly=True)
            self.btotalboni.setSpecialValueText(' ')
            self.btotalboni.move(710, 608)
            self.btotalboni.resize(100, 25)
            self.btotalboni.setFont(self.rtotaldemfont)
            self.btotalboni.setStyleSheet(
                "background-color:#9fdcb7;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")

            #########################################################observation###############
            self.observation = QtWidgets.QLabel("Observation", self.bltendretab)
            self.observation.move(890, 145)
            self.observation.resize(100, 20)
            self.observation.setFont(self.txtpsfont)
            self.observation.setFont(self.font)
            ##################################################txtobservation##################################
            self.txtobservation = QtWidgets.QTextEdit("<h2><h2/>  <h2><h2/>  <h2><h2/> <h2><h2/>   <h3><h3/>",
                                                      self.bltendretab)
            self.txtobservation.move(890, 167)
            self.txtobservation.resize(135, 459)
            self.txtobservation.setStyleSheet("border: 2px solid bleu ;border-radius: 4px;padding: 2px")
            ###################################################label ccls relizane#################
            self.labelccls = QtWidgets.QLabel("<h1>CCLS RELIZANE SERVICE QUALITE<h1/>", self.bltendretab)
            self.labelccls.move(500, 0)
            self.labelccls.resize(438, 90)
            self.labelccls.setFont(self.font)
            self.labelccls.setStyleSheet(
                "background-color: #D8F9DB; border: 2px solid bleu ;border-radius:8px;padding: 0px")
            self.LABELBULLETIN = QtWidgets.QLabel("<H2>BULLETIN MOULIN</H2>", self.bltendretab)
            self.LABELBULLETIN.move(650, 35)
            self.LABELBULLETIN.resize(180, 30)
            self.LABELBULLETIN.setStyleSheet("background-color: #D8F9DB")

            self.bletendretxt = QtWidgets.QLabel("<H2>Blé Tendre<H2/>", self.bltendretab)
            self.bletendretxt.move(690, 60)
            self.bletendretxt.resize(140, 23)
            self.bletendretxt.setStyleSheet("background-color: #D8F9DB")

            #############################################date edit#############################################
            self.dateeditetxt = QtWidgets.QLabel("Date:", self.bltendretab)
            self.dateeditetxt.setGeometry(QtCore.QRect(20, 20, 100, 23))
            self.dateeditetxt.setFont(self.font)
            self.dateday = QDate.currentDate()
            self.dateedite = QtWidgets.QDateEdit(self.bltendretab)
            self.dateedite.setDate(self.dateday)
            self.dateedite.move(84, 20)
            self.dateedite.setStyleSheet(
                " background-color: #ffffff;padding: 1px;border-style: solid;border: 1px solid #76797C;border-color:#000000;border-radius: 0px;color: #000000;")
            self.dateedite.resize(130, 30)
            self.dateedite.setFont(self.font)

            ###############################################search#################################################

            #####################################décade######################
            self.decade = QtWidgets.QLabel("Décade:", self.bltendretab)
            self.decade.move(20, 60)
            self.decade.resize(60, 20)
            self.decade.setFont(self.font)
            self.decadecombo = QtWidgets.QComboBox(self.bltendretab)
            self.decadecombo.addItem("")
            self.decadecombo.addItem("1 ére")
            self.decadecombo.addItem("2 éme")
            self.decadecombo.addItem("3 éme")
            self.decadecombo.move(84, 60)
            self.decadecombo.resize(130, 30)

            ##################################################quantite###############################################
            self.quantite = QtWidgets.QLabel("Quantité(QX):", self.bltendretab)
            self.quantite.move(840, 100)
            self.quantite.resize(85, 40)
            self.quantite.setFont(self.font)
            self.quantitetxt = QtWidgets.QLineEdit("", self.bltendretab)

            self.quantitetxt.move(928, 105)
            self.quantitetxt.resize(80, 30)
            self.quantitetxt.setValidator(QDoubleValidator(0.99, 99.99, 2))
            # self.quantitetxt.setStyleSheet("background-color: #31363b")

            ####################################################éspece###########################
            self.éspéce = QtWidgets.QLabel("Espèce :", self.bltendretab)
            self.éspéce.move(20, 100)
            self.éspéce.resize(120, 40)
            self.éspéce.setFont(self.font)
            self.éspécecombo = QtWidgets.QComboBox(self.bltendretab)
            self.éspécecombo.addItem("Blé Tendre")
            self.éspécecombo.move(84, 105)
            self.éspécecombo.resize(130, 30)
            ##########################################Nom de l’acheteur : moulin###########################################
            self.moulin = QtWidgets.QLabel("Nom de l’acheteur:", self.bltendretab)
            self.moulin.move(220, 100)
            self.moulin.resize(118, 40)
            self.moulin.setFont(self.font)
            self.moulincombo = QtWidgets.QComboBox(self.bltendretab)
            self.moulincombo.addItem("")
            self.moulincombo.addItem("EURL DJERBIR INDUSTRIELE")
            self.moulincombo.addItem("SARL MOULIN O_ABBES")
            self.moulincombo.addItem("EURL MOULIN BELACEL")
            self.moulincombo.addItem("MOULIN TAHAR MESSAOUD")
            self.moulincombo.addItem("SARL MOULIN BENABDELLAH")
            self.moulincombo.addItem("SARL MATAHIN EL HARAMAIN")
            self.moulincombo.addItem("MINOTERIE NOUR EL HAYAT")
            self.moulincombo.addItem("MOULIN MERINE SASSI")
            self.moulincombo.addItem("SARL DJENDLI")
            self.moulincombo.addItem("SARL TRX HYDRO BENHADJAR")
            self.moulincombo.addItem("EURL MOULIN AIN RAHMA")
            self.moulincombo.addItem("MOULIN FARINE BLANCHE")
            self.moulincombo.addItem("MOULIN MAAMAR BENHADJAR")
            self.moulincombo.addItem("MOULIN OULED BENAICHOUCHE")
            self.moulincombo.addItem("SARL FARINIERE DE L’OUEST")
            self.moulincombo.addItem("SARL MATAHINE ADJINE")
            self.moulincombo.addItem("MOULIN CHOUIKH YOUCEF")
            self.moulincombo.addItem("EURL MOULIN DAMAKO")
            self.moulincombo.addItem("SARL MATAHINE SIDI ABDELHADI")
            self.moulincombo.addItem("SARL MATAHINE MINA")
            self.moulincombo.addItem("EURL ELFORSANE PRODUCTION")
            self.moulincombo.addItem("SARL MATAHINE TOUFIK")
            self.moulincombo.move(340, 105)
            self.moulincombo.resize(220, 30)

            #####################################################Point de collecte : #######################################################
            self.pointcollecte = QtWidgets.QLabel("Point de collecte:", self.bltendretab)
            self.pointcollecte.move(570, 100)
            self.pointcollecte.resize(106, 40)
            self.pointcollecte.setFont(self.font)
            self.pointcollectecombo = QtWidgets.QComboBox(self.bltendretab)
            self.pointcollectecombo.addItem("")
            self.pointcollectecombo.addItem("DOCK SILO CENTRAL")
            self.pointcollectecombo.move(680, 105)
            self.pointcollectecombo.resize(150, 30)

            ######################################################Nom de l’Agréeur#######################################################

            self.agréeeur = QtWidgets.QLabel("Nom de l’Agréeur:", self.bltendretab)
            self.agréeeur.move(1015, 100)
            self.agréeeur.resize(112, 40)
            self.agréeeur.setFont(self.font)
            self.agréeeurcombo = QtWidgets.QComboBox(self.bltendretab, editable=False)
            self.agréeeurcombo.addItem("")
            self.agréeeurcombo.addItem("FELOUAH OMAR")
            self.agréeeurcombo.addItem("BEKHEDDA AEK")
            self.agréeeurcombo.addItem("BENAISSA YOUCEF")
            self.agréeeurcombo.addItem("REZZAG SOFIANE ")
            self.agréeeurcombo.addItem("BELBACHA M.NADIR")
            self.agréeeurcombo.move(1133, 105)
            self.agréeeurcombo.resize(147, 30)

            ############################################docx2pdf######################

            self.tamerbt = QTimer()
            self.tamerbt.timeout.connect(self.all_calcul)
            self.tamerbt.setInterval(1000)
            self.tamerbt.start()

            ###########################buttons################

            self.btnsavebt = QtWidgets.QPushButton("ENREGISTRER", self.bltendretab, clicked=lambda: self.docx_file())
            self.btnsavebt.move(1100, 167)
            self.btnsavebt.resize(200, 80)
            self.btnsavebt.setFont(self.font)
            self.btnsavebt.setIcon(QIcon("images/savepis.png"))
            self.btnsavebt.setIconSize(QSize(70, 80))
            # self.btnsavebt.clicked.connect(self.docx_file)

            self.btnprintbt = QtWidgets.QPushButton("IMPRIMER", self.bltendretab, clicked=lambda: self.printer())
            self.btnprintbt.move(1100, 272)
            self.btnprintbt.resize(200, 80)
            self.btnprintbt.setFont(self.font)
            self.btnprintbt.setIcon(QIcon("images/print125.png"))
            self.btnprintbt.setIconSize(QSize(70, 80))
            # btnprint.clicked.connect(printer)

            self.btnefacebt = QtWidgets.QPushButton("EFACER", self.bltendretab, clicked=lambda: self.clear_all())
            self.btnefacebt.move(1100, 377)
            self.btnefacebt.resize(200, 80)
            self.btnefacebt.setIcon(QIcon("images/eraser45877.png"))
            self.btnefacebt.setIconSize(QSize(70, 80))
            self.btnefacebt.setFont(self.font)
            # self.btnefacebt.clicked.connect(self.clear_all)

            # self.btnsearchbt.setFont(self.font)

            # self.btncalculbt = QtWidgets.QPushButton(" CALCULER", self.bltendretab,clicked=lambda :self.all_calcul())
            # self.btncalculbt.move(1120, 525)
            # self.btncalculbt.resize(200, 80)
            # self.btncalculbt.setFont(self.font)
            # self.btncalculbt.setIcon((QIcon("images/calcul12544.png")))
            # self.btncalculbt.setIconSize(QSize(70, 80))
            # self.btncalculbt.clicked.connect(self.all_calcul)

            #############################################BLE DUR
            ########################################################
            #####################################################################
            ###############################################################################
            ##############################################################################################
            self.bldurtab = QtWidgets.QWidget()
            self.bldurtab.setObjectName("bldurtab")
            self.moulinwidget.addTab(self.bldurtab, "")
            self.bldurtab.setStyleSheet("""QToolTip
    {
        border: 1px solid #76797C;
        background-color:  #fff8b0;;
        color: white;
        padding: 5px;
        opacity: 200;
    }

    QWidget
    {
        color: #000000;
        background-color:  #ffaaaa;
        selection-background-color:#3daee9;
        selection-color: #eff0f1;
        background-clip: border;
        border-image: none;
        border: 0px transparent black;
        outline: 0;
    }

    QWidget:item:hover
    {
        background-color: #3daee9;
        color: #eff0f1;
    }

    QWidget:item:selected
    {
        background-color: #3daee9;
    }



    QWidget:disabled
    {
        color: #454545;
        background-color: #31363b;
    }

    QAbstractItemView
    {
        alternate-background-color: #31363b;
        color: #eff0f1;
        border: 1px solid 3A3939;
        border-radius: 2px;
    }

    QWidget:focus, QMenuBar:focus
    {
        border: 1px solid #3daee9;
    }

    QTabWidget:focus, QCheckBox:focus, QRadioButton:focus, QSlider:focus
    {
        border: none;
    }

    QLineEdit
    {
        background-color: #ffffff;
        padding: 1px;
        border-style: solid;
        border: 1px solid #000000;
        border-radius: 2px;
        color: #000000;
        font-size:12px;
        font-weight:bold;
    }
    QDoubleSpinBox
    {
        background-color: #ffffff;
        padding: 1px;
        border-style: solid;
        border: 2px solid #000000;
        border-radius: 4px;
        color:#000000;
        font-size:12px;
        font-weight:bold;

    }
    QDoubleSpinBox:focus
    {
        background-color: #f2f2f2;
        border-style: solid;
        border: 2px solid #76797C;
        border-radius: 4px;
        border-color: #ff8c00;
    }

    QDoubleSpinBox::drop-down
    {
        subcontrol-origin: padding;
        subcontrol-position: top right;
        width: 0px;

        border-left-width: 0px;
        border-left-color: #232629;
        border-left-style: solid;
        border-top-right-radius: 1px;
        border-bottom-right-radius: 1px;
    }



    QGroupBox {
        border:1px solid #76797C;
        border-radius: 2px;
        margin-top: 20px;
    }

    QGroupBox::title {
        subcontrol-origin: margin;
        subcontrol-position: top center;
        padding-left: 10px;
        padding-right: 10px;
        padding-top: 10px;
    }

    QAbstractScrollArea
    {
        border-radius: 2px;
        border: 1px solid #76797C;
        background-color: transparent;
    }

    QScrollBar:horizontal
    {
        height: 15px;
        margin: 3px 15px 3px 15px;
        border: 1px transparent #2A2929;
        border-radius: 4px;
        background-color: #2A2929;
    }

    QScrollBar::handle:horizontal
    {
        background-color: #605F5F;
        min-width: 5px;
        border-radius: 4px;
    }

    QScrollBar::add-line:horizontal
    {
        margin: 0px 3px 0px 3px;
        border-image: url(:/qss_icons/Dark_rc/right_arrow_disabled.png);
        width: 10px;
        height: 10px;
        subcontrol-position: right;
        subcontrol-origin: margin;
    }

    QScrollBar::sub-line:horizontal
    {
        margin: 0px 3px 0px 3px;
        border-image: url(:/qss_icons/Dark_rc/left_arrow_disabled.png);
        height: 10px;
        width: 10px;
        subcontrol-position: left;
        subcontrol-origin: margin;
    }

    QScrollBar::add-line:horizontal:hover,QScrollBar::add-line:horizontal:on
    {
        border-image: url(:/qss_icons/Dark_rc/right_arrow.png);
        height: 10px;
        width: 10px;
        subcontrol-position: right;
        subcontrol-origin: margin;
    }


    QScrollBar::sub-line:horizontal:hover, QScrollBar::sub-line:horizontal:on
    {
        border-image: url(:/qss_icons/Dark_rc/left_arrow.png);
        height: 10px;
        width: 10px;
        subcontrol-position: left;
        subcontrol-origin: margin;
    }

    QScrollBar::up-arrow:horizontal, QScrollBar::down-arrow:horizontal
    {
        background: none;
    }


    QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal
    {
        background: none;
    }

    QScrollBar:vertical
    {
        background-color: #2A2929;
        width: 15px;
        margin: 15px 3px 15px 3px;
        border: 1px transparent #2A2929;
        border-radius: 4px;
    }

    QScrollBar::handle:vertical
    {
        background-color: #605F5F;
        min-height: 5px;
        border-radius: 4px;
    }

    QScrollBar::sub-line:vertical
    {
        margin: 3px 0px 3px 0px;
        border-image: url(:/qss_icons/Dark_rc/up_arrow_disabled.png);
        height: 10px;
        width: 10px;
        subcontrol-position: top;
        subcontrol-origin: margin;
    }

    QScrollBar::add-line:vertical
    {
        margin: 3px 0px 3px 0px;
        border-image: url(:/qss_icons/Dark_rc/down_arrow_disabled.png);
        height: 10px;
        width: 10px;
        subcontrol-position: bottom;
        subcontrol-origin: margin;
    }

    QScrollBar::sub-line:vertical:hover,QScrollBar::sub-line:vertical:on
    {

        border-image: url(:/qss_icons/Dark_rc/up_arrow.png);
        height: 10px;
        width: 10px;
        subcontrol-position: top;
        subcontrol-origin: margin;
    }


    QScrollBar::add-line:vertical:hover, QScrollBar::add-line:vertical:on
    {
        border-image: url(:/qss_icons/Dark_rc/down_arrow.png);
        height: 10px;
        width: 10px;
        subcontrol-position: bottom;
        subcontrol-origin: margin;
    }

    QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical
    {
        background: none;
    }


    QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical
    {
        background: none;
    }

    QTextEdit
    {
        background-color: #ffffff;
        color: #000000;
        border: 1px solid #76797C;
        font-size:12px;
        font-weight:bold;
    }

    QPlainTextEdit
    {
        background-color: #232629;;
        color: #eff0f1;
        border-radius: 2px;
        border: 1px solid #76797C;
    }

    QHeaderView::section
    {
        background-color: #76797C;
        color: #eff0f1;
        padding: 5px;
        border: 1px solid #76797C;
    }

    QSizeGrip {
        image: url(:/qss_icons/Dark_rc/sizegrip.png);
        width: 12px;
        height: 12px;
    }


    QMainWindow::separator
    {
        background-color: #31363b;
        color: white;
        padding-left: 4px;
        spacing: 2px;
        border: 1px dashed #76797C;
    }

    QMainWindow::separator:hover
    {

        background-color: #787876;
        color: white;
        padding-left: 4px;
        border: 1px solid #76797C;
        spacing: 2px;
    }


    QMenu::separator
    {
        height: 1px;
        background-color: #76797C;
        color: white;
        padding-left: 4px;
        margin-left: 10px;
        margin-right: 5px;
    }


    QFrame
    {
        border-radius: 2px;
        border: 1px solid #76797C;
    }

    QFrame[frameShape="0"]
    {
        border-radius: 2px;
        border: 1px transparent #76797C;
    }

    QStackedWidget
    {
        border: 1px transparent black;
    }


    QPushButton
    {
        color: #000000;
        background-color:#fcfcfc;
        border-width: 1px;
        border-color: #1e1e1e;
        border-style: solid;
        border-radius: 6;
        padding: 3px;
        font-size: 12px;
        padding-left: 5px;
        padding-right: 5px;
        min-width: 40px;

    }

    QPushButton:disabled
    {
        background-color: #feedee;
        border-width: 1px;
        border-color: #454545;
        border-style: solid;
        padding-top: 5px;
        padding-bottom: 5px;
        padding-left: 10px;
        padding-right: 10px;
        border-radius: 2px;
        color: #454545;
    }

    QPushButton:focus {
        background-color: #feedee;
        color: #000000;
    }

    QPushButton:pressed
    {
        background-color: #3daee9;
        padding-top: -15px;
        padding-bottom: -17px;
    }

    QComboBox
    {   
        background-color:#ffffff;
        color:#000000;
        selection-background-color:#000000;
        border-style: solid;
        border: 1px solid #000000;
        border-radius: 2px;
        min-width: 40px;
        font-size:12px;
        font-weight:bold;
    }

    QPushButton:checked{
        background-color: #76797C;
        border-color: #6A6969;
    }

    QComboBox:hover,QDoubleSpinBox:Hover,QPushButton:hover,QAbstractSpinBox:hover,QLineEdit:hover,QTextEdit:hover,QPlainTextEdit:hover,QAbstractView:hover,QTreeView:hover
    {
        border: 1px solid #ff8c00;
        color: #000000;
    }

    QComboBox:on
    {
        padding-top: 1px;
        padding-left: 1px;
        selection-background-color: #000000;
        color:#000000;
    }

    QComboBox QAbstractItemView
    {
        background-color: #ffffff;
        color:#000000;
        border-radius: 2px;
        border: 1px solid #000000;
        selection-background-color: #000000;
    }

    QComboBox::drop-down
    {
        subcontrol-origin: padding;
        subcontrol-position: top right;
        width: 15px;

        border-left-width: 0px;
        border-left-color: #ff8c00;
        border-left-style: solid;
        border-top-right-radius: 1px;
        border-bottom-right-radius: 1px;
    }


    QLabel
    {
        border: 2px solid black;
        font-size:13px;
        font-weight:bold;
    }

    QTabWidget{
        border: 0px transparent black;
    }

    QTabWidget::pane {
        border: 1px solid #76797C;
        padding: 5px;
        margin: 0px;
    }

    QTabBar
    {
        qproperty-drawBase: 0;
        left: 5px; /* move to the right by 5px */
        border-radius: 3px;
    }

    QTabBar:focus
    {
        border: 0px transparent black;
    }

    QTabBar::close-button  {
        image: url(:/qss_icons/Dark_rc/close.png);
        background: transparent;
    }

    QTabBar::close-button:hover
    {
        image: url(:/qss_icons/Dark_rc/close-hover.png);
        background: transparent;
    }

    QTabBar::close-button:pressed {
        image: url(:/qss_icons/Dark_rc/close-pressed.png);
        background: transparent;
    }

    /* TOP TABS */
    QTabBar::tab:top {
        color: #eff0f1;
        border: 1px solid #76797C;
        border-bottom: 1px transparent black;
        background-color: #31363b;
        padding: 5px;
        min-width: 50px;
        border-top-left-radius: 2px;
        border-top-right-radius: 2px;
    }

    QTabBar::tab:top:!selected
    {
        color: #eff0f1;
        background-color: #54575B;
        border: 1px solid #76797C;
        border-bottom: 1px transparent black;
        border-top-left-radius: 2px;
        border-top-right-radius: 2px;    
    }

    QTabBar::tab:top:!selected:hover {
        background-color: #3daee9;
    }

    /* BOTTOM TABS */
    QTabBar::tab:bottom {
        color: #eff0f1;
        border: 1px solid #76797C;
        border-top: 1px transparent black;
        background-color: #31363b;
        padding: 5px;
        border-bottom-left-radius: 2px;
        border-bottom-right-radius: 2px;
        min-width: 50px;
    }

    QTabBar::tab:bottom:!selected
    {
        color: #eff0f1;
        background-color: #54575B;
        border: 1px solid #76797C;
        border-top: 1px transparent black;
        border-bottom-left-radius: 2px;
        border-bottom-right-radius: 2px;
    }

    QTabBar::tab:bottom:!selected:hover {
        background-color: #3daee9;
    }

    /* LEFT TABS */
    QTabBar::tab:left {
        color: #eff0f1;
        border: 1px solid #76797C;
        border-left: 1px transparent black;
        background-color: #31363b;
        padding: 5px;
        border-top-right-radius: 2px;
        border-bottom-right-radius: 2px;
        min-height: 50px;
    }

    QTabBar::tab:left:!selected
    {
        color: #eff0f1;
        background-color: #54575B;
        border: 1px solid #76797C;
        border-left: 1px transparent black;
        border-top-right-radius: 2px;
        border-bottom-right-radius: 2px;
    }

    QTabBar::tab:left:!selected:hover {
        background-color: #3daee9;
    }


    /* RIGHT TABS */
    QTabBar::tab:right {
        color: #eff0f1;
        border: 1px solid #76797C;
        border-right: 1px transparent black;
        background-color: #31363b;
        padding: 5px;
        border-top-left-radius: 2px;
        border-bottom-left-radius: 2px;
        min-height: 50px;
    }

    QTabBar::tab:right:!selected
    {
        color: #eff0f1;
        background-color: #54575B;
        border: 1px solid #76797C;
        border-right: 1px transparent black;
        border-top-left-radius: 2px;
        border-bottom-left-radius: 2px;
    }

    QTabBar::tab:right:!selected:hover {
        background-color: #3daee9;
    }

    QTabBar QToolButton::right-arrow:enabled {
         image: url(:/qss_icons/Dark_rc/right_arrow.png);
     }

     QTabBar QToolButton::left-arrow:enabled {
         image: url(:/qss_icons/Dark_rc/left_arrow.png);
     }

    QTabBar QToolButton::right-arrow:disabled {
         image: url(:/qss_icons/Dark_rc/right_arrow_disabled.png);
     }

     QTabBar QToolButton::left-arrow:disabled {
         image: url(:/qss_icons/Dark_rc/left_arrow_disabled.png);
     }


    QDockWidget {
        background: #31363b;
        border: 1px solid #403F3F;
        titlebar-close-icon: url(:/qss_icons/Dark_rc/close.png);
        titlebar-normal-icon: url(:/qss_icons/Dark_rc/undock.png);
    }

    QDockWidget::close-button, QDockWidget::float-button {
        border: 1px solid transparent;
        border-radius: 2px;
        background: transparent;
    }

    QDockWidget::close-button:hover, QDockWidget::float-button:hover {
        background: rgba(255, 255, 255, 10);
    }

    QDockWidget::close-button:pressed, QDockWidget::float-button:pressed {
        padding: 1px -1px -1px 1px;
        background: rgba(255, 255, 255, 10);
    }


    QSlider::groove:horizontal {
        border: 1px solid #565a5e;
        height: 4px;
        background: #565a5e;
        margin: 0px;
        border-radius: 2px;
    }

    QSlider::handle:horizontal {
        background: #232629;
        border: 1px solid #565a5e;
        width: 16px;
        height: 16px;
        margin: -8px 0;
        border-radius: 9px;
    }

    QSlider::groove:vertical {
        border: 1px solid #565a5e;
        width: 4px;
        background: #565a5e;
        margin: 0px;
        border-radius: 3px;
    }

    QSlider::handle:vertical {
        background: #232629;
        border: 1px solid #565a5e;
        width: 16px;
        height: 16px;
        margin: 0 -8px;
        border-radius: 9px;
    }

    QToolButton {
        background-color: transparent;
        border: 1px transparent #76797C;
        border-radius: 2px;
        margin: 3px;
        padding: 5px;
    }

    QToolButton[popupMode="1"] { /* only for MenuButtonPopup */
     padding-right: 20px; /* make way for the popup button */
     border: 1px #76797C;
     border-radius: 5px;
    }

    QToolButton[popupMode="2"] { /* only for InstantPopup */
     padding-right: 10px; /* make way for the popup button */
     border: 1px #76797C;
    }


    QToolButton:hover, QToolButton::menu-button:hover {
        background-color: transparent;
        border: 1px solid #3daee9;
        padding: 5px;
    }

    QToolButton:checked, QToolButton:pressed,
            QToolButton::menu-button:pressed {
        background-color: #3daee9;
        border: 1px solid #3daee9;
        padding: 5px;
    }

    /* the subcontrol below is used only in the InstantPopup or DelayedPopup mode */
    QToolButton::menu-indicator {
        background-color:ff8c00;
        top: -7px; left: -2px; /* shift it a bit */
    }

    /* the subcontrols below are used only in the MenuButtonPopup mode */
    QToolButton::menu-button {
        border: 1px transparent #76797C;
        border-top-right-radius: 6px;
        border-bottom-right-radius: 6px;
        /* 16px width + 4px for border = 20px allocated above */
        width: 16px;
        outline: none;
    }

    QToolButton::menu-arrow {
       background-color:ff8c00;
    }

    QToolButton::menu-arrow:open {
        border: 1px solid #76797C;
    }

    QPushButton::menu-indicator  {
        subcontrol-origin: padding;
        subcontrol-position: bottom right;
        left: 8px;
    }

    QTableView
    {
        border: 1px solid #76797C;
        gridline-color: #31363b;
        background-color: #232629;
    }


    QTableView, QHeaderView
    {
        border-radius: 0px;
    }

    QTableView::item:pressed, QListView::item:pressed, QTreeView::item:pressed  {
        background: #3daee9;
        color: #eff0f1;
    }

    QTableView::item:selected:active, QTreeView::item:selected:active, QListView::item:selected:active  {
        background: #3daee9;
        color: #eff0f1;
    }


    QHeaderView
    {
        background-color: #31363b;
        border: 1px transparent;
        border-radius: 0px;
        margin: 0px;
        padding: 0px;

    }

    QHeaderView::section  {
        background-color: #31363b;
        color: #eff0f1;
        padding: 5px;
        border: 1px solid #76797C;
        border-radius: 0px;
        text-align: center;
    }

    QHeaderView::section::vertical::first, QHeaderView::section::vertical::only-one
    {
        border-top: 1px solid #76797C;
    }

    QHeaderView::section::vertical
    {
        border-top: transparent;
    }

    QHeaderView::section::horizontal::first, QHeaderView::section::horizontal::only-one
    {
        border-left: 1px solid #76797C;
    }

    QHeaderView::section::horizontal
    {
        border-left: transparent;
    }


    QHeaderView::section:checked
     {
        color: white;
        background-color: #334e5e;
     }

     /* style the sort indicator */
    QHeaderView::down-arrow {
        image: url(:/qss_icons/Dark_rc/down_arrow.png);
    }

    QHeaderView::up-arrow {
        image: url(:/qss_icons/Dark_rc/up_arrow.png);
    }


    QTableCornerButton::section {
        background-color: #31363b;
        border: 1px transparent #76797C;
        border-radius: 0px;
    }

    QToolBox  {
        padding: 5px;
        border: 1px transparent black;
    }

    QToolBox::tab {
        color: #eff0f1;
        background-color: #31363b;
        border: 1px solid #76797C;
        border-bottom: 1px transparent #31363b;
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
    }

    QToolBox::tab:selected { /* italicize selected tabs */
        font: italic;
        background-color: #31363b;
        border-color: #3daee9;
     }

    QStatusBar::item {
        border: 0px transparent dark;
     }


    QFrame[height="3"], QFrame[width="3"] {
        background-color: #76797C;
    }




    QDateEdit
    {
        selection-background-color:#31363b;
        border-style: solid;
        border: 1px solid #76797C;
        border-radius: 2px;
        padding: 1px;
        min-width: 75px;
    }

    QDateEdit:on
    {
        padding-top: 2px;
        padding-left: 2px;
        selection-background-color: #4a4a4a;
    }

    QDateEdit QAbstractItemView
    {
        background-color: #ff8c00;
        border-radius: 2px;
        border: 1px solid #3375A3;
        selection-background-color:ff8c00;
    }

    QDateEdit::drop-down
    {
        subcontrol-origin: padding;
        subcontrol-position: top right;
        width: 15px;
        border-left-width: 0px;
        border-left-color: darkgray;
        border-left-style: solid;
        border-top-right-radius: 3px;
        border-bottom-right-radius: 3px;
    }""")
            self.font = QtGui.QFont()
            self.font.setBold(True)
            self.font.setPointSize(10)
            ##########text bul# ettin######
            self.paramétrebd = QtWidgets.QLabel("Paramètre", self.bldurtab)
            self.paramétrebd.move(30, 111)
            self.paramétrebd.resize(80, 20)
            self.paramétrebd.setFont(self.font)
            self.txtpsfontbd = QtGui.QFont()
            self.txtpsfontbd.setBold(True)
            self.txtpsfontbd.setPointSize(9)
            ################Limites(sans bon ni réf)###############
            self.valeurbd = QtWidgets.QLabel("""Limite-ssans-bon-ni-réf)""", self.bldurtab)
            self.valeurbd.move(170, 95)
            self.valeurbd.resize(145, 55)
            self.valeurbd.setFont(self.font)
            ######################Limites(sans bon ni réf)################
            self.psbd = QtWidgets.QLineEdit("Poids spécifique (kg/hl):   (75.500-75.899)", self.bldurtab, readOnly=True)
            self.psbd.resize(319, 20)
            self.psbd.move(30, 131)
            self.psbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.psbd.setFont(self.txtpsfont)
            self.psbd.setStyleSheet(" border: 2px solid bleu ;border-radius: 4px;padding: 0px")
            ###############################humidite#############
            self.humiditebd = QtWidgets.QLineEdit("Teneur en eau(%):  (13.5-15)", self.bldurtab, readOnly=True)
            self.humiditebd.resize(319, 20)
            self.humiditebd.move(30, 152)
            self.humiditebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.humiditebd.setFont(self.txtpsfont)

            #######################ergot#########################
            self.ergotbd = QtWidgets.QLineEdit("Ergo(% :<0.001 ", self.bldurtab, readOnly=True)
            self.ergotbd.resize(319, 20)
            self.ergotbd.move(30, 173)
            self.ergotbd.setStyleSheet("background-color: #232629")
            self.ergotbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.ergotbd.setFont(self.txtpsfont)

            #########################Graines nuisibles (%)##########
            self.grainnuisiblebd = QtWidgets.QLineEdit("Graines nuisibles(%): <0.001", self.bldurtab, readOnly=True)
            self.grainnuisiblebd.resize(319, 20)
            self.grainnuisiblebd.move(30, 194)
            self.grainnuisiblebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.grainnuisiblebd.setFont(self.txtpsfont)
            #############################Débris végétaux (%)########
            self.débrisvébd = QtWidgets.QLineEdit("Débris végétaux(%):  ", self.bldurtab, readOnly=True)
            self.débrisvébd.resize(319, 20)
            self.débrisvébd.move(30, 215)
            self.débrisvébd.setFont(self.txtpsfont)
            self.débrisvébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Matière inerte (%)################
            self.matiéreinrtbd = QtWidgets.QLineEdit("Matière inerte(%):", self.bldurtab, readOnly=True)
            self.matiéreinrtbd.resize(319, 20)
            self.matiéreinrtbd.move(30, 236)
            self.matiéreinrtbd.setFont(self.txtpsfont)
            self.matiéreinrtbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ################################Grains chauffés (%)############################
            self.grainchaufébd = QtWidgets.QLineEdit("Grains chauffés(%): ", self.bldurtab, readOnly=True)
            self.grainchaufébd.resize(319, 20)
            self.grainchaufébd.move(30, 257)
            self.grainchaufébd.setFont(self.txtpsfont)
            self.grainchaufébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################Grains sans valeur (%)#######################################
            self.grainsanvaleurbd = QtWidgets.QLineEdit("Grains sans valeur(%):", self.bldurtab, readOnly=True)
            self.grainsanvaleurbd.resize(319, 20)
            self.grainsanvaleurbd.move(30, 278)
            self.grainsanvaleurbd.setFont(self.txtpsfont)
            self.grainsanvaleurbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Grains cariés##########################################
            self.graincarré = QtWidgets.QLineEdit("Grains cariés:   ", self.bldurtab, readOnly=True)
            self.graincarré.resize(319, 20)
            self.graincarré.move(30, 299)
            self.graincarré.setFont(self.txtpsfont)
            self.graincarré.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")

            #######################################Total(%) 1er#####################################################
            self.totalprembd = QtWidgets.QLineEdit("TOTAL 1ére CAT:   ≤1", self.bldurtab, readOnly=True)
            self.totalprembd.resize(319, 20)
            self.totalprembd.move(30, 320)
            self.totalprembd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.totalprembd.setFont(self.txtpsfont)
            ##############################################Grains cassés (%) #########################################################
            self.graincassébd = QtWidgets.QLineEdit("Grains cassés(%):   ≤2", self.bldurtab, readOnly=True)
            self.graincassébd.move(30, 341)
            self.graincassébd.resize(319, 20)
            self.graincassébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.graincassébd.setFont(self.txtpsfont)
            #########################################################Gains échaudés (%)#####################################################
            self.grainechaudebd = QtWidgets.QLineEdit("Gains échaudés(%):   ", self.bldurtab, readOnly=True)
            self.grainechaudebd.move(30, 362)
            self.grainechaudebd.resize(319, 20)
            self.grainechaudebd.setFont(self.txtpsfont)
            self.grainechaudebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #####################################################Grains maigres (%)########################################################
            self.grainmaigrebd = QtWidgets.QLineEdit("Grains maigres(%):", self.bldurtab, readOnly=True)
            self.grainmaigrebd.move(30, 383)
            self.grainmaigrebd.resize(319, 20)
            self.grainmaigrebd.setFont(self.txtpsfont)
            self.grainmaigrebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##########################################################Grains germés (%)###################################################
            self.graigermébd = QtWidgets.QLineEdit("Grains germés(%): ≤2", self.bldurtab, readOnly=True)
            self.graigermébd.move(30, 404)
            self.graigermébd.resize(319, 20)
            self.graigermébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.graigermébd.setFont(self.txtpsfont)
            ##########################################################Grain punaisés (%)#########################################################
            self.grainpunaisébd = QtWidgets.QLineEdit("Grain punaisés(%): ≤1", self.bldurtab, readOnly=True)
            self.grainpunaisébd.move(30, 425)
            self.grainpunaisébd.resize(319, 20)
            self.grainpunaisébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.grainpunaisébd.setFont(self.txtpsfont)

            #######################################################################Grains piqués (%)##########################################
            self.grainpiquébd = QtWidgets.QLineEdit("Grains piqués(%):  ", self.bldurtab, readOnly=True)
            self.grainpiquébd.move(30, 446)
            self.grainpiquébd.resize(319, 20)
            self.grainpiquébd.setFont(self.txtpsfont)
            self.grainpiquébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################################################Grains boutés « faible » (%)#######################################

            ####################################################################Grains boutés  « forte » (%)######################################
            self.grainboutébd = QtWidgets.QLineEdit("Grains boutés  « forte » (%):", self.bldurtab, readOnly=True)
            self.grainboutébd.move(30, 467)
            self.grainboutébd.resize(319, 20)
            self.grainboutébd.setFont(self.txtpsfont)
            self.grainboutébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##################################################Grains mouchetés (%)########################################################
            self.grainmouchtébd = QtWidgets.QLineEdit("Grains mouchetés (%):", self.bldurtab, readOnly=True)
            self.grainmouchtébd.move(30, 488)
            self.grainmouchtébd.resize(319, 20)
            self.grainmouchtébd.setFont(self.txtpsfont)
            self.grainmouchtébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################################Grain étrangers Utilisables pour le bétail (%)##################################################
            self.grainetrangébd = QtWidgets.QLineEdit("Grain étrangers Utilisables pour le bétail (%):  ",
                                                      self.bldurtab, readOnly=True)
            self.grainetrangébd.move(30, 509)
            self.grainetrangébd.resize(319, 20)
            self.grainetrangébd.setFont(self.txtpsfont)
            self.grainetrangébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ######################################################################Total(%)######################################
            self.totaldembd = QtWidgets.QLineEdit("Total(%)  Imp2eme cat   ≤5", self.bldurtab, readOnly=True)
            self.totaldembd.move(30, 530)
            self.totaldembd.resize(319, 20)
            self.totaldembd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.totaldembd.setFont(self.txtpsfont)
            #########################################################indice notin##################################################
            self.indicebd = QtWidgets.QLineEdit('Indice Notin ', self.bldurtab, readOnly=True)
            self.indicebd.move(30, 551)
            self.indicebd.resize(319, 20)
            self.indicebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################blétendre dans blé dur########
            self.bletendreinbledur = QtWidgets.QLineEdit("Ble tendre dans ble dur(%)", self.bldurtab, readOnly=True)
            self.bletendreinbledur.move(30, 572)
            self.bletendreinbledur.resize(319, 20)
            self.bletendreinbledur.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ###############################total complet######
            self.totalcomplet = QtWidgets.QLineEdit("TOTAL", self.bldurtab, readOnly=True)
            self.totalcomplet.move(30, 593)
            self.totalcomplet.resize(319, 20)
            self.totalcomplet.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")

            self.totalbonietref = QtWidgets.QLineEdit("\tTotal des Bonifications et Réfactions", self.bldurtab,
                                                      readOnly=True)
            self.totalbonietref.move(30, 614)
            self.totalbonietref.resize(419, 22)
            self.totalbonietref.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #################label valeure##############
            self.valeurbd = QtWidgets.QLabel("valeur", self.bldurtab)
            self.valeurbd.move(350, 112)
            self.valeurbd.resize(100, 20)
            self.valeurbd.setFont(self.font)
            ######################Limites(sans bon ni réf)################
            self.vpsbd = QtWidgets.QDoubleSpinBox(self.bldurtab)
            self.vpsbd.setRange(71, 84.00)
            self.vpsbd.setSpecialValueText(' ')
            self.vpsbd.resize(100, 20)
            self.vpsbd.move(350, 131)
            self.vpsbd.setFont(self.txtpsfont)
            # self.vpsbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ###############################humidite#############
            self.vhumiditebd = QtWidgets.QDoubleSpinBox(self.bldurtab)
            self.vhumiditebd.setRange(8, 14)
            self.vhumiditebd.resize(100, 20)
            self.vhumiditebd.setSpecialValueText(' ')
            self.vhumiditebd.move(350, 152)
            self.vhumiditebd.setFont(self.txtpsfont)
            # self.vhumiditebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################ergot#########################
            self.vergotbd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vergotbd.setRange(0, 10)
            self.vergotbd.setSpecialValueText(' ')
            self.vergotbd.resize(100, 20)
            self.vergotbd.move(350, 173)
            # self.vergotbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Graines nuisibles (%)##########
            self.vgrainnuisiblebd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vgrainnuisiblebd.setRange(0, 10)
            self.vgrainnuisiblebd.setSpecialValueText(' ')
            self.vgrainnuisiblebd.resize(100, 20)
            self.vgrainnuisiblebd.move(350, 194)
            # self.vgrainnuisiblebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #############################Débris végétaux (%)########
            self.vdébrisvébd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vdébrisvébd.setRange(0, 10)
            self.vdébrisvébd.setSpecialValueText(' ')
            self.vdébrisvébd.resize(100, 20)
            self.vdébrisvébd.move(350, 215)
            self.vdébrisvébd.setFont(self.txtpsfont)
            # self.vdébrisvébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################Matière inerte (%)################
            self.vmatiéreinrtbd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vmatiéreinrtbd.setRange(0, 10)
            self.vmatiéreinrtbd.setSpecialValueText(' ')
            self.vmatiéreinrtbd.resize(100, 20)
            self.vmatiéreinrtbd.move(350, 236)
            self.vmatiéreinrtbd.setFont(self.txtpsfont)
            # self.vmatiéreinrtbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ################################Grains chauffés (%)############################
            self.vgrainchaufébd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vgrainchaufébd.setRange(0, 10)
            self.vgrainchaufébd.setSpecialValueText(' ')
            self.vgrainchaufébd.resize(100, 20)
            self.vgrainchaufébd.move(350, 257)
            self.vgrainchaufébd.setFont(self.txtpsfont)
            # self.vgrainchaufébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ########################################Grains sans valeur (%)#######################################
            self.vgrainsanvaleurbd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vgrainsanvaleurbd.setSpecialValueText(' ')
            self.vgrainsanvaleurbd.setRange(0, 10)
            self.vgrainsanvaleurbd.resize(100, 20)
            self.vgrainsanvaleurbd.move(350, 278)
            self.vgrainsanvaleurbd.setFont(self.txtpsfont)
            # self.vgrainsanvaleurbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Grains cariés##########################################
            self.vgraincarrébd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vgraincarrébd.setSpecialValueText(' ')
            self.vgraincarrébd.setRange(0, 10)
            self.vgraincarrébd.resize(100, 20)
            self.vgraincarrébd.move(350, 299)
            # self.vgraincarrébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #######################################Total(%) 1er#####################################################
            self.vtotalprembd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.vtotalprembd.setSpecialValueText(' ')
            self.vtotalprembd.setRange(0, 10)
            self.vtotalprembd.resize(100, 20)
            self.vtotalprembd.move(350, 320)
            self.vtotalprembd.setFont(self.txtpsfont)
            # self.vtotalprembd.setStyleSheet("background-color:#ffffff;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ##############################################Grains cassés (%) #########################################################
            self.vgraincassébd = QtWidgets.QDoubleSpinBox(self.bldurtab)
            self.vgraincassébd.move(350, 341)
            self.vgraincassébd.resize(100, 20)
            self.vgraincassébd.setRange(0, 10)
            self.vgraincassébd.setSpecialValueText(" ")
            self.vgraincassébd.setFont(self.txtpsfont)
            # self.vgraincassébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 0px")
            #########################################################Gains échaudés (%)#####################################################
            self.vgrainechaudebd = QtWidgets.QDoubleSpinBox(self.bldurtab)
            self.vgrainechaudebd.setSpecialValueText(" ")
            self.vgrainechaudebd.setRange(0, 10)
            self.vgrainechaudebd.move(350, 362)
            self.vgrainechaudebd.resize(100, 20)
            self.vgrainechaudebd.setFont(self.txtpsfont)
            # self.vgrainechaudebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #####################################################Grains maigres (%)########################################################
            self.vgrainmaigrebd = QtWidgets.QDoubleSpinBox(self.bldurtab)
            self.vgrainmaigrebd.setRange(0, 10)
            self.vgrainmaigrebd.setSpecialValueText(" ")
            self.vgrainmaigrebd.move(350, 383)
            self.vgrainmaigrebd.setFont(self.txtpsfont)
            self.vgrainmaigrebd.resize(100, 20)
            # self.vgrainmaigrebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grains germés (%)###################################################
            self.vgraigermébd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vgraigermébd.move(350, 404)
            self.vgraigermébd.resize(100, 20)
            self.vgraigermébd.setSpecialValueText('  ')
            self.vgraigermébd.setFont(self.txtpsfont)
            # self.vgraigermébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grain punaisés (%)#########################################################
            self.vgrainpunaisébd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vgrainpunaisébd.move(350, 425)
            self.vgrainpunaisébd.resize(100, 20)
            self.vgrainpunaisébd.setSpecialValueText('   ')
            self.vgrainpunaisébd.setFont(self.txtpsfont)
            # self.vgrainpunaisébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains piqués (%)##########################################
            self.vgrainpiquébd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vgrainpiquébd.move(350, 446)
            self.vgrainpiquébd.resize(100, 20)
            self.vgrainpiquébd.setSpecialValueText('  ')
            self.vgrainpiquébd.setFont(self.txtpsfont)
            # self.vgrainpiquébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains boutés « faible » (%)#######################################

            ####################################################################Grains boutés  « forte » (%)######################################
            self.vgrainboutébd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vgrainboutébd.move(350, 467)
            self.vgrainboutébd.resize(100, 20)
            self.vgrainboutébd.setSpecialValueText('  ')
            self.vgrainboutébd.setFont(self.txtpsfont)
            # .vgrainboutébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##################################################Grains mouchetés (%)########################################################
            self.vgrainmouchtébd = QtWidgets.QDoubleSpinBox(self.bldurtab)
            self.vgrainmouchtébd.move(350, 488)
            self.vgrainmouchtébd.resize(100, 20)
            self.vgrainmouchtébd.setRange(0, 10)
            self.vgrainmouchtébd.setSpecialValueText(' ')
            self.vgrainmouchtébd.setFont(self.txtpsfont)
            # self.vgrainmouchtébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ########################################################Grain étrangers Utilisables pour le bétail (%)##################################################
            self.vgrainetrangébd = QtWidgets.QDoubleSpinBox(self.bldurtab)
            self.vgrainetrangébd.move(350, 509)
            self.vgrainetrangébd.resize(100, 20)
            self.vgrainetrangébd.setRange(0, 10)
            self.vgrainetrangébd.setSpecialValueText(' ')
            self.vgrainetrangébd.setFont(self.txtpsfont)
            # self.vgrainetrangébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ######################################################################Total(%)######################################
            self.vtotaldembd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.vtotaldembd.setRange(1, 20)
            self.vtotaldembd.move(350, 530)
            self.vtotaldembd.resize(100, 20)
            self.vtotaldembd.setSpecialValueText(' ')
            self.vtotaldembd.setFont(self.txtpsfont)
            # self.vtotaldembd.setStyleSheet("background-color:#ffffff;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            ######################################indicenotin #################
            self.vindicenotin = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vindicenotin.setSpecialValueText(' ')
            self.vindicenotin.setFont(self.rtotaldemfont)
            self.vindicenotin.move(350, 551)
            self.vindicenotin.resize(100, 20)
            # self.vindicenotin.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ########################ble tendre dand blé dur############
            self.vblétendreinbledur = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=False)
            self.vblétendreinbledur.setSpecialValueText(" ")
            self.vblétendreinbledur.move(350, 572)
            self.vblétendreinbledur.resize(100, 20)
            # self.vblétendreinbledur.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################bonification total complet##############
            self.vtotalcomplet = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.vtotalcomplet.setSpecialValueText(' ')
            self.vtotalcomplet.move(350, 593)
            self.vtotalcomplet.resize(100, 20)
            # self.vtotalcomplet.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################réfaction##############################################
            #################label valeure##############
            self.rvaleurbd = QtWidgets.QLabel("Réfaction", self.bldurtab)
            self.rvaleurbd.move(530, 111)
            self.rvaleurbd.resize(80, 20)
            self.rvaleurbd.setFont(self.font)
            ######################Limites(sans bon ni réf)################
            self.rpsbd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.rpsbd.setSpecialValueText(" ")
            self.rpsbd.resize(100, 20)
            self.rpsbd.move(530, 131)
            self.rpsbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ###############################humidite#############
            self.rhumiditebd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.rhumiditebd.resize(100, 20)
            self.rhumiditebd.move(530, 152)
            self.rhumiditebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################ergot#########################
            self.rergotbd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.rergotbd.resize(100, 20)
            self.rergotbd.move(530, 173)
            self.rergotbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #########################Graines nuisibles (%)##########
            self.rgrainnuisiblebd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.rgrainnuisiblebd.resize(100, 20)
            self.rgrainnuisiblebd.move(530, 194)
            self.rgrainnuisiblebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #############################Débris végétaux (%)########
            self.rdébrisvébd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.rdébrisvébd.resize(100, 20)
            self.rdébrisvébd.move(530, 215)
            self.rdébrisvébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #########################Matière inerte (%)################
            self.rmatiéreinrtbd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.rmatiéreinrtbd.resize(100, 20)
            self.rmatiéreinrtbd.move(530, 236)
            self.rmatiéreinrtbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ################################Grains chauffés (%)############################
            self.rgrainchaufébd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.rgrainchaufébd.resize(100, 20)
            self.rgrainchaufébd.move(530, 257)
            self.rgrainchaufébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ########################################Grains sans valeur (%)#######################################
            self.rgrainsanvaleurbd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.rgrainsanvaleurbd.resize(100, 20)
            self.rgrainsanvaleurbd.move(530, 278)
            self.rgrainsanvaleurbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################Grains cariés##########################################
            self.rgraincarrébd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.rgraincarrébd.resize(100, 20)
            self.rgraincarrébd.move(530, 299)
            self.rgraincarrébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################Total(%) 1er#####################################################
            self.rtotalprembd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.rtotalprembd.setSpecialValueText(" ")
            self.rtotalprembd.resize(100, 20)
            self.rtotalprembd.move(530, 320)
            self.rtotalprembd.setStyleSheet(" border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##############################################Grains cassés (%) #########################################################
            self.rgraincassébd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.rgraincassébd.move(530, 341)
            self.rgraincassébd.resize(100, 20)
            self.rgraincassébd.setSpecialValueText(' ')
            self.rgraincassébd.setFont(self.txtpsfont)
            self.rgraincassébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #########################################################Gains échaudés (%)#####################################################
            self.rgrainechaudebd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.rgrainechaudebd.move(530, 362)
            self.rgrainechaudebd.resize(100, 20)
            self.rgrainechaudebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #####################################################Grains maigres (%)########################################################
            self.rgrainmaigrebd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.rgrainmaigrebd.move(530, 383)
            self.rgrainmaigrebd.resize(100, 20)
            self.rgrainmaigrebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grains germés (%)###################################################
            self.rgraingermébd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.rgraingermébd.move(530, 404)
            self.rgraingermébd.resize(100, 20)
            self.rgraingermébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grain punaisés (%)#########################################################
            self.rgrainpunaisébd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.rgrainpunaisébd.move(530, 425)
            self.rgrainpunaisébd.resize(100, 20)
            self.rgrainpunaisébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains piqués (%)##########################################
            self.rgrainpiquébd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.rgrainpiquébd.move(530, 446)
            self.rgrainpiquébd.resize(100, 20)
            self.rgrainpiquébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains boutés « faible » (%)#######################################

            ####################################################################Grains boutés  « forte » (%)######################################
            self.rgrainboutébd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.rgrainboutébd.setSpecialValueText(' ')
            self.rgrainboutébd.move(530, 467)
            self.rgrainboutébd.resize(100, 20)
            self.rgrainboutébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##################################################Grains mouchetés (%)########################################################
            self.rgrainmouchtébd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.rgrainmouchtébd.move(530, 488)
            self.rgrainmouchtébd.resize(100, 20)
            self.rgrainmouchtébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ########################################################Grain étrangers Utilisables pour le bétail (%)##################################################
            self.rgrainetrangébd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.rgrainetrangébd.move(530, 509)
            self.rgrainetrangébd.resize(100, 20)
            self.rgrainetrangébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ######################################################################Total(%)######################################
            self.rtotaldembd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.rtotaldembd.move(530, 530)
            # self.rtotaldembd.setDecimals(2)
            self.rtotaldembd.setRange(0, 30)
            self.rtotaldembd.setSpecialValueText(" ")
            self.rtotaldembd.resize(100, 20)
            self.rtotaldembd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            self.rtotaldemfontbd = QtGui.QFont("color:black")
            self.rtotaldemfontbd.setBold(True)
            self.rtotaldemfontbd.setPointSize(12)
            self.rtotaldembd.setFont(self.rtotaldemfont)

            ################refaction indicenotin valeur ###########
            self.rindicenotin = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.rindicenotin.setSpecialValueText(' ')
            self.rindicenotin.setFont(self.rtotaldemfont)
            self.rindicenotin.move(530, 551)
            self.rindicenotin.resize(100, 20)
            self.rindicenotin.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ########################ble tendre dand blé dur############
            self.rblétendreinbledur = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.rblétendreinbledur.setSpecialValueText(" ")
            self.rblétendreinbledur.move(530, 572)
            self.rblétendreinbledur.resize(100, 20)
            self.rblétendreinbledur.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################bonification total complet##############
            self.rtotalcomplet = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.rtotalcomplet.setSpecialValueText(' ')
            self.rtotalcomplet.move(530, 593)
            self.rtotalcomplet.resize(100, 20)
            self.rtotalcomplet.setStyleSheet(
                "background-color:#ffffff;color:000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.rtotalcomplet.setFont(self.rtotaldemfont)

            self.rtotalbonibd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.rtotalbonibd.setSpecialValueText(' ')
            self.rtotalbonibd.move(530, 614)
            self.rtotalbonibd.resize(100, 22)
            self.rtotalbonibd.setStyleSheet(
                "background-color:#f67570;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.rtotalbonibd.setFont(self.rtotaldemfont)
            ###################################################bonifécation#####################################################
            #################label valeure##############
            self.bvaleurbd = QtWidgets.QLabel("Bonification", self.bldurtab, )
            self.bvaleurbd.move(710, 111)
            self.bvaleurbd.resize(80, 20)
            self.bvaleurbd.setFont(self.font)
            ######################Limites(sans bon ni réf)################
            self.bpsbd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.bpsbd.setFont(self.txtpsfont)
            self.bpsbd.setSpecialValueText(' ')
            self.bpsbd.resize(100, 20)
            self.bpsbd.move(710, 131)
            self.bpsbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ###############################humidite#############
            self.bhumiditebd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.bhumiditebd.setSpecialValueText(' ')
            self.bhumiditebd.resize(100, 20)
            self.bhumiditebd.move(710, 152)
            self.bhumiditebd.setFont(self.txtpsfont)
            self.bhumiditebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################ergot#########################
            self.bergotbd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.bergotbd.resize(100, 20)
            self.bergotbd.move(710, 173)
            self.bergotbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #########################Graines nuisibles (%)##########
            self.bgrainnuisiblebd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.bgrainnuisiblebd.resize(100, 20)
            self.bgrainnuisiblebd.move(710, 194)
            self.bgrainnuisiblebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #############################Débris végétaux (%)########
            self.bdébrisvébd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.bdébrisvébd.resize(100, 20)
            self.bdébrisvébd.move(710, 215)
            self.bdébrisvébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #########################Matière inerte (%)################
            self.bmatiéreinrtbd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.bmatiéreinrtbd.resize(100, 20)
            self.bmatiéreinrtbd.move(710, 236)
            self.bmatiéreinrtbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ################################Grains chauffés (%)############################
            self.bgrainchaufé = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.bgrainchaufé.resize(100, 20)
            self.bgrainchaufé.move(710, 257)
            self.bgrainchaufé.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ########################################Grains sans valeur (%)#######################################
            self.bgrainsanvaleurbd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.bgrainsanvaleurbd.resize(100, 20)
            self.bgrainsanvaleurbd.move(710, 278)
            self.bgrainsanvaleurbd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################Grains cariés##########################################
            self.bgraincarrébd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.bgraincarrébd.resize(100, 20)
            self.bgraincarrébd.move(710, 299)
            self.bgraincarrébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################Total(%) 1er#####################################################
            self.btotalprembd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.btotalprembd.setSpecialValueText(' ')
            self.btotalprembd.resize(100, 20)
            self.btotalprembd.move(710, 320)
            self.btotalprembd.setFont(self.txtpsfont)
            self.btotalprembd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##############################################Grains cassés (%) #########################################################
            self.bgraincassébd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.bgraincassébd.move(710, 341)
            self.bgraincassébd.resize(100, 20)
            self.bgraincassébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #########################################################Gains échaudés (%)#####################################################
            self.bgrainechaudebd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.bgrainechaudebd.move(710, 362)
            self.bgrainechaudebd.resize(100, 20)
            self.bgrainechaudebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #####################################################Grains maigres (%)########################################################
            self.bgrainmaigrebd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.bgrainmaigrebd.move(710, 383)
            self.bgrainmaigrebd.resize(100, 20)
            self.bgrainmaigrebd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grains germés (%)###################################################
            self.bgraigermébd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.bgraigermébd.move(710, 404)
            self.bgraigermébd.resize(100, 20)
            self.bgraigermébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##########################################################Grain punaisés (%)#########################################################
            self.bgrainpunaisébd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.bgrainpunaisébd.move(710, 425)
            self.bgrainpunaisébd.resize(100, 20)
            self.bgrainpunaisébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains piqués (%)##########################################
            self.bgrainpiquébd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.bgrainpiquébd.move(710, 446)
            self.bgrainpiquébd.resize(100, 20)
            self.bgrainpiquébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################################################################Grains boutés « faible » (%)#######################################

            ####################################################################Grains boutés  « forte » (%)######################################
            self.bgrainboutébd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.bgrainboutébd.move(710, 467)
            self.bgrainboutébd.resize(100, 20)
            self.bgrainboutébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ##################################################Grains mouchetés (%)########################################################
            self.bgrainmouchtébd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.bgrainmouchtébd.move(710, 488)
            self.bgrainmouchtébd.resize(100, 20)
            self.bgrainmouchtébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ########################################################Grain étrangers Utilisables pour le bétail (%)##################################################
            self.bgrainetrangébd = QtWidgets.QLineEdit("", self.bldurtab, readOnly=True)
            self.bgrainetrangébd.move(710, 509)
            self.bgrainetrangébd.resize(100, 20)
            self.bgrainetrangébd.setFont(self.txtpsfont)
            self.bgrainetrangébd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ######################################################################Total(%)#####################################
            self.btotaldembd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.btotaldembd.setSpecialValueText(' ')
            self.btotaldembd.move(710, 530)
            self.btotaldembd.resize(100, 20)
            self.btotaldembd.setFont(self.rtotaldemfont)
            self.btotaldembd.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")

            ################indicenotin valeur ###########
            self.bindicenotin = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.bindicenotin.setSpecialValueText(' ')
            self.bindicenotin.setFont(self.rtotaldemfont)
            self.bindicenotin.move(710, 551)
            self.bindicenotin.resize(100, 20)
            self.bindicenotin.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            ########################ble tendre dand blé dur############
            self.bblétendreinbledur = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.bblétendreinbledur.setSpecialValueText(" ")
            self.bblétendreinbledur.setDecimals(3)
            self.bblétendreinbledur.move(710, 572)
            self.bblétendreinbledur.resize(100, 20)
            self.bblétendreinbledur.setStyleSheet("border: 2px solid bleu;border-radius: 4px;padding: 2px")
            #######################bonification total complet##############
            self.btotalcomplet = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.btotalcomplet.setSpecialValueText(' ')
            self.btotalcomplet.move(710, 593)
            self.btotalcomplet.resize(100, 20)
            self.btotalcomplet.setStyleSheet(
                "background-color:#ffffff;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.btotalcomplet.setFont(self.rtotaldemfont)

            self.btotalbonibd = QtWidgets.QDoubleSpinBox(self.bldurtab, readOnly=True)
            self.btotalbonibd.setSpecialValueText(' ')
            self.btotalbonibd.move(710, 614)
            self.btotalbonibd.resize(100, 22)
            self.btotalbonibd.setStyleSheet(
                "background-color:#9fdcb7;color:#000000;border: 2px solid bleu;border-radius: 4px;padding: 0px")
            self.btotalcomplet.setFont(self.rtotaldemfont)
            #########################################################observation###############
            self.observationbd = QtWidgets.QLabel("Observation", self.bldurtab)
            self.observationbd.move(890, 111)
            self.observationbd.resize(100, 20)
            self.observationbd.setFont(self.txtpsfont)
            self.observationbd.setFont(self.font)
            ##################################################txtobservation##################################
            self.txtobservationbd = QtWidgets.QTextEdit("<h2><h2/>  <h2><h2/>  <h2><h2/> <h2><h2/>   <h3><h3/>",
                                                        self.bldurtab)
            self.txtobservationbd.move(890, 131)
            self.txtobservationbd.resize(135, 503)
            self.txtobservationbd.setStyleSheet("border: 2px solid bleu ;border-radius: 4px;padding: 2px")
            ###################################################label ccls relizane#################
            self.labelcclsbd = QtWidgets.QLabel("<h1>CCLS RELIZANE SERVICE QUALITE<h1/>", self.bldurtab)
            self.labelcclsbd.move(500, 0)
            self.labelcclsbd.resize(438, 80)
            self.labelcclsbd.setFont(self.font)
            self.labelcclsbd.setStyleSheet(
                "background-color: #ffaaaa; border: 2px solid bleu ;border-radius: 6px;padding: 0px")
            self.LABELBULLETINbd = QtWidgets.QLabel("<H2>BULLETIN MOULIN</H2>", self.bldurtab)
            self.LABELBULLETINbd.move(650, 30)
            self.LABELBULLETINbd.resize(180, 23)
            self.LABELBULLETINbd.setStyleSheet("background-color: #ffaaaa")
            self.bledurtxt = QtWidgets.QLabel("<H2>Blé DUR<H2/>", self.bldurtab)
            self.bledurtxt.move(698, 53)
            self.bledurtxt.resize(120, 23)
            self.bledurtxt.setStyleSheet("background-color: #ffaaaa")

            #############################################date edit#############################################
            self.dateeditetxtbd = QtWidgets.QLabel("Date:", self.bldurtab)
            self.dateeditetxtbd.setGeometry(QtCore.QRect(30, 5, 100, 20))
            self.dateeditetxtbd.setFont(self.font)
            self.dateeditebd = QtWidgets.QDateEdit(self.bldurtab)
            self.dateeditebd.setDate(self.dateday)
            self.dateeditebd.move(100, 5)
            self.dateeditebd.resize(112, 25)
            self.dateeditebd.setStyleSheet(
                " background-color:#ffffff;padding: 1px;border-style: solid;border: 1px solid #76797C;border-color:#000000;border-radius: 0px;color: #000000;")
            self.dateeditebd.setFont(self.font)

            ###############################################search#################################################

            #####################################décade######################
            self.decadebd = QtWidgets.QLabel("Décade:", self.bldurtab)
            self.decadebd.move(30, 45)
            self.decadebd.resize(60, 20)
            self.decadebd.setFont(self.font)
            self.decadecombobd = QtWidgets.QComboBox(self.bldurtab)
            self.decadecombobd.addItem("")
            self.decadecombobd.addItem("1 ére")
            self.decadecombobd.addItem("2 éme")
            self.decadecombobd.addItem("3 éme")
            self.decadecombobd.move(100, 45)
            self.decadecombobd.resize(112, 25)

            ##################################################quantite###############################################
            self.quantitebd = QtWidgets.QLabel("Quantité(QX):", self.bldurtab)
            self.quantitebd.move(840, 88)
            self.quantitebd.resize(85, 25)
            self.quantitebd.setFont(self.font)
            self.quantitetxtbd = QtWidgets.QLineEdit("", self.bldurtab)
            self.quantitetxtbd.move(928, 88)
            self.quantitetxtbd.resize(80, 25)
            self.quantitetxtbd.setValidator(QDoubleValidator(0.99, 99.99, 2))

            ####################################################éspece###########################
            self.éspécebd = QtWidgets.QLabel("Espèce :", self.bldurtab)
            self.éspécebd.move(30, 88)
            self.éspécebd.resize(60, 20)
            self.éspécebd.setFont(self.font)
            self.éspécecombobd = QtWidgets.QComboBox(self.bldurtab)
            self.éspécecombobd.addItem("Blé Dur")
            self.éspécecombobd.move(100, 88)
            self.éspécecombobd.resize(112, 25)

            ##########################################Nom de l’acheteur : moulin###########################################
            self.moulinbd = QtWidgets.QLabel("Nom de l’acheteur:", self.bldurtab)
            self.moulinbd.move(220, 88)
            self.moulinbd.resize(118, 20)
            self.moulinbd.setFont(self.font)
            self.moulincombobd = QtWidgets.QComboBox(self.bldurtab)
            self.moulincombobd.addItem("")
            self.moulincombobd.addItem("SARL MOULIN BENABDELLAH")
            self.moulincombobd.move(340, 88)
            self.moulincombobd.resize(220, 25)

            #####################################################Point de collecte : #######################################################
            self.pointcollectebd = QtWidgets.QLabel("Point de collecte:", self.bldurtab)
            self.pointcollectebd.move(570, 80)
            self.pointcollectebd.resize(106, 40)
            self.pointcollectebd.setFont(self.font)
            self.pointcollectecombobd = QtWidgets.QComboBox(self.bldurtab)
            self.pointcollectecombobd.addItem("")
            self.pointcollectecombobd.addItem("DOCK SILO CENTRAL")
            self.pointcollectecombobd.move(680, 88)
            self.pointcollectecombobd.resize(150, 25)

            ######################################################Nom de l’Agréeur#######################################################

            self.agréeeurbd = QtWidgets.QLabel("Nom de l’Agréeur:", self.bldurtab)
            self.agréeeurbd.move(1015, 80)
            self.agréeeurbd.resize(112, 40)
            self.agréeeurbd.setFont(self.font)
            self.agréeeurcombobd = QtWidgets.QComboBox(self.bldurtab, editable=False)
            self.agréeeurcombobd.addItem("")
            self.agréeeurcombobd.addItem("FELOUAH OMAR")
            self.agréeeurcombobd.addItem("BEKHEDDA AEK")
            self.agréeeurcombobd.addItem("BENAISSA YOUCEF")
            self.agréeeurcombobd.addItem("REZZAG SOFIANE ")
            self.agréeeurcombobd.addItem("BELBACHA M.NADIR")
            self.agréeeurcombobd.move(1133, 88)
            self.agréeeurcombobd.resize(147, 25)

            ############################################docx2pdf######################
            self.timerbd = QTimer()
            self.timerbd.timeout.connect(self.allcallculbd)
            self.timerbd.setInterval(1000)
            self.timerbd.start()

            ###########################buttons################

            self.btnsavebd = QtWidgets.QPushButton("ENREGISTRER", self.bldurtab, clicked=lambda: self.docx_bdsave())
            self.btnsavebd.move(1100, 131)
            self.btnsavebd.resize(200, 80)
            self.btnsavebd.setFont(self.font)
            self.btnsavebd.setIcon(QIcon("images/savepis.png"))
            self.btnsavebd.setIconSize(QSize(70, 80))

            self.btnprintbd = QtWidgets.QPushButton("IMPRIMER", self.bldurtab, clicked=lambda: self.printerbd())
            self.btnprintbd.move(1100, 236)
            self.btnprintbd.resize(200, 80)
            self.btnprintbd.setFont(self.font)
            self.btnprintbd.setIcon(QIcon("images/print125.png"))
            self.btnprintbd.setIconSize(QSize(70, 80))

            self.btnefacebd = QtWidgets.QPushButton("EFACER", self.bldurtab, clicked=lambda: self.clear_allbd())
            self.btnefacebd.move(1100, 341)
            self.btnefacebd.resize(200, 80)
            self.btnefacebd.setIcon(QIcon("images/eraser45877.png"))
            self.btnefacebd.setIconSize(QSize(70, 80))
            self.btnefacebd.setFont(self.font)

            # self.btncalculbd = QtWidgets.QPushButton("CALCULER", self.bldurtab,clicked=lambda :self.allcallculbd())
            # self.btncalculbd.move(1120, 525)
            # self.btncalculbd.resize(200, 80)
            # self.btncalculbd.setFont(self.font)
            # self.btncalculbd.setIcon((QIcon("images/calcul12544.png")))
            # self.btncalculbd.setIconSize(QSize(70, 80))

            self.horizontalLayout.addWidget(self.moulinwidget)
            MainWindow.setCentralWidget(self.centralwidget)
            self.statusbar = QtWidgets.QStatusBar(MainWindow)
            self.statusbar.setObjectName("statusbar")
            MainWindow.setStatusBar(self.statusbar)

            self.retranslateUi(MainWindow)
            self.moulinwidget.setCurrentIndex(1)
            QtCore.QMetaObject.connectSlotsByName(MainWindow)

        def retranslateUi(self, MainWindow):
            _translate = QtCore.QCoreApplication.translate
            MainWindow.setWindowTitle(_translate("MainWindow", "ccls relizane service qualité"))
            self.moulinwidget.setTabText(self.moulinwidget.indexOf(self.bltendretab),
                                         _translate("MainWindow", "Blé Tendre"))
            self.moulinwidget.setTabText(self.moulinwidget.indexOf(self.bldurtab), _translate("MainWindow", "Blé Dur"))
except Exception as e:
    print(e)
################################################PhytosanitaireClass
###############################################################################
##############################################################################
###########################################################################
######################################################################
###############################################################
dattabase = sqlite3.connect('datta.db')
curs = dattabase.cursor()
curs.execute("""create table if not exists phytotable
                (
                  LIEU_DE_TRAITEMENT text,
                  NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE text,
                  DATE_DE_PEREMPTION text,
                  STOCK_FINAL INTEGER,
                  QUANTITE_UTILISEE INTEGER,
                  QUANTITE_ACHETE INTEGER,
                  STOCK_INITIAL INTEGER,
                  PRODUITS_PHYTOSANITAIRES TEXT ,
                  LIEU_DE_STOCKAGE text,
                  le text,
                  id INTEGER PRIMARY KEY ,
                  STOCK_INITIAL_ACTELLIC integer, 
                  QUANTITE_UTILISEE_ACTELLIC integer,
                  QUANTITE_ACHETE_ACTELLIC integer,
                  STOCK_INITIAL_CIRATHRINE integer, 
                  QUANTITE_UTILISEE_CIRATHRINE integer,
                  QUANTITE_ACHETE_CIRATHRINE integer,
                  STOCK_INITIAL_DEKATRINE integer, 
                  QUANTITE_UTILISEE_DEKATRINE integer,
                  QUANTITE_ACHETE_DEKATRINE integer,
                  STOCK_INITIAL_PHOSTOXIN_PH3 integer, 
                  QUANTITE_UTILISEE_PHOSTOXIN_PH3 integer,
                  QUANTITE_ACHETE_PHOSTOXIN_PH3 integer,
                  STOCK_INITIAL_RATICIDE integer, 
                  QUANTITE_UTILISEE_RATICIDE integer,
                  QUANTITE_ACHETE_RATICIDE integer,
                  STOCK_INITIAL_TEXTO integer,
                  QUANTITE_UTILISEE_TEXTO integer,
                  QUANTITE_ACHETE_TEXTO integer,
                  STOCK_FINAL_ACTELLIC REAL,
                  STOCK_FINAL_CIRATHRINE REAL,
                  STOCK_FINAL_PHOSTOXIN_PH3 REAL,
                  STOCK_FINAL_RATICIDE REAL,
                  STOCK_FINAL_TEXTO REAL
                )
                """)
cursbidi=dattabase.cursor()
cursbidi.execute("""create table if not exists phytotablebidi
                (
                  LIEU_DE_TRAITEMENT text,
                  NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE text,
                  DATE_DE_PEREMPTION text,
                  STOCK_FINAL INTEGER,
                  QUANTITE_UTILISEE INTEGER,
                  QUANTITE_ACHETE INTEGER,
                  STOCK_INITIAL INTEGER,
                  PRODUITS_PHYTOSANITAIRES TEXT ,
                  LIEU_DE_STOCKAGE text,
                  le text,
                  idbidi INTEGER PRIMARY KEY ,
                  STOCK_INITIAL_ACTELLIC integer, 
                  QUANTITE_UTILISEE_ACTELLIC integer,
                  QUANTITE_ACHETE_ACTELLIC integer,
                  STOCK_INITIAL_CIRATHRINE integer, 
                  QUANTITE_UTILISEE_CIRATHRINE integer,
                  QUANTITE_ACHETE_CIRATHRINE integer,
                  STOCK_INITIAL_DEKATRINE integer, 
                  QUANTITE_UTILISEE_DEKATRINE integer,
                  QUANTITE_ACHETE_DEKATRINE integer,
                  STOCK_INITIAL_PHOSTOXIN_PH3 integer, 
                  QUANTITE_UTILISEE_PHOSTOXIN_PH3 integer,
                  QUANTITE_ACHETE_PHOSTOXIN_PH3 integer,
                  STOCK_INITIAL_RATICIDE integer, 
                  QUANTITE_UTILISEE_RATICIDE integer,
                  QUANTITE_ACHETE_RATICIDE integer,
                  STOCK_INITIAL_TEXTO integer,
                  QUANTITE_UTILISEE_TEXTO integer,
                  QUANTITE_ACHETE_TEXTO integer,
                  STOCK_FINAL_ACTELLIC REAL,
                  STOCK_FINAL_CIRATHRINE REAL,
                  STOCK_FINAL_PHOSTOXIN_PH3 REAL,
                  STOCK_FINAL_RATICIDE REAL,
                  STOCK_FINAL_TEXTO REAL
                )
                """)
dattabase.commit()
dattabase.close()

try:
    class Phyto_Window(object):
        def phyoto_produit(self, MainWindow):
            MainWindow.setObjectName("Window")
            MainWindow.resize(1350, 700)

            MainWindow.setStyleSheet("""QToolTip
            {
                border: 1px solid #76797C;
                background-color: rgb(90, 102, 117);;
                color: white;
                padding: 5px;
                opacity: 200;
            }

            QWidget
            {
                color: #000000;
                background-color: #ffffff;
                selection-background-color:#3daee9;
                selection-color: #3daee9;
                background-clip: border;
                border-image: none;
                border: 0px transparent black;
                outline: 0;
            }

            QWidget:item:hover
            {
                background-color: #3daee9;
                color: #eff0f1;
            }

            QWidget:item:selected
            {
                background-color: #3daee9;
            }



            QWidget:disabled
            {
                color: #454545;
                background-color: #31363b;
            }

            QAbstractItemView
            {
                alternate-background-color: #31363b;
                color: #eff0f1;
                border: 1px solid 3A3939;
                border-radius: 2px;
            }

            QWidget:focus, QMenuBar:focus
            {
                border: 1px solid #3daee9;
            }

            QTabWidget:focus, QCheckBox:focus, QRadioButton:focus, QSlider:focus
            {
                border: none;
            }

            QLineEdit
            {
                background-color: #FDFEFE;
                padding: 1px;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 0px;
                color: #000000;
            }
            QDoubleSpinBox
            {
                background-color: #FDFEFE;
                padding: 1px;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 0px;
                color:#000000;
                font-size: 11px;
                font-weight: bold;

            }
            QDoubleSpinBox:focus{
                background-color: #FDFEFE;
                border-style: solid;
                border: 2px solid #76797C;
                border-radius: 4px;
                border-color: #ff8c00;
            }
            QDoubleSpinBox::drop-down
            {
                subcontrol-origin: padding;
                subcontrol-position: top right;
                width: 1px;

                border-left-width: 0px;
                border-left-color: #232629;
                border-left-style: solid;
                border-top-right-radius: 1px;
                border-bottom-right-radius: 1px;
            }



            QGroupBox {
                border:1px solid #76797C;
                border-radius: 2px;
                margin-top: 5px;
            }

            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top center;
                padding-left: 4px;
                padding-right: 4px;
                padding-top: 4px;
            }

            QAbstractScrollArea
            {
                border-radius: 2px;
                border: 1px solid #76797C;
                background-color: transparent;
            }

            QScrollBar:horizontal
            {
                height: 15px;
                margin: 3px 15px 3px 15px;
                border: 1px transparent #2A2929;
                border-radius: 4px;
                background-color: #2A2929;
            }

            QScrollBar::handle:horizontal
            {
                background-color: #605F5F;
                min-width: 5px;
                border-radius: 4px;
            }

            QScrollBar::add-line:horizontal
            {
                margin: 0px 3px 0px 3px;
                border-image: url(:/qss_icons/Dark_rc/right_arrow_disabled.png);
                width: 10px;
                height: 10px;
                subcontrol-position: right;
                subcontrol-origin: margin;
            }

            QScrollBar::sub-line:horizontal
            {
                margin: 0px 3px 0px 3px;
                border-image: url(:/qss_icons/Dark_rc/left_arrow_disabled.png);
                height: 10px;
                width: 10px;
                subcontrol-position: left;
                subcontrol-origin: margin;
            }

            QScrollBar::add-line:horizontal:hover,QScrollBar::add-line:horizontal:on
            {
                border-image: url(:/qss_icons/Dark_rc/right_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: right;
                subcontrol-origin: margin;
            }


            QScrollBar::sub-line:horizontal:hover, QScrollBar::sub-line:horizontal:on
            {
                border-image: url(:/qss_icons/Dark_rc/left_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: left;
                subcontrol-origin: margin;
            }

            QScrollBar::up-arrow:horizontal, QScrollBar::down-arrow:horizontal
            {
                background: none;
            }


            QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal
            {
                background: none;
            }

            QScrollBar:vertical
            {
                background-color: #2A2929;
                width: 15px;
                margin: 15px 3px 15px 3px;
                border: 1px transparent #2A2929;
                border-radius: 4px;
            }

            QScrollBar::handle:vertical
            {
                background-color: #605F5F;
                min-height: 5px;
                border-radius: 4px;
            }

            QScrollBar::sub-line:vertical
            {
                margin: 3px 0px 3px 0px;
                border-image: url(:/qss_icons/Dark_rc/up_arrow_disabled.png);
                height: 10px;
                width: 10px;
                subcontrol-position: top;
                subcontrol-origin: margin;
            }

            QScrollBar::add-line:vertical
            {
                margin: 3px 0px 3px 0px;
                border-image: url(:/qss_icons/Dark_rc/down_arrow_disabled.png);
                height: 10px;
                width: 10px;
                subcontrol-position: bottom;
                subcontrol-origin: margin;
            }

            QScrollBar::sub-line:vertical:hover,QScrollBar::sub-line:vertical:on
            {

                border-image: url(:/qss_icons/Dark_rc/up_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: top;
                subcontrol-origin: margin;
            }


            QScrollBar::add-line:vertical:hover, QScrollBar::add-line:vertical:on
            {
                border-image: url(:/qss_icons/Dark_rc/down_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: bottom;
                subcontrol-origin: margin;
            }

            QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical
            {
                background: none;
            }


            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical
            {
                background: none;
            }

            QTextEdit
            {
                background-color: #FDFEFE;
                color: #000000;
                border: 1px solid #76797C;
            }

            QPlainTextEdit
            {
                background-color: #232629;;
                color: #eff0f1;
                border-radius: 2px;
                border: 1px solid #76797C;
            }

            QHeaderView::section
            {
                background-color: #76797C;
                color: #eff0f1;
                padding: 1px;
                border: 1px solid #76797C;
            }

            QSizeGrip {
                width: 12px;
                height: 12px;
            }


            QMainWindow::separator
            {
                background-color: #31363b;
                color: white;
                padding-left: 4px;
                spacing: 2px;
                border: 1px dashed #76797C;
            }

            QMainWindow::separator:hover
            {

                background-color: #787876;
                color: white;
                padding-left: 4px;
                border: 1px solid #76797C;
                spacing: 2px;
            }


            QMenu::separator
            {
                height: 1px;
                background-color: #76797C;
                color: white;
                padding-left: 4px;
                margin-left: 10px;
                margin-right: 5px;
            }


            QFrame
            {
                border-radius: 2px;
                border: 1px solid #76797C;
            }

            QFrame[frameShape="0"]
            {
                border-radius: 2px;
                border: 1px transparent #76797C;
            }

            QStackedWidget
            {
                border: 1px transparent black;
            }


            QPushButton
            {
                color: #00000;
                background-color:#ade3e7;
                border-width: 1px;
                border-color: #1e1e1e;
                border-style: solid;
                border-radius: 6;
                padding: 3px;
                font-size: 12px;
                padding-left: 5px;
                padding-right: 5px;
                min-width: 40px;

            }

            QPushButton:disabled
            {
                background-color:#03ecff;
                border-width: 1px;
                border-color: #454545;
                border-style: solid;
                padding-top: 5px;
                padding-bottom: 5px;
                padding-left: 10px;
                padding-right: 10px;
                border-radius: 2px;
                color: #454545;
            }
            QPushButton:pressed
            {
                background-color: #3daee9;
                padding-top: -15px;
                padding-bottom: -17px;
            }

            QComboBox {
        background-color: #FDFEFE;
        border: 1px solid #76797C;
        color:#000000;
        border-radius: 0.25em;
        padding: 0.0em 0.0em;
        font-size: 1.25rem;
        cursor: pointer;
    }

    QComboBox::drop-down {
        subcontrol-origin: padding;
        subcontrol-position: top right;
        width: 1.3em;
        border-left: 0px solid #777;
        border-radius: 0.25em;
    }

    QComboBox::drop-down::icon {
        image: url('E:/pythonProject_moullin-application.3.5/images/down-arroww.png');
    }

            QPushButton:checked{
                background-color: #76797C;
                border-color: #6A6969;
            }
            QComboBox:on
            {
                padding-top: 1px;
                padding-left: 1px;
                selection-background-color: #FDFEFE;
            }
            QComboBox QAbstractItemView
            {
                background-color: #FDFEFE;
                border-radius: 2px;
                border: 1px solid #76797C;
                color:#000000;
                selection-background-color: #000000;
            }
            QComboBox:hover,QDoubleSpinBox:Hover,QPushButton:hover,QAbstractSpinBox:hover,QLineEdit:hover,QTextEdit:hover,QPlainTextEdit:hover,QAbstractView:hover,QTreeView:hover
            {
                border: 1px solid #ff8c00;
                color: #000000;
            }




            QLabel
            {
                border: 2px solid black;
            }

            QTabWidget{
                border: 0px transparent black;
            }

            QTabWidget::pane {
                border: 1px solid #76797C;
                padding: 5px;
                margin: 0px;
            }

            QTabBar
            {
                qproperty-drawBase: 0;
                left: 5px; /* move to the right by 5px */
                border-radius: 3px;
            }

            QTabBar:focus
            {
                border: 0px transparent black;
            }

            QTabBar::close-button  {
                image: url(:/qss_icons/Dark_rc/close.png);
                background: transparent;
            }

            QTabBar::close-button:hover
            {
                image: url(:/qss_icons/Dark_rc/close-hover.png);
                background: transparent;
            }

            QTabBar::close-button:pressed {
                image: url(:/qss_icons/Dark_rc/close-pressed.png);
                background: transparent;
            }

            /* TOP TABS */
            QTabBar::tab:top {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-bottom: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                min-width: 10px;
                border-top-left-radius: 2px;
                border-top-right-radius: 2px;
            }

            QTabBar::tab:top:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-bottom: 1px transparent black;
                border-top-left-radius: 2px;
                border-top-right-radius: 2px;    
            }

            QTabBar::tab:top:!selected:hover {
                background-color: #3daee9;
            }

            /* BOTTOM TABS */
            QTabBar::tab:bottom {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-top: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                border-bottom-left-radius: 2px;
                border-bottom-right-radius: 2px;
                min-width: 10px;
            }

            QTabBar::tab:bottom:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-top: 1px transparent black;
                border-bottom-left-radius: 2px;
                border-bottom-right-radius: 2px;
            }

            QTabBar::tab:bottom:!selected:hover {
                background-color: #3daee9;
            }

            /* LEFT TABS */
            QTabBar::tab:left {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-left: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                border-top-right-radius: 2px;
                border-bottom-right-radius: 2px;
                min-height: 50px;
            }

            QTabBar::tab:left:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-left: 1px transparent black;
                border-top-right-radius: 2px;
                border-bottom-right-radius: 2px;
            }

            QTabBar::tab:left:!selected:hover {
                background-color: #3daee9;
            }


            /* RIGHT TABS */
            QTabBar::tab:right {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-right: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                border-top-left-radius: 2px;
                border-bottom-left-radius: 2px;
                min-height: 50px;
            }

            QTabBar::tab:right:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-right: 1px transparent black;
                border-top-left-radius: 2px;
                border-bottom-left-radius: 2px;
            }





            QSlider::groove:horizontal {
                border: 1px solid #565a5e;
                height: 4px;
                background: #565a5e;
                margin: 0px;
                border-radius: 2px;
            }

            QSlider::handle:horizontal {
                background: #232629;
                border: 1px solid #565a5e;
                width: 16px;
                height: 16px;
                margin: -8px 0;
                border-radius: 9px;
            }

            QSlider::groove:vertical {
                border: 1px solid #565a5e;
                width: 4px;
                background: #565a5e;
                margin: 0px;
                border-radius: 3px;
            }

            QSlider::handle:vertical {
                background: #232629;
                border: 1px solid #565a5e;
                width: 16px;
                height: 16px;
                margin: 0 -8px;
                border-radius: 9px;
            }

            QToolButton {
                background-color: transparent;
                border: 1px transparent #76797C;
                border-radius: 2px;
                margin: 3px;
                padding: 5px;
            }

            QToolButton[popupMode="1"] { /* only for MenuButtonPopup */
             padding-right: 20px; /* make way for the popup button */
             border: 1px #76797C;
             border-radius: 5px;
            }

            QToolButton[popupMode="2"] { /* only for InstantPopup */
             padding-right: 10px; /* make way for the popup button */
             border: 1px #76797C;
            }


            QToolButton:hover, QToolButton::menu-button:hover {
                background-color: transparent;
                border: 1px solid #3daee9;
                padding: 5px;
            }

            QToolButton:checked, QToolButton:pressed,
                    QToolButton::menu-button:pressed {
                background-color: #3daee9;
                border: 1px solid #3daee9;
                padding: 5px;
            }

            /* the subcontrol below is used only in the InstantPopup or DelayedPopup mode */
            QToolButton::menu-indicator {
                background-color:ff8c00;
                top: -7px; left: -2px; /* shift it a bit */
            }

            /* the subcontrols below are used only in the MenuButtonPopup mode */
            QToolButton::menu-button {
                border: 1px transparent #76797C;
                border-top-right-radius: 6px;
                border-bottom-right-radius: 6px;
                /* 16px width + 4px for border = 20px allocated above */
                width: 16px;
                outline: none;
            }

            QToolButton::menu-arrow {
               background-color:ff8c00;
            }

            QToolButton::menu-arrow:open {
                border: 1px solid #76797C;
            }

            QPushButton::menu-indicator  {
                subcontrol-origin: padding;
                subcontrol-position: bottom right;
                left: 8px;
            }

            QTableView
            {
                border: 1px solid #76797C;
                gridline-color: #31363b;
                background-color: #FDFEFE;
                color:#000000;
            }


            QTableView, QHeaderView
            {
                background-color: #FDFEFE;
                color:#000000;
                border-radius: 0px;
            }

            QTableView::item:pressed, QListView::item:pressed, QTreeView::item:pressed  {
                background: #FDFEFE;
                color: #000000;
            }

            QTableView::item:selected:active, QTreeView::item:selected:active, QListView::item:selected:active  {
                background: #3daee9;
                color: #000000;
            }


            QHeaderView
            {
                background-color: #FDFEFE;
                border: 1px transparent;
                border-radius: 0px;
                margin: 0px;
                padding: 0px;

            }

            QHeaderView::section  {
                background-color:#80f1f9;
                color: #000000;
                padding: 5px;
                border: 1px solid #76797C;
                border-radius: 0px;
                text-align: center;
            }

            QHeaderView::section::vertical::first, QHeaderView::section::vertical::only-one
            {
                border-top: 1px solid #76797C;
            }

            QHeaderView::section::vertical
            {
                border-top: transparent;
            }

            QHeaderView::section::horizontal::first, QHeaderView::section::horizontal::only-one
            {
                border-left: 1px solid #76797C;
            }

            QHeaderView::section::horizontal
            {
                border-left: transparent;
            }


            QHeaderView::section:checked
             {
                color: #000000;
                background-color: #3daee9;
             }

             /* style the sort indicator */
            QHeaderView::down-arrow {

            }

            QHeaderView::up-arrow {

            }


            QTableCornerButton::section {
                background-color: #31363b;
                border: 1px transparent #76797C;
                border-radius: 0px;
            }

            QToolBox  {
                padding: 5px;
                border: 1px transparent black;
            }

            QToolBox::tab {
                color: #eff0f1;
                background-color: #31363b;
                border: 1px solid #76797C;
                border-bottom: 1px transparent #31363b;
                border-top-left-radius: 5px;
                border-top-right-radius: 5px;
            }

            QToolBox::tab:selected { /* italicize selected tabs */
                font: italic;
                background-color: #31363b;
                border-color: #3daee9;
             }

            QStatusBar::item {
                border: 0px transparent dark;
             }


            QFrame[height="3"], QFrame[width="3"] {
                background-color: #76797C;
            }




            QDateEdit
            {
                background-color: #232629;;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 2px;
                padding: 1px;
                min-width: 75px;
            }

            QDateEdit:on
            {
                padding-top: 2px;
                padding-left: 2px;
                selection-background-color: #4a4a4a;
            }

            QDateEdit QAbstractItemView
            {
                background-color: #ff8c00;
                border-radius: 2px;
                border: 1px solid #3375A3;
                selection-background-color:ff8c00;
            }

            QDateEdit::drop-down
            {
                subcontrol-origin: padding;
                subcontrol-position: top right;
                width: 15px;
                border-left-width: 0px;
                border-left-color: darkgray;
                border-left-style: solid;
                border-top-right-radius: 3px;
                border-bottom-right-radius: 3px;
            }   
            QDateTimeEdit
            {
                background-color: #232629;;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 2px;
                padding: 1px;
                min-width: 75px;

            }    
            """)

            self.addbtn = QtWidgets.QPushButton("اضف", MainWindow, clicked=lambda: self.add_datta_save())
            self.addbtn.setGeometry(QtCore.QRect(620, 275, 100, 40))

            ##################################################sortie###############
            # self.deletebtn = QtWidgets.QPushButton("احذف", MainWindow, clicked=lambda: self.delete_item())
            # self.deletebtn.setGeometry(QtCore.QRect(260, 275, 100, 40))

            self.printbtn = QtWidgets.QPushButton("السجل", MainWindow, clicked=lambda: self.print_docx())
            self.printbtn.setGeometry(QtCore.QRect(380, 275, 100, 40))

            self.printbtnfich = QtWidgets.QPushButton(" بطاقة\nالمعالجة", MainWindow,
                                                      clicked=lambda: self.fiche_traitement())
            self.printbtnfich.setGeometry(QtCore.QRect(500, 275, 100, 40))

            self.filtertxt = QtWidgets.QLabel(" اختر التاريخ ", MainWindow)
            self.filtertxt.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.filtertxt.setGeometry(QtCore.QRect(740, 268, 590, 51))

            self.datefilter = QtWidgets.QDateEdit(MainWindow)
            self.datefilter.setGeometry(QtCore.QRect(1130, 275, 130, 40))
            self.datefilter.setDisplayFormat("yyyy-MM-dd")
            self.dateday = QDate.currentDate()
            self.datefilter.setDate(self.dateday)
            self.datefilter.setStyleSheet(
                " background-color: #FDFEFE;padding: 1px;border-style: solid;border: 1px solid #76797C;border-radius: 0px;color: #000000;")

            self.produitphytofl = QtWidgets.QComboBox(MainWindow)
            self.produitphytofl.setGeometry(QtCore.QRect(900, 275, 130, 40))
            self.produitphytofl.addItem("--------------")
            self.produitphytofl.addItem("PHOSTOXIN(PH3)")
            self.produitphytofl.addItem("ACTELLIC")
            self.produitphytofl.addItem("CIRATHRINE")
            self.produitphytofl.addItem("DEKATRINE")
            self.produitphytofl.addItem("RATICIDE")
            self.produitphytofl.addItem("TEXTO")

            self.btnfilter = QtWidgets.QPushButton("ابدء", MainWindow, clicked=lambda: self.impot_filter())
            self.btnfilter.setGeometry((QtCore.QRect(830, 275, 40, 40)))

            self.btnfcncl = QtWidgets.QPushButton("خروج", MainWindow, clicked=lambda: self.impot_all())
            self.btnfcncl.setGeometry((QtCore.QRect(760, 275, 40, 40)))

            self.datafiltertxt = QtWidgets.QLabel("اختر المادة:", MainWindow)
            self.datafiltertxt.setGeometry(QtCore.QRect(1040, 285, 60, 20))

            self.filtertxt = QtWidgets.QLabel("تصفية البيانات:", MainWindow)
            self.filtertxt.setGeometry(QtCore.QRect(1200, 254, 100, 20))

            self.cclstxt = QtWidgets.QLabel("<h2>تعاونية الحبوب والبقول الجافة بغليزان<h2/>", MainWindow)
            self.cclstxt.setGeometry(QtCore.QRect(430, 0, 500, 41))
            font = QtGui.QFont()
            font.setPointSize(14)
            font.setBold(True)
            font.setWeight(75)
            self.cclstxt.setFont(font)
            self.cclstxt.setMouseTracking(False)
            self.cclstxt.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
            self.cclstxt.setAutoFillBackground(False)
            self.cclstxt.setFrameShape(QtWidgets.QFrame.Shape.WinPanel)
            self.cclstxt.setLineWidth(0)
            self.cclstxt.setMidLineWidth(0)
            self.cclstxt.setTextFormat(QtCore.Qt.TextFormat.AutoText)
            self.cclstxt.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
            self.entrielabel = QtWidgets.QLabel("<h3>حالة مخزون مواد الصحة التباتية <h3/>", MainWindow)
            self.entrielabel.setGeometry(170, 75, 650, 40)
            self.entrielabel.setFont(font)
            self.titletxt = QtWidgets.QLabel(MainWindow)
            self.titletxt.setGeometry(QtCore.QRect(540, 50, 350, 30))
            font = QtGui.QFont()
            font.setPointSize(14)
            font.setBold(True)
            font.setUnderline(True)
            font.setWeight(75)
            self.titletxt.setFont(font)
            self.titletxt.setAlignment(
                QtCore.Qt.AlignmentFlag.AlignLeading | QtCore.Qt.AlignmentFlag.AlignLeft | QtCore.Qt.AlignmentFlag.AlignVCenter)
            self.titletxt.setObjectName("titletxt")
            #############################################
            self.txtdate = QtWidgets.QLabel("التاريخ", MainWindow)
            self.txtdate.setGeometry(QtCore.QRect(1215, 135, 110, 16))

            ####################################################
            self.dateedite = QtWidgets.QDateEdit(MainWindow)
            self.dateedite.setDisplayFormat("yyyy-MM-dd")

            self.dateedite.setStyleSheet(
                " background-color: #FDFEFE;padding: 1px;border-style: solid;border: 1px solid #76797C;border-radius: 0px;color: #000000;")
            self.dateedite.setGeometry(QtCore.QRect(1090, 130, 150, 35))
            self.dateedite.setDate(self.dateday)
            self.dateedite.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight)
            ########################################################
            self.lieutxt = QtWidgets.QLabel("المخزن", MainWindow)
            self.lieutxt.setGeometry(QtCore.QRect(1225, 195, 100, 20))
            self.lieucombo = QtWidgets.QComboBox(MainWindow)
            self.lieucombo.setGeometry(QtCore.QRect(1090, 190, 150, 35))

            self.lieucombo.addItem(" ")
            self.lieucombo.addItem("المخزن الرئيسي غليزان")
            #####################################################################################
            self.produitphytotxt = QtWidgets.QLabel("مواد الحماية النباتية", MainWindow)
            self.produitphytotxt.setGeometry(QtCore.QRect(900, 125, 116, 40))
            ###################################################################
            self.produitphyto = QtWidgets.QComboBox(MainWindow, editable=True)
            self.produitphyto.setGeometry(QtCore.QRect(760, 130, 150, 35))
            self.produitphyto.addItem("")
            self.produitphyto.addItem("PHOSTOXIN(PH3)")
            self.produitphyto.addItem("ACTELLIC")
            self.produitphyto.addItem("CIRATHRINE")
            self.produitphyto.addItem("DEKATRINE")
            self.produitphyto.addItem("RATICIDE")
            self.produitphyto.addItem("TEXTO")

            ###############################################################################
            self.txtSTOCKINITIAL = QtWidgets.QLabel("الكمية المشترات", MainWindow)
            self.txtSTOCKINITIAL.setGeometry(QtCore.QRect(550, 138, 120, 16))

            self.STOCKINITIAL = QtWidgets.QDoubleSpinBox(MainWindow)
            self.STOCKINITIAL.setSpecialValueText(' ')
            self.STOCKINITIAL.setDecimals(3)
            self.STOCKINITIAL.setRange(0, 100000)
            self.STOCKINITIAL.setGeometry(QtCore.QRect(430, 133, 150, 35))
            ############################################################################
            self.quantitéutilsetxt = QtWidgets.QLabel("الكمية المستخدمة", MainWindow)
            self.quantitéutilsetxt.setGeometry(QtCore.QRect(235, 138, 100, 22))

            self.quantitéutilsé = QtWidgets.QDoubleSpinBox(MainWindow)
            self.quantitéutilsé.setGeometry(QtCore.QRect(80, 133, 150, 35))
            self.quantitéutilsé.setSpecialValueText(" ")
            self.quantitéutilsé.setDecimals(3)

            ###########################################################################
            self.dateprempotxt = QtWidgets.QLabel("تاريخ نهاية الصلاحية", MainWindow)
            self.dateprempotxt.setGeometry(QtCore.QRect(865, 195, 150, 22))

            self.dateprempo = QtWidgets.QDateEdit(MainWindow)
            self.dateprempo.setDisplayFormat("yyyy-MM-dd")
            self.dateprempo.setDate(self.dateday)
            self.dateprempo.setStyleSheet(
                " background-color: #FDFEFE;padding: 1px;border-style: solid;border: 1px solid #76797C;border-radius: 0px;color: #000000;")
            self.dateprempo.setGeometry(QtCore.QRect(760, 190, 150, 35))

            self.naturelieutxt = QtWidgets.QLabel("نوع وكمية المادة المعالجة", MainWindow)
            self.naturelieutxt.setGeometry(QtCore.QRect(217, 182, 155, 45))
            self.naturelieu = QtWidgets.QTextEdit(MainWindow)
            self.naturelieu.setGeometry(QtCore.QRect(80, 190, 150, 35))
            self.naturelieu.setAlignment(Qt.AlignmentFlag.AlignRight)

            #########################################################################
            ########################################################################
            self.lieudetraitementtxt = QtWidgets.QLabel("مكان المعالجة", MainWindow)
            self.lieudetraitementtxt.setGeometry(QtCore.QRect(507, 195, 160, 22))

            self.lieudetraitementcombo = QtWidgets.QComboBox(MainWindow)
            self.lieudetraitementcombo.setGeometry(QtCore.QRect(430, 190, 150, 35))

            self.lieudetraitementcombo.addItem("")
            self.lieudetraitementcombo.addItem("المخزن الرئيسي غليزان")
            self.lieudetraitementcombo.addItem("مخزن ماسرة")
            self.lieudetraitementcombo.addItem("مخزن الكهف الازرق")
            self.lieudetraitementcombo.addItem("مخزن زمورة")
            self.lieudetraitementcombo.addItem("المحطة الجديدة منداس")
            self.lieudetraitementcombo.addItem("محطة منداس")
            self.lieudetraitementcombo.addItem("مخزن اوفلا ")
            self.lieudetraitementcombo.addItem("مخزن بلعسل")

            ########################################################################
            ####################################################################

            self.textEdit = QtWidgets.QTableWidget(MainWindow)
            self.textEdit.setRowCount(0)
            self.textEdit.setColumnCount(11)
            self.textEdit.setColumnWidth(0, 100)
            self.textEdit.setColumnWidth(1, 160)
            self.textEdit.setColumnWidth(2, 120)
            self.textEdit.setColumnWidth(3, 120)
            self.textEdit.setColumnWidth(4, 120)
            self.textEdit.setColumnWidth(5, 100)
            self.textEdit.setColumnWidth(6, 100)
            self.textEdit.setColumnWidth(7, 150)
            self.textEdit.setColumnWidth(8, 160)
            self.textEdit.setColumnWidth(9, 100)
            self.textEdit.setColumnWidth(10, 60)

            self.textEdit.setHorizontalHeaderLabels(("مكان المعالجة", "نوع وكمية\n المادة المعالجة",
                                                     "تاريخ نهاية الصلاحية", "المخزون النهائي", "الكمية المستخدمة",
                                                     "الكمية المشترات ", "المخزون الاولي", "منتجات\nالحماية النباتية",
                                                     "المخزن", "تاريخ المعاجة", "الرقم°",))
            self.textEdit.setGeometry(QtCore.QRect(20, 320, 1323, 310))
            self.textEdit.setObjectName("textEdit")

            self.totalfont = QtGui.QFont()
            self.totalfont.setPointSize(8)
            self.totalfont.setBold(True)
            self.totalfont.bold()

            self.phtxt = QtWidgets.QLabel("PHOSTOXIN(PH3)", MainWindow)
            # self.phtxt.setStyleSheet("background-color:QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646);")
            self.phtxt.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.phtxt.setGeometry(20, 640, 245, 50)
            self.phtxt.setFont(self.totalfont)

            self.phinitial = QtWidgets.QDoubleSpinBox(readOnly=True)
            self.phinitial.setPrefix("المخزون الاولي: ")
            self.phinitial.setGeometry(160, 645, 140, 20)
            self.phinitial.setRange(0, 900000)
            self.phinitial.setDecimals(3)

            self.phfinal = QtWidgets.QDoubleSpinBox(MainWindow, readOnly=True)
            self.phfinal.setPrefix("المخزون النهائي: ")
            self.phfinal.setDecimals(3)

            self.phfinal.setGeometry(118, 656, 140, 20)
            self.phfinal.setRange(0, 900000)

            self.ACTELLICtxt = QtWidgets.QLabel("ACTELLIC", MainWindow)
            # self.ACTELLICtxt.setStyleSheet("background-color:QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646);")
            self.ACTELLICtxt.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.ACTELLICtxt.setGeometry(267, 640, 205, 50)
            self.ACTELLICtxt.setFont(self.totalfont)

            self.ACTELLICinitial = QtWidgets.QDoubleSpinBox(readOnly=True)
            self.ACTELLICinitial.setPrefix("المخزون الاولي: ")

            self.ACTELLICinitial.setGeometry(420, 645, 140, 20)
            self.ACTELLICinitial.setRange(0, 90000.00)

            self.ACTELLICfinal = QtWidgets.QDoubleSpinBox(MainWindow, readOnly=True)
            self.ACTELLICfinal.setPrefix("المخزون النهائي: ")

            self.ACTELLICfinal.setGeometry(323, 656, 140, 20)
            self.ACTELLICfinal.setRange(0, 90000.00)

            self.CIRATHRINEtxt = QtWidgets.QLabel("CIRATHRINE", MainWindow)
            # self.CIRATHRINEtxt.setStyleSheet("background-color:QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646);")
            self.CIRATHRINEtxt.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.CIRATHRINEtxt.setGeometry(693, 640, 220, 50)
            self.CIRATHRINEtxt.setFont(self.totalfont)

            self.CIRATHRINEinitial = QtWidgets.QDoubleSpinBox(readOnly=True)
            self.CIRATHRINEinitial.setPrefix("المخزون الاولي: ")

            self.CIRATHRINEinitial.setGeometry(690, 645, 140, 20)
            self.CIRATHRINEinitial.setRange(0, 90000.00)

            self.CIRATHRINEfinal = QtWidgets.QDoubleSpinBox(MainWindow, readOnly=True)
            self.CIRATHRINEfinal.setPrefix("المخزون النهائي: ")

            self.CIRATHRINEfinal.setGeometry(763, 656, 140, 20)
            self.CIRATHRINEfinal.setRange(0, 90000.00)

            self.DEKATRINEtxt = QtWidgets.QLabel("DEKATRINE", MainWindow)
            # self.DEKATRINEtxt.setStyleSheet("background-color:QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646);")
            self.DEKATRINEtxt.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.DEKATRINEtxt.setGeometry(475, 640, 215, 50)
            self.DEKATRINEtxt.setFont(self.totalfont)

            self.DEKATRINEinitial = QtWidgets.QDoubleSpinBox(readOnly=True)
            self.DEKATRINEinitial.setPrefix("المخزون الاولي: ")

            self.DEKATRINEinitial.setGeometry(690, 645, 140, 20)
            self.DEKATRINEinitial.setRange(0, 90000.00)

            self.DEKATRINEfinal = QtWidgets.QDoubleSpinBox(MainWindow, readOnly=True)
            self.DEKATRINEfinal.setPrefix("المخزون النهائي: ")

            self.DEKATRINEfinal.setGeometry(540, 656, 140, 20)
            self.DEKATRINEfinal.setRange(0, 90000.00)

            self.RATICIDEtxt = QtWidgets.QLabel("RATICIDE", MainWindow)
            # self.RATICIDEtxt.setStyleSheet("background-color:QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646);")
            self.RATICIDEtxt.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.RATICIDEtxt.setGeometry(916, 640, 203, 50)
            self.RATICIDEtxt.setFont(self.totalfont)

            self.RATICIDEinitial = QtWidgets.QDoubleSpinBox(readOnly=True)
            self.RATICIDEinitial.setPrefix("المخزون الاولي: ")

            self.RATICIDEinitial.setGeometry(940, 645, 140, 20)
            self.RATICIDEinitial.setRange(0, 90000.00)

            self.RATICIDEfinal = QtWidgets.QDoubleSpinBox(MainWindow, readOnly=True)
            self.RATICIDEfinal.setPrefix("المخزون النهائي: ")

            self.RATICIDEfinal.setGeometry(970, 656, 140, 20)
            self.RATICIDEfinal.setRange(0, 90000.00)

            self.TEXTOtxt = QtWidgets.QLabel("TEXTO", MainWindow)
            self.TEXTOtxt.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            # self.TEXTOtxt.setStyleSheet("background-color:QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646);")
            self.TEXTOtxt.setGeometry(1123, 640, 220, 50)
            self.TEXTOtxt.setFont(self.totalfont)

            self.TEXTOinitial = QtWidgets.QDoubleSpinBox(readOnly=True)
            self.TEXTOinitial.setPrefix("المخزون الاولي: ")

            self.TEXTOinitial.setGeometry(1185, 645, 140, 20)
            self.TEXTOinitial.setRange(0, 90000.00)

            self.TEXTOfinal = QtWidgets.QDoubleSpinBox(MainWindow, readOnly=True)
            self.TEXTOfinal.setPrefix("المخزون النهائي:")

            # self.TEXTOfinal.setStyleSheet("background-color: #88ffaa;color:#000000; border: 2px solid bleu ;border-radius: 4px;padding: 0px;")
            self.TEXTOfinal.setGeometry(1165, 656, 140, 20)
            self.TEXTOfinal.setRange(0, 90000.00)

            self.b = QTimer()
            self.b.timeout.connect(self.impot_all)
            self.b.setInterval(10000)
            self.b.start()

            self.ph3 = QTimer()
            self.ph3.timeout.connect(self.importph)
            self.ph3.setInterval(2000)
            self.ph3.start()

            self.acti = QTimer()
            self.acti.timeout.connect(self.importactilic)
            self.acti.setInterval(2000)
            self.acti.start()

            self.raticid = QTimer()
            self.raticid.timeout.connect(self.importraticide)
            self.raticid.setInterval(2000)
            self.raticid.start()

            self.texto = QTimer()
            self.texto.timeout.connect(self.importtexto)
            self.texto.setInterval(2000)
            self.texto.start()

            self.cirath = QTimer()
            self.cirath.timeout.connect(self.importcirathrine)
            self.cirath.setInterval(2000)
            self.cirath.start()

            self.dekatr = QTimer()
            self.dekatr.timeout.connect(self.importdekatrine)
            self.dekatr.setInterval(2000)
            self.dekatr.start()

        ####################################################################################################################################
        def SITUATION_phyto(self, columns=None):
            try:
                selected_date = self.date_edit.date().toString("yyyy-MM")
                if self.produitphytofiltre.currentText() not in ['PHOSTOXIN(PH3)', 'ACTELLIC', 'CIRATHRINE', 'RATICIDE',
                                                                 'TEXTO'] and selected_date == "2000-01":
                    conn = sqlite3.connect('datta.db')
                    print("im in ")
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT   LIEU_DE_TRAITEMENT, NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE, DATE_DE_PEREMPTION, STOCK_FINAL, QUANTITE_UTILISEE, QUANTITE_ACHETE, STOCK_INITIAL, PRODUITS_PHYTOSANITAIRES, LIEU_DE_STOCKAGE,le FROM phytotablebidi")
                    rows = cursor.fetchall()
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(1.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1)
                    section.right_margin = docx.shared.Cm(1)
                    # add second heading
                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(20)
                    paragraph.style.font.bold = True
                    paragraph.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.CENTER
                    reshap1 = arabic_reshaper.reshape('حالة مخزون مواد الصحة النباتية')
                    bidi2 = bidi.algorithm.get_display(reshap1)
                    left_run1 = paragraph.add_run(bidi2)
                    reshap = arabic_reshaper.reshape('تعاونية الحبوب والبقول الجافة غليزان\n \n')
                    bidi1 = bidi.algorithm.get_display(reshap)
                    heading1 = self.doc.add_heading(bidi1, level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(14)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    heading1.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.RIGHT

                    table = self.doc.add_table(rows=1, cols=10)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    t1 = arabic_reshaper.reshape("مكان المعالجة")
                    bidi0 = bidi.algorithm.get_display(t1)
                    t2 = arabic_reshaper.reshape("نوع وكمية المادة المعالجة")
                    bidi2 = bidi.algorithm.get_display(t2)
                    t3 = arabic_reshaper.reshape("تاريخ نهاية الصلاحية")
                    bidi3 = bidi.algorithm.get_display(t3)
                    t4 = arabic_reshaper.reshape("المخزون النهائي")
                    bidi4 = bidi.algorithm.get_display(t4)
                    t5 = arabic_reshaper.reshape("الكمية المستعملة")
                    bidi5 = bidi.algorithm.get_display(t5)
                    t6 = arabic_reshaper.reshape("الكمية المشترات")
                    bidi6 = bidi.algorithm.get_display(t6)
                    t7 = arabic_reshaper.reshape("المخزون الابتدائي")
                    bidi7 = bidi.algorithm.get_display(t7)
                    t8 = arabic_reshaper.reshape(" المواد الكيماوية")
                    bidi8 = bidi.algorithm.get_display(t8)
                    t9 = arabic_reshaper.reshape("مكان التخزين")
                    bidi9 = bidi.algorithm.get_display(t9)
                    t10 = arabic_reshaper.reshape("تاريخ المعالجة")
                    bidi10 = bidi.algorithm.get_display(t10)
                    # Add text to the header cells
                    hdr_cells[0].text = bidi0
                    hdr_cells[1].text = bidi2
                    hdr_cells[2].text = bidi3
                    hdr_cells[3].text = bidi4
                    hdr_cells[4].text = bidi5
                    hdr_cells[5].text = bidi6
                    hdr_cells[6].text = bidi7
                    hdr_cells[7].text = bidi8
                    hdr_cells[8].text = bidi9
                    hdr_cells[9].text = bidi10
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(2)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2.4)
                    hdr_cells[2].width = Inches(1.8)
                    hdr_cells[3].width = Inches(1.4)
                    hdr_cells[4].width = Inches(1.4)
                    hdr_cells[5].width = Inches(1.4)
                    hdr_cells[6].width = Inches(1.5)
                    hdr_cells[7].width = Inches(1.2)
                    hdr_cells[8].width = Inches(2)
                    hdr_cells[9].width = Inches(1.5)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Arabic Typesetting'
                        cell.paragraphs[0].runs[0].font.size = Pt(9)
                        cell.paragraphs[0].runs[0].font.bold = True

                    # Add the data to the table
                    if rows:  # Check if the 'rows' list is not empty
                        table_cols = len(rows[0])
                        for row in range(len(rows)):
                            table.add_row()
                            for col in range(table_cols):
                                cell = table.cell(row + 1, col)
                                cell_text = str(rows[row][col]).replace(" ", "\n")
                                cell.text = str(rows[row][col])

                                # Set font properties
                                cell.paragraphs[0].runs[0].font.name = 'Times New Roman (Titres CS)'
                                cell.paragraphs[0].runs[0].font.size = Pt(11)
                                cell.paragraphs[0].runs[0].font.bold = True
                                cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                            for row in table.rows:
                                for cell in row.cells:
                                    for paragraph in cell.paragraphs:
                                        paragraph.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.RIGHT


                    else:
                        # Handle the case when there are no rows in the 'rows' list
                        table.add_row()
                        cell = table.cell(1, 0)
                        celltext = "لا توجد بيانات"
                        err = arabic_reshaper.reshape(celltext)
                        errbidi = bidi.algorithm.get_display(err)
                        cell.text = errbidi

                    for row in table.rows:
                        row.height = Inches(0.6)
                    # Save and open the document for printing
                    path, _ = QFileDialog.getSaveFileName(None, "Enregistrer la fiche", "", "Fichiers DOCX (*.docx)")
                    if path:
                        self.doc.save(path)
                    conn.close()
                    msgbox = QtWidgets.QMessageBox()
                    msgbox.setWindowTitle('تاكيد العملية')
                    msgbox.setText('تم حفظ الملف بنجاح')
                    msgbox.exec()
                elif selected_date and self.produitphytofiltre.currentText() not in ['PHOSTOXIN(PH3)', 'ACTELLIC',
                                                                                     'CIRATHRINE', 'RATICIDE', 'TEXTO']:

                    selected_month = self.date_edit.date().month()
                    # Create a list of Arabic month names
                    arabic_month_names = ["جانفي", "فيفري", "مارس", "أفريل", "ماي", "جوان", "جويلية", "أوت", "سبتمبر",
                                          "أكتوبر", "نوفمبر", "ديسمبر"]
                    # Create a custom formatted Arabic month string
                    formatted_month = arabic_month_names[selected_month - 1]
                    mois = formatted_month
                    print(selected_date)
                    print(mois)
                    conn = sqlite3.connect('datta.db')
                    cursor = conn.cursor()
                    cursor.execute(
                        """SELECT
                                      REPLACE(group_concat(LIEU_DE_TRAITEMENT), ',', '                                     ') AS LIEU_DE_TRAITEMENT,
                                      REPLACE(group_concat(NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE), ',', '                ') AS NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE,
                                      DATE_DE_PEREMPTION,
                                      STOCK_FINAL,
                                      SUM(QUANTITE_UTILISEE) AS QUANTITE_UTILISEE,
                                      QUANTITE_ACHETE,
                                      STOCK_INITIAL,
                                      PRODUITS_PHYTOSANITAIRES,   
                                      LIEU_DE_STOCKAGE
                                      FROM phytotablebidi WHERE strftime('%Y-%m', le) = ? GROUP BY PRODUITS_PHYTOSANITAIRES;""",
                        (selected_date,))
                    rows = cursor.fetchall()
                    print(rows)
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1)
                    section.right_margin = docx.shared.Cm(1)
                    # add second heading

                    reshap = arabic_reshaper.reshape('حالة مخزون مواد الصحة النباتية  \n ')
                    bidi1 = bidi.algorithm.get_display(reshap)
                    heading1 = self.doc.add_heading(bidi1, level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(20)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    heading1.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.CENTER

                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(14)
                    paragraph.style.font.bold = True
                    paragraph.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.RIGHT
                    reshapl = arabic_reshaper.reshape('شهر:' + mois)
                    bidil = bidi.algorithm.get_display(reshapl)
                    left_run = paragraph.add_run(bidil)

                    reshap1 = arabic_reshaper.reshape(
                        'تعاونية الحبوب والبقول الجافة غليزان\t\t\t\t\t\t\t\t\t\t\t\t\t\n')
                    bidi2 = bidi.algorithm.get_display(reshap1)
                    left_run1 = paragraph.add_run(bidi2)
                    table = self.doc.add_table(rows=1, cols=9)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    t1 = arabic_reshaper.reshape("مكان المعالجة")
                    bidi0 = bidi.algorithm.get_display(t1)
                    t2 = arabic_reshaper.reshape("نوع وكمية المادة المعالجة")
                    bidi2 = bidi.algorithm.get_display(t2)
                    t3 = arabic_reshaper.reshape(" تاريخ نهاية الصلاحية")
                    bidi3 = bidi.algorithm.get_display(t3)
                    t4 = arabic_reshaper.reshape(" المخزون النهائي")
                    bidi4 = bidi.algorithm.get_display(t4)
                    t5 = arabic_reshaper.reshape("الكمية المستعملة")
                    bidi5 = bidi.algorithm.get_display(t5)
                    t6 = arabic_reshaper.reshape("الكمية المشترات")
                    bidi6 = bidi.algorithm.get_display(t6)
                    t7 = arabic_reshaper.reshape("المخزون الابتدائي")
                    bidi7 = bidi.algorithm.get_display(t7)
                    t8 = arabic_reshaper.reshape("المواد الكيماوية")
                    bidi8 = bidi.algorithm.get_display(t8)
                    t9 = arabic_reshaper.reshape("مكان التخزين")
                    bidi9 = bidi.algorithm.get_display(t9)
                    # Add text to the header cells
                    hdr_cells[0].text = bidi0
                    hdr_cells[1].text = bidi2
                    hdr_cells[2].text = bidi3
                    hdr_cells[3].text = bidi4
                    hdr_cells[4].text = bidi5
                    hdr_cells[5].text = bidi6
                    hdr_cells[6].text = bidi7
                    hdr_cells[7].text = bidi8
                    hdr_cells[8].text = bidi9
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(2)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2.4)
                    hdr_cells[2].width = Inches(1.8)
                    hdr_cells[3].width = Inches(1.4)
                    hdr_cells[4].width = Inches(1.4)
                    hdr_cells[5].width = Inches(1.4)
                    hdr_cells[6].width = Inches(1.5)
                    hdr_cells[7].width = Inches(1.2)
                    hdr_cells[8].width = Inches(2)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(11)
                        cell.paragraphs[0].runs[0].font.bold = True
                    # Add the data to the table
                    if rows:  # Check if the 'rows' list is not empty
                        table_cols = len(rows[0])
                        for row in range(len(rows)):
                            table.add_row()
                            for col in range(table_cols):
                                cell = table.cell(row + 1, col)
                                cell.text = str(rows[row][col])
                                # Set font properties
                                cell.paragraphs[0].runs[0].font.name = 'Calibri'
                                cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                                cell.paragraphs[0].runs[0].font.bold = False
                                cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                            for row in table.rows:
                                for cell in row.cells:
                                    for paragraph in cell.paragraphs:
                                        paragraph.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.RIGHT
                    else:
                        # Handle the case when there are no rows in the 'rows' list
                        table.add_row()
                        cell = table.cell(1, 0)
                        cell.text = "No data available."
                    for row in table.rows:
                        row.height = Inches(0.6)
                    # Save and open the document for printing
                    path, _ = QFileDialog.getSaveFileName(None, "Enregistrer la fiche", "", "Fichiers DOCX (*.docx)")
                    if path:
                        self.doc.save(path)
                    conn.close()
                    msgbox = QtWidgets.QMessageBox()
                    msgbox.setWindowTitle('تاكيد العملية')
                    msgbox.setText('تم حفظ الملف بنجاح')
                    msgbox.exec()


                elif self.produitphytofiltre.currentText() and selected_date == "01-01-2000":
                    produitphyto = self.produitphytofiltre.currentText()
                    selected_date = self.date_edit.date().toString("dd-MM-yyyy")
                    locale.setlocale(locale.LC_ALL, 'fr_FR.utf8')
                    QtCore.QLocale.setDefault(QtCore.QLocale(QtCore.QLocale.Language.French))
                    selected_date1 = self.date_edit.date().toPyDate()
                    mois = selected_date1.strftime("%B").lower()

                    conn = sqlite3.connect('datta.db')
                    cursor = conn.cursor()
                    cursor.execute(
                        """"SELECT
                                      REPLACE(group_concat(LIEU_DE_TRAITEMENT), ',', '                                     ') AS LIEU_DE_TRAITEMENT,
                                      REPLACE(group_concat(NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE), ',', '  ') AS NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE,
                                      REPLACE(group_concat(DATE_DE_PEREMPTION), ',', ',') AS DATE_DE_PEREMPTION,
                                      STOCK_FINAL,
                                      SUM(QUANTITE_UTILISEE) AS QUANTITE_UTILISEE,
                                      QUANTITE_ACHETE,
                                      STOCK_INITIAL,
                                      PRODUITS_PHYTOSANITAIRES,
                                      LIEU_DE_STOCKAGE
                                      FROM phytotablebidi  WHERE   PRODUITS_PHYTOSANITAIRES= ? GROUP BY PRODUITS_PHYTOSANITAIRES;""",
                        (produitphyto,))
                    rows = cursor.fetchall()
                    print(rows)
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1)
                    section.right_margin = docx.shared.Cm(1)
                    # add second heading

                    reshap = arabic_reshaper.reshape('حالة مخزون مواد الصحة النباتية  \n ')
                    bidi1 = bidi.algorithm.get_display(reshap)
                    heading1 = self.doc.add_heading(bidi1, level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(20)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    heading1.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.CENTER

                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(14)
                    paragraph.style.font.bold = True
                    paragraph.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.RIGHT
                    reshapl = arabic_reshaper.reshape('منتج:' + produitphyto)
                    bidil = bidi.algorithm.get_display(reshapl)
                    left_run = paragraph.add_run(bidil)

                    reshap1 = arabic_reshaper.reshape('تعاونية الحبوب والبقول الجافة غليزان\t\t\t\t\t\t\t\t\t\t\t\t\n')
                    bidi2 = bidi.algorithm.get_display(reshap1)
                    left_run1 = paragraph.add_run(bidi2)

                    table = self.doc.add_table(rows=1, cols=9)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    t1 = arabic_reshaper.reshape("مكان المعالجة")
                    bidi0 = bidi.algorithm.get_display(t1)
                    t2 = arabic_reshaper.reshape("نوع وكمية المادة المعالجة")
                    bidi2 = bidi.algorithm.get_display(t2)
                    t3 = arabic_reshaper.reshape("تاريخ نهاية الصلاحية")
                    bidi3 = bidi.algorithm.get_display(t3)
                    t4 = arabic_reshaper.reshape("المخزون النهائي")
                    bidi4 = bidi.algorithm.get_display(t4)
                    t5 = arabic_reshaper.reshape("الكمية المستعملة")
                    bidi5 = bidi.algorithm.get_display(t5)
                    t6 = arabic_reshaper.reshape("الكمية المشترات")
                    bidi6 = bidi.algorithm.get_display(t6)
                    t7 = arabic_reshaper.reshape("المخزون الابتدائي")
                    bidi7 = bidi.algorithm.get_display(t7)
                    t8 = arabic_reshaper.reshape(" المواد الكيماوية")
                    bidi8 = bidi.algorithm.get_display(t8)
                    t9 = arabic_reshaper.reshape("مكان التخزين")
                    bidi9 = bidi.algorithm.get_display(t9)
                    # Add text to the header cells
                    hdr_cells[0].text = bidi0
                    hdr_cells[1].text = bidi2
                    hdr_cells[2].text = bidi3
                    hdr_cells[3].text = bidi4
                    hdr_cells[4].text = bidi5
                    hdr_cells[5].text = bidi6
                    hdr_cells[6].text = bidi7
                    hdr_cells[7].text = bidi8
                    hdr_cells[8].text = bidi9
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(2)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2.4)
                    hdr_cells[2].width = Inches(1.8)
                    hdr_cells[3].width = Inches(1.4)
                    hdr_cells[4].width = Inches(1.4)
                    hdr_cells[5].width = Inches(1.4)
                    hdr_cells[6].width = Inches(1.5)
                    hdr_cells[7].width = Inches(1.2)
                    hdr_cells[8].width = Inches(2)
                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(11)
                        cell.paragraphs[0].runs[0].font.bold = True
                    # Add the data to the table
                    if rows:  # Check if the 'rows' list is not empty
                        table_cols = len(rows[0])
                        for row in range(len(rows)):
                            table.add_row()
                            for col in range(table_cols):
                                cell = table.cell(row + 1, col)
                                cell.text = str(rows[row][col])
                                # Set font properties
                                cell.paragraphs[0].runs[0].font.name = 'Calibri'
                                cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                                cell.paragraphs[0].runs[0].font.bold = False
                                cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                    else:
                        # Handle the case when there are no rows in the 'rows' list
                        table.add_row()
                        cell = table.cell(1, 0)
                        cell.text = "No data available."
                    for row in table.rows:
                        row.height = Inches(0.6)
                    # Save and open the document for printing
                    path, _ = QFileDialog.getSaveFileName(None, "Enregistrer la fiche", "", "Fichiers DOCX (*.docx)")
                    if path:
                        self.doc.save(path)
                    conn.close()
                    msgbox = QtWidgets.QMessageBox()
                    msgbox.setWindowTitle('تاكيد العملية')
                    msgbox.setText('تم حفظ الملف بنجاح')
                    msgbox.exec()

                elif selected_date and self.produitphytofiltre.currentText():
                    produitphyto = self.produitphytofiltre.currentText()
                    selected_month = self.date_edit.date().month()
                    # Create a list of Arabic month names
                    arabic_month_names = ["جانفي", "فيفري", "مارس", "أفريل", "ماي", "جوان", "جويلية", "أوت", "سبتمبر",
                                          "أكتوبر", "نوفمبر", "ديسمبر"]
                    # Create a custom formatted Arabic month string
                    formatted_month = arabic_month_names[selected_month - 1]
                    mois = formatted_month
                    print(selected_date)
                    print(mois)
                    conn = sqlite3.connect('datta.db')
                    cursor = conn.cursor()
                    cursor.execute("""SELECT
                                      REPLACE(group_concat(LIEU_DE_TRAITEMENT), ',', '                                     ') AS LIEU_DE_TRAITEMENT,
                                      REPLACE(group_concat(NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE), ',', '  ') AS NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE,
                                      REPLACE(group_concat(DATE_DE_PEREMPTION), ',', ',') AS DATE_DE_PEREMPTION,
                                      STOCK_FINAL,
                                      SUM(QUANTITE_UTILISEE) AS QUANTITE_UTILISEE,
                                      QUANTITE_ACHETE,
                                      STOCK_INITIAL,
                                      PRODUITS_PHYTOSANITAIRES,
                                      LIEU_DE_STOCKAGE
                                      FROM phytotablebidi  WHERE strftime('%Y-%m', le)=?  and PRODUITS_PHYTOSANITAIRES=? GROUP BY PRODUITS_PHYTOSANITAIRES ; """,
                                   (selected_date, produitphyto,))
                    rows = cursor.fetchall()
                    print(rows)
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1)
                    section.right_margin = docx.shared.Cm(1)
                    # add second heading

                    reshap = arabic_reshaper.reshape('حالة مخزون مواد الصحة النباتية  \n ')
                    bidi1 = bidi.algorithm.get_display(reshap)
                    heading1 = self.doc.add_heading(bidi1, level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(20)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    heading1.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.CENTER

                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(14)
                    paragraph.style.font.bold = True
                    paragraph.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.RIGHT
                    reshapl = arabic_reshaper.reshape('شهر:' + mois)
                    bidil = bidi.algorithm.get_display(reshapl)
                    left_run = paragraph.add_run(bidil)

                    reshap1 = arabic_reshaper.reshape('تعاونية الحبوب والبقول الجافة غليزان\t\t\t\t\t\t\t\t\t\t\t\t\n')
                    bidi2 = bidi.algorithm.get_display(reshap1)
                    left_run1 = paragraph.add_run(bidi2)
                    table = self.doc.add_table(rows=1, cols=9)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    t1 = arabic_reshaper.reshape("مكان المعالجة")
                    bidi0 = bidi.algorithm.get_display(t1)
                    t2 = arabic_reshaper.reshape("نوع وكمية المادة المعالجة")
                    bidi2 = bidi.algorithm.get_display(t2)
                    t3 = arabic_reshaper.reshape(" تاريخ نهاية الصلاحية")
                    bidi3 = bidi.algorithm.get_display(t3)
                    t4 = arabic_reshaper.reshape(" المخزون النهائي")
                    bidi4 = bidi.algorithm.get_display(t4)
                    t5 = arabic_reshaper.reshape("الكمية المستعملة")
                    bidi5 = bidi.algorithm.get_display(t5)
                    t6 = arabic_reshaper.reshape("الكمية المشترات")
                    bidi6 = bidi.algorithm.get_display(t6)
                    t7 = arabic_reshaper.reshape("المخزون الابتدائي")
                    bidi7 = bidi.algorithm.get_display(t7)
                    t8 = arabic_reshaper.reshape("المواد الكيماوية")
                    bidi8 = bidi.algorithm.get_display(t8)
                    t9 = arabic_reshaper.reshape("مكان التخزين")
                    bidi9 = bidi.algorithm.get_display(t9)
                    # Add text to the header cells
                    hdr_cells[0].text = bidi0
                    hdr_cells[1].text = bidi2
                    hdr_cells[2].text = bidi3
                    hdr_cells[3].text = bidi4
                    hdr_cells[4].text = bidi5
                    hdr_cells[5].text = bidi6
                    hdr_cells[6].text = bidi7
                    hdr_cells[7].text = bidi8
                    hdr_cells[8].text = bidi9
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(2)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2.4)
                    hdr_cells[2].width = Inches(1.8)
                    hdr_cells[3].width = Inches(1.4)
                    hdr_cells[4].width = Inches(1.4)
                    hdr_cells[5].width = Inches(1.4)
                    hdr_cells[6].width = Inches(1.5)
                    hdr_cells[7].width = Inches(1.2)
                    hdr_cells[8].width = Inches(2)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(11)
                        cell.paragraphs[0].runs[0].font.bold = True
                    # Add the data to the table
                    if rows:  # Check if the 'rows' list is not empty
                        table_cols = len(rows[0])
                        for row in range(len(rows)):
                            table.add_row()
                            for col in range(table_cols):
                                cell = table.cell(row + 1, col)
                                cell.text = str(rows[row][col])
                                # Set font properties
                                cell.paragraphs[0].runs[0].font.name = 'Calibri'
                                cell.paragraphs[0].runs[0].font.size = Pt(10.5)
                                cell.paragraphs[0].runs[0].font.bold = False
                                cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                            for row in table.rows:
                                for cell in row.cells:
                                    for paragraph in cell.paragraphs:
                                        paragraph.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.RIGHT

                    else:
                        # Handle the case when there are no rows in the 'rows' list
                        table.add_row()
                        cell = table.cell(1, 0)
                        cell.text = "No data available."
                    for row in table.rows:
                        row.height = Inches(0.6)
                    # Save and open the document for printing
                    path, _ = QFileDialog.getSaveFileName(None, "Enregistrer la fiche", "", "Fichiers DOCX (*.docx)")
                    if path:
                        self.doc.save(path)
                    conn.close()
                    msgbox = QtWidgets.QMessageBox()
                    msgbox.setWindowTitle('تاكيد العملية')
                    msgbox.setText('تم حفظ الملف بنجاح')
                    msgbox.exec()

            except Exception as e:
                print(e)

        def print_docx(self):
            self.dialog = QtWidgets.QDialog()
            self.dialog.setStyleSheet(""" QWidget
                            {
                                color: #000000;
                                background-color: #ffffff;
                                border-width: 1px;
                                border-color: #1e1e1e;
                                border-style: solid;
                                border-radius: 6;
                                padding: 0px;
                                font-size: 18px;
                                padding-left: 1px;
                                padding-right: 1px
                            }
                            QWidget:item:hover
                            {
                                background-color: #3daee9;
                                color: #eff0f1;
                            }
                            QWidget:item:selected
                            {
                                background-color: #3daee9;
                            }
                            QWidget:disabled
                            {
                                color: #454545;
                                background-color: #31363b;
                            }
                            QPushButton
                            {
                                color: #000000;
                                background-color:#ade3e7;
                                border-width: 1px;
                                border-color: #1e1e1e;
                                border-style: solid;
                                border-radius: 6;
                                padding: 3px;
                                font-size: 12px;
                                padding-left: 5px;
                                padding-right: 5px;
                                min-width: 40px
                            }
                            QPushButton:disabled
                            {
                                background-color: #31363b;
                                border-width: 1px;
                                border-color: #454545;
                                border-style: solid;
                                padding-top: 5px;
                                padding-bottom: 5px;
                                padding-left: 10px;
                                padding-right: 10px;
                                border-radius: 2px;
                                color: #454545;
                            }

                            QPushButton:pressed
                            {
                                background-color: #3daee9;
                                padding-top: -15px;
                                padding-bottom: -17px;
                            }
                            QPushButton:hover
                            {
                                border: 1px solid #ff8c00;
                                color: #000000;
                            }
                             QLabel
                            {
                                font-size: 18px;
                                border: 0px solid orange;
                            }

                        """)
            self.dialog.setWindowTitle("اختر التاريخ والمنتج")
            self.dialog.setGeometry(200, 200, 475, 200)
            label0 = QtWidgets.QLabel("اختر التاريخ والمنتج", self.dialog)
            label0.setGeometry(130, 10, 180, 30)
            label1 = QtWidgets.QLabel("التاريخ", self.dialog)
            label1.setGeometry(75, 50, 80, 30)
            label2 = QtWidgets.QLabel("المنتج", self.dialog)
            label2.setGeometry(290, 50, 80, 30)
            self.date_edit = QtWidgets.QDateEdit(self.dialog)
            self.date_edit.setDisplayFormat("yyyy-MM-dd")
            self.date_edit.setDate(self.dateday)
            self.date_edit.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight)

            self.date_edit.resize(180, 30)
            self.date_edit.move(40, 82)
            self.produitphytofiltre = QtWidgets.QComboBox(self.dialog)
            self.produitphytofiltre.setGeometry(250, 82, 180, 30)
            self.produitphytofiltre.addItem(" ")
            self.produitphytofiltre.addItem("PHOSTOXIN(PH3)")
            self.produitphytofiltre.addItem("ACTELLIC")
            self.produitphytofiltre.addItem("CIRATHRINE")
            self.produitphytofiltre.addItem("RATICIDE")
            self.produitphytofiltre.addItem("TEXTO")
            self.ok_button = QtWidgets.QPushButton("طباعة", self.dialog, clicked=lambda: self.print_docx_situation())
            self.ok_button.setGeometry(310, 140, 80, 40)
            cancel_button = QtWidgets.QPushButton("خروج", self.dialog, clicked=lambda: self.dialog.close())
            cancel_button.setGeometry(90, 140, 80, 40)
            self.print_button = QtWidgets.QPushButton("حفظ", self.dialog, clicked=lambda: self.SITUATION_phyto())
            self.print_button.setGeometry(200, 140, 80, 40)
            self.dialog.exec()

        def print_docx_situation(self):
            try:
                selected_date = self.date_edit.date().toString("yyyy-MM")
                if self.produitphytofiltre.currentText() not in ['PHOSTOXIN(PH3)', 'ACTELLIC', 'CIRATHRINE', 'RATICIDE',
                                                                 'TEXTO'] and selected_date == "2000-01":
                    conn = sqlite3.connect('datta.db')
                    cursor = conn.cursor()
                    cursor.execute(
                        "SELECT   LIEU_DE_TRAITEMENT, NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE, DATE_DE_PEREMPTION, STOCK_FINAL, QUANTITE_UTILISEE, QUANTITE_ACHETE, STOCK_INITIAL, PRODUITS_PHYTOSANITAIRES, LIEU_DE_STOCKAGE,le FROM phytotablebidi")
                    rows = cursor.fetchall()
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(1.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1)
                    section.right_margin = docx.shared.Cm(1)
                    # add second heading
                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(20)
                    paragraph.style.font.bold = True
                    paragraph.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.CENTER
                    reshap1 = arabic_reshaper.reshape('حالة مخزون مواد الصحة النباتية')
                    bidi2 = bidi.algorithm.get_display(reshap1)
                    left_run1 = paragraph.add_run(bidi2)
                    reshap = arabic_reshaper.reshape('تعاونية الحبوب والبقول الجافة غليزان\n\n')
                    bidi1 = bidi.algorithm.get_display(reshap)
                    heading1 = self.doc.add_heading(bidi1, level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(14)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    heading1.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.RIGHT

                    table = self.doc.add_table(rows=1, cols=10)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    t1 = arabic_reshaper.reshape("مكان المعالجة")
                    bidi0 = bidi.algorithm.get_display(t1)
                    t2 = arabic_reshaper.reshape("نوع وكمية المادة المعالجة")
                    bidi2 = bidi.algorithm.get_display(t2)
                    t3 = arabic_reshaper.reshape("تاريخ نهاية الصلاحية")
                    bidi3 = bidi.algorithm.get_display(t3)
                    t4 = arabic_reshaper.reshape("المخزون النهائي")
                    bidi4 = bidi.algorithm.get_display(t4)
                    t5 = arabic_reshaper.reshape("الكمية المستعملة")
                    bidi5 = bidi.algorithm.get_display(t5)
                    t6 = arabic_reshaper.reshape("الكمية المشترات")
                    bidi6 = bidi.algorithm.get_display(t6)
                    t7 = arabic_reshaper.reshape("المخزون الابتدائي")
                    bidi7 = bidi.algorithm.get_display(t7)
                    t8 = arabic_reshaper.reshape(" المواد الكيماوية")
                    bidi8 = bidi.algorithm.get_display(t8)
                    t9 = arabic_reshaper.reshape("مكان التخزين")
                    bidi9 = bidi.algorithm.get_display(t9)
                    t10 = arabic_reshaper.reshape("تاريخ المعالجة")
                    bidi10 = bidi.algorithm.get_display(t10)
                    # Add text to the header cells
                    hdr_cells[0].text = bidi0
                    hdr_cells[1].text = bidi2
                    hdr_cells[2].text = bidi3
                    hdr_cells[3].text = bidi4
                    hdr_cells[4].text = bidi5
                    hdr_cells[5].text = bidi6
                    hdr_cells[6].text = bidi7
                    hdr_cells[7].text = bidi8
                    hdr_cells[8].text = bidi9
                    hdr_cells[9].text = bidi10
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(2)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2.4)
                    hdr_cells[2].width = Inches(1.8)
                    hdr_cells[3].width = Inches(1.4)
                    hdr_cells[4].width = Inches(1.4)
                    hdr_cells[5].width = Inches(1.4)
                    hdr_cells[6].width = Inches(1.5)
                    hdr_cells[7].width = Inches(1.2)
                    hdr_cells[8].width = Inches(2)
                    hdr_cells[9].width = Inches(1.5)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                        cell.paragraphs[0].runs[0].font.size = Pt(10)
                        cell.paragraphs[0].runs[0].font.bold = True

                    # Add the data to the table
                    if rows:  # Check if the 'rows' list is not empty
                        table_cols = len(rows[0])
                        for row in range(len(rows)):
                            table.add_row()
                            for col in range(table_cols):
                                cell = table.cell(row + 1, col)
                                cell_text = str(rows[row][col]).replace(" ", "\n")
                                cell.text = str(rows[row][col])

                                # Set font properties
                                cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                                cell.paragraphs[0].runs[0].font.size = Pt(9)
                                cell.paragraphs[0].runs[0].font.bold = True
                                cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                            for row in table.rows:
                                for cell in row.cells:
                                    for paragraph in cell.paragraphs:
                                        paragraph.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.RIGHT
                    else:
                        # Handle the case when there are no rows in the 'rows' list
                        table.add_row()
                        cell = table.cell(1, 0)
                        celltext = "لا توجد بيانات"
                        err = arabic_reshaper.reshape(celltext)
                        errbidi = bidi.algorithm.get_display(err)
                        cell.text = errbidi

                    for row in table.rows:
                        row.height = Inches(0.6)

                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    doc_pdf = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False).name
                    self.doc.save(temp_file)
                    if temp_file:
                        a = self.progress_bar()
                        os.startfile(temp_file, "open")
                        # docx2pdf.convert(temp_file,doc_pdf)
                        # app_path = 'C:\\Program Files\\ONLYOFFICE\\DesktopEditors\\DesktopEditors.exe'
                        # subprocess.Popen([app_path,doc_pdf])
                        # word = win32a.gencache.EnsureDispatch("Word.Application")

                        # doc = word.Documents.Open(temp_file)
                        # doc.PrintOut()
                        # doc.Close()
                        # word.Quit()
                    conn.close()

                    # subprocess.Popen([app_path,temp_file])
                    # os.startfile(temp_file,"print")
                elif selected_date and self.produitphytofiltre.currentText() not in ['PHOSTOXIN(PH3)', 'ACTELLIC',
                                                                                     'CIRATHRINE', 'RATICIDE', 'TEXTO']:
                    selected_month = self.date_edit.date().month()
                    # Create a list of Arabic month names
                    arabic_month_names = ["جانفي", "فيفري", "مارس", "أفريل", "ماي", "جوان", "جويلية", "أوت", "سبتمبر",
                                          "أكتوبر", "نوفمبر", "ديسمبر"]
                    # Create a custom formatted Arabic month string
                    formatted_month = arabic_month_names[selected_month - 1]
                    mois = formatted_month
                    print(selected_date)
                    print(mois)
                    conn = sqlite3.connect('datta.db')
                    cursor = conn.cursor()
                    cursor.execute(
                        """SELECT
                                      REPLACE(group_concat(LIEU_DE_TRAITEMENT), ',','\n') AS LIEU_DE_TRAITEMENT,
                                      REPLACE(group_concat(NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE), ',', '\n') AS NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE,
                                      DATE_DE_PEREMPTION,
                                      STOCK_FINAL,
                                      SUM(QUANTITE_UTILISEE) AS QUANTITE_UTILISEE,
                                      QUANTITE_ACHETE,
                                      STOCK_INITIAL,
                                      PRODUITS_PHYTOSANITAIRES,   
                                      LIEU_DE_STOCKAGE
                                      FROM phytotablebidi WHERE strftime('%Y-%m', le) = ? GROUP BY PRODUITS_PHYTOSANITAIRES;""",
                        (selected_date,))
                    rows = cursor.fetchall()
                    print(rows)
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1)
                    section.right_margin = docx.shared.Cm(1)
                    # add second heading

                    reshap = arabic_reshaper.reshape('حالة مخزون مواد الصحة النباتية  \n ')
                    bidi1 = bidi.algorithm.get_display(reshap)
                    heading1 = self.doc.add_heading(bidi1, level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(20)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    heading1.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.CENTER

                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(14)
                    paragraph.style.font.bold = True
                    paragraph.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.RIGHT
                    reshapl = arabic_reshaper.reshape('شهر:' + mois)
                    bidil = bidi.algorithm.get_display(reshapl)
                    left_run = paragraph.add_run(bidil)

                    reshap1 = arabic_reshaper.reshape('تعاونية الحبوب والبقول الجافة غليزان\t\t\t\t\t\t\t\t\t\t\t\t\n')
                    bidi2 = bidi.algorithm.get_display(reshap1)
                    left_run1 = paragraph.add_run(bidi2)

                    table = self.doc.add_table(rows=1, cols=9)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    t1 = arabic_reshaper.reshape("مكان المعالجة")
                    bidi0 = bidi.algorithm.get_display(t1)
                    t2 = arabic_reshaper.reshape("نوع وكمية المادة المعالجة")
                    bidi2 = bidi.algorithm.get_display(t2)
                    t3 = arabic_reshaper.reshape(" تاريخ نهاية الصلاحية")
                    bidi3 = bidi.algorithm.get_display(t3)
                    t4 = arabic_reshaper.reshape(" المخزون النهائي")
                    bidi4 = bidi.algorithm.get_display(t4)
                    t5 = arabic_reshaper.reshape("الكمية المستعملة")
                    bidi5 = bidi.algorithm.get_display(t5)
                    t6 = arabic_reshaper.reshape("الكمية المشترات")
                    bidi6 = bidi.algorithm.get_display(t6)
                    t7 = arabic_reshaper.reshape("المخزون الابتدائي")
                    bidi7 = bidi.algorithm.get_display(t7)
                    t8 = arabic_reshaper.reshape("المواد الكيماوية")
                    bidi8 = bidi.algorithm.get_display(t8)
                    t9 = arabic_reshaper.reshape("مكان التخزين")
                    bidi9 = bidi.algorithm.get_display(t9)
                    # Add text to the header cells
                    hdr_cells[0].text = bidi0
                    hdr_cells[1].text = bidi2
                    hdr_cells[2].text = bidi3
                    hdr_cells[3].text = bidi4
                    hdr_cells[4].text = bidi5
                    hdr_cells[5].text = bidi6
                    hdr_cells[6].text = bidi7
                    hdr_cells[7].text = bidi8
                    hdr_cells[8].text = bidi9
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(1.9)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2.6)
                    hdr_cells[2].width = Inches(1.8)
                    hdr_cells[3].width = Inches(1.4)
                    hdr_cells[4].width = Inches(1.4)
                    hdr_cells[5].width = Inches(1.4)
                    hdr_cells[6].width = Inches(1.5)
                    hdr_cells[7].width = Inches(1.2)
                    hdr_cells[8].width = Inches(2)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(10)
                        cell.paragraphs[0].runs[0].font.bold = True

                    # Add the data to the table
                    if rows:  # Check if the 'rows' list is not empty
                        table_cols = len(rows[0])
                        for row in range(len(rows)):
                            table.add_row()
                            for col in range(table_cols):
                                cell = table.cell(row + 1, col)
                                cell.text = str(rows[row][col])
                                # Set font properties
                                cell.paragraphs[0].runs[0].font.name = 'Calibri'
                                cell.paragraphs[0].runs[0].font.size = Pt(9)
                                cell.paragraphs[0].runs[0].font.bold = True
                                cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                            for row in table.rows:
                                for cell in row.cells:
                                    for paragraph in cell.paragraphs:
                                        paragraph.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.RIGHT
                    else:
                        # Handle the case when there are no rows in the 'rows' list
                        table.add_row()
                        cell = table.cell(1, 0)
                        cell.text = "No data available."
                    for row in table.rows:
                        row.height = Inches(0.6)
                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    if temp_file:
                        a = self.progress_bar()
                        a = self.progress_bar()
                        os.startfile(temp_file, "open")
                        # word = win32a.gencache.EnsureDispatch("Word.Application")

                        # doc = word.Documents.Open(temp_file)
                        # doc.PrintOut()
                        # doc.Close()
                        # word.Quit()
                    conn.close()


                elif self.produitphytofiltre.currentText() and selected_date == "2000-01":
                    produitphyto = self.produitphytofiltre.currentText()
                    selected_date = self.date_edit.date().toString("yyyy-MM")
                    locale.setlocale(locale.LC_ALL, 'fr_FR.utf8')
                    QtCore.QLocale.setDefault(QtCore.QLocale(QtCore.QLocale.Language.French))
                    selected_date1 = self.date_edit.date().toPyDate()
                    mois = selected_date1.strftime("%B").lower()

                    conn = sqlite3.connect('datta.db')
                    cursor = conn.cursor()
                    cursor.execute(
                        """SELECT
                                      REPLACE(group_concat(LIEU_DE_TRAITEMENT), ',', '\n') AS LIEU_DE_TRAITEMENT,
                                      REPLACE(group_concat(NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE), ',', '\n') AS NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE,
                                      REPLACE(group_concat(DATE_DE_PEREMPTION), ',', ',') AS DATE_DE_PEREMPTION,
                                      STOCK_FINAL,
                                      SUM(QUANTITE_UTILISEE) AS QUANTITE_UTILISEE,
                                      QUANTITE_ACHETE,
                                      STOCK_INITIAL,
                                      PRODUITS_PHYTOSANITAIRES,
                                      LIEU_DE_STOCKAGE
                                      FROM phytotablebidi  WHERE PRODUITS_PHYTOSANITAIRES= ? GROUP BY PRODUITS_PHYTOSANITAIRES  ;""",
                        (produitphyto,))
                    rows = cursor.fetchall()
                    print(rows)
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1)
                    section.right_margin = docx.shared.Cm(1)
                    # add second heading

                    reshap = arabic_reshaper.reshape('حالة مخزون مواد الصحة النباتية  \n ')
                    bidi1 = bidi.algorithm.get_display(reshap)
                    heading1 = self.doc.add_heading(bidi1, level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(20)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    heading1.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.CENTER

                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(14)
                    paragraph.style.font.bold = True
                    paragraph.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.RIGHT
                    reshapl = arabic_reshaper.reshape('المنتج:' + produitphyto)
                    bidil = bidi.algorithm.get_display(reshapl)
                    left_run = paragraph.add_run(bidil)

                    reshap1 = arabic_reshaper.reshape('تعاونية الحبوب والبقول الجافة غليزان\t\t\t\t\t\t\t\t\t\t\t\t\n')
                    bidi2 = bidi.algorithm.get_display(reshap1)
                    left_run1 = paragraph.add_run(bidi2)

                    table = self.doc.add_table(rows=1, cols=9)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    t1 = arabic_reshaper.reshape("مكان المعالجة")
                    bidi0 = bidi.algorithm.get_display(t1)
                    t2 = arabic_reshaper.reshape("نوع وكمية المادة المعالجة")
                    bidi2 = bidi.algorithm.get_display(t2)
                    t3 = arabic_reshaper.reshape("تاريخ نهاية الصلاحية")
                    bidi3 = bidi.algorithm.get_display(t3)
                    t4 = arabic_reshaper.reshape("المخزون النهائي")
                    bidi4 = bidi.algorithm.get_display(t4)
                    t5 = arabic_reshaper.reshape("الكمية المستعملة")
                    bidi5 = bidi.algorithm.get_display(t5)
                    t6 = arabic_reshaper.reshape("الكمية المشترات")
                    bidi6 = bidi.algorithm.get_display(t6)
                    t7 = arabic_reshaper.reshape("المخزون الابتدائي")
                    bidi7 = bidi.algorithm.get_display(t7)
                    t8 = arabic_reshaper.reshape(" المواد الكيماوية")
                    bidi8 = bidi.algorithm.get_display(t8)
                    t9 = arabic_reshaper.reshape("مكان التخزين")
                    bidi9 = bidi.algorithm.get_display(t9)
                    # Add text to the header cells
                    hdr_cells[0].text = bidi0
                    hdr_cells[1].text = bidi2
                    hdr_cells[2].text = bidi3
                    hdr_cells[3].text = bidi4
                    hdr_cells[4].text = bidi5
                    hdr_cells[5].text = bidi6
                    hdr_cells[6].text = bidi7
                    hdr_cells[7].text = bidi8
                    hdr_cells[8].text = bidi9
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(1.9)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2.6)
                    hdr_cells[2].width = Inches(1.8)
                    hdr_cells[3].width = Inches(1.4)
                    hdr_cells[4].width = Inches(1.4)
                    hdr_cells[5].width = Inches(1.4)
                    hdr_cells[6].width = Inches(1.5)
                    hdr_cells[7].width = Inches(1.2)
                    hdr_cells[8].width = Inches(2)
                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(11)
                        cell.paragraphs[0].runs[0].font.bold = True
                    # Add the data to the table
                    if rows:  # Check if the 'rows' list is not empty
                        table_cols = len(rows[0])
                        for row in range(len(rows)):
                            table.add_row()
                            for col in range(table_cols):
                                cell = table.cell(row + 1, col)
                                cell.text = str(rows[row][col])
                                # Set font properties
                                cell.paragraphs[0].runs[0].font.name = 'Calibri'
                                cell.paragraphs[0].runs[0].font.size = Pt(9)
                                cell.paragraphs[0].runs[0].font.bold = True
                                cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                            for row in table.rows:
                                for cell in row.cells:
                                    for paragraph in cell.paragraphs:
                                        paragraph.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.RIGHT
                    else:
                        # Handle the case when there are no rows in the 'rows' list
                        table.add_row()
                        cell = table.cell(1, 0)
                        cell.text = "No data available."
                    for row in table.rows:
                        row.height = Inches(0.6)
                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    if temp_file:
                        a = self.progress_bar()
                        a = self.progress_bar()
                        os.startfile(temp_file, "open")
                        # word = win32a.gencache.EnsureDispatch("Word.Application")
                        # a = self.progress_bar()
                        # doc = word.Documents.Open(temp_file)

                        # doc.PrintOut()
                        # doc.Close()
                        # word.Quit()
                    conn.close()


                elif selected_date and self.produitphytofiltre.currentText():
                    produitphyto = self.produitphytofiltre.currentText()
                    selected_month = self.date_edit.date().month()
                    # Create a list of Arabic month names
                    arabic_month_names = ["جانفي", "فيفري", "مارس", "أفريل", "ماي", "جوان", "جويلية", "أوت", "سبتمبر",
                                          "أكتوبر", "نوفمبر", "ديسمبر"]
                    # Create a custom formatted Arabic month string
                    formatted_month = arabic_month_names[selected_month - 1]
                    mois = formatted_month
                    print(selected_date)
                    print(mois)
                    conn = sqlite3.connect('datta.db')
                    cursor = conn.cursor()
                    cursor.execute(
                        """SELECT
                                      REPLACE(group_concat(LIEU_DE_TRAITEMENT), ',', '\n') AS LIEU_DE_TRAITEMENT,
                                      REPLACE(group_concat(NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE), ',', '\n') AS NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE,
                                      REPLACE(group_concat(DATE_DE_PEREMPTION), ',', ',') AS DATE_DE_PEREMPTION,
                                      STOCK_FINAL,
                                      SUM(QUANTITE_UTILISEE) AS QUANTITE_UTILISEE,
                                      QUANTITE_ACHETE,
                                      STOCK_INITIAL,
                                      PRODUITS_PHYTOSANITAIRES,
                                      LIEU_DE_STOCKAGE
                                      FROM phytotablebidi  WHERE strftime('%Y-%m', le)=?  and PRODUITS_PHYTOSANITAIRES=? GROUP BY PRODUITS_PHYTOSANITAIRES  ;""",
                        (selected_date, produitphyto,))
                    rows = cursor.fetchall()
                    print(rows)
                    ########################################################################
                    # Create a new document and add a table
                    self.doc = docx.Document()
                    section = self.doc.sections[0]
                    section.orientation = WD_ORIENTATION.LANDSCAPE
                    section.page_width = docx.shared.Cm(29.7)
                    section.page_height = docx.shared.Cm(21.0)
                    section.top_margin = docx.shared.Cm(0.5)
                    section.bottom_margin = docx.shared.Cm(1.5)
                    section.left_margin = docx.shared.Cm(1)
                    section.right_margin = docx.shared.Cm(1)
                    # add second heading

                    reshap = arabic_reshaper.reshape('حالة مخزون مواد الصحة النباتية  \n ')
                    bidi1 = bidi.algorithm.get_display(reshap)
                    heading1 = self.doc.add_heading(bidi1, level=1)
                    heading1.style.font.name = 'Times New Roman'
                    heading1.style.font.size = Pt(20)
                    heading1.style.font.bold = True
                    heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                    heading1.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.CENTER

                    paragraph = self.doc.add_paragraph()
                    paragraph.style.font.name = 'Times New Roman'
                    paragraph.style.font.size = Pt(14)
                    paragraph.style.font.bold = True
                    paragraph.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.RIGHT
                    reshapl = arabic_reshaper.reshape('شهر:' + mois)
                    bidil = bidi.algorithm.get_display(reshapl)
                    left_run = paragraph.add_run(bidil)

                    reshap1 = arabic_reshaper.reshape('تعاونية الحبوب والبقول الجافة غليزان\t\t\t\t\t\t\t\t\t\t\t\t\n')
                    bidi2 = bidi.algorithm.get_display(reshap1)
                    left_run1 = paragraph.add_run(bidi2)
                    table = self.doc.add_table(rows=1, cols=9)
                    table.style = "Table Grid"  # set the table style
                    hdr_cells = table.rows[0].cells
                    t1 = arabic_reshaper.reshape("مكان المعالجة")
                    bidi0 = bidi.algorithm.get_display(t1)
                    t2 = arabic_reshaper.reshape("نوع وكمية المادة المعالجة")
                    bidi2 = bidi.algorithm.get_display(t2)
                    t3 = arabic_reshaper.reshape(" تاريخ نهاية الصلاحية")
                    bidi3 = bidi.algorithm.get_display(t3)
                    t4 = arabic_reshaper.reshape(" المخزون النهائي")
                    bidi4 = bidi.algorithm.get_display(t4)
                    t5 = arabic_reshaper.reshape("الكمية المستعملة")
                    bidi5 = bidi.algorithm.get_display(t5)
                    t6 = arabic_reshaper.reshape("الكمية المشترات")
                    bidi6 = bidi.algorithm.get_display(t6)
                    t7 = arabic_reshaper.reshape("المخزون الابتدائي")
                    bidi7 = bidi.algorithm.get_display(t7)
                    t8 = arabic_reshaper.reshape("المواد الكيماوية")
                    bidi8 = bidi.algorithm.get_display(t8)
                    t9 = arabic_reshaper.reshape("مكان التخزين")
                    bidi9 = bidi.algorithm.get_display(t9)
                    # Add text to the header cells
                    hdr_cells[0].text = bidi0
                    hdr_cells[1].text = bidi2
                    hdr_cells[2].text = bidi3
                    hdr_cells[3].text = bidi4
                    hdr_cells[4].text = bidi5
                    hdr_cells[5].text = bidi6
                    hdr_cells[6].text = bidi7
                    hdr_cells[7].text = bidi8
                    hdr_cells[8].text = bidi9
                    # Set the width of the header cells
                    hdr_cells[0].width = Inches(1.9)  # set the width of the first column to 1.5 inches
                    hdr_cells[1].width = Inches(2.6)
                    hdr_cells[2].width = Inches(1.8)
                    hdr_cells[3].width = Inches(1.4)
                    hdr_cells[4].width = Inches(1.4)
                    hdr_cells[5].width = Inches(1.4)
                    hdr_cells[6].width = Inches(1.5)
                    hdr_cells[7].width = Inches(1.2)
                    hdr_cells[8].width = Inches(2)

                    for cell in table.rows[0].cells:
                        cell.paragraphs[0].runs[0].font.name = 'Calibri'
                        cell.paragraphs[0].runs[0].font.size = Pt(11)
                        cell.paragraphs[0].runs[0].font.bold = True
                    # Add the data to the table
                    if rows:  # Check if the 'rows' list is not empty
                        table_cols = len(rows[0])
                        for row in range(len(rows)):
                            table.add_row()
                            for col in range(table_cols):
                                cell = table.cell(row + 1, col)
                                cell.text = str(rows[row][col])
                                # Set font properties
                                cell.paragraphs[0].runs[0].font.name = 'Calibri'
                                cell.paragraphs[0].runs[0].font.size = Pt(9)
                                cell.paragraphs[0].runs[0].font.bold = True
                                cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                            for row in table.rows:
                                for cell in row.cells:
                                    for paragraph in cell.paragraphs:
                                        paragraph.alignment = docx.enum.text.WD_ALIGN_PARAGRAPH.RIGHT
                    else:
                        # Handle the case when there are no rows in the 'rows' list
                        table.add_row()
                        cell = table.cell(1, 0)
                        cell.text = "No data available."
                    for row in table.rows:
                        row.height = Inches(0.6)
                    # Save and open the document for printing
                    temp_file = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                    self.doc.save(temp_file)
                    if temp_file:
                        a = self.progress_bar()
                        a = self.progress_bar()
                        os.startfile(temp_file, "open")
                        # word = win32a.gencache.EnsureDispatch("Word.Application")
                        # a = self.progress_bar()
                        # doc = word.Documents.Open(temp_file)
                        # doc.PrintOut()
                        # doc.Close()
                        # word.Quit()
                    conn.close()
            except Exception as e:
                print(e)

        def progress_bar(self):
            self.widgetprogress = QtWidgets.QDialog()
            self.widgetprogress.setStyleSheet(""" QWidget
                            {
                                color: #000000;
                                background-color: #ffffff;
                                border-width: 1px;
                                border-color: #1e1e1e;
                                border-style: solid;
                                border-radius: 6;
                                padding: 0px;
                                font-size: 18px;
                                padding-left: 1px;
                                padding-right: 1px
                            }
                            QWidget:item:hover
                            {
                                background-color: #3daee9;
                                color: #eff0f1;
                            }
                            QWidget:item:selected
                            {
                                background-color: #3daee9;
                            }
                            QWidget:disabled
                            {
                                color: #454545;
                                background-color: #31363b;
                            }
                            QPushButton
                            {
                                color: #000000;
                                background-color:#ade3e7;
                                border-width: 1px;
                                border-color: #1e1e1e;
                                border-style: solid;
                                border-radius: 6;
                                padding: 3px;
                                font-size: 12px;
                                padding-left: 5px;
                                padding-right: 5px;
                                min-width: 40px
                            }
                            QPushButton:disabled
                            {
                                background-color: #31363b;
                                border-width: 1px;
                                border-color: #454545;
                                border-style: solid;
                                padding-top: 5px;
                                padding-bottom: 5px;
                                padding-left: 10px;
                                padding-right: 10px;
                                border-radius: 2px;
                                color: #454545;
                            }

                            QPushButton:pressed
                            {
                                background-color: #3daee9;
                                padding-top: -15px;
                                padding-bottom: -17px;
                            }
                            QPushButton:hover
                            {
                                border: 1px solid #ff8c00;
                                color: #000000;
                            }
                             QLabel
                            {
                                font-size: 18px;
                                border: 0px solid orange;
                            }

                        """)
            self.widgetprogress.setWindowTitle("جاري طباعة الملف يرجى الانتظار ")
            self.widgetprogress.setGeometry(550, 450, 250, 20)
            self.progressBar = QtWidgets.QProgressBar(self.widgetprogress)
            self.progressBar.setGeometry(10, 10, 200, 10)
            self.progressBar.setMinimum(0)
            self.progressBar.setMaximum(100)
            self.progressBar.setStyleSheet("""QProgressBar
    {
    border: solid grey;
    border-radius: 15px;
    color: black;
    }
    QProgressBar::chunk 
    {
    background-color: #05B8CC;
    border-radius :15px;
    }      """)
            self.progressBar.setAlignment(Qt.AlignmentFlag.AlignCenter)
            self.vbox = QVBoxLayout(self.widgetprogress)
            self.vbox.addWidget(self.progressBar)
            self.timer = QtCore.QTimer()
            self.timer.timeout.connect(self.update_progress)
            self.timer.start(100)  # Update progress every
            self.widgetprogress.show()

        def update_progress(self):
            # Simulate file download progress
            current_value = self.progressBar.value()
            if current_value < 100:
                new_value = current_value + 10
                self.progressBar.setValue(new_value)
                if current_value == 99:
                    self.timer.stop()
                    self.progressBar.close()
                    self.widgetprogress.close()

        def impot_filter(self):
            try:
                datefl = self.datefilter.date().toString("yyyy-MM")
                produitphytofl = self.produitphytofl.currentText()
                conn = sqlite3.connect('datta.db')
                cursor = conn.cursor()
                cursordate = conn.cursor()
                if datefl == "2000-01":
                    print(datefl)
                    cursor.execute(
                        "SELECT LIEU_DE_TRAITEMENT, NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE, DATE_DE_PEREMPTION, STOCK_FINAL, QUANTITE_UTILISEE, QUANTITE_ACHETE, STOCK_INITIAL, PRODUITS_PHYTOSANITAIRES, LIEU_DE_STOCKAGE, le FROM phytotable WHERE  PRODUITS_PHYTOSANITAIRES = ? ",
                        (produitphytofl,))
                    result = cursor.fetchall()
                    self.textEdit.setRowCount(0)
                    for row, row_datta in enumerate(result):
                        self.textEdit.insertRow(row)
                        for colum, datta in enumerate(row_datta):
                            self.textEdit.setItem(row, colum, QTableWidgetItem(str(datta)))
                elif produitphytofl == '--------------':
                    cursordate.execute(
                        "SELECT LIEU_DE_TRAITEMENT, NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE, DATE_DE_PEREMPTION, STOCK_FINAL, QUANTITE_UTILISEE, QUANTITE_ACHETE, STOCK_INITIAL, PRODUITS_PHYTOSANITAIRES, LIEU_DE_STOCKAGE, le FROM phytotable WHERE   strftime('%Y-%m',le ) = ? ",
                        (datefl,))
                    resultdate = cursordate.fetchall()
                    self.textEdit.setRowCount(0)
                    for rowdate, row_dattadate in enumerate(resultdate):
                        self.textEdit.insertRow(rowdate)
                        for columdate, dattadate in enumerate(row_dattadate):
                            self.textEdit.setItem(rowdate, columdate, QTableWidgetItem(str(dattadate)))
                else:
                    cursor.execute(
                        "SELECT LIEU_DE_TRAITEMENT, NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE, DATE_DE_PEREMPTION, STOCK_FINAL, QUANTITE_UTILISEE, QUANTITE_ACHETE, STOCK_INITIAL, PRODUITS_PHYTOSANITAIRES, LIEU_DE_STOCKAGE, le FROM phytotable WHERE  PRODUITS_PHYTOSANITAIRES = ? AND strftime('%Y-%m',le ) = ? ",
                        (produitphytofl, datefl,))
                    result = cursor.fetchall()
                    self.textEdit.setRowCount(0)
                    for row, row_datta in enumerate(result):
                        self.textEdit.insertRow(row)
                        for colum, datta in enumerate(row_datta):
                            self.textEdit.setItem(row, colum, QTableWidgetItem(str(datta)))




            except sqlite3.Error as e:
                print(e)

        def add_datta_save(self):
            try:
                datte = self.dateedite.text()
                lieudestock = self.lieucombo.currentText()
                lieudestockt = arabic_reshaper.reshape(lieudestock)
                lieudestockbidi = bidi.algorithm.get_display(lieudestockt)
                produitpyhto = self.produitphyto.currentText()
                stockinitial = self.STOCKINITIAL.value()
                quantiteutilise = self.quantitéutilsé.value()
                stockfinall = (stockinitial - quantiteutilise)
                datedeprom = self.dateprempo.text()
                lieudetraitement = self.lieudetraitementcombo.currentText()
                lieudetraitementt = arabic_reshaper.reshape(lieudetraitement)
                lieudetraitementbidi = bidi.algorithm.get_display(lieudetraitementt)
                lieudetraitementbidi.replace(" ", "")
                natureetquantite = self.naturelieu.toPlainText()
                natureetquantitet = arabic_reshaper.reshape(natureetquantite)
                natureetquantitebidi = bidi.algorithm.get_display(natureetquantitet)
                quantiteachete = self.STOCKINITIAL.value()
                if produitpyhto:
                    dattabase = sqlite3.connect("datta.db")
                    curs = dattabase.cursor()
                    cursachat = dattabase.cursor()
                    cursbidi = dattabase.cursor()

                    if produitpyhto == "PHOSTOXIN(PH3)":
                        curs.execute(
                            "INSERT INTO phytotable (PRODUITS_PHYTOSANITAIRES,le,LIEU_DE_STOCKAGE,QUANTITE_ACHETE,QUANTITE_UTILISEE,STOCK_FINAL,DATE_DE_PEREMPTION,NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE,LIEU_DE_TRAITEMENT,STOCK_INITIAL_PHOSTOXIN_PH3 ,QUANTITE_ACHETE_PHOSTOXIN_PH3,QUANTITE_UTILISEE_PHOSTOXIN_PH3) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)",
                            (produitpyhto, datte, lieudestock, quantiteachete, quantiteutilise, stockfinall, datedeprom,
                             natureetquantite, lieudetraitement, stockinitial, quantiteachete, quantiteutilise))
                        curs.execute(
                            "UPDATE phytotable SET STOCK_FINAL = (SELECT SUM(STOCK_INITIAL_PHOSTOXIN_PH3 - QUANTITE_UTILISEE_PHOSTOXIN_PH3)FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES = 'PHOSTOXIN(PH3)')WHERE PRODUITS_PHYTOSANITAIRES = 'PHOSTOXIN(PH3)'")
                        curs.execute(
                            "UPDATE phytotable SET STOCK_INITIAL = (SELECT SUM(QUANTITE_ACHETE_PHOSTOXIN_PH3 )FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES = 'PHOSTOXIN(PH3)')")

                        # curspif.execute("UPDATE phytotable SET STOCK_INITIAL_PHOSTOXIN_PH3 = IFNULL( STOCK_INITIAL_PHOSTOXIN_PH3 , 0) WHERE STOCK_FINAL = 0 AND PRODUITS_PHYTOSANITAIRES = 'PHOSTOXIN(PH3)'")
                        ##################################bidi############
                        curs.execute(
                            "INSERT INTO phytotablebidi (PRODUITS_PHYTOSANITAIRES,le,LIEU_DE_STOCKAGE,QUANTITE_ACHETE,QUANTITE_UTILISEE,STOCK_FINAL,DATE_DE_PEREMPTION,NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE,LIEU_DE_TRAITEMENT,STOCK_INITIAL_PHOSTOXIN_PH3 ,QUANTITE_ACHETE_PHOSTOXIN_PH3,QUANTITE_UTILISEE_PHOSTOXIN_PH3) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)",
                            (produitpyhto, datte, lieudestockbidi, quantiteachete, quantiteutilise, stockfinall,
                             datedeprom,
                             natureetquantitebidi, lieudetraitementbidi, stockinitial, quantiteachete, quantiteutilise))
                        curs.execute(
                            "UPDATE phytotablebidi SET STOCK_FINAL = (SELECT SUM(STOCK_INITIAL_PHOSTOXIN_PH3 - QUANTITE_UTILISEE_PHOSTOXIN_PH3)FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES = 'PHOSTOXIN(PH3)')WHERE PRODUITS_PHYTOSANITAIRES = 'PHOSTOXIN(PH3)'")
                        curs.execute(
                            "UPDATE phytotablebidi SET STOCK_INITIAL = (SELECT SUM(QUANTITE_ACHETE_PHOSTOXIN_PH3 )FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES = 'PHOSTOXIN(PH3)')")
                    if produitpyhto == "ACTELLIC":
                        curs.execute(
                            "INSERT INTO phytotable (PRODUITS_PHYTOSANITAIRES,le,LIEU_DE_STOCKAGE,QUANTITE_ACHETE,QUANTITE_UTILISEE,STOCK_FINAL,DATE_DE_PEREMPTION,NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE,LIEU_DE_TRAITEMENT,STOCK_INITIAL_ACTELLIC,QUANTITE_ACHETE_ACTELLIC,QUANTITE_UTILISEE_ACTELLIC) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)",
                            (produitpyhto, datte, lieudestock, quantiteachete, quantiteutilise, stockfinall, datedeprom,
                             natureetquantite, lieudetraitement, stockinitial, quantiteachete, quantiteutilise))
                        curs.execute(
                            "UPDATE phytotable SET STOCK_FINAL = (SELECT SUM(STOCK_INITIAL_ACTELLIC - QUANTITE_UTILISEE_ACTELLIC)FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES = 'ACTELLIC')WHERE PRODUITS_PHYTOSANITAIRES = 'ACTELLIC'")
                        cursachat.execute(
                            "UPDATE phytotable SET STOCK_INITIAL = (SELECT SUM(QUANTITE_ACHETE_ACTELLIC )FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES = 'ACTELLIC')WHERE PRODUITS_PHYTOSANITAIRES = 'ACTELLIC'")
                        #############################bidiactilic
                        cursbidi.execute(
                            "INSERT INTO phytotablebidi (PRODUITS_PHYTOSANITAIRES,le,LIEU_DE_STOCKAGE,QUANTITE_ACHETE,QUANTITE_UTILISEE,STOCK_FINAL,DATE_DE_PEREMPTION,NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE,LIEU_DE_TRAITEMENT,STOCK_INITIAL_ACTELLIC,QUANTITE_ACHETE_ACTELLIC,QUANTITE_UTILISEE_ACTELLIC) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) ",
                            (produitpyhto, datte, lieudestockbidi, quantiteachete, quantiteutilise, stockfinall,
                             datedeprom,
                             natureetquantitebidi, lieudetraitementbidi, stockinitial, quantiteachete, quantiteutilise))
                        cursbidi.execute(
                            "UPDATE phytotablebidi SET STOCK_FINAL = (SELECT SUM(STOCK_INITIAL_ACTELLIC - QUANTITE_UTILISEE_ACTELLIC)FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES = 'ACTELLIC')WHERE PRODUITS_PHYTOSANITAIRES = 'ACTELLIC'")
                        cursbidi.execute(
                            "UPDATE phytotablebidi SET STOCK_INITIAL = (SELECT SUM(QUANTITE_ACHETE_ACTELLIC )FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES = 'ACTELLIC')WHERE PRODUITS_PHYTOSANITAIRES = 'ACTELLIC'")
                    if produitpyhto == "CIRATHRINE":
                        curs.execute(
                            "INSERT INTO phytotable (PRODUITS_PHYTOSANITAIRES,le,LIEU_DE_STOCKAGE,STOCK_INITIAL,QUANTITE_ACHETE,QUANTITE_UTILISEE,STOCK_FINAL,DATE_DE_PEREMPTION,NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE,LIEU_DE_TRAITEMENT,STOCK_INITIAL_CIRATHRINE,QUANTITE_ACHETE_CIRATHRINE,QUANTITE_UTILISEE_CIRATHRINE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)",
                            (produitpyhto, datte, lieudestock, stockinitial, quantiteachete, quantiteutilise,
                             stockfinall,
                             datedeprom, natureetquantite, lieudetraitement, stockinitial, quantiteachete,
                             quantiteutilise))
                        curs.execute(
                            "UPDATE phytotable SET STOCK_FINAL = (SELECT SUM(STOCK_INITIAL_CIRATHRINE - QUANTITE_UTILISEE_CIRATHRINE)FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES = 'CIRATHRINE')WHERE PRODUITS_PHYTOSANITAIRES = 'CIRATHRINE'")
                        curs.execute(
                            "UPDATE phytotable SET STOCK_INITIAL = (SELECT SUM(QUANTITE_ACHETE_CIRATHRINE)FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES = 'CIRATHRINE')WHERE PRODUITS_PHYTOSANITAIRES = 'CIRATHRINE'")
                        ###############################bidicirathrine
                        cursbidi.execute(
                            "INSERT INTO phytotablebidi (PRODUITS_PHYTOSANITAIRES,le,LIEU_DE_STOCKAGE,STOCK_INITIAL,QUANTITE_ACHETE,QUANTITE_UTILISEE,STOCK_FINAL,DATE_DE_PEREMPTION,NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE,LIEU_DE_TRAITEMENT,STOCK_INITIAL_CIRATHRINE,QUANTITE_ACHETE_CIRATHRINE,QUANTITE_UTILISEE_CIRATHRINE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)",
                            (produitpyhto, datte, lieudestockbidi, stockinitial, quantiteachete, quantiteutilise,
                             stockfinall,
                             datedeprom, natureetquantitebidi, lieudetraitementbidi, stockinitial, quantiteachete,
                             quantiteutilise))
                        cursbidi.execute(
                            "UPDATE phytotablebidi SET STOCK_FINAL = (SELECT SUM(STOCK_INITIAL_CIRATHRINE - QUANTITE_UTILISEE_CIRATHRINE)FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES = 'CIRATHRINE')WHERE PRODUITS_PHYTOSANITAIRES = 'CIRATHRINE'")
                        cursbidi.execute(
                            "UPDATE phytotablebidi SET STOCK_INITIAL = (SELECT SUM(QUANTITE_ACHETE_CIRATHRINE)FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES = 'CIRATHRINE')WHERE PRODUITS_PHYTOSANITAIRES = 'CIRATHRINE'")
                    if produitpyhto == "DEKATRINE":
                        curs.execute(
                            "INSERT INTO phytotable (PRODUITS_PHYTOSANITAIRES,le,LIEU_DE_STOCKAGE,STOCK_INITIAL,QUANTITE_ACHETE,QUANTITE_UTILISEE,STOCK_FINAL,DATE_DE_PEREMPTION,NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE,LIEU_DE_TRAITEMENT,STOCK_INITIAL_DEKATRINE,QUANTITE_ACHETE_DEKATRINE,QUANTITE_UTILISEE_DEKATRINE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)",
                            (produitpyhto, datte, lieudestock, stockinitial, quantiteachete, quantiteutilise,
                             stockfinall,
                             datedeprom, natureetquantite, lieudetraitement, stockinitial, quantiteachete,
                             quantiteutilise))
                        curs.execute(
                            "UPDATE phytotable SET STOCK_FINAL = (SELECT SUM(STOCK_INITIAL_DEKATRINE - QUANTITE_UTILISEE_DEKATRINE)FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES = 'DEKATRINE')WHERE PRODUITS_PHYTOSANITAIRES = 'DEKATRINE'")
                        curs.execute(
                            "UPDATE phytotable SET STOCK_INITIAL = (SELECT SUM(QUANTITE_ACHETE_DEKATRINE)FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES = 'DEKATRINE')WHERE PRODUITS_PHYTOSANITAIRES = 'DEKATRINE'")
                        ###############################bididekatrine
                        cursbidi.execute(
                            "INSERT INTO phytotablebidi (PRODUITS_PHYTOSANITAIRES,le,LIEU_DE_STOCKAGE,STOCK_INITIAL,QUANTITE_ACHETE,QUANTITE_UTILISEE,STOCK_FINAL,DATE_DE_PEREMPTION,NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE,LIEU_DE_TRAITEMENT,STOCK_INITIAL_DEKATRINE,QUANTITE_ACHETE_DEKATRINE,QUANTITE_UTILISEE_DEKATRINE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)",
                            (produitpyhto, datte, lieudestockbidi, stockinitial, quantiteachete, quantiteutilise,
                             stockfinall,
                             datedeprom, natureetquantitebidi, lieudetraitementbidi, stockinitial, quantiteachete,
                             quantiteutilise))
                        cursbidi.execute(
                            "UPDATE phytotablebidi SET STOCK_FINAL = (SELECT SUM(STOCK_INITIAL_DEKATRINE - QUANTITE_UTILISEE_DEKATRINE)FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES = 'DEKATRINE')WHERE PRODUITS_PHYTOSANITAIRES = 'DEKATRINE'")
                        cursbidi.execute(
                            "UPDATE phytotablebidi SET STOCK_INITIAL = (SELECT SUM(QUANTITE_ACHETE_DEKATRINE)FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES = 'DEKATRINE')WHERE PRODUITS_PHYTOSANITAIRES = 'DEKATRINE'")
                    if produitpyhto == "RATICIDE":
                        curs.execute(
                            "INSERT INTO phytotable (PRODUITS_PHYTOSANITAIRES,le,LIEU_DE_STOCKAGE,STOCK_INITIAL,QUANTITE_ACHETE,QUANTITE_UTILISEE,STOCK_FINAL,DATE_DE_PEREMPTION,NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE,LIEU_DE_TRAITEMENT,STOCK_INITIAL_RATICIDE,QUANTITE_ACHETE_RATICIDE,QUANTITE_UTILISEE_RATICIDE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)",
                            (produitpyhto, datte, lieudestock, stockinitial, quantiteachete, quantiteutilise,
                             stockfinall,
                             datedeprom, natureetquantite, lieudetraitement, stockinitial, quantiteachete,
                             quantiteutilise))
                        curs.execute(
                            "UPDATE phytotable SET STOCK_FINAL = (SELECT SUM(STOCK_INITIAL_RATICIDE - QUANTITE_UTILISEE_RATICIDE)FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES = 'RATICIDE')WHERE PRODUITS_PHYTOSANITAIRES = 'RATICIDE'")
                        curs.execute(
                            "UPDATE phytotable SET STOCK_INITIAL = (SELECT SUM(QUANTITE_ACHETE_RATICIDE)FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES = 'RATICIDE')WHERE PRODUITS_PHYTOSANITAIRES = 'RATICIDE'")
                        ############################bidiraticid
                        cursbidi.execute(
                            "INSERT INTO phytotablebidi (PRODUITS_PHYTOSANITAIRES,le,LIEU_DE_STOCKAGE,STOCK_INITIAL,QUANTITE_ACHETE,QUANTITE_UTILISEE,STOCK_FINAL,DATE_DE_PEREMPTION,NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE,LIEU_DE_TRAITEMENT,STOCK_INITIAL_RATICIDE,QUANTITE_ACHETE_RATICIDE,QUANTITE_UTILISEE_RATICIDE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)",
                            (produitpyhto, datte, lieudestockbidi, stockinitial, quantiteachete, quantiteutilise,
                             stockfinall,
                             datedeprom, natureetquantitebidi, lieudetraitementbidi, stockinitial, quantiteachete,
                             quantiteutilise))
                        cursbidi.execute(
                            "UPDATE phytotablebidi SET STOCK_FINAL = (SELECT SUM(STOCK_INITIAL_RATICIDE - QUANTITE_UTILISEE_RATICIDE)FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES = 'RATICIDE')WHERE PRODUITS_PHYTOSANITAIRES = 'RATICIDE'")
                        cursbidi.execute(
                            "UPDATE phytotablebidi SET STOCK_INITIAL = (SELECT SUM(QUANTITE_ACHETE_RATICIDE)FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES = 'RATICIDE')WHERE PRODUITS_PHYTOSANITAIRES = 'RATICIDE'")
                    if produitpyhto == "TEXTO":
                        curs.execute(
                            "INSERT INTO phytotable (PRODUITS_PHYTOSANITAIRES,le,LIEU_DE_STOCKAGE,STOCK_INITIAL,QUANTITE_ACHETE,QUANTITE_UTILISEE,STOCK_FINAL,DATE_DE_PEREMPTION,NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE,LIEU_DE_TRAITEMENT,STOCK_INITIAL_TEXTO,QUANTITE_ACHETE_TEXTO,QUANTITE_UTILISEE_TEXTO) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)",
                            (produitpyhto, datte, lieudestock, stockinitial, quantiteachete, quantiteutilise,
                             stockfinall,
                             datedeprom, natureetquantite, lieudetraitement, stockinitial, quantiteachete,
                             quantiteutilise))
                        curs.execute(
                            "UPDATE phytotable SET STOCK_FINAL = (SELECT SUM(STOCK_INITIAL_TEXTO - QUANTITE_UTILISEE_TEXTO)FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES ='TEXTO')WHERE PRODUITS_PHYTOSANITAIRES = 'TEXTO'")
                        curs.execute(
                            "UPDATE phytotable SET STOCK_INITIAL = (SELECT SUM(QUANTITE_ACHETE_TEXTO)FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES ='TEXTO')WHERE PRODUITS_PHYTOSANITAIRES = 'TEXTO'")

                        ###########################biditexto
                        cursbidi.execute(
                            "INSERT INTO phytotablebidi (PRODUITS_PHYTOSANITAIRES,le,LIEU_DE_STOCKAGE,STOCK_INITIAL,QUANTITE_ACHETE,QUANTITE_UTILISEE,STOCK_FINAL,DATE_DE_PEREMPTION,NATURE_ET_QUANTITE_DE_PRODUIT_TRAITE,LIEU_DE_TRAITEMENT,STOCK_INITIAL_TEXTO,QUANTITE_ACHETE_TEXTO,QUANTITE_UTILISEE_TEXTO) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)",
                            (produitpyhto, datte, lieudestockbidi, stockinitial, quantiteachete, quantiteutilise,
                             stockfinall,
                             datedeprom, natureetquantitebidi, lieudetraitementbidi, stockinitial, quantiteachete,
                             quantiteutilise))
                        cursbidi.execute(
                            "UPDATE phytotablebidi SET STOCK_FINAL = (SELECT SUM(STOCK_INITIAL_TEXTO - QUANTITE_UTILISEE_TEXTO)FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES ='TEXTO')WHERE PRODUITS_PHYTOSANITAIRES = 'TEXTO'")
                        cursbidi.execute(
                            "UPDATE phytotablebidi SET STOCK_INITIAL = (SELECT SUM(QUANTITE_ACHETE_TEXTO)FROM phytotable WHERE PRODUITS_PHYTOSANITAIRES ='TEXTO')WHERE PRODUITS_PHYTOSANITAIRES = 'TEXTO'")

                    dattabase.commit()
                    dattabase.close()
                    msgbox = QtWidgets.QMessageBox()
                    msgbox.setWindowTitle('تاكيد العملية')
                    msgbox.setText('تمت الاضافة بنجاح')
                    msgbox.exec()
                else:
                    msgbox = QtWidgets.QMessageBox()
                    msgbox.setWindowTitle("خطأ")
                    msgbox.setText("خطأ: اختر المنتج ")
                    msgbox.exec()

            except sqlite3.Error as e:
                print(e)

        def impot_all(self):
            try:
                dattabase = sqlite3.connect('datta.db')
                cur = dattabase.cursor()
                cur.execute("SELECT * FROM phytotable  WHERE LIEU_DE_TRAITEMENT != '' AND le != '' ")
                result = cur.fetchall()
                self.textEdit.setRowCount(0)
                for row, row_datta in enumerate(result):
                    print(row)
                    self.textEdit.insertRow(row)
                    for colum, datta in enumerate(row_datta):
                        self.textEdit.setItem(row, colum, QTableWidgetItem(str(datta)))
                dattabase.commit()
            except Exception as e:
                print(e)

        def importph(self):
            """Imports the stock of PHOSTOXIN(PH3) from the database."""
            try:
                with sqlite3.connect("datta.db") as conn:
                    cur = conn.cursor()

                    # Get the total stock of PHOSTOXIN(PH3).
                    cur.execute(
                        "SELECT SUM(STOCK_INITIAL_PHOSTOXIN_PH3)-SUM(QUANTITE_UTILISEE_PHOSTOXIN_PH3) as STOCK_FINAL_PHOSTOXIN_PH3 FROM phytotable WHERE (PRODUITS_PHYTOSANITAIRES=='PHOSTOXIN(PH3)')"
                    )
                    stock_final_ph = cur.fetchone()[0]

                    # Set the value of the `phfinal` field.
                    self.phfinal.setValue(stock_final_ph)

                    if stock_final_ph == 0:
                        cur.execute(
                            "UPDATE phytotable SET QUANTITE_ACHETE_PHOSTOXIN_PH3=0 WHERE PRODUITS_PHYTOSANITAIRES ='PHOSTOXIN(PH3)'")

                    # Commit the changes.
                    conn.commit()
            except Exception as e:
                print(e)

        def importactilic(self):
            """Imports the stock of ACTELLIC from the database."""
            try:
                with sqlite3.connect("datta.db") as conn:
                    cur = conn.cursor()

                    # Get the total stock of ACTELLIC.
                    cur.execute(
                        "SELECT SUM(STOCK_INITIAL_ACTELLIC)-SUM(QUANTITE_UTILISEE_ACTELLIC) as STOCK_FINAL_ACTELLIC FROM phytotable WHERE (PRODUITS_PHYTOSANITAIRES=='ACTELLIC')"
                    )
                    stock_final_actellic = cur.fetchone()[0]

                    # Set the value of the `ACTELLICfinal` field.
                    self.ACTELLICfinal.setValue(stock_final_actellic)

                    if stock_final_actellic == 0:
                        cur.execute(
                            "UPDATE phytotable SET   QUANTITE_ACHETE_ACTELLIC = 0 WHERE PRODUITS_PHYTOSANITAIRES ='ACTELLIC'")

                    # Commit the changes.
                    conn.commit()
            except Exception as e:
                print(e)

        def importcirathrine(self):
            """Imports the stock of CIRATHRINE from the database."""
            try:
                with sqlite3.connect("datta.db") as conn:
                    cur = conn.cursor()

                    # Get the total stock of CIRATHRINE.
                    cur.execute(
                        "SELECT SUM(STOCK_INITIAL_CIRATHRINE)-SUM(QUANTITE_UTILISEE_CIRATHRINE) as STOCK_FINAL_CIRATHRINE FROM phytotable WHERE (PRODUITS_PHYTOSANITAIRES=='CIRATHRINE')"
                    )
                    stock_final_cirathrine = cur.fetchone()[0]

                    # Set the value of the `CIRATHRINEfinal` field.
                    self.CIRATHRINEfinal.setValue(stock_final_cirathrine)

                    if stock_final_cirathrine == 0:
                        cur.execute(
                            "UPDATE phytotable SET  QUANTITE_ACHETE_CIRATHRINE = 0 WHERE PRODUITS_PHYTOSANITAIRES ='CIRATHRINE'")

                    # Commit the changes.
                    conn.commit()
            except Exception as e:
                print(e)

        def importdekatrine(self):
            """Imports the stock of DEKATRINE from the database."""
            try:
                with sqlite3.connect("datta.db") as conn:
                    cur = conn.cursor()

                    # Get the total stock of DEKATRINE.
                    cur.execute(
                        "SELECT SUM(STOCK_INITIAL_DEKATRINE)-SUM(QUANTITE_UTILISEE_DEKATRINE) as STOCK_FINAL_DEKATRINE FROM phytotable WHERE (PRODUITS_PHYTOSANITAIRES=='DEKATRINE')"
                    )
                    stock_final_dekatrine = cur.fetchone()[0]

                    # Set the value of the `DEKATRINEfinal` field.
                    self.DEKATRINEfinal.setValue(stock_final_dekatrine)

                    if stock_final_dekatrine == 0:
                        cur.execute(
                            "UPDATE phytotable SET  QUANTITE_ACHETE_DEKATRINE = 0 WHERE PRODUITS_PHYTOSANITAIRES ='DEKATRINE'")

                    # Commit the changes.
                    conn.commit()
            except Exception as e:
                print(e)

        def importraticide(self):
            """Imports the stock of RATICIDE from the database."""
            try:
                with sqlite3.connect("datta.db") as conn:
                    cur = conn.cursor()

                    # Get the total stock of RATICIDE.
                    cur.execute(
                        "SELECT SUM(STOCK_INITIAL_RATICIDE)-SUM(QUANTITE_UTILISEE_RATICIDE) as STOCK_FINAL_RATICIDE FROM phytotable WHERE (PRODUITS_PHYTOSANITAIRES=='RATICIDE')"
                    )
                    stock_final_raticide = cur.fetchone()[0]

                    # Set the value of the `RATICIDEfinal` field.
                    self.RATICIDEfinal.setValue(stock_final_raticide)

                    if stock_final_raticide == 0:
                        cur.execute(
                            "UPDATE phytotable SET   QUANTITE_ACHETE_RATICIDE = 0 WHERE PRODUITS_PHYTOSANITAIRES ='RATICIDE'")
                    # Commit the changes.
                    conn.commit()
            except Exception as e:
                print(e)

        def importtexto(self):
            """Imports the stock of TEXTO from the database.
            If the stock of TEXTO is 0, the initial stock is also set to 0.
            """
            try:
                with sqlite3.connect("datta.db") as conn:
                    cur = conn.cursor()

                    # Get the total stock of TEXTO.
                    cur.execute(
                        "SELECT SUM(STOCK_INITIAL_TEXTO)-SUM(QUANTITE_UTILISEE_TEXTO) as STOCK_FINAL_TEXTO FROM phytotable WHERE (PRODUITS_PHYTOSANITAIRES=='TEXTO')"
                    )
                    stock_final_texto = cur.fetchone()[0]

                    # Set the value of the `TEXTOfinal` field.
                    self.TEXTOfinal.setValue(stock_final_texto)

                    # If the stock of TEXTO is 0, set the initial stock to 0 as well.
                    if stock_final_texto == 0:
                        cur.execute(
                            "UPDATE phytotable SET   QUANTITE_ACHETE_TEXTO = 0 WHERE PRODUITS_PHYTOSANITAIRES ='TEXTO'")
                        conn.commit()

            except Exception as e:
                print(e)

        def delete_item(self):
            try:
                msgbox = QMessageBox()
                msgbox.setStyleSheet(""" QWidget
                    {
                        color: #000000;
                        background-color: #ffffff;
                        border-width: 1px;
                        border-color: #1e1e1e;
                        border-style: solid;
                        border-radius: 6;
                        padding: 3px;
                        font-size: 12px;
                        padding-left: 5px;
                        padding-right: 5px
                    }
                    QWidget:item:hover
                    {
                        background-color: #3daee9;
                        color: #eff0f1;
                    }
                    QWidget:item:selected
                    {
                        background-color: #3daee9;
                    }
                    QWidget:disabled
                    {
                        color: #454545;
                        background-color: #31363b;
                    }
                    QQPushButton
                            {
                                color: #000000;
                                background-color:#ade3e7;
                                border-width: 1px;
                                border-color: #1e1e1e;
                                border-style: solid;
                                border-radius: 6;
                                padding: 3px;
                                font-size: 12px;
                                padding-left: 5px;
                                padding-right: 5px;
                                min-width: 40px
                            }
                            QPushButton:disabled
                            {
                                background-color: #31363b;
                                border-width: 1px;
                                border-color: #454545;
                                border-style: solid;
                                padding-top: 5px;
                                padding-bottom: 5px;
                                padding-left: 10px;
                                padding-right: 10px;
                                border-radius: 2px;
                                color: #454545;
                            }

                            QPushButton:pressed
                            {
                                background-color: #3daee9;
                                padding-top: -15px;
                                padding-bottom: -17px;
                            }
                            QPushButton:hover
                            {
                                border: 1px solid #ff8c00;
                                color: #000000;
                            }
                    QPushButton:hover
                    {
                        border: 1px solid #ff8c00;
                        color: #000000;
                    }
                     QLabel
                    {
                        font-size: 18px;
                        border: 1px solid orange;
                    }

                """)
                msgbox.setWindowTitle("تحذير")
                msgbox.setText("هل ترغب في حذف العنصر !")
                yesbutton = QtWidgets.QPushButton("نعم")
                nobuttons = QtWidgets.QPushButton("لا")
                # msgbox.setStandardButtons(QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
                msgbox.addButton(yesbutton, QMessageBox.ButtonRole.ActionRole)
                msgbox.addButton(nobuttons, QMessageBox.ButtonRole.ActionRole)
                push = msgbox.exec()
                if msgbox.clickedButton() == nobuttons:
                    print("no")

                elif msgbox.clickedButton() == yesbutton:

                    itemsel = self.textEdit.selectedItems()
                    print(itemsel)
                    if len(itemsel) == 0:
                        return
                    row = itemsel[0].row()
                    self.textEdit.removeRow(row)
                    curentrow = self.textEdit.currentRow()
                    id_ = self.textEdit.item(curentrow, 10).text()
                    database = sqlite3.connect("datta.db")
                    curs = database.cursor()
                    curs.execute("DELETE FROM phytotable WHERE id=?", (id_,))
                    curs.execute("DELETE FROM phytotablebidi WHERE idbidi=?", (id_,))
                    database.commit()
                    dattabase.close()
                    msgbox = QtWidgets.QMessageBox()
                    msgbox.setWindowTitle('تأكيد')
                    msgbox.setText('تم حذف العنصر')
                    msgbox.exec()
            except Exception as e:
                print(e)

        def fiche_traitement(self):
            try:
                self.msgbox = QtWidgets.QDialog()
                self.msgbox.setGeometry(300, 100, 935, 560)
                self.msgbox.setStyleSheet(""" QWidget
                            {
                                color: #000000;
                                background-color: #ffffff;
                                border-width: 1px;
                                border-color: #1e1e1e;
                                border-style: solid;
                                border-radius: 6;
                                padding: 0px;
                                font-size: 18px;

                                padding-left: 1px;
                                padding-right: 1px
                            }
                            QWidget:item:hover
                            {
                                background-color: #3daee9;
                                color: #eff0f1;
                            }
                            QWidget:item:selected
                            {
                                background-color: #00000;
                            }
                            QWidget:disabled
                            {
                                color: #454545;
                                background-color: #31363b;
                            }
                            QPushButton
                            {
                                color: #000000;
                                background-color:#ade3e7;
                                border-width: 1px;
                                border-color: #1e1e1e;
                                border-style: solid;
                                border-radius: 6;
                                padding: 3px;
                                font-size: 12px;
                                padding-left: 5px;
                                padding-right: 5px;
                                min-width: 40px
                            }
                            QPushButton:disabled
                            {
                                background-color: #31363b;
                                border-width: 1px;
                                border-color: #454545;
                                border-style: solid;
                                padding-top: 5px;
                                padding-bottom: 5px;
                                padding-left: 10px;
                                padding-right: 10px;
                                border-radius: 2px;
                                color: #454545;
                            }

                            QPushButton:pressed
                            {
                                background-color: #3daee9;
                                padding-top: -15px;
                                padding-bottom: -17px;
                            }
                            QPushButton:hover
                            {
                                border: 1px solid #ff8c00;
                                color: #000000;
                            }
                             QLabel
                            {
                                font-size: 18px;
                                border: 0px solid orange;
                            }

                        """)
                self.msgbox.setWindowTitle("ورقة المعالجة")

                self.ok_button = QtWidgets.QPushButton("طباعة", self.msgbox,
                                                       clicked=lambda: self.docx_fichetraitement())
                self.ok_button.setGeometry(580, 400, 200, 40)
                self.cancel_button = QtWidgets.QPushButton("خروج", self.msgbox, clicked=lambda: self.msgbox.close())
                self.cancel_button.setGeometry(170, 400, 200, 40)

                self.save_button = QtWidgets.QPushButton("حفظ", self.msgbox, clicked=lambda: self.save_fichetraitemen())
                self.save_button.setGeometry(375, 400, 200, 40)

                # msgbox.setText("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t")

                # msgbox.addButton(ok_button,QMessageBox.ButtonRole.ActionRole)
                # msgbox.addButton(cancel_button,QMessageBox.ButtonRole.ActionRole)
                fichetraitementxt = QtWidgets.QLabel("<h2>ورقة المعالجة<h2/>", self.msgbox)
                fichetraitementxt.setGeometry(150, 5, 400, 60)
                dateDeTraitementtx = QtWidgets.QLabel("التاريخ :", self.msgbox)
                dateDeTraitementtx.setGeometry(795, 70, 100, 30)
                self.dateDeTraitement = QtWidgets.QDateEdit(self.msgbox)
                self.dateDeTraitement.setDate(self.dateday)
                self.dateDeTraitement.setGeometry(510, 60, 200, 50)
                lieuDeTraitementtxt = QtWidgets.QLabel("مكان المالجة:", self.msgbox)
                lieuDeTraitementtxt.setGeometry(220, 70, 230, 30)
                self.lieuDeTraitement = QtWidgets.QComboBox(self.msgbox)
                self.lieuDeTraitement.setGeometry(50, 60, 200, 50)
                self.lieuDeTraitement.addItem("")
                self.lieuDeTraitement.addItem("المخزن الرئيسي غليزان")
                self.lieuDeTraitement.addItem("مخزن ماسرة")
                self.lieuDeTraitement.addItem("مخزن الكهف الازرق")
                self.lieuDeTraitement.addItem("مخزن زمورة")
                self.lieuDeTraitement.addItem("المحطة الجديدة منداس")
                self.lieuDeTraitement.addItem("محطة منداس")
                self.lieuDeTraitement.addItem("مخزن اوفلا ")
                self.lieuDeTraitement.addItem("مخزن بلعسل")

                self.Naturedeproduittraitétxt = QtWidgets.QLabel("طبيعة المنتج المعالج:", self.msgbox)
                self.Naturedeproduittraitétxt.setGeometry(665, 125, 230, 30)

                self.Naturedeproduittraité = QtWidgets.QTextEdit(self.msgbox)
                self.Naturedeproduittraité.setGeometry(510, 115, 200, 50)
                self.Naturedeproduittraité.setAlignment(Qt.AlignmentFlag.AlignRight)

                self.quantitedeproduittraitétxt = QtWidgets.QLabel("كمية المنتج المعالج:", self.msgbox)
                self.quantitedeproduittraitétxt.setGeometry(220, 125, 230, 30)

                self.quantitedeproduittraité = QtWidgets.QLineEdit(self.msgbox)

                self.quantitedeproduittraité.setGeometry(50, 115, 200, 50)
                self.quantitedeproduittraité.setAlignment(Qt.AlignmentFlag.AlignRight)

                self.dateDebutDeTraitementtxt = QtWidgets.QLabel("تاريخ بداية المعالجة:", self.msgbox)
                self.dateDebutDeTraitementtxt.setGeometry(650, 185, 242, 30)

                self.dateDebutDeTraitement = QtWidgets.QDateEdit(self.msgbox)
                self.dateDebutDeTraitement.setGeometry(510, 175, 200, 50)
                self.dateDebutDeTraitement.setDate(self.dateday)

                self.dateDefinDeTraitementtxt = QtWidgets.QLabel("تاريخ نهاية المعالجة:", self.msgbox)
                self.dateDefinDeTraitementtxt.setGeometry(220, 185, 230, 30)

                self.dateDefinDeTraitement = QtWidgets.QDateEdit(self.msgbox)
                self.dateDefinDeTraitement.setGeometry(50, 175, 200, 50)
                self.dateDefinDeTraitement.setDate(self.dateday)

                self.natureDuProduitUtilisétxt = QtWidgets.QLabel("نوع المبيد المستخدم:", self.msgbox)
                self.natureDuProduitUtilisétxt.setGeometry(660, 245, 230, 30)

                self.natureDuProduitUtilisé = QtWidgets.QComboBox(self.msgbox, editable=True)
                self.natureDuProduitUtilisé.setGeometry(510, 235, 200, 50)
                self.natureDuProduitUtilisé.addItem("")
                self.natureDuProduitUtilisé.addItem("PHOSTOXIN(PH3)")
                self.natureDuProduitUtilisé.addItem("ACTELLIC")
                self.natureDuProduitUtilisé.addItem("CIRATHRINE")
                self.natureDuProduitUtilisé.addItem("RATICIDE")
                self.natureDuProduitUtilisé.addItem("TEXTO")

                self.quantiteDuProduitUtilisétxt = QtWidgets.QLabel("كمية المبيد المستخدمة:", self.msgbox)
                self.quantiteDuProduitUtilisétxt.setGeometry(220, 245, 230, 30)

                self.quantiteDuProduitUtilisé = QtWidgets.QLineEdit(self.msgbox)
                self.quantiteDuProduitUtilisé.setGeometry(50, 235, 200, 50)
                self.quantiteDuProduitUtilisé.setAlignment(Qt.AlignmentFlag.AlignRight)

                self.doseDeProduittxt = QtWidgets.QLabel("تركيز المبيد :", self.msgbox)
                self.doseDeProduittxt.setGeometry(730, 305, 160, 30)

                self.doseDeProduit = QtWidgets.QLineEdit(self.msgbox)
                self.doseDeProduit.setGeometry(510, 295, 200, 50)
                self.doseDeProduit.setAlignment(Qt.AlignmentFlag.AlignRight)
                # self.doseDeProduit.setInputMask("999/aaa 999/aaa")

                self.volumdelottxt = QtWidgets.QLabel("حجم المساحة المعاجة:", self.msgbox)
                self.volumdelottxt.setGeometry(250, 305, 200, 30)
                self.volumdelot = QtWidgets.QLineEdit(self.msgbox)
                self.volumdelot.setGeometry(50, 295, 200, 50)
                self.volumdelot.setAlignment(Qt.AlignmentFlag.AlignRight)
                self.msgbox.show()
                self.msgbox.exec()
            except Exception as e:
                print(e)

        def docx_fichetraitement(self):
            try:
                datte = self.dateDeTraitement.text()
                tproduitphyto = self.natureDuProduitUtilisé.currentText()
                produitphytot1 = arabic_reshaper.reshape(tproduitphyto)
                produitphyto = bidi.algorithm.get_display(produitphytot1)
                tquantiteutilisee = self.quantiteDuProduitUtilisé.text()
                tquantiteutilisee1 = arabic_reshaper.reshape(tquantiteutilisee)
                quantiteutilisee = bidi.algorithm.get_display(tquantiteutilisee1)
                datedebutdetraitemen = self.dateDebutDeTraitement.text()

                datedeprom = self.dateDefinDeTraitement.text()
                lieudetraitement = self.lieuDeTraitement.currentText()
                tnatureetquantite = self.Naturedeproduittraité.toPlainText()
                tnatureetquantite1 = arabic_reshaper.reshape(tnatureetquantite)
                natureetquantite = bidi.algorithm.get_display(tnatureetquantite1)
                tqantitedeprduittraite = self.quantitedeproduittraité.text()
                tqantitedeprduittraite1 = arabic_reshaper.reshape(tqantitedeprduittraite)
                qantitedeprduittraite = bidi.algorithm.get_display(tqantitedeprduittraite1)
                tvolumdelot = self.volumdelot.text()
                tvolumdelot1 = arabic_reshaper.reshape(tvolumdelot)
                volumdelot = bidi.algorithm.get_display(tvolumdelot1)
                # nature=self.natur.text()
                tdosage = self.doseDeProduit.text()
                tdosage1 = arabic_reshaper.reshape(tdosage)
                dosage = bidi.algorithm.get_display(tdosage1)
                doctraitemen = DocxTemplate("fiche de traitemen/fichedetraitementemplate.docx")
                doctraitemen.render(
                    {
                        "vdl": volumdelot,
                        "dt": datte,
                        "mg": lieudetraitement,
                        "pd": natureetquantite,
                        "pde": qantitedeprduittraite,
                        "dtd": datedebutdetraitemen,
                        "dtf": datedeprom,
                        "npd": produitphyto,
                        "dsg": dosage,
                        "pdq": quantiteutilisee,
                    }
                )
                self.tempfilebd = tempfile.NamedTemporaryFile(suffix=".docx", delete=False).name
                doctraitemen.save(self.tempfilebd)
                # imp = os.startfile(tempfilebd, "print")
                if self.tempfilebd:
                    os.startfile(self.tempfilebd)
                    """word = win32a.gencache.EnsureDispatch("Word.Application")
                    a = self.progress_bar()
                    doc = word.Documents.Open(self.tempfilebd)
                    doc.PrintOut()
                    doc.Close()
                    word.Quit()"""
            except Exception as e:
                print(e)

        def save_fichetraitemen(self):
            try:
                datte = self.dateDeTraitement.text()
                tproduitphyto = self.natureDuProduitUtilisé.currentText()
                produitphytot1 = arabic_reshaper.reshape(tproduitphyto)
                produitphyto = bidi.algorithm.get_display(produitphytot1)
                tquantiteutilisee = self.quantiteDuProduitUtilisé.text()
                tquantiteutilisee1 = arabic_reshaper.reshape(tquantiteutilisee)
                quantiteutilisee = bidi.algorithm.get_display(tquantiteutilisee1)
                datedebutdetraitemen = self.dateDebutDeTraitement.text()

                datedeprom = self.dateDefinDeTraitement.text()
                lieudetraitement = self.lieuDeTraitement.currentText()
                tnatureetquantite = self.Naturedeproduittraité.toPlainText()
                tnatureetquantite1 = arabic_reshaper.reshape(tnatureetquantite)
                natureetquantite = bidi.algorithm.get_display(tnatureetquantite1)
                tqantitedeprduittraite = self.quantitedeproduittraité.text()
                tqantitedeprduittraite1 = arabic_reshaper.reshape(tqantitedeprduittraite)
                qantitedeprduittraite = bidi.algorithm.get_display(tqantitedeprduittraite1)
                tvolumdelot = self.volumdelot.text()
                tvolumdelot1 = arabic_reshaper.reshape(tvolumdelot)
                volumdelot = bidi.algorithm.get_display(tvolumdelot1)
                # nature=self.natur.text()
                tdosage = self.doseDeProduit.text()
                tdosage1 = arabic_reshaper.reshape(tdosage)
                dosage = bidi.algorithm.get_display(tdosage1)
                doctraitemen = DocxTemplate("fiche de traitemen/fichedetraitementemplate.docx")
                # Render the template with the data
                doctraitemen.render(
                    {
                        "vdl": volumdelot,
                        "dt": datte,
                        "mg": lieudetraitement,
                        "pd": natureetquantite,
                        "pde": qantitedeprduittraite,
                        "dtd": datedebutdetraitemen,
                        "dtf": datedeprom,
                        "npd": produitphyto,
                        "dsg": dosage,
                        "pdq": quantiteutilisee,
                    }
                )
                # Get the path to save the file
                path, _ = QFileDialog.getSaveFileName(None, "Enregistrer la fiche", "", "Fichiers DOCX (*.docx)")

                # Save the file
                if path:
                    doctraitemen.save(path)
                    # Display a message box confirming that the file was saved
                    msgbox = QtWidgets.QMessageBox()
                    msgbox.setWindowTitle('تاكيد')
                    msgbox.setText("تم حفظ الملف بنجاح")
                    msgbox.exec()

            except Exception as e:
                print(e)
except Exception as e:
    print(e)

###########################RefusClass
###############################################################################
##############################################################################
###########################################################################
######################################################################
###############################################################
database = sqlite3.connect('datta_refus.db')
curs = database.cursor()
curs.execute("""CREATE TABLE IF NOT EXISTS refutable
                (
                  id INTEGER PRIMARY KEY,
                  point_de_collecte TEXT,
                  date TEXT, 
                  nom_et_prénom TEXT,
                  fils_de TEXT,    
                  matricule TEXT,
                  produit TEXT, 
                  cause_de_refus TEXT

                )
                """)
database.commit()
database.close()

try:
    class Refus_Window(object):
        def refus_produit(self, MainWindow):
            MainWindow.setObjectName("Window")
            MainWindow.resize(1338, 700)
            MainWindow.setStyleSheet("""QToolTip
            {
                border: 1px solid #76797C;
                background-color: rgb(90, 102, 117);;
                color: white;
                padding: 5px;
                opacity: 200;
            }

            QWidget
            {
                color: #000000;
                background-color: #ffffff;
                selection-background-color:#3daee9;
                selection-color: #3daee9;
                background-clip: border;
                border-image: none;
                border: 0px transparent black;
                outline: 0;
            }

            QWidget:item:hover
            {
                background-color: #3daee9;
                color: #eff0f1;
            }

            QWidget:item:selected
            {
                background-color: #3daee9;
            }



            QWidget:disabled
            {
                color: #454545;
                background-color: #31363b;
            }

            QAbstractItemView
            {
                alternate-background-color: #31363b;
                color: #eff0f1;
                border: 1px solid 3A3939;
                border-radius: 2px;
            }

            QWidget:focus, QMenuBar:focus
            {
                border: 1px solid #3daee9;
            }

            QTabWidget:focus, QCheckBox:focus, QRadioButton:focus, QSlider:focus
            {
                border: none;
            }

            QLineEdit
            {
                background-color: #FDFEFE;
                padding: 1px;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 0px;
                color: #000000;
            }
            QDoubleSpinBox
            {
                background-color: #FDFEFE;
                padding: 1px;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 0px;
                color:#000000;
                font-size: 11px;
                font-weight: bold;

            }
            QDoubleSpinBox:focus{
                background-color: #FDFEFE;
                border-style: solid;
                border: 2px solid #76797C;
                border-radius: 4px;
                border-color: #ff8c00;
            }
            QDoubleSpinBox::drop-down
            {
                subcontrol-origin: padding;
                subcontrol-position: top right;
                width: 1px;

                border-left-width: 0px;
                border-left-color: #232629;
                border-left-style: solid;
                border-top-right-radius: 1px;
                border-bottom-right-radius: 1px;
            }



            QGroupBox {
                border:1px solid #76797C;
                border-radius: 2px;
                margin-top: 5px;
            }

            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top center;
                padding-left: 4px;
                padding-right: 4px;
                padding-top: 4px;
            }

            QAbstractScrollArea
            {
                border-radius: 2px;
                border: 1px solid #76797C;
                background-color: transparent;
            }

            QScrollBar:horizontal
            {
                height: 15px;
                margin: 3px 15px 3px 15px;
                border: 1px transparent #2A2929;
                border-radius: 4px;
                background-color: #2A2929;
            }

            QScrollBar::handle:horizontal
            {
                background-color: #605F5F;
                min-width: 5px;
                border-radius: 4px;
            }

            QScrollBar::add-line:horizontal
            {
                margin: 0px 3px 0px 3px;
                border-image: url(:/qss_icons/Dark_rc/right_arrow_disabled.png);
                width: 10px;
                height: 10px;
                subcontrol-position: right;
                subcontrol-origin: margin;
            }

            QScrollBar::sub-line:horizontal
            {
                margin: 0px 3px 0px 3px;
                border-image: url(:/qss_icons/Dark_rc/left_arrow_disabled.png);
                height: 10px;
                width: 10px;
                subcontrol-position: left;
                subcontrol-origin: margin;
            }

            QScrollBar::add-line:horizontal:hover,QScrollBar::add-line:horizontal:on
            {
                border-image: url(:/qss_icons/Dark_rc/right_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: right;
                subcontrol-origin: margin;
            }


            QScrollBar::sub-line:horizontal:hover, QScrollBar::sub-line:horizontal:on
            {
                border-image: url(:/qss_icons/Dark_rc/left_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: left;
                subcontrol-origin: margin;
            }

            QScrollBar::up-arrow:horizontal, QScrollBar::down-arrow:horizontal
            {
                background: none;
            }


            QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal
            {
                background: none;
            }

            QScrollBar:vertical
            {
                background-color: #2A2929;
                width: 15px;
                margin: 15px 3px 15px 3px;
                border: 1px transparent #2A2929;
                border-radius: 4px;
            }

            QScrollBar::handle:vertical
            {
                background-color: #605F5F;
                min-height: 5px;
                border-radius: 4px;
            }

            QScrollBar::sub-line:vertical
            {
                margin: 3px 0px 3px 0px;
                border-image: url(:/qss_icons/Dark_rc/up_arrow_disabled.png);
                height: 10px;
                width: 10px;
                subcontrol-position: top;
                subcontrol-origin: margin;
            }

            QScrollBar::add-line:vertical
            {
                margin: 3px 0px 3px 0px;
                border-image: url(:/qss_icons/Dark_rc/down_arrow_disabled.png);
                height: 10px;
                width: 10px;
                subcontrol-position: bottom;
                subcontrol-origin: margin;
            }

            QScrollBar::sub-line:vertical:hover,QScrollBar::sub-line:vertical:on
            {

                border-image: url(:/qss_icons/Dark_rc/up_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: top;
                subcontrol-origin: margin;
            }


            QScrollBar::add-line:vertical:hover, QScrollBar::add-line:vertical:on
            {
                border-image: url(:/qss_icons/Dark_rc/down_arrow.png);
                height: 10px;
                width: 10px;
                subcontrol-position: bottom;
                subcontrol-origin: margin;
            }

            QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical
            {
                background: none;
            }


            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical
            {
                background: none;
            }

            QTextEdit
            {
                background-color: #FDFEFE;
                color: #000000;
                border: 1px solid #76797C;
            }

            QPlainTextEdit
            {
                background-color: #232629;;
                color: #000000;
                border-radius: 2px;
                border: 1px solid #76797C;
            }

            QHeaderView::section
            {
                background-color: #76797C;
                color: #eff0f1;
                padding: 1px;
                border: 1px solid #76797C;
            }

            QSizeGrip {
                width: 12px;
                height: 12px;
            }


            QMainWindow::separator
            {
                background-color: #31363b;
                color: white;
                padding-left: 4px;
                spacing: 2px;
                border: 1px dashed #76797C;
            }

            QMainWindow::separator:hover
            {

                background-color: #787876;
                color: white;
                padding-left: 4px;
                border: 1px solid #76797C;
                spacing: 2px;
            }


            QMenu::separator
            {
                height: 1px;
                background-color: #76797C;
                color: white;
                padding-left: 4px;
                margin-left: 10px;
                margin-right: 5px;
            }


            QFrame
            {
                border-radius: 2px;
                border: 1px solid #76797C;
            }

            QFrame[frameShape="0"]
            {
                border-radius: 2px;
                border: 1px transparent #76797C;
            }

            QStackedWidget
            {
                border: 1px transparent black;
            }


            QPushButton
            {
                color: #00000;
                background-color:#ade3e7;
                border-width: 1px;
                border-color: #1e1e1e;
                border-style: solid;
                border-radius: 6;
                padding: 3px;
                font-size: 12px;
                padding-left: 5px;
                padding-right: 5px;
                min-width: 40px;

            }

            QPushButton:disabled
            {
                background-color:#03ecff;
                border-width: 1px;
                border-color: #454545;
                border-style: solid;
                padding-top: 5px;
                padding-bottom: 5px;
                padding-left: 10px;
                padding-right: 10px;
                border-radius: 2px;
                color: #454545;
            }
            QPushButton:pressed
            {
                background-color: #3daee9;
                padding-top: -15px;
                padding-bottom: -17px;
            }

            QComboBox
            {
               background-color: #FDFEFE;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 2px;
                min-width: 40px;
            }

            QPushButton:checked{
                background-color: #76797C;
                border-color: #6A6969;
            }

            QComboBox:hover,QDoubleSpinBox:Hover,QPushButton:hover,QAbstractSpinBox:hover,QLineEdit:hover,QTextEdit:hover,QPlainTextEdit:hover,QAbstractView:hover,QTreeView:hover
            {
                border: 1px solid #ff8c00;
                color: #000000;
            }

            QComboBox:on
            {
                padding-top: 1px;
                padding-left: 1px;
                selection-background-color: #FDFEFE;
            }

            QComboBox QAbstractItemView
            {
                background-color: #FDFEFE;
                border-radius: 2px;
                border: 1px solid #76797C;
                color:#000000;
                selection-background-color: #000000;
            }

            QComboBox::drop-down
            {
                subcontrol-origin: padding;
                subcontrol-position: top right;
                width: 15px;

                border-left-width: 0px;
                border-left-color: ff8c00;
                border-left-style: solid;
                border-top-right-radius: 1px;
                border-bottom-right-radius: 1px;
            }


            QLabel
            {
                border: 2px solid black;
            }

            QTabWidget{
                border: 0px transparent black;
            }

            QTabWidget::pane {
                border: 1px solid #76797C;
                padding: 5px;
                margin: 0px;
            }

            QTabBar
            {
                qproperty-drawBase: 0;
                left: 5px; /* move to the right by 5px */
                border-radius: 3px;
            }

            QTabBar:focus
            {
                border: 0px transparent black;
            }

            QTabBar::close-button  {
                image: url(:/qss_icons/Dark_rc/close.png);
                background: transparent;
            }

            QTabBar::close-button:hover
            {
                image: url(:/qss_icons/Dark_rc/close-hover.png);
                background: transparent;
            }

            QTabBar::close-button:pressed {
                image: url(:/qss_icons/Dark_rc/close-pressed.png);
                background: transparent;
            }

            /* TOP TABS */
            QTabBar::tab:top {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-bottom: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                min-width: 10px;
                border-top-left-radius: 2px;
                border-top-right-radius: 2px;
            }

            QTabBar::tab:top:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-bottom: 1px transparent black;
                border-top-left-radius: 2px;
                border-top-right-radius: 2px;    
            }

            QTabBar::tab:top:!selected:hover {
                background-color: #3daee9;
            }

            /* BOTTOM TABS */
            QTabBar::tab:bottom {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-top: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                border-bottom-left-radius: 2px;
                border-bottom-right-radius: 2px;
                min-width: 10px;
            }

            QTabBar::tab:bottom:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-top: 1px transparent black;
                border-bottom-left-radius: 2px;
                border-bottom-right-radius: 2px;
            }

            QTabBar::tab:bottom:!selected:hover {
                background-color: #3daee9;
            }

            /* LEFT TABS */
            QTabBar::tab:left {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-left: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                border-top-right-radius: 2px;
                border-bottom-right-radius: 2px;
                min-height: 50px;
            }

            QTabBar::tab:left:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-left: 1px transparent black;
                border-top-right-radius: 2px;
                border-bottom-right-radius: 2px;
            }

            QTabBar::tab:left:!selected:hover {
                background-color: #3daee9;
            }


            /* RIGHT TABS */
            QTabBar::tab:right {
                color: #eff0f1;
                border: 1px solid #76797C;
                border-right: 1px transparent black;
                background-color: #31363b;
                padding: 5px;
                border-top-left-radius: 2px;
                border-bottom-left-radius: 2px;
                min-height: 50px;
            }

            QTabBar::tab:right:!selected
            {
                color: #eff0f1;
                background-color: #54575B;
                border: 1px solid #76797C;
                border-right: 1px transparent black;
                border-top-left-radius: 2px;
                border-bottom-left-radius: 2px;
            }





            QSlider::groove:horizontal {
                border: 1px solid #565a5e;
                height: 4px;
                background: #565a5e;
                margin: 0px;
                border-radius: 2px;
            }

            QSlider::handle:horizontal {
                background: #232629;
                border: 1px solid #565a5e;
                width: 16px;
                height: 16px;
                margin: -8px 0;
                border-radius: 9px;
            }

            QSlider::groove:vertical {
                border: 1px solid #565a5e;
                width: 4px;
                background: #565a5e;
                margin: 0px;
                border-radius: 3px;
            }

            QSlider::handle:vertical {
                background: #232629;
                border: 1px solid #565a5e;
                width: 16px;
                height: 16px;
                margin: 0 -8px;
                border-radius: 9px;
            }

            QToolButton {
                background-color: transparent;
                border: 1px transparent #76797C;
                border-radius: 2px;
                margin: 3px;
                padding: 5px;
            }

            QToolButton[popupMode="1"] { /* only for MenuButtonPopup */
             padding-right: 20px; /* make way for the popup button */
             border: 1px #76797C;
             border-radius: 5px;
            }

            QToolButton[popupMode="2"] { /* only for InstantPopup */
             padding-right: 10px; /* make way for the popup button */
             border: 1px #76797C;
            }


            QToolButton:hover, QToolButton::menu-button:hover {
                background-color: transparent;
                border: 1px solid #3daee9;
                padding: 5px;
            }

            QToolButton:checked, QToolButton:pressed,
                    QToolButton::menu-button:pressed {
                background-color: #3daee9;
                border: 1px solid #3daee9;
                padding: 5px;
            }

            /* the subcontrol below is used only in the InstantPopup or DelayedPopup mode */
            QToolButton::menu-indicator {
                background-color:ff8c00;
                top: -7px; left: -2px; /* shift it a bit */
            }

            /* the subcontrols below are used only in the MenuButtonPopup mode */
            QToolButton::menu-button {
                border: 1px transparent #76797C;
                border-top-right-radius: 6px;
                border-bottom-right-radius: 6px;
                /* 16px width + 4px for border = 20px allocated above */
                width: 16px;
                outline: none;
            }

            QToolButton::menu-arrow {
               background-color:ff8c00;
            }

            QToolButton::menu-arrow:open {
                border: 1px solid #76797C;
            }

            QPushButton::menu-indicator  {
                subcontrol-origin: padding;
                subcontrol-position: bottom right;
                left: 8px;
            }

            QTableView
            {
                border: 1px solid #76797C;
                gridline-color: #31363b;
                background-color: #FDFEFE;
                color:#000000;
            }


            QTableView, QHeaderView
            {
                background-color: #FDFEFE;
                color:#000000;
                border-radius: 0px;
            }

            QTableView::item:pressed, QListView::item:pressed, QTreeView::item:pressed  {
                background: #FDFEFE;
                color: #000000;
            }

            QTableView::item:selected:active, QTreeView::item:selected:active, QListView::item:selected:active  {
                background: #3daee9;
                color: #000000;
            }


            QHeaderView
            {
                background-color: #FDFEFE;
                border: 1px transparent;
                border-radius: 0px;
                margin: 0px;
                padding: 0px;

            }

            QHeaderView::section  {
                background-color:#80f1f9;
                color: #000000;
                padding: 5px;
                border: 1px solid #76797C;
                border-radius: 0px;
                text-align: center;
            }

            QHeaderView::section::vertical::first, QHeaderView::section::vertical::only-one
            {
                border-top: 1px solid #76797C;
            }

            QHeaderView::section::vertical
            {
                border-top: transparent;
            }

            QHeaderView::section::horizontal::first, QHeaderView::section::horizontal::only-one
            {
                border-left: 1px solid #76797C;
            }

            QHeaderView::section::horizontal
            {
                border-left: transparent;
            }


            QHeaderView::section:checked
             {
                color: #000000;
                background-color: #3daee9;
             }

             /* style the sort indicator */
            QHeaderView::down-arrow {

            }

            QHeaderView::up-arrow {

            }


            QTableCornerButton::section {
                background-color: #31363b;
                border: 1px transparent #76797C;
                border-radius: 0px;
            }

            QToolBox  {
                padding: 5px;
                border: 1px transparent black;
            }

            QToolBox::tab {
                color: #eff0f1;
                background-color: #31363b;
                border: 1px solid #76797C;
                border-bottom: 1px transparent #31363b;
                border-top-left-radius: 5px;
                border-top-right-radius: 5px;
            }

            QToolBox::tab:selected { /* italicize selected tabs */
                font: italic;
                background-color: #31363b;
                border-color: #3daee9;
             }

            QStatusBar::item {
                border: 0px transparent dark;
             }


            QFrame[height="3"], QFrame[width="3"] {
                background-color: #76797C;
            }




            QDateEdit
            {
                background-color: #232629;;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 2px;
                padding: 1px;
                min-width: 75px;
            }

            QDateEdit:on
            {
                padding-top: 2px;
                padding-left: 2px;
                selection-background-color: #4a4a4a;
            }

            QDateEdit QAbstractItemView
            {
                background-color: #ff8c00;
                border-radius: 2px;
                border: 1px solid #3375A3;
                selection-background-color:ff8c00;
            }

            QDateEdit::drop-down
            {
                subcontrol-origin: padding;
                subcontrol-position: top right;
                width: 15px;
                border-left-width: 0px;
                border-left-color: darkgray;
                border-left-style: solid;
                border-top-right-radius: 3px;
                border-bottom-right-radius: 3px;
            }   
            QDateTimeEdit
            {
                background-color: #232629;;
                border-style: solid;
                border: 1px solid #76797C;
                border-radius: 2px;
                padding: 1px;
                min-width: 75px;

            }    
            """)

            self.addbtn = QtWidgets.QPushButton("Ajouter", MainWindow, clicked=lambda: self.add_datta_save())
            self.addbtn.setGeometry(QtCore.QRect(20, 275, 100, 40))

            self.modifierbtn = QtWidgets.QPushButton("Enregistrer", MainWindow, clicked=lambda: self.SITUATION_phyto())
            self.modifierbtn.setGeometry(QtCore.QRect(260, 275, 100, 40))
            ##################################################sortie###############
            self.deletebtn = QtWidgets.QPushButton("Suprime", MainWindow, clicked=lambda: self.delete_item())
            self.deletebtn.setGeometry(QtCore.QRect(140, 275, 100, 40))

            self.printbtn = QtWidgets.QPushButton("Imprimer", MainWindow, clicked=lambda: self.print_docx())
            self.printbtn.setGeometry(QtCore.QRect(380, 275, 100, 40))

            self.datafiltertxt = QtWidgets.QLabel("Nom et Prénom: ", MainWindow)
            self.datafiltertxt.setFrameShape(QtWidgets.QFrame.Shape.WinPanel.VLine)
            self.datafiltertxt.setGeometry(QtCore.QRect(777, 268, 565, 51))

            self.nomefiltrage = QtWidgets.QLineEdit(MainWindow)
            self.nomefiltrage.setGeometry(QtCore.QRect(882, 275, 160, 40))

            self.oledtxt = QtWidgets.QLabel("Fils de: ", MainWindow)
            self.oledtxt.setGeometry(QtCore.QRect(1057, 285, 100, 20))

            self.oled = QtWidgets.QLineEdit(MainWindow)
            self.oled.setGeometry(QtCore.QRect(1100, 275, 100, 40))

            self.btnfilter = QtWidgets.QPushButton("ok", MainWindow, clicked=lambda: self.impot_filter())
            self.btnfilter.setGeometry((QtCore.QRect(1217, 275, 40, 40)))

            self.btnfcncl = QtWidgets.QPushButton("exit", MainWindow, clicked=lambda: self.impot_all())
            self.btnfcncl.setGeometry((QtCore.QRect(1282, 275, 40, 40)))

            self.filtertxt = QtWidgets.QLabel("Filtrage des données:", MainWindow)
            self.filtertxt.setGeometry(QtCore.QRect(792, 254, 120, 20))

            self.cclstxt = QtWidgets.QLabel("<h1>CCLS RELIZANE SERVICE QUALITE<h1/>", MainWindow)
            self.cclstxt.setGeometry(QtCore.QRect(430, 0, 600, 70))
            font = QtGui.QFont()
            font.setPointSize(14)
            font.setBold(True)
            font.setWeight(75)
            self.cclstxt.setFont(font)
            self.cclstxt.setMouseTracking(False)
            self.cclstxt.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
            self.cclstxt.setAutoFillBackground(False)
            self.cclstxt.setFrameShape(QtWidgets.QFrame.Shape.WinPanel)
            self.cclstxt.setLineWidth(0)
            self.cclstxt.setMidLineWidth(0)
            self.cclstxt.setTextFormat(QtCore.Qt.TextFormat.AutoText)
            self.cclstxt.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
            self.entrielabel = QtWidgets.QLabel("<h2>REGISTRE DE REFUS<h2/>", MainWindow)
            self.entrielabel.setGeometry(370, 75, 680, 30)
            self.entrielabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
            self.entrielabel.setFont(font)

            font = QtGui.QFont()
            font.setPointSize(14)
            font.setBold(True)
            font.setUnderline(True)
            font.setWeight(75)

            #############################################
            self.txtlieu = QtWidgets.QLabel("Point de collecte :", MainWindow)
            self.txtlieu.setGeometry(QtCore.QRect(20, 90, 110, 16))
            ####################################################
            self.lieu = QtWidgets.QComboBox(MainWindow)
            self.lieu.addItem('')
            self.lieu.addItem("DOCK CENTRAL")
            self.lieu.addItem("MAGASIN MESRA")
            self.lieu.addItem("MAGASIN KEF LAZREG")
            self.lieu.addItem('N.S.MENDES')
            self.lieu.addItem('S.MENDES')
            self.lieu.setGeometry(QtCore.QRect(150, 77, 150, 40))

            self.txtdate = QtWidgets.QLabel("DATE :", MainWindow)
            self.txtdate.setGeometry(QtCore.QRect(20, 40, 110, 16))
            ####################################################
            self.dateedite = QtWidgets.QLineEdit(MainWindow)
            self.dateedite.setInputMask("99/99/9999")
            self.dateedite.setGeometry(QtCore.QRect(150, 22, 150, 40))

            ########################################################
            self.nometprénomtxt = QtWidgets.QLabel("NOM ET PRENOM", MainWindow)
            self.nometprénomtxt.setGeometry(QtCore.QRect(20, 140, 100, 20))

            self.nomeetprénom = QtWidgets.QLineEdit(MainWindow)
            self.nomeetprénom.setGeometry(QtCore.QRect(150, 130, 150, 40))

            self.fissedetxt = QtWidgets.QLabel("Père : ", MainWindow)
            self.fissedetxt.setGeometry(QtCore.QRect(330, 140, 100, 20))

            self.fissede = QtWidgets.QLineEdit(MainWindow)
            self.fissede.setGeometry(QtCore.QRect(390, 130, 150, 40))
            #####################################################################################
            self.matriculetxt = QtWidgets.QLabel("MATRICULE", MainWindow)
            self.matriculetxt.setGeometry(QtCore.QRect(570, 130, 150, 40))
            ###################################################################
            self.matricule = QtWidgets.QLineEdit(MainWindow)
            self.matricule.setInputMask("99999-999-99")
            self.matricule.setGeometry(QtCore.QRect(660, 130, 150, 40))

            ###############################################################################
            self.produittxt = QtWidgets.QLabel("PRODUIT", MainWindow)
            self.produittxt.setGeometry(QtCore.QRect(840, 130, 120, 40))

            self.produit = QtWidgets.QComboBox(MainWindow)
            self.produit.addItem(' ')
            self.produit.addItem('Blé dur')
            self.produit.addItem('Blé tendre')
            self.produit.addItem('Orge')
            self.produit.addItem('Avoine')
            self.produit.addItem('Tritical')
            self.produit.setGeometry(QtCore.QRect(920, 130, 150, 40))
            ############################################################################
            self.causerefustxt = QtWidgets.QLabel("CAUSE DE REFUS", MainWindow)
            self.causerefustxt.setGeometry(QtCore.QRect(1100, 140, 100, 16))

            self.causerefus = QtWidgets.QTextEdit(MainWindow)
            self.causerefus.setGeometry(QtCore.QRect(1220, 130, 120, 40))

            ###########################################################################

            ########################################################################
            ####################################################################
            self.totalfont = QtGui.QFont()
            self.totalfont.setPointSize(10)
            self.totalfont.setBold(True)
            self.totalfont.bold()
            self.textEdit = QtWidgets.QTableWidget(MainWindow)
            self.textEdit.setRowCount(0)
            self.textEdit.setColumnCount(8)
            self.textEdit.setColumnWidth(0, 5)
            self.textEdit.setColumnWidth(1, 178)
            self.textEdit.setColumnWidth(2, 178)
            self.textEdit.setColumnWidth(3, 178)
            self.textEdit.setColumnWidth(4, 178)
            self.textEdit.setColumnWidth(5, 178)
            self.textEdit.setColumnWidth(6, 178)
            self.textEdit.setColumnWidth(7, 187)
            # Set the height of the row
            header_labels = ["ID", "Point de collecte", "Date", "Nom et Prénom", "fils_de", "Matricule", "Produit",
                             "Cause de refus"]
            self.textEdit.setHorizontalHeaderLabels(header_labels)
            font = self.textEdit.horizontalHeader().font()
            font.setBold(True)
            font.setPointSize(12)
            self.textEdit.horizontalHeader().setFont(font)
            self.textEdit.setGeometry(QtCore.QRect(20, 320, 1323, 340))
            # self.textEdit.setStyleSheet("background-color:rgb(255, 255, 255)")
            self.textEdit.setObjectName("textEdit")
            # self.textEdit.setStyleSheet(" background-color: #232629")
            self.textEdit.setFont(self.totalfont)

            self.b = QTimer()
            self.b.timeout.connect(self.impot_all)
            self.b.setInterval(7000)
            self.b.start()

        ####################################################################################################################################
        def SITUATION_phyto(self):
            dialog = QMessageBox()
            dialog.setStyleSheet("""
                QWidget {
                    color: #eff0f1;
                    background-color: #31363b;
                    border-width: 1px;
                    border-color: #1e1e1e;
                    border-style: solid;
                    border-radius: 6;
                    padding: 3px;
                    font-size: 18px;
                    padding-left: 5px;
                    padding-right: 5px;
                }
                QWidget:item:hover {
                    background-color: #3daee9;
                    color: #eff0f1;
                }
                QWidget:item:selected {
                    background-color: #3daee9;
                }
                QWidget:disabled {
                    color: #454545;
                    background-color: #31363b;
                }
                QPushButton {
                    color: #b1b1b1;
                    background-color: linear-gradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646);
                    border-width: 1px;
                    border-color: #1e1e1e;
                    border-style: solid;
                    border-radius: 6;
                    padding: 3px;
                    font-size: 12px;
                    padding-left: 5px;
                    padding-right: 5px;
                    min-width: 40px;
                }
                QPushButton:disabled {
                    background-color: #31363b;
                    border-width: 1px;
                    border-color: #454545;
                    border-style: solid;
                    padding-top: 5px;
                    padding-bottom: 5px;
                    padding-left: 10px;
                    padding-right: 10px;
                    border-radius: 2px;
                    color: #454545;
                }
                QPushButton:pressed {
                    background-color: #3daee9;
                    padding-top: -15px;
                    padding-bottom: -17px;
                }
                QPushButton:hover {
                    border: 1px solid #ff8c00;
                    color: #eff0f1;
                }
                QLabel {
                    font-size: 18px;
                    border: 0px solid orange;
                }
            """)
            dialog.setWindowTitle("Select a Date")
            dialog.setText("Sélectionnez la date et produit souhaitée\n")
            self.date_edit = QtWidgets.QDateEdit()
            self.date = QtWidgets.QLineEdit(dialog)
            self.date.setInputMask("99-99-9999")
            self.date.resize(180, 30)
            self.date.move(40, 82)
            self.produitphytofiltre = QtWidgets.QComboBox(dialog)
            self.produitphytofiltre.setGeometry(40, 42, 180, 30)
            self.produitphytofiltre.addItem(" ")
            self.produitphytofiltre.addItem("Blé dur")
            self.produitphytofiltre.addItem("Blé tendre")
            self.produitphytofiltre.addItem("Orge")
            self.produitphytofiltre.addItem("Avoine")
            self.produitphytofiltre.addItem("Tritical")
            # self.date_edit.setDate(QDate.currentDate())
            ok_button = QtWidgets.QPushButton("OK", dialog)
            cancel_button = QtWidgets.QPushButton("Cancel", dialog)
            dialog.addButton(ok_button, QMessageBox.ButtonRole.ActionRole)
            dialog.addButton(cancel_button, QMessageBox.ButtonRole.ActionRole)
            dialog.exec()
            try:
                if dialog.clickedButton() == ok_button:
                    if self.produitphytofiltre.currentText() not in ['Blé dur', 'Blé tendre', 'Orge', 'Avoine',
                                                                     'Tritical'] and self.date.text() == '':
                        selected_date1 = self.date_edit.date().toString("yyyy")
                        selected_date = self.date.text()
                        conn = sqlite3.connect('datta_refus.db')
                        cursor = conn.cursor()
                        cursor.execute(
                            "SELECT point_de_collecte,date,nom_et_prénom,fils_de,matricule,produit,cause_de_refus FROM refutable")
                        rows = cursor.fetchall()
                        ########################################################################
                        # Create a new document and add a table
                        self.doc = docx.Document()
                        section = self.doc.sections[0]
                        section.page_width = docx.shared.Cm(29.7)
                        section.page_height = docx.shared.Cm(21.0)
                        section.top_margin = docx.shared.Cm(1.5)
                        section.bottom_margin = docx.shared.Cm(1.5)
                        heading1 = self.doc.add_heading('\t\tLES CAS DE REFUS DES PRODUIT DE LA COMPANGNE ', level=1)
                        heading1.style.font.name = 'Times New Roman'
                        heading1.style.font.size = Pt(22)
                        heading1.style.font.bold = True
                        heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                        # add second heading
                        paragraph = self.doc.add_paragraph()
                        paragraph.style.font.name = 'Times New Roman'
                        paragraph.style.font.size = Pt(14)
                        left_run = paragraph.add_run('CCLS RELIZANE\t\t\t\t\t\t\t\t\t\t\t\t\t')
                        left_run.bold = True
                        right_run = paragraph.add_run('Année:' + selected_date1)
                        right_run.bold = True

                        table = self.doc.add_table(rows=1, cols=7)
                        table.style = "Table Grid"  # set the table style
                        hdr_cells = table.rows[0].cells
                        hdr_cells[0].text = 'Point de collecte'
                        hdr_cells[1].text = 'Date'
                        hdr_cells[2].text = 'Nom et Prénom'
                        hdr_cells[3].text = 'fils_de'
                        hdr_cells[4].text = 'Matricule'
                        hdr_cells[5].text = 'Produit'
                        hdr_cells[6].text = 'Cause de refus'
                        # Set the width of the header cells
                        hdr_cells[0].width = Inches(2)  # set the width of the first column to 1.5 inches
                        hdr_cells[1].width = Inches(1)
                        hdr_cells[2].width = Inches(2)
                        hdr_cells[3].width = Inches(1)
                        hdr_cells[4].width = Inches(1)
                        hdr_cells[5].width = Inches(1)
                        hdr_cells[6].width = Inches(1.5)
                        # set hight of the column
                        hdr_cells[0].height = Inches(1)  # set the width of the first column to 1.5 inches
                        hdr_cells[1].height = Inches(1)
                        hdr_cells[2].height = Inches(1)
                        hdr_cells[3].height = Inches(1)
                        hdr_cells[4].height = Inches(1)
                        hdr_cells[5].height = Inches(1)
                        hdr_cells[6].height = Inches(1)

                        for cell in table.rows[0].cells:
                            cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                            cell.paragraphs[0].runs[0].font.size = Pt(12)
                            cell.paragraphs[0].runs[0].font.bold = True
                        # Add the data to the table
                        table_rows = len(rows)
                        table_cols = len(rows[0])
                        for row in range(table_rows):
                            table.add_row()
                            for col in range(table_cols):
                                cell = table.cell(row + 1, col)
                                cell.text = str(rows[row][col])
                                # Set font properties
                                cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                                cell.paragraphs[0].runs[0].font.size = Pt(12)
                                cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                        for row in table.rows:
                            row.height = Inches(0.5)
                        # Save and open the document for printing
                        temp_file = "les cas de refus" + selected_date1 + ".docx"
                        path, _ = QFileDialog.getSaveFileName(None, "Enregistrer la fiche", "",
                                                              "Fichiers DOCX (*.docx)")
                        if path:
                            self.doc.save(path)
                try:
                    if dialog.clickedButton() == ok_button:
                        selected_date = self.date.text()
                        if self.produitphytofiltre.currentText() not in ['Blé dur', 'Blé tendre', 'Orge', 'Avoine',
                                                                         'Tritical'] and self.date.text() == selected_date:
                            # selected_date = self.date_edit.date().toString("dd-MM-yyyy")
                            # locale.setlocale(locale.LC_ALL, 'fr_FR.utf8')
                            # QtCore.QLocale.setDefault(QtCore.QLocale(QtCore.QLocale.Language.French))
                            # selected_date1 = self.date_edit.date().toPyDate()
                            # mois = selected_date1.strftime("%B").lower()
                            print(selected_date)
                            # print(mois)
                            conn = sqlite3.connect('datta_refus.db')
                            cursor = conn.cursor()
                            cursor.execute(
                                "SELECT point_de_collecte,date,nom_et_prénom,fils_de,matricule,produit,cause_de_refus FROM refutable WHERE date = ?",
                                (selected_date,))
                            rows = cursor.fetchall()
                            ########################################################################
                            print("Number of rows fetched:", len(rows))
                            print("Fetched rows:", rows)

                            # Create a new document and add a table
                            self.doc = docx.Document()
                            section = self.doc.sections[0]
                            section.orientation = WD_ORIENTATION.LANDSCAPE
                            section.page_width = docx.shared.Cm(29.7)
                            section.page_height = docx.shared.Cm(21.0)
                            section.top_margin = docx.shared.Cm(1.5)
                            section.bottom_margin = docx.shared.Cm(1.5)
                            heading1 = self.doc.add_heading('\t\tLES CAS DE REFUS DES PRODUIT DE LA COMPANGNE', level=1)
                            heading1.style.font.name = 'Times New Roman'
                            heading1.style.font.size = Pt(22)
                            heading1.style.font.bold = True
                            heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                            # add second heading
                            paragraph = self.doc.add_paragraph()
                            paragraph.style.font.name = 'Times New Roman'
                            paragraph.style.font.size = Pt(14)
                            left_run = paragraph.add_run('CCLS RELIZANE\t\t\t\t\t\t\t\t\t\t\t\t')
                            left_run.bold = True
                            right_run = paragraph.add_run('Mois de:' + selected_date)
                            right_run.bold = True
                            table = self.doc.add_table(rows=1, cols=7)
                            table.style = "Table Grid"  # set the table style
                            hdr_cells = table.rows[0].cells
                            hdr_cells[0].text = 'Point de collecte'
                            hdr_cells[1].text = 'Date'
                            hdr_cells[2].text = 'Nom et Prénom'
                            hdr_cells[3].text = 'fils_de '
                            hdr_cells[4].text = 'Matricule'
                            hdr_cells[5].text = 'Produit'
                            hdr_cells[6].text = 'Cause de refus'
                            # Set the width of the header cells
                            hdr_cells[0].width = Inches(2)  # set the width of the first column to 1.5 inches
                            hdr_cells[1].width = Inches(1)
                            hdr_cells[2].width = Inches(2)
                            hdr_cells[3].width = Inches(1)
                            hdr_cells[4].width = Inches(1)
                            hdr_cells[5].width = Inches(1)
                            hdr_cells[6].width = Inches(1.5)
                            # set hight of the column
                            hdr_cells[0].height = Inches(1)  # set the width of the first column to 1.5 inches
                            hdr_cells[1].height = Inches(1)
                            hdr_cells[2].height = Inches(1)
                            hdr_cells[3].height = Inches(1)
                            hdr_cells[4].height = Inches(1)
                            hdr_cells[5].height = Inches(1)
                            hdr_cells[6].height = Inches(1)

                            for cell in table.rows[0].cells:
                                cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                                cell.paragraphs[0].runs[0].font.size = Pt(12)
                                cell.paragraphs[0].runs[0].font.bold = True
                            # Add the data to the table
                            table_rows = len(rows)
                            table_cols = len(rows[0])
                            for row in range(table_rows):
                                table.add_row()
                                for col in range(table_cols):
                                    cell = table.cell(row + 1, col)
                                    cell.text = str(rows[row][col])
                                    # Set font properties
                                    cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                                    cell.paragraphs[0].runs[0].font.size = Pt(12)
                                    cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                            for row in table.rows:
                                row.height = Inches(0.5)
                            # Save and open the document for printing
                            path, _ = QFileDialog.getSaveFileName(None, "Enregistrer la fiche", "",
                                                                  "Fichiers DOCX (*.docx)")
                            if path:
                                self.doc.save(path)
                            conn.close()
                except Exception as e:
                    QMessageBox.critical(MainWindow, "erreur", "erreur: Il n'y a pas des données à cette date")

                try:
                    if dialog.clickedButton() == ok_button:
                        if self.produitphytofiltre.currentText() in ['Blé dur', 'Blé tendre', 'Orge', 'Avoine',
                                                                     'Tritical'] and self.date.text() == "":
                            produitfiltre = self.produitphytofiltre.currentText()
                            print(produitfiltre)
                            conn = sqlite3.connect('datta_refus.db')
                            cursor = conn.cursor()
                            cursor.execute(
                                "SELECT point_de_collecte,date,nom_et_prénom,fils_de,matricule,produit,cause_de_refus FROM refutable WHERE produit= ? ",
                                (produitfiltre,))
                            rows = cursor.fetchall()
                            ########################################################################
                            print("Number of rows fetched:", len(rows))
                            print("Fetched rows:", rows)
                            # Create a new document and add a table
                            self.doc = docx.Document()
                            section = self.doc.sections[0]
                            section.orientation = WD_ORIENTATION.LANDSCAPE
                            section.page_width = docx.shared.Cm(29.7)
                            section.page_height = docx.shared.Cm(21.0)
                            section.top_margin = docx.shared.Cm(1.5)
                            section.bottom_margin = docx.shared.Cm(1.5)
                            heading1 = self.doc.add_heading('\t\tLES CAS DE REFUS DES PRODUIT DE LA COMPANGNE', level=1)
                            heading1.style.font.name = 'Times New Roman'
                            heading1.style.font.size = Pt(22)
                            heading1.style.font.bold = True
                            heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                            # add second heading
                            paragraph = self.doc.add_paragraph()
                            paragraph.style.font.name = 'Times New Roman'
                            paragraph.style.font.size = Pt(14)
                            left_run = paragraph.add_run('CCLS RELIZANE\t\t\t\t\t\t\t\t\t\t\t\t\t')
                            left_run.bold = True
                            right_run = paragraph.add_run('Espece:' + produitfiltre)
                            right_run.bold = True
                            table = self.doc.add_table(rows=1, cols=7)
                            table.style = "Table Grid"  # set the table style
                            hdr_cells = table.rows[0].cells
                            hdr_cells[0].text = 'Point de collecte'
                            hdr_cells[1].text = 'Date'
                            hdr_cells[2].text = 'Nom et Prénom'
                            hdr_cells[3].text = 'fils_de'
                            hdr_cells[4].text = 'Matricule'
                            hdr_cells[5].text = 'Produit'
                            hdr_cells[6].text = 'Cause de refus'
                            # Set the width of the header cells
                            hdr_cells[0].width = Inches(2)  # set the width of the first column to 1.5 inches
                            hdr_cells[1].width = Inches(1)
                            hdr_cells[2].width = Inches(2)
                            hdr_cells[3].width = Inches(1)
                            hdr_cells[4].width = Inches(1)
                            hdr_cells[5].width = Inches(1)
                            hdr_cells[6].width = Inches(1.5)
                            # set hight of the column
                            hdr_cells[0].height = Inches(1)  # set the width of the first column to 1.5 inches
                            hdr_cells[1].height = Inches(1)
                            hdr_cells[2].height = Inches(1)
                            hdr_cells[3].height = Inches(1)
                            hdr_cells[4].height = Inches(1)
                            hdr_cells[5].height = Inches(1)
                            hdr_cells[6].height = Inches(1)

                            for cell in table.rows[0].cells:
                                cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                                cell.paragraphs[0].runs[0].font.size = Pt(12)
                                cell.paragraphs[0].runs[0].font.bold = True
                            # Add the data to the table
                            table_rows = len(rows)
                            table_cols = len(rows[0])
                            for row in range(table_rows):
                                table.add_row()
                                for col in range(table_cols):
                                    cell = table.cell(row + 1, col)
                                    cell.text = str(rows[row][col])
                                    # Set font properties
                                    cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                                    cell.paragraphs[0].runs[0].font.size = Pt(12)
                                    cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                            for row in table.rows:
                                row.height = Inches(0.5)
                            # Save and open the document for printing
                            path, _ = QFileDialog.getSaveFileName(None, "Enregistrer la fiche", "",
                                                                  "Fichiers DOCX (*.docx)")
                            if path:
                                self.doc.save(path)
                            conn.close()
                except Exception as e:
                    msg = QMessageBox.critical(MainWindow, "Erreur", "Erreur")
            except Exception as e:
                print(e)

        def print_docx(self):
            dialog = QMessageBox()
            dialog.setStyleSheet("""
                       QWidget {
                           color: #eff0f1;
                           background-color: #31363b;
                           border-width: 1px;
                           border-color: #1e1e1e;
                           border-style: solid;
                           border-radius: 6;
                           padding: 3px;
                           font-size: 18px;
                           padding-left: 5px;
                           padding-right: 5px;
                       }
                       QWidget:item:hover {
                           background-color: #3daee9;
                           color: #eff0f1;
                       }
                       QWidget:item:selected {
                           background-color: #3daee9;
                       }
                       QWidget:disabled {
                           color: #454545;
                           background-color: #31363b;
                       }
                       QPushButton {
                           color: #b1b1b1;
                           background-color: linear-gradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646);
                           border-width: 1px;
                           border-color: #1e1e1e;
                           border-style: solid;
                           border-radius: 6;
                           padding: 3px;
                           font-size: 12px;
                           padding-left: 5px;
                           padding-right: 5px;
                           min-width: 40px;
                       }
                       QPushButton:disabled {
                           background-color: #31363b;
                           border-width: 1px;
                           border-color: #454545;
                           border-style: solid;
                           padding-top: 5px;
                           padding-bottom: 5px;
                           padding-left: 10px;
                           padding-right: 10px;
                           border-radius: 2px;
                           color: #454545;
                       }
                       QPushButton:pressed {
                           background-color: #3daee9;
                           padding-top: -15px;
                           padding-bottom: -17px;
                       }
                       QPushButton:hover {
                           border: 1px solid #ff8c00;
                           color: #eff0f1;
                       }
                       QLabel {
                           font-size: 18px;
                           border: 0px solid orange;
                       }
                   """)
            dialog.setWindowTitle("Select a Date")
            dialog.setText("Sélectionnez la date et produit souhaitée\n")
            self.date_edit = QtWidgets.QDateEdit()
            self.date = QtWidgets.QLineEdit(dialog)
            self.date.setInputMask('99-99-9999')
            self.date.resize(180, 30)
            self.date.move(40, 82)
            self.produitphytofiltre = QtWidgets.QComboBox(dialog)
            self.produitphytofiltre.setGeometry(40, 42, 180, 30)
            self.produitphytofiltre.addItem(" ")
            self.produitphytofiltre.addItem("Blé dur")
            self.produitphytofiltre.addItem("Blé tendre")
            self.produitphytofiltre.addItem("Orge")
            self.produitphytofiltre.addItem("Avoine")
            self.produitphytofiltre.addItem("Tritical")
            # self.date_edit.setDate(QDate.currentDate())
            ok_button = QtWidgets.QPushButton("OK", dialog)
            cancel_button = QtWidgets.QPushButton("Cancel", dialog)
            dialog.addButton(ok_button, QMessageBox.ButtonRole.ActionRole)
            dialog.addButton(cancel_button, QMessageBox.ButtonRole.ActionRole)
            dialog.exec()
            try:
                if dialog.clickedButton() == ok_button:
                    if self.produitphytofiltre.currentText() not in ['Blé dur', 'Blé tendre', 'Orge', 'Avoine',
                                                                     'Tritical'] and self.date.text() == "--":
                        selected_date1 = self.date_edit.date().toString("yyyy")
                        selected_date = self.date.text()
                        conn = sqlite3.connect('datta_refus.db')
                        cursor = conn.cursor()
                        cursor.execute(
                            "SELECT point_de_collecte,date,nom_et_prénom,fils_de,matricule,produit,cause_de_refus FROM refutable")
                        rows = cursor.fetchall()
                        ########################################################################
                        # Create a new document and add a table
                        self.doc = docx.Document()
                        section = self.doc.sections[0]
                        section.page_width = docx.shared.Cm(29.7)
                        section.page_height = docx.shared.Cm(21.0)
                        section.top_margin = docx.shared.Cm(1.5)
                        section.bottom_margin = docx.shared.Cm(1.5)
                        heading1 = self.doc.add_heading('\t\tLES CAS DE REFUS DES PRODUIT DE LA COMPANGNE ', level=1)
                        heading1.style.font.name = 'Times New Roman'
                        heading1.style.font.size = Pt(22)
                        heading1.style.font.bold = True
                        heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                        # add second heading
                        paragraph = self.doc.add_paragraph()
                        paragraph.style.font.name = 'Times New Roman'
                        paragraph.style.font.size = Pt(14)
                        left_run = paragraph.add_run('CCLS RELIZANE\t\t\t\t\t\t\t\t\t\t\t\t\t')
                        left_run.bold = True
                        right_run = paragraph.add_run('Année:' + selected_date1)
                        right_run.bold = True

                        table = self.doc.add_table(rows=1, cols=7)
                        table.style = "Table Grid"  # set the table style
                        hdr_cells = table.rows[0].cells
                        hdr_cells[0].text = 'Point de collecte'
                        hdr_cells[1].text = 'Date'
                        hdr_cells[2].text = 'Nom et Prénom'
                        hdr_cells[3].text = 'fils_de'
                        hdr_cells[4].text = 'Matricule'
                        hdr_cells[5].text = 'Produit'
                        hdr_cells[6].text = 'Cause de refus'
                        # Set the width of the header cells
                        hdr_cells[0].width = Inches(2)  # set the width of the first column to 1.5 inches
                        hdr_cells[1].width = Inches(1)
                        hdr_cells[2].width = Inches(2)
                        hdr_cells[3].width = Inches(1)
                        hdr_cells[4].width = Inches(1)
                        hdr_cells[5].width = Inches(1)
                        hdr_cells[6].width = Inches(1.5)
                        # set hight of the column
                        hdr_cells[0].height = Inches(1)  # set the width of the first column to 1.5 inches
                        hdr_cells[1].height = Inches(1)
                        hdr_cells[2].height = Inches(1)
                        hdr_cells[3].height = Inches(1)
                        hdr_cells[4].height = Inches(1)
                        hdr_cells[5].height = Inches(1)
                        hdr_cells[6].height = Inches(1)

                        for cell in table.rows[0].cells:
                            cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                            cell.paragraphs[0].runs[0].font.size = Pt(12)
                            cell.paragraphs[0].runs[0].font.bold = True
                        # Add the data to the table
                        table_rows = len(rows)
                        table_cols = len(rows[0])
                        for row in range(table_rows):
                            table.add_row()
                            for col in range(table_cols):
                                cell = table.cell(row + 1, col)
                                cell.text = str(rows[row][col])
                                # Set font properties
                                cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                                cell.paragraphs[0].runs[0].font.size = Pt(12)
                                cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                        for row in table.rows:
                            row.height = Inches(0.5)
                        # Save and open the document for printing
                        temp_file = "les cas de refus" + selected_date + ".docx"
                        self.doc.save(temp_file)
                        os.startfile(temp_file, "print")
                try:
                    if dialog.clickedButton() == ok_button:
                        selected_date = self.date.text()
                        if self.produitphytofiltre.currentText() not in ['Blé dur', 'Blé tendre', 'Orge', 'Avoine',
                                                                         'Tritical'] and self.date.text() == selected_date:
                            # selected_date = self.date_edit.date().toString("dd-MM-yyyy")
                            # locale.setlocale(locale.LC_ALL, 'fr_FR.utf8')
                            # QtCore.QLocale.setDefault(QtCore.QLocale(QtCore.QLocale.Language.French))
                            # selected_date1 = self.date_edit.date().toPyDate()
                            # mois = selected_date1.strftime("%B").lower()

                            # print(mois)
                            conn = sqlite3.connect('datta_refus.db')
                            cursor = conn.cursor()
                            cursor.execute(
                                "SELECT point_de_collecte,date,nom_et_prénom,fils_de,matricule,produit,cause_de_refus FROM refutable WHERE date = ?",
                                (selected_date,))
                            rows = cursor.fetchall()
                            ########################################################################
                            print("Number of rows fetched:", len(rows))
                            # Create a new document and add a table
                            self.doc = docx.Document()
                            section = self.doc.sections[0]
                            section.orientation = WD_ORIENTATION.LANDSCAPE
                            section.page_width = docx.shared.Cm(29.7)
                            section.page_height = docx.shared.Cm(21.0)
                            section.top_margin = docx.shared.Cm(1.5)
                            section.bottom_margin = docx.shared.Cm(1.5)
                            heading1 = self.doc.add_heading('\t\tLES CAS DE REFUS DES PRODUIT DE LA COMPANGNE', level=1)
                            heading1.style.font.name = 'Times New Roman'
                            heading1.style.font.size = Pt(22)
                            heading1.style.font.bold = True
                            heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                            # add second heading
                            paragraph = self.doc.add_paragraph()
                            paragraph.style.font.name = 'Times New Roman'
                            paragraph.style.font.size = Pt(14)
                            left_run = paragraph.add_run('CCLS RELIZANE\t\t\t\t\t\t\t\t\t\t\t\t')
                            left_run.bold = True
                            right_run = paragraph.add_run('Le:' + selected_date)
                            right_run.bold = True
                            table = self.doc.add_table(rows=1, cols=7)
                            table.style = "Table Grid"  # set the table style
                            hdr_cells = table.rows[0].cells
                            hdr_cells[0].text = 'Point de collecte'
                            hdr_cells[1].text = 'Date'
                            hdr_cells[2].text = 'Nom et Prénom'
                            hdr_cells[3].text = 'fils_de'
                            hdr_cells[4].text = 'Matricule'
                            hdr_cells[5].text = 'Produit'
                            hdr_cells[6].text = 'Cause de refus'
                            # Set the width of the header cells
                            hdr_cells[0].width = Inches(2)  # set the width of the first column to 1.5 inches
                            hdr_cells[1].width = Inches(1)
                            hdr_cells[2].width = Inches(2)
                            hdr_cells[3].width = Inches(1)
                            hdr_cells[4].width = Inches(1)
                            hdr_cells[5].width = Inches(1)
                            hdr_cells[6].width = Inches(1.5)
                            # set hight of the column
                            hdr_cells[0].height = Inches(1)  # set the width of the first column to 1.5 inches
                            hdr_cells[1].height = Inches(1)
                            hdr_cells[2].height = Inches(1)
                            hdr_cells[3].height = Inches(1)
                            hdr_cells[4].height = Inches(1)
                            hdr_cells[5].height = Inches(1)
                            hdr_cells[6].height = Inches(1)
                            for cell in table.rows[0].cells:
                                cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                                cell.paragraphs[0].runs[0].font.size = Pt(12)
                                cell.paragraphs[0].runs[0].font.bold = True
                            # Add the data to the table
                            table_rows = len(rows)
                            table_cols = len(rows[0])
                            for row in range(table_rows):
                                table.add_row()
                                for col in range(table_cols):
                                    cell = table.cell(row + 1, col)
                                    cell.text = str(rows[row][col])
                                    # Set font properties
                                    cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                                    cell.paragraphs[0].runs[0].font.size = Pt(12)
                                    cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                            for row in table.rows:
                                row.height = Inches(0.5)
                            # Save and open the document for printing
                            # temp_file = "les cas de refus" + selected_date + ".docx"
                            temp_file = "les cas de refus" + selected_date + ".docx"
                            self.doc.save(temp_file)
                            os.startfile(temp_file, "print")
                            conn.close()
                except:
                    msg = QMessageBox.critical(MainWindow, 'Erreur', "Erreur: Il n'y a pas des données à cette date")
                try:
                    if dialog.clickedButton() == ok_button:
                        if self.produitphytofiltre.currentText() in ['Blé dur', 'Blé tendre', 'Orge', 'Avoine',
                                                                     'Tritical'] and self.date.text() == "":
                            produitfiltre = self.produitphytofiltre.currentText()
                            conn = sqlite3.connect('datta_refus.db')
                            cursor = conn.cursor()
                            cursor.execute(
                                "SELECT point_de_collecte,date,nom_et_prénom,fils_de,matricule,produit,cause_de_refus FROM refutable WHERE produit= ? ",
                                (produitfiltre,))
                            rows = cursor.fetchall()
                            ########################################################################
                            print("Number of rows fetched:", len(rows))
                            print("Fetched rows:", rows)
                            # Create a new document and add a table
                            self.doc = docx.Document()
                            section = self.doc.sections[0]
                            section.orientation = WD_ORIENTATION.LANDSCAPE
                            section.page_width = docx.shared.Cm(29.7)
                            section.page_height = docx.shared.Cm(21.0)
                            section.top_margin = docx.shared.Cm(1.5)
                            section.bottom_margin = docx.shared.Cm(1.5)
                            heading1 = self.doc.add_heading('\t\tLES CAS DE REFUS DES PRODUIT DE LA COMPANGNE', level=1)
                            heading1.style.font.name = 'Times New Roman'
                            heading1.style.font.size = Pt(22)
                            heading1.style.font.bold = True
                            heading1.style.font.color.rgb = RGBColor(0, 0, 0)
                            # add second heading
                            paragraph = self.doc.add_paragraph()
                            paragraph.style.font.name = 'Times New Roman'
                            paragraph.style.font.size = Pt(14)
                            left_run = paragraph.add_run('CCLS RELIZANE\t\t\t\t\t\t\t\t\t\t\t\t\t')
                            left_run.bold = True
                            right_run = paragraph.add_run('Espece:' + produitfiltre)
                            right_run.bold = True
                            table = self.doc.add_table(rows=1, cols=7)
                            table.style = "Table Grid"  # set the table style
                            hdr_cells = table.rows[0].cells
                            hdr_cells[0].text = 'Point de collecte'
                            hdr_cells[1].text = 'Date'
                            hdr_cells[2].text = 'Nom et Prénom'
                            hdr_cells[3].text = 'fils_de'
                            hdr_cells[4].text = 'Matricule'
                            hdr_cells[5].text = 'Produit'
                            hdr_cells[6].text = 'Cause de refus'
                            # Set the width of the header cells
                            hdr_cells[0].width = Inches(2)  # set the width of the first column to 1.5 inches
                            hdr_cells[1].width = Inches(1)
                            hdr_cells[2].width = Inches(2)
                            hdr_cells[3].width = Inches(1)
                            hdr_cells[4].width = Inches(1)
                            hdr_cells[5].width = Inches(1)
                            hdr_cells[6].width = Inches(1.5)
                            # set hight of the column
                            hdr_cells[0].height = Inches(1)  # set the width of the first column to 1.5 inches
                            hdr_cells[1].height = Inches(1)
                            hdr_cells[2].height = Inches(1)
                            hdr_cells[3].height = Inches(1)
                            hdr_cells[4].height = Inches(1)
                            hdr_cells[5].height = Inches(1)
                            hdr_cells[6].height = Inches(1)

                            for cell in table.rows[0].cells:
                                cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                                cell.paragraphs[0].runs[0].font.size = Pt(12)
                                cell.paragraphs[0].runs[0].font.bold = True
                            # Add the data to the table
                            table_rows = len(rows)
                            table_cols = len(rows[0])
                            for row in range(table_rows):
                                table.add_row()
                                for col in range(table_cols):
                                    cell = table.cell(row + 1, col)
                                    cell.text = str(rows[row][col])
                                    # Set font properties
                                    cell.paragraphs[0].runs[0].font.name = 'Times New Roman'
                                    cell.paragraphs[0].runs[0].font.size = Pt(12)
                                    cell.paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
                            for row in table.rows:
                                row.height = Inches(0.5)
                            # Save and open the document for printing
                            path, _ = QFileDialog.getSaveFileName(None, "Enregistrer la fiche", "",
                                                                  "Fichiers DOCX (*.docx)")
                            if path:
                                self.doc.save(path)
                            conn.close()
                except Exception as e:
                    msg = QMessageBox.critical(MainWindow, "Erreur", "Erreur")


            except Exception as e:
                print(e)

        def impot_filter(self):
            nomefiltrage = self.nomefiltrage.text()
            oled = self.oled.text()
            print(nomefiltrage, oled)
            try:
                conn = sqlite3.connect('datta_refus.db')
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT id,point_de_collecte,date,nom_et_prénom,fils_de, matricule, produit,cause_de_refus FROM refutable WHERE nom_et_prénom =? OR fils_de=?",
                    (nomefiltrage, oled,))
                result = cursor.fetchall()
                self.textEdit.setRowCount(0)
                for row, row_datta in enumerate(result):
                    self.textEdit.insertRow(row)
                    for colum, datta in enumerate(row_datta):
                        self.textEdit.setItem(row, colum, QTableWidgetItem(str(datta)))
                conn.commit()
                conn.close()
            except sqlite3.Error as error:
                print(error)

        def add_datta_save(self):
            datte = self.dateedite.text()
            point_de_collecte = self.lieu.currentText()
            nome_et_prénom = self.nomeetprénom.text()
            matricule = self.matricule.text()
            produit = self.produit.currentText()
            causederefus = self.causerefus.toPlainText()
            fils_de = self.fissede.text()
            try:
                if nome_et_prénom:
                    dattabase = sqlite3.connect("datta_refus.db")
                    cursor = dattabase.cursor()
                    cursor.execute(
                        "INSERT INTO refutable (point_de_collecte,date,nom_et_prénom,fils_de,matricule,produit,cause_de_refus) VALUES (?,?,?,?,?,?,?)",
                        (point_de_collecte, datte, nome_et_prénom, fils_de, matricule, produit, causederefus))
                    print("Record added successfully")

                    dattabase.commit()
                    dattabase.close()
                    msgbox = QtWidgets.QMessageBox()
                    msgbox.setWindowTitle('confirmation')
                    msgbox.setText('Lopération a été ajoutée avec succès')
                    msgbox.exec()
                else:
                    msgbox = QtWidgets.QMessageBox()
                    msgbox.setWindowTitle('Erreur')
                    msgbox.setText("Erreur: entrer le nom et prénom")
                    msgbox.exec()

            except sqlite3.Error as error:
                print("Failed to insert data into sqlite table", error)

        def impot_all(self):
            self.oled.clear()
            self.nomefiltrage.clear()
            try:
                dattabase = sqlite3.connect('datta_refus.db')
                cur = dattabase.cursor()
                cur.execute("SELECT * FROM refutable ")
                result = cur.fetchall()
                self.textEdit.setRowCount(0)
                for row, row_datta in enumerate(result):
                    print(row)
                    self.textEdit.insertRow(row)
                    for colum, datta in enumerate(row_datta):
                        self.textEdit.setItem(row, colum, QTableWidgetItem(str(datta)))
                dattabase.commit()
                dattabase.close()
            except:
                print(' ')

        def delete_item(self):
            try:
                msgbox = QMessageBox()
                msgbox.setStyleSheet(""" QWidget
                    {
                        color: #eff0f1;
                        background-color: #31363b;
                        border-width: 1px;
                        border-color: #1e1e1e;
                        border-style: solid;
                        border-radius: 6;
                        padding: 3px;
                        font-size: 12px;
                        padding-left: 5px;
                        padding-right: 5px
                    }
                    QWidget:item:hover
                    {
                        background-color: #3daee9;
                        color: #eff0f1;
                    }
                    QWidget:item:selected
                    {
                        background-color: #3daee9;
                    }
                    QWidget:disabled
                    {
                        color: #454545;
                        background-color: #31363b;
                    }
                    QPushButton
                    {
                        color: #b1b1b1;
                        background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646);
                        border-width: 1px;
                        border-color: #1e1e1e;
                        border-style: solid;
                        border-radius: 6;
                        padding: 3px;
                        font-size: 12px;
                        padding-left: 5px;
                        padding-right: 5px;
                        min-width: 40px;
                    }
                    QPushButton:disabled
                    {
                        background-color: #31363b;
                        border-width: 1px;
                        border-color: #454545;
                        border-style: solid;
                        padding-top: 5px;
                        padding-bottom: 5px;
                        padding-left: 10px;
                        padding-right: 10px;
                        border-radius: 2px;
                        color: #454545;
                    }

                    QPushButton:pressed
                    {
                        background-color: #3daee9;
                        padding-top: -15px;
                        padding-bottom: -17px;
                    }
                    QPushButton:hover
                    {
                        border: 1px solid #ff8c00;
                        color: #eff0f1;
                    }
                     QLabel
                    {
                        font-size: 18px;
                        border: 1px solid orange;
                    }

                """)
                msgbox.setWindowTitle("Alerte")
                msgbox.setText("Voulez-vous supprimer !")
                yesbutton = QtWidgets.QPushButton("OUI")
                nobuttons = QtWidgets.QPushButton("NON")
                # msgbox.setStandardButtons(QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
                msgbox.addButton(yesbutton, QMessageBox.ButtonRole.ActionRole)
                msgbox.addButton(nobuttons, QMessageBox.ButtonRole.ActionRole)
                push = msgbox.exec()
                if msgbox.clickedButton() == nobuttons:
                    print("NO")
                elif msgbox.clickedButton() == yesbutton:
                    itemsel = self.textEdit.selectedItems()
                    if len(itemsel) == 0:
                        row = itemsel[0].row()
                        self.textEdit.removeRow(row)
                        curentrow = self.textEdit.currentRow()
                        id_ = self.textEdit.item(curentrow, 0).text()
                        print(id_)
                        database = sqlite3.connect("datta_refus.db")
                        curs = database.cursor()
                        curs.execute("DELETE FROM refutable WHERE id=?", (id_,))
                        database.commit()
                        database.close()
                        return
                    elif len(itemsel) > 0:
                        row = itemsel[0].row()
                        self.textEdit.removeRow(row)
                        curentrow = self.textEdit.currentRow()
                        id_ = self.textEdit.item(curentrow, 0).text()
                        print(id_)
                        database = sqlite3.connect("datta_refus.db")
                        curs = database.cursor()
                        curs.execute("DELETE FROM refutable WHERE id=?", (id_,))
                        database.commit()
                        database.close()
            except:
                print(' ')

except Exception as e:
    print(e)

#################################GSQRClass
###############################################################################
##############################################################################
###########################################################################
######################################################################
###############################################################
try:
    class Window_Ac(QObject):
        loaded = QtCore.pyqtSignal()
        try:
            def conformite_window(self):
                self.windowc = QtWidgets.QMainWindow()
                self.windowconformite = Conformité_Window()
                self.windowconformite.confi_window(self.windowc)
                self.windowcs.append(self.windowc)
                self.windowc.show()



        except Exception as e:
            print(e)
        def stock_legumesec (self):
            self.windowstocklegum=Stock_Legumesec()
            self.windowstocklegum.stock_legumesec(MainWindow)
        def agréageWindow(self):
            self.windowa = QtWidgets.QMainWindow()
            self.windowagr = Agréage_Window()
            self.windowagr.agréage(self.windowa)
            self.windowa.show()



        def moulinWindow(self):
            self.windowb = QtWidgets.QMainWindow()
            self.windowm = Moulin_Window()
            self.windowm.mouli_window(self.windowb)
            self.windowbs.append(self.windowb)
            self.windowb.show()

        def phyto(self):
            self.windowph = QtWidgets.QMainWindow()
            self.windowphs.append(self.windowph)
            self.windowphy = Phyto_Window()
            self.windowphy.phyoto_produit(self.windowph)
            self.windowph.show()

        def refus(self):
            self.windowrf=QtWidgets.QMainWindow()
            self.windowrefus=Refus_Window()
            self.windowrefus.refus_produit(self.windowrf)
            self.windowrf.show()
        def Gsqr(self,MainWindow):
            self.windowbs = []
            self.windowcs = []
            self.windowphs = []
            MainWindow.setObjectName("MainWindow")
            MainWindow.resize(1340, 800)
            MainWindow.setWindowTitle("CCLS RELIZANE SERVICE QUALITE")
            MainWindow.setWindowIcon(QIcon("images/Picsart_23-03-13_18-53-05-983.ico"))
            MainWindow.setStyleSheet("""
                QWidget 
                {      background: qlineargradient(x1: 1 y1:1, x2: 2, y2: 1,stop: 0 #ff8c00,stop: 1 #ffffff);
                     font-family: "Roboto 16", sans-serif,bold;
                }       

                QPushButton
                {
                    color:#ff8c00 ;
                    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646);
                    border-width: 1.3px;
                    border-color: #000000;
                    border-style: solid;
                    border-radius: 10px;
                    padding: 3px;
                    font-size: 11pt;
                    font-weight: bold;
                    padding-left: 5px;
                    padding-right: 5px;
                    min-width: 40px;

                }

                QPushButton:disabled
                {
                    background-color:#ff8c00;
                    border-width: 1px;
                    border-color: #454545;
                    border-style: solid;
                    padding-top: 5px;
                    padding-bottom: 5px;
                    padding-left: 10px;
                    padding-right: 10px;
                    border-radius: 8 px;
                    color: #454545;
                }

                QPushButton:focus {
                    background-color:QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646);
                    color:#ff8c00;
                }

                QPushButton:pressed
                {
                    background-color: qlineargradient(x1: 3, y1:0, x2: 1, y2: 0,stop: 0 #F0F8FF,stop: 1 #31363b);
                     color: #ff8cff;
                    padding-top: -15px;
                    padding-bottom: -17px;



                }
                QPushButton:hover
                {
                    border: 1px solid #ff8cff;
                    color: white;
                }
                """)

            self.centralwidget = QtWidgets.QWidget(MainWindow)
            self.centralwidget.setObjectName("centralwidget")
            self.CCCLSTXT = QtWidgets.QLabel(self.centralwidget)
            self.CCCLSTXT.setGeometry(QtCore.QRect(0, 0, 1400, 100))
            self.CCCLSTXT.setStyleSheet(
                "background-color:QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646) ; color: #ff8c00 ;border: 0px solid #ff8c00 ;border-radius: 0px;padding: 2px")
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            font.setItalic(False)
            font.setWeight(75)
            self.CCCLSTXT.setFont(font)
            self.CCCLSTXT.setFrameShape(QtWidgets.QFrame.Shape.Box)
            self.CCCLSTXT.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
            self.CCCLSTXT.setLineWidth(2)
            self.CCCLSTXT.setMidLineWidth(0)
            self.CCCLSTXT.setTextFormat(QtCore.Qt.TextFormat.AutoText)
            self.CCCLSTXT.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
            self.CCCLSTXT.setObjectName("CCCLSTXT")
            fontbtn = QtGui.QFont()
            fontbtn.setBold(True)
            fontbtn.setPointSize(14)

            font2 = QtGui.QFont()
            font2.setPointSize(26)
            font2.setBold(True)
            font2.setItalic(False)
            font2.setWeight(75)
            self.gsqr = QtWidgets.QLabel("<h1>G S Q R<h1/>", self.centralwidget)
            self.gsqr.setGeometry(QtCore.QRect(0, 618, 1400, 100))
            self.gsqr.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
            self.gsqr.setStyleSheet(
                "background-color:QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646) ; color: #ff8c00 ;border: 0px solid #ff8c00 ;border-radius: 0px;padding: 0px")
            self.gsqr.setFont(font2)

            self.widget = QtWidgets.QWidget(self.centralwidget)
            self.widget.setGeometry(QtCore.QRect(430, 125, 550, 100))
            self.widget.setObjectName("widget")

            self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
            self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetMinAndMaxSize)
            self.verticalLayout.setContentsMargins(0, 0, 0, 2)
            self.verticalLayout.setSpacing(10)
            self.verticalLayout.setObjectName("verticalLayout")

            self.conformitButton = QtWidgets.QPushButton(self.widget, clicked=lambda: Conformité_Window.confi_window())
            self.conformitButton.setMinimumSize(QtCore.QSize(0, 60))
            self.conformitButton.setObjectName("conformitButton")
            self.conformitButton.setIcon(QIcon("images/confir.png"))
            self.conformitButton.setIconSize(QSize(53, 90))
            self.verticalLayout.addWidget(self.conformitButton)
            self.conformitButton.setFont(fontbtn)

            self.moulinButton = QtWidgets.QPushButton(self.widget, clicked=lambda: self.moulinWindow())
            self.moulinButton.setMinimumSize(QtCore.QSize(0, 60))
            self.verticalLayout.addWidget(self.moulinButton)
            self.moulinButton.setFont(fontbtn)
            self.moulinButton.setIcon(QIcon("images/mouln.png"))
            self.moulinButton.setIconSize(QSize(53, 90))

            self.agrageButton = QtWidgets.QPushButton(self.widget, clicked=lambda: self.agréageWindow())
            self.agrageButton.setMinimumSize(QtCore.QSize(0, 60))
            self.agrageButton.setObjectName("agrageButton")
            self.agrageButton.setIcon(QIcon("images/agreage.png"))
            self.agrageButton.setIconSize(QSize(53, 90))
            self.verticalLayout.addWidget(self.agrageButton)

            self.pushButton = QtWidgets.QPushButton(self.widget)
            self.pushButton.setMinimumSize(QtCore.QSize(0, 60))
            self.pushButton.setObjectName("pushButton")
            self.pushButton.setIcon(QIcon('images/preces.png'))
            self.pushButton.setIconSize(QSize(53, 90))
            self.verticalLayout.addWidget(self.pushButton)

            self.refusButton = QtWidgets.QPushButton(self.widget, clicked=lambda: self.refus())
            self.refusButton.setEnabled(True)
            self.refusButton.setMinimumSize(QtCore.QSize(0, 60))
            self.refusButton.setMaximumSize(QtCore.QSize(16777215, 16777215))
            self.refusButton.setBaseSize(QtCore.QSize(17, 0))
            self.refusButton.setIcon(QIcon("images/refus.png"))
            self.refusButton.setIconSize(QSize(53, 90))
            font = QtGui.QFont()
            font.setBold(True)
            font.setWeight(75)
            self.refusButton.setFont(font)
            self.refusButton.setObjectName("refusButton")
            self.verticalLayout.addWidget(self.refusButton)

            self.phytoButton = QtWidgets.QPushButton(self.widget, clicked=lambda: self.phyto())
            self.phytoButton.setMinimumSize(QtCore.QSize(0, 60))
            self.phytoButton.setObjectName("phytoButton")
            self.phytoButton.setIcon(QIcon("images/phyto (2).png"))
            self.phytoButton.setIconSize(QSize(53, 90))
            self.verticalLayout.addWidget(self.phytoButton)

            self.legumesecbutton = QtWidgets.QPushButton("GESTION STOCk LEGUMES SECS", self.widget,clicked=lambda: self.stock_legumesec())
            self.legumesecbutton.setMinimumSize(QtCore.QSize(0, 60))
            self.legumesecbutton.setIcon(QIcon("images/lgmsc.png"))
            self.legumesecbutton.setIconSize(QSize(53, 90))
            self.verticalLayout.addWidget(self.legumesecbutton)
            self.legumesecbutton.setFont(fontbtn)

            MainWindow.setCentralWidget(self.centralwidget)
            self.menubar = QtWidgets.QMenuBar(MainWindow)
            self.menubar.setGeometry(QtCore.QRect(0, 0, 1187, 10))
            self.menubar.setObjectName("menubar")
            MainWindow.setMenuBar(self.menubar)
            self.statusbar = QtWidgets.QStatusBar(MainWindow)
            self.statusbar.setObjectName("statusbar")
            MainWindow.setStatusBar(self.statusbar)

            self.retranslateUi(MainWindow)
            QtCore.QMetaObject.connectSlotsByName(MainWindow)

        def retranslateUi(self, MainWindow):
            _translate = QtCore.QCoreApplication.translate
            self.CCCLSTXT.setText(_translate("MainWindow",
                                             "<h1>COOPERATIVE DES CEREALES ET LEGUMES SECSDE RELIZANE<h1/>\n<h1>SERVICE QUALITE<h1/>"))
            # self.SERVICETXT.setText(_translate("MainWindow", "<h1>SERVICE QUALITE<h1/>"))
            self.conformitButton.setText(_translate("MainWindow", "      BULLETIN DE CONFORMITE  "))
            self.moulinButton.setText(_translate("MainWindow", "      BULLETIN  MOULIN                  "))
            self.agrageButton.setText(_translate("MainWindow", "      BULLETIN D'AGREAGE            "))
            self.pushButton.setText(_translate("MainWindow", "      PROCES VERBAL                       "))
            self.refusButton.setText(_translate("MainWindow", "      LES REFUS                                   "))
            self.phytoButton.setText(_translate("MainWindow", "      PRODUITS PHYTOSANITAIRES"))

            # Emit the loaded signal after the ui is loaded
            self.loaded.emit()

except Exception as e:
    print(e)

##############################loginClass
###############################################################################
##############################################################################
###########################################################################
######################################################################
###############################################################
try:
    class LoginUI(object):
        def __init__(self, MainWindow):
            super().__init__()

            MainWindow.setWindowTitle("Se connecter à GSQR")
            MainWindow.setGeometry(500, 100, 700, 400)
            MainWindow.setFixedSize(800, 500)
            MainWindow.setStyleSheet("""QMainWindow {
    background-color:#ffffff;
}

QLineEdit, QTextEdit, QPlainTextEdit, QSpinBox, QDoubleSpinBox, QTimeEdit, QDateEdit, QDateTimeEdit {
    border-width: 2px;
    border-radius: 4px;
    border-style: solid;
    border-top-color: qlineargradient(spread:pad, x1:0.5, y1:1, x2:0.5, y2:0, stop:0 #c1c9cf, stop:1 #d2d8dd);
    border-right-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 #c1c9cf, stop:1 #d2d8dd);
    border-bottom-color: qlineargradient(spread:pad, x1:0.5, y1:0, x2:0.5, y2:1, stop:0 #c1c9cf, stop:1 #d2d8dd);
    border-left-color: qlineargradient(spread:pad, x1:1, y1:0, x2:0, y2:0, stop:0 #c1c9cf, stop:1 #d2d8dd);
    background-color: #f4f4f4;
    color: #3d3d3d;
}
QLineEdit:focus, QTextEdit:focus, QPlainTextEdit:focus, QSpinBox:focus, QDoubleSpinBox:focus, QTimeEdit:focus, QDateEdit:focus, QDateTimeEdit:focus {
    border-width: 2px;
    border-radius: 4px;
    border-style: solid;
    border-top-color: qlineargradient(spread:pad, x1:0.5, y1:1, x2:0.5, y2:0, stop:0 #85b7e3, stop:1 #9ec1db);
    border-right-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 #85b7e3, stop:1 #9ec1db);
    border-bottom-color: qlineargradient(spread:pad, x1:0.5, y1:0, x2:0.5, y2:1, stop:0 #85b7e3, stop:1 #9ec1db);
    border-left-color: qlineargradient(spread:pad, x1:1, y1:0, x2:0, y2:0, stop:0 #85b7e3, stop:1 #9ec1db);
    background-color: #f4f4f4;
    color: #3d3d3d;
}
QLineEdit:disabled, QTextEdit:disabled, QPlainTextEdit:disabled, QSpinBox:disabled, QDoubleSpinBox:disabled, QTimeEdit:disabled, QDateEdit:disabled, QDateTimeEdit:disabled {
    color: #b9b9b9;
}

QLabel, QCheckBox, QRadioButton {
    color: #272727;
}

QTabWidget {
    color:rgb(0,0,0);
    background-color:#000000;
}
QTabWidget::pane {
    border-color: #050a0e;
    background-color: #e0e0e0;
    border-width: 1px;
    border-radius: 4px;
    position: absolute;
    top: -0.5em;
    padding-top: 0.5em;
}

QTabWidget::tab-bar {
    alignment: center;
}
QPushButton
        {
            color: #ffffff;
            background-color:#00ADFC;
            border-width: 1px;
            border-color: #ffffff;
            border-style: solid;
            border-radius: 6;
            padding: 3px;
            font-size: 12px;
            padding-left: 5px;
            padding-right: 5px;
            min-width: 40px;

        }

        QPushButton:disabled
        {
            background-color:#03ecff;
            border-width: 1px;
            border-color: #454545;
            border-style: solid;
            padding-top: 5px;
            padding-bottom: 5px;
            padding-left: 10px;
            padding-right: 10px;
            border-radius: 2px;
            color: #454545;
        }
        QPushButton:pressed
        {
            background-color: #3daee9;
            padding-top: -15px;
            padding-bottom: -17px;
            color:#ffffff;
            border-color: #454545;
        }

""")
            MainWindow.setWindowIcon(QIcon("images/Picsart_23-03-13_18-53-05-983.ico"))
            image_label1 = QLabel(MainWindow)
            image_label1.setGeometry(0, 320, 700, 180)
            #Load the image
            image_path1 =" "
            image1 = QPixmap(image_path1)
            image_label1.setPixmap(image1)
            image_label1.setScaledContents(True)
            image_label = QLabel(MainWindow)
            image_label.setGeometry(340, 0, 470, 500)
            #Load the image
            image_path = "images/_ab3.png"
            image = QPixmap(image_path)
            image_label.setPixmap(image)
            image_label.setScaledContents(True)
            title_label = QLabel("GSQR", MainWindow)
            title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            title_label.setStyleSheet("font-size: 40px; font-weight: bold; color: #ff8c00;")
            title_label.setGeometry(140, 20, 200, 50)

            username_label = QLabel("Nom d'utilisateur:", MainWindow)
            username_label.setStyleSheet("font-size: 14px; color: #555;")
            username_label.setGeometry(60, 90, 150, 30)

            self.username_input = QLineEdit(MainWindow)
            self.username_input.setStyleSheet(
                "font-size: 16px; padding: 8px; border: 1px solid #ddd; border-radius: 5px;")
            self.username_input.setGeometry(60, 120, 360, 40)
            self.username_input.setClearButtonEnabled(True)  # Enable clear button

            # Add icon to the left of the QLineEdit
            icon_user = QPixmap("path_to_username_icon.png")  # Replace with the path to your username icon
            self.username_input.setStyleSheet(
                f"background-image: url({icon_user}); background-position: left center; background-repeat: no-repeat; padding-left: 40px;")

            password_label = QLabel("Mot de passe:", MainWindow)
            password_label.setStyleSheet("font-size: 14px; color: #555;")
            password_label.setGeometry(60, 170, 150, 30)
            self.failed = QtWidgets.QLabel(MainWindow)
            self.failed.setGeometry(100, 330, 370, 35)
            self.failedconection = QtWidgets.QLabel(MainWindow)
            self.failedconection.setGeometry(140, 350, 370, 35)
            self.password_input = QLineEdit(MainWindow)
            self.password_input.setEchoMode(QLineEdit.EchoMode.Password)
            self.password_input.setStyleSheet("font-size: 16px; padding: 8px; border: 1px solid #ddd; border-radius: 5px;")
            self.password_input.setGeometry(60, 200, 360, 40)
            self.password_input.setClearButtonEnabled(True)  # Enable clear button

            # Add icon to the left of the QLineEdit
            icon_password = QPixmap("path_to_password_icon.png")  # Replace with the path to your password icon
            self.password_input.setStyleSheet(
                f"background-image: url({icon_password}); background-position: left center; background-repeat: no-repeat; padding-left: 40px;")

            login_button = QPushButton("Login",MainWindow)
            login_button.clicked.connect(self.on_login_clicked)
            login_button.setGeometry(130, 280, 230, 45)


            self.check_connection()
            self.is_connected()

        def on_login_clicked(self):
            try:
                self.username = self.username_input.text()
                self.password = self.password_input.text()
                userslist=["nadir","qualite"]
                passworlist=["Nadir206@","qualite48"]
                # Add your login logic here (validate username and password)
                if self.username in userslist and self.password in passworlist:
                    # Connecting to MySQL database

                    databaseuser = mysql.connector.connect(user=self.username, host='localhost', password=self.password)
                    database = mysql.connector.connect(
                        host="localhost",
                        user=self.username,
                        password=self.password
                    )

                    curs = database.cursor()

                    # Create the database if it doesn't exist
                    curs.execute("CREATE DATABASE IF NOT EXISTS datta_legumesec_entry")
                    curs.execute("USE datta_legumesec_entry")
                    # Connection for outtable
                    database1 = mysql.connector.connect(
                        host='localhost',
                        user=self.username,
                        password=self.password
                    )
                    curs1 = database1.cursor()
                    # Create the database if it doesn't exist
                    curs1.execute("CREATE DATABASE IF NOT EXISTS datta_legumsec_out")
                    curs1.execute("USE datta_legumsec_out")
                    # Creating database if not exists

                    database.commit()
                    database.close()
                    self.RunWindow()

                elif self.username == "" and self.password == "":
                    self.username_input.setPlaceholderText("Entrez le nom d'utilisateur")
                    self.username_input.setStyleSheet("color:red;")
                    self.password_input.setPlaceholderText("Entrez le mot de passe")
                    self.password_input.setStyleSheet("color:red;")
                    self.timer = QTimer()
                    self.timer.timeout.connect(lambda:self.username_input.setStyleSheet("color:#000000;"))
                    self.timer.start(300)
                    self.timer.timeout.connect(lambda: self.password_input.setStyleSheet("color:#000000;"))
                    self.timer.start(300)
                else:
                    self.failed.setText("le nom d'utilisateur ou le mot de passe est incorrect !")

            except Exception as e:
                print(e)
        def check_connection(self):
            while not self.is_connected():
                self.failedconection.setText("Aucune connexion Internet disponible")
                print("Connection Check", "No internet connection available")
                if  self.is_connected():
                    self.failedconection.setText("")
                    print("Connection Check", "Internet connection is available.")
                break
        def is_connected(self):
            try:
                # Check if there's a valid internet connection by trying to resolve a well-known host (e.g., Google's DNS)
                socket.create_connection(("8.8.8.8", 53), timeout=3)
                return True
            except OSError:
                return False
        def RunWindow(self):
            app = QtWidgets.QApplication(sys.argv)
            pixmap = QPixmap("images/Red Black Bold Car Logo(3).png")
            splash = QSplashScreen(pixmap)
            splash.setEnabled(False)
            splash.show()
            MainWindows = QtWidgets.QMainWindow()
            windowspl = Window_Ac()
            windowspl.Gsqr(MainWindows)
            MainWindows.show()
            windowspl.loaded.connect(splash.close)
            MainWindows.hide()
            timer = QTimer()
            timer.setSingleShot(True)
            timer.timeout.connect(MainWindows.show)
            timer.timeout.connect(splash.hide)
            timer.start(2000)
            sys.exit(app.exec())

except Exception as e:
    print(e)

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    pixmap = QPixmap("images/Red Black Bold Car Logo(3).png")
    splash = QSplashScreen(pixmap)
    splash.setEnabled(False)
    splash.show()
    MainWindow = QtWidgets.QMainWindow()
    windowspl = Window_Ac()
    windowspl.Gsqr(MainWindow)
    MainWindow.show()
    windowspl.loaded.connect(splash.close)
    MainWindow.hide()
    timer = QTimer()
    timer.setSingleShot(True)
    timer.timeout.connect(MainWindow.show)
    timer.timeout.connect(splash.hide)
    timer.start(2000)
    sys.exit(app.exec())

    # LoginUI
    MainWindow = QtWidgets.QMainWindow()
    window = LoginUI(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())



    # Refus_Window
    MainWindow = QtWidgets.QMainWindow()
    ui = Refus_Window()
    ui.refus_produit(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
    # Phyto_Window
    MainWindow = QtWidgets.QMainWindow()
    ui = Phyto_Window()
    ui.phyoto_produit(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())

    # Moulin_Window
    MainWindow = QtWidgets.QMainWindow()
    ui = Moulin_Window()
    ui.mouli_window(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())

    # Conformité_Window
    MainWindow = QtWidgets.QMainWindow()
    ui = Conformité_Window()
    ui.confi_window(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())

    # Agréage_Window
    MainWindow = QtWidgets.QMainWindow()
    ui = Agréage_Window()
    ui.agréage(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())

    # Window_Ac with SplashScreen
    app = QtWidgets.QApplication(sys.argv)
    pixmap = QPixmap("images/Red Black Bold Car Logo(3).png")
    splash = QSplashScreen(pixmap)
    splash.setEnabled(False)
    splash.show()
    MainWindow = QtWidgets.QMainWindow()
    windowspl = Window_Ac()
    windowspl.__init__(MainWindow)
    MainWindow.show()
    windowspl.loaded.connect(splash.close)
    MainWindow.hide()
    timer = QTimer()
    timer.setSingleShot(True)
    timer.timeout.connect(MainWindow.show)
    timer.timeout.connect(splash.hide)
    timer.start(2000)
    sys.exit(app.exec())

    # Stock_Legumesec
    MainWindow = QtWidgets.QMainWindow()
    ui = Stock_Legumesec()
    ui.stock_legumesec(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())


